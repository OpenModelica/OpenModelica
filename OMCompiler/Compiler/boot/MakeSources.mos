if OpenModelica.Scripting.getEnvironmentVar("OPENMODELICA_BACKEND_STUBS") == "1" then
  // We need to load the stubs sources, but we need the full paths to remain for the rest of this script to work...
  OpenModelica.Scripting.setEnvironmentVar("OPENMODELICA_BACKEND_STUBS", "2");
end if;
runScript("LoadCompilerSources.mos");
mkdir("build");
workingDir := cd();
relDir := cd("..");
cd(workingDir);
writeFile("Makefile.sources.tmp", "ALL_OBJECTS="+sum(typeNameString(cl) + ".o " for cl in getClassNames())+ "\n" +
"ALL_SOURCES=" + sum(file + " " for file in files) + "\n" +
"ALL_INTERFACES=" + sum("$(GEN_DIR)" + typeNameString(cl) + ".stamp.mo " for cl in getClassNames()) + "\n" +
sum("\n$(GEN_DIR)" + typeNameString(cl) + ".stamp.mo: " + stringReplace(getSourceFile(cl),relDir,"..") for cl in getClassNames()) + "\n" +
sum("$(GEN_DIR)" + typeNameString(cl) + ".o: $(GEN_DIR)" + typeNameString(cl) + ".h $(GEN_DIR)" + typeNameString(cl) + "_includes.h\n" for cl in getClassNames()) + "\n" +
sum("RELPATH_" + typeNameString(cl) + "=" + stringReplace(getSourceFile(cl),relDir,"..") + "\n" for cl in getClassNames())
/* Add this if we need the additional dependencies on the included header files. If the interface changed we did already recompile this file, so... Probably not needed. Probably.
+ sum("\n" +
"ifeq ($(wildcard $(GEN_DIR)"+typeNameString(cl)+".deps),$(GEN_DIR)"+typeNameString(cl)+".deps)" + "\n" +
"include $(GEN_DIR)"+typeNameString(cl)+".deps" + "\n" +
"endif" for cl in getClassNames())
*/
);getErrorString();

writeFile("LoadCompilerInterface.mos.tmp","if true then /* Suppress output */
  setCommandLineOptions(\"-g=MetaModelica\");
  files:={"+stringDelimitList(list("\"build/" + typeNameString(cl) + ".interface.mo\"" for cl in getClassNames()), ",")+"};
  LoadCompilerSourcesRes:= OpenModelica.Scripting.loadFiles(files,numThreads=min(5,OpenModelica.Scripting.numProcessors()));
  if not LoadCompilerSourcesRes then
    print(\"Failed to load compiler sources:
\");
    print(getErrorString());
    exit(1);
  end if;
end if;
");
getErrorString();
