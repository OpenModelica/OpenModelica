/* Code generated by meta_modelica_gen_boxvar.py */

#if !(defined(OMC_MINIMAL_RUNTIME) || defined(OMC_FMI_RUNTIME))

#if !defined(OMC_GENERATE_RELOCATABLE_CODE)
#define OMC_SYM_BOXPTR(X) &boxptr_##X
#else
#define OMC_SYM_BOXPTR(X) &boxvar_fn_##X
static void* boxvar_fn_arrayAppend = (void*) boxptr_arrayAppend;
static void* boxvar_fn_arrayCopy = (void*) boxptr_arrayCopy;
static void* boxvar_fn_arrayGet = (void*) boxptr_arrayGet;
static void* boxvar_fn_arrayList = (void*) boxptr_arrayList;
static void* boxvar_fn_arrayNth = (void*) boxptr_arrayNth;
static void* boxvar_fn_arrayUpdate = (void*) boxptr_arrayUpdate;
static void* boxvar_fn_boolAnd = (void*) boxptr_boolAnd;
static void* boxvar_fn_boolEq = (void*) boxptr_boolEq;
static void* boxvar_fn_boolNot = (void*) boxptr_boolNot;
static void* boxvar_fn_boolOr = (void*) boxptr_boolOr;
static void* boxvar_fn_boolString = (void*) boxptr_boolString;
static void* boxvar_fn_cons = (void*) boxptr_cons;
static void* boxvar_fn_equality = (void*) boxptr_equality;
static void* boxvar_fn_getGlobalRoot = (void*) boxptr_getGlobalRoot;
static void* boxvar_fn_intAbs = (void*) boxptr_intAbs;
static void* boxvar_fn_intAdd = (void*) boxptr_intAdd;
static void* boxvar_fn_intDiv = (void*) boxptr_intDiv;
static void* boxvar_fn_intEq = (void*) boxptr_intEq;
static void* boxvar_fn_intGe = (void*) boxptr_intGe;
static void* boxvar_fn_intGt = (void*) boxptr_intGt;
static void* boxvar_fn_intLe = (void*) boxptr_intLe;
static void* boxvar_fn_intLt = (void*) boxptr_intLt;
static void* boxvar_fn_intMax = (void*) boxptr_intMax;
static void* boxvar_fn_intMin = (void*) boxptr_intMin;
static void* boxvar_fn_intMod = (void*) boxptr_intMod;
static void* boxvar_fn_intMul = (void*) boxptr_intMul;
static void* boxvar_fn_intNe = (void*) boxptr_intNe;
static void* boxvar_fn_intNeg = (void*) boxptr_intNeg;
static void* boxvar_fn_intReal = (void*) boxptr_intReal;
static void* boxvar_fn_intString = (void*) boxptr_intString;
static void* boxvar_fn_intStringChar = (void*) boxptr_intStringChar;
static void* boxvar_fn_intSub = (void*) boxptr_intSub;
static void* boxvar_fn_isNone = (void*) boxptr_isNone;
static void* boxvar_fn_isSome = (void*) boxptr_isSome;
static void* boxvar_fn_listAppend = (void*) boxptr_listAppend;
static void* boxvar_fn_listAppendDestroy = (void*) boxptr_listAppendDestroy;
static void* boxvar_fn_listArray = (void*) boxptr_listArray;
static void* boxvar_fn_listDelete = (void*) boxptr_listDelete;
static void* boxvar_fn_listEmpty = (void*) boxptr_listEmpty;
static void* boxvar_fn_listGet = (void*) boxptr_listGet;
static void* boxvar_fn_listHead = (void*) boxptr_listHead;
static void* boxvar_fn_listLength = (void*) boxptr_listLength;
static void* boxvar_fn_listMember = (void*) boxptr_listMember;
static void* boxvar_fn_listNth = (void*) boxptr_listNth;
static void* boxvar_fn_listRest = (void*) boxptr_listRest;
static void* boxvar_fn_listReverse = (void*) boxptr_listReverse;
static void* boxvar_fn_listReverseInPlace = (void*) boxptr_listReverseInPlace;
static void* boxvar_fn_print = (void*) boxptr_print;
static void* boxvar_fn_realAbs = (void*) boxptr_realAbs;
static void* boxvar_fn_realAdd = (void*) boxptr_realAdd;
static void* boxvar_fn_realDiv = (void*) boxptr_realDiv;
static void* boxvar_fn_realEq = (void*) boxptr_realEq;
static void* boxvar_fn_realGe = (void*) boxptr_realGe;
static void* boxvar_fn_realGt = (void*) boxptr_realGt;
static void* boxvar_fn_realInt = (void*) boxptr_realInt;
static void* boxvar_fn_realLe = (void*) boxptr_realLe;
static void* boxvar_fn_realLt = (void*) boxptr_realLt;
static void* boxvar_fn_realMax = (void*) boxptr_realMax;
static void* boxvar_fn_realMin = (void*) boxptr_realMin;
static void* boxvar_fn_realMod = (void*) boxptr_realMod;
static void* boxvar_fn_realMul = (void*) boxptr_realMul;
static void* boxvar_fn_realNe = (void*) boxptr_realNe;
static void* boxvar_fn_realNeg = (void*) boxptr_realNeg;
static void* boxvar_fn_realPow = (void*) boxptr_realPow;
static void* boxvar_fn_realString = (void*) boxptr_realString;
static void* boxvar_fn_realSub = (void*) boxptr_realSub;
static void* boxvar_fn_setGlobalRoot = (void*) boxptr_setGlobalRoot;
static void* boxvar_fn_stringAppend = (void*) boxptr_stringAppend;
static void* boxvar_fn_stringCharInt = (void*) boxptr_stringCharInt;
static void* boxvar_fn_stringCompare = (void*) boxptr_stringCompare;
static void* boxvar_fn_stringDelimitList = (void*) boxptr_stringDelimitList;
static void* boxvar_fn_stringEq = (void*) boxptr_stringEq;
static void* boxvar_fn_stringEqual = (void*) boxptr_stringEqual;
static void* boxvar_fn_stringGet = (void*) boxptr_stringGet;
static void* boxvar_fn_stringGetStringChar = (void*) boxptr_stringGetStringChar;
static void* boxvar_fn_stringHash = (void*) boxptr_stringHash;
static void* boxvar_fn_stringHashDjb2 = (void*) boxptr_stringHashDjb2;
static void* boxvar_fn_stringHashDjb2Mod = (void*) boxptr_stringHashDjb2Mod;
static void* boxvar_fn_stringHashSdbm = (void*) boxptr_stringHashSdbm;
static void* boxvar_fn_stringInt = (void*) boxptr_stringInt;
static void* boxvar_fn_stringLength = (void*) boxptr_stringLength;
static void* boxvar_fn_stringReal = (void*) boxptr_stringReal;
static void* boxvar_fn_stringUpdateStringChar = (void*) boxptr_stringUpdateStringChar;
static void* boxvar_fn_substring = (void*) boxptr_substring;
static void* boxvar_fn_valueConstructor = (void*) boxptr_valueConstructor;
static void* boxvar_fn_valueEq = (void*) boxptr_valueEq;
static void* boxvar_fn_valueHashMod = (void*) boxptr_valueHashMod;
#endif
static const MMC_DEFSTRUCTLIT(boxvar_lit_arrayAppend,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(arrayAppend),0}};
#define boxvar_arrayAppend MMC_REFSTRUCTLIT(boxvar_lit_arrayAppend)
static const MMC_DEFSTRUCTLIT(boxvar_lit_arrayCopy,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(arrayCopy),0}};
#define boxvar_arrayCopy MMC_REFSTRUCTLIT(boxvar_lit_arrayCopy)
static const MMC_DEFSTRUCTLIT(boxvar_lit_arrayGet,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(arrayGet),0}};
#define boxvar_arrayGet MMC_REFSTRUCTLIT(boxvar_lit_arrayGet)
static const MMC_DEFSTRUCTLIT(boxvar_lit_arrayList,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(arrayList),0}};
#define boxvar_arrayList MMC_REFSTRUCTLIT(boxvar_lit_arrayList)
static const MMC_DEFSTRUCTLIT(boxvar_lit_arrayNth,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(arrayNth),0}};
#define boxvar_arrayNth MMC_REFSTRUCTLIT(boxvar_lit_arrayNth)
static const MMC_DEFSTRUCTLIT(boxvar_lit_arrayUpdate,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(arrayUpdate),0}};
#define boxvar_arrayUpdate MMC_REFSTRUCTLIT(boxvar_lit_arrayUpdate)
static const MMC_DEFSTRUCTLIT(boxvar_lit_boolAnd,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(boolAnd),0}};
#define boxvar_boolAnd MMC_REFSTRUCTLIT(boxvar_lit_boolAnd)
static const MMC_DEFSTRUCTLIT(boxvar_lit_boolEq,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(boolEq),0}};
#define boxvar_boolEq MMC_REFSTRUCTLIT(boxvar_lit_boolEq)
static const MMC_DEFSTRUCTLIT(boxvar_lit_boolNot,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(boolNot),0}};
#define boxvar_boolNot MMC_REFSTRUCTLIT(boxvar_lit_boolNot)
static const MMC_DEFSTRUCTLIT(boxvar_lit_boolOr,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(boolOr),0}};
#define boxvar_boolOr MMC_REFSTRUCTLIT(boxvar_lit_boolOr)
static const MMC_DEFSTRUCTLIT(boxvar_lit_boolString,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(boolString),0}};
#define boxvar_boolString MMC_REFSTRUCTLIT(boxvar_lit_boolString)
static const MMC_DEFSTRUCTLIT(boxvar_lit_cons,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(cons),0}};
#define boxvar_cons MMC_REFSTRUCTLIT(boxvar_lit_cons)
static const MMC_DEFSTRUCTLIT(boxvar_lit_equality,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(equality),0}};
#define boxvar_equality MMC_REFSTRUCTLIT(boxvar_lit_equality)
static const MMC_DEFSTRUCTLIT(boxvar_lit_getGlobalRoot,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(getGlobalRoot),0}};
#define boxvar_getGlobalRoot MMC_REFSTRUCTLIT(boxvar_lit_getGlobalRoot)
static const MMC_DEFSTRUCTLIT(boxvar_lit_intAbs,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(intAbs),0}};
#define boxvar_intAbs MMC_REFSTRUCTLIT(boxvar_lit_intAbs)
static const MMC_DEFSTRUCTLIT(boxvar_lit_intAdd,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(intAdd),0}};
#define boxvar_intAdd MMC_REFSTRUCTLIT(boxvar_lit_intAdd)
static const MMC_DEFSTRUCTLIT(boxvar_lit_intDiv,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(intDiv),0}};
#define boxvar_intDiv MMC_REFSTRUCTLIT(boxvar_lit_intDiv)
static const MMC_DEFSTRUCTLIT(boxvar_lit_intEq,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(intEq),0}};
#define boxvar_intEq MMC_REFSTRUCTLIT(boxvar_lit_intEq)
static const MMC_DEFSTRUCTLIT(boxvar_lit_intGe,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(intGe),0}};
#define boxvar_intGe MMC_REFSTRUCTLIT(boxvar_lit_intGe)
static const MMC_DEFSTRUCTLIT(boxvar_lit_intGt,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(intGt),0}};
#define boxvar_intGt MMC_REFSTRUCTLIT(boxvar_lit_intGt)
static const MMC_DEFSTRUCTLIT(boxvar_lit_intLe,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(intLe),0}};
#define boxvar_intLe MMC_REFSTRUCTLIT(boxvar_lit_intLe)
static const MMC_DEFSTRUCTLIT(boxvar_lit_intLt,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(intLt),0}};
#define boxvar_intLt MMC_REFSTRUCTLIT(boxvar_lit_intLt)
static const MMC_DEFSTRUCTLIT(boxvar_lit_intMax,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(intMax),0}};
#define boxvar_intMax MMC_REFSTRUCTLIT(boxvar_lit_intMax)
static const MMC_DEFSTRUCTLIT(boxvar_lit_intMin,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(intMin),0}};
#define boxvar_intMin MMC_REFSTRUCTLIT(boxvar_lit_intMin)
static const MMC_DEFSTRUCTLIT(boxvar_lit_intMod,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(intMod),0}};
#define boxvar_intMod MMC_REFSTRUCTLIT(boxvar_lit_intMod)
static const MMC_DEFSTRUCTLIT(boxvar_lit_intMul,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(intMul),0}};
#define boxvar_intMul MMC_REFSTRUCTLIT(boxvar_lit_intMul)
static const MMC_DEFSTRUCTLIT(boxvar_lit_intNe,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(intNe),0}};
#define boxvar_intNe MMC_REFSTRUCTLIT(boxvar_lit_intNe)
static const MMC_DEFSTRUCTLIT(boxvar_lit_intNeg,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(intNeg),0}};
#define boxvar_intNeg MMC_REFSTRUCTLIT(boxvar_lit_intNeg)
static const MMC_DEFSTRUCTLIT(boxvar_lit_intReal,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(intReal),0}};
#define boxvar_intReal MMC_REFSTRUCTLIT(boxvar_lit_intReal)
static const MMC_DEFSTRUCTLIT(boxvar_lit_intString,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(intString),0}};
#define boxvar_intString MMC_REFSTRUCTLIT(boxvar_lit_intString)
static const MMC_DEFSTRUCTLIT(boxvar_lit_intStringChar,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(intStringChar),0}};
#define boxvar_intStringChar MMC_REFSTRUCTLIT(boxvar_lit_intStringChar)
static const MMC_DEFSTRUCTLIT(boxvar_lit_intSub,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(intSub),0}};
#define boxvar_intSub MMC_REFSTRUCTLIT(boxvar_lit_intSub)
static const MMC_DEFSTRUCTLIT(boxvar_lit_isNone,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(isNone),0}};
#define boxvar_isNone MMC_REFSTRUCTLIT(boxvar_lit_isNone)
static const MMC_DEFSTRUCTLIT(boxvar_lit_isSome,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(isSome),0}};
#define boxvar_isSome MMC_REFSTRUCTLIT(boxvar_lit_isSome)
static const MMC_DEFSTRUCTLIT(boxvar_lit_listAppend,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(listAppend),0}};
#define boxvar_listAppend MMC_REFSTRUCTLIT(boxvar_lit_listAppend)
static const MMC_DEFSTRUCTLIT(boxvar_lit_listAppendDestroy,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(listAppendDestroy),0}};
#define boxvar_listAppendDestroy MMC_REFSTRUCTLIT(boxvar_lit_listAppendDestroy)
static const MMC_DEFSTRUCTLIT(boxvar_lit_listArray,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(listArray),0}};
#define boxvar_listArray MMC_REFSTRUCTLIT(boxvar_lit_listArray)
static const MMC_DEFSTRUCTLIT(boxvar_lit_listDelete,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(listDelete),0}};
#define boxvar_listDelete MMC_REFSTRUCTLIT(boxvar_lit_listDelete)
static const MMC_DEFSTRUCTLIT(boxvar_lit_listEmpty,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(listEmpty),0}};
#define boxvar_listEmpty MMC_REFSTRUCTLIT(boxvar_lit_listEmpty)
static const MMC_DEFSTRUCTLIT(boxvar_lit_listGet,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(listGet),0}};
#define boxvar_listGet MMC_REFSTRUCTLIT(boxvar_lit_listGet)
static const MMC_DEFSTRUCTLIT(boxvar_lit_listHead,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(listHead),0}};
#define boxvar_listHead MMC_REFSTRUCTLIT(boxvar_lit_listHead)
static const MMC_DEFSTRUCTLIT(boxvar_lit_listLength,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(listLength),0}};
#define boxvar_listLength MMC_REFSTRUCTLIT(boxvar_lit_listLength)
static const MMC_DEFSTRUCTLIT(boxvar_lit_listMember,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(listMember),0}};
#define boxvar_listMember MMC_REFSTRUCTLIT(boxvar_lit_listMember)
static const MMC_DEFSTRUCTLIT(boxvar_lit_listNth,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(listNth),0}};
#define boxvar_listNth MMC_REFSTRUCTLIT(boxvar_lit_listNth)
static const MMC_DEFSTRUCTLIT(boxvar_lit_listRest,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(listRest),0}};
#define boxvar_listRest MMC_REFSTRUCTLIT(boxvar_lit_listRest)
static const MMC_DEFSTRUCTLIT(boxvar_lit_listReverse,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(listReverse),0}};
#define boxvar_listReverse MMC_REFSTRUCTLIT(boxvar_lit_listReverse)
static const MMC_DEFSTRUCTLIT(boxvar_lit_listReverseInPlace,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(listReverseInPlace),0}};
#define boxvar_listReverseInPlace MMC_REFSTRUCTLIT(boxvar_lit_listReverseInPlace)
static const MMC_DEFSTRUCTLIT(boxvar_lit_print,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(print),0}};
#define boxvar_print MMC_REFSTRUCTLIT(boxvar_lit_print)
static const MMC_DEFSTRUCTLIT(boxvar_lit_realAbs,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(realAbs),0}};
#define boxvar_realAbs MMC_REFSTRUCTLIT(boxvar_lit_realAbs)
static const MMC_DEFSTRUCTLIT(boxvar_lit_realAdd,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(realAdd),0}};
#define boxvar_realAdd MMC_REFSTRUCTLIT(boxvar_lit_realAdd)
static const MMC_DEFSTRUCTLIT(boxvar_lit_realDiv,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(realDiv),0}};
#define boxvar_realDiv MMC_REFSTRUCTLIT(boxvar_lit_realDiv)
static const MMC_DEFSTRUCTLIT(boxvar_lit_realEq,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(realEq),0}};
#define boxvar_realEq MMC_REFSTRUCTLIT(boxvar_lit_realEq)
static const MMC_DEFSTRUCTLIT(boxvar_lit_realGe,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(realGe),0}};
#define boxvar_realGe MMC_REFSTRUCTLIT(boxvar_lit_realGe)
static const MMC_DEFSTRUCTLIT(boxvar_lit_realGt,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(realGt),0}};
#define boxvar_realGt MMC_REFSTRUCTLIT(boxvar_lit_realGt)
static const MMC_DEFSTRUCTLIT(boxvar_lit_realInt,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(realInt),0}};
#define boxvar_realInt MMC_REFSTRUCTLIT(boxvar_lit_realInt)
static const MMC_DEFSTRUCTLIT(boxvar_lit_realLe,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(realLe),0}};
#define boxvar_realLe MMC_REFSTRUCTLIT(boxvar_lit_realLe)
static const MMC_DEFSTRUCTLIT(boxvar_lit_realLt,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(realLt),0}};
#define boxvar_realLt MMC_REFSTRUCTLIT(boxvar_lit_realLt)
static const MMC_DEFSTRUCTLIT(boxvar_lit_realMax,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(realMax),0}};
#define boxvar_realMax MMC_REFSTRUCTLIT(boxvar_lit_realMax)
static const MMC_DEFSTRUCTLIT(boxvar_lit_realMin,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(realMin),0}};
#define boxvar_realMin MMC_REFSTRUCTLIT(boxvar_lit_realMin)
static const MMC_DEFSTRUCTLIT(boxvar_lit_realMod,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(realMod),0}};
#define boxvar_realMod MMC_REFSTRUCTLIT(boxvar_lit_realMod)
static const MMC_DEFSTRUCTLIT(boxvar_lit_realMul,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(realMul),0}};
#define boxvar_realMul MMC_REFSTRUCTLIT(boxvar_lit_realMul)
static const MMC_DEFSTRUCTLIT(boxvar_lit_realNe,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(realNe),0}};
#define boxvar_realNe MMC_REFSTRUCTLIT(boxvar_lit_realNe)
static const MMC_DEFSTRUCTLIT(boxvar_lit_realNeg,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(realNeg),0}};
#define boxvar_realNeg MMC_REFSTRUCTLIT(boxvar_lit_realNeg)
static const MMC_DEFSTRUCTLIT(boxvar_lit_realPow,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(realPow),0}};
#define boxvar_realPow MMC_REFSTRUCTLIT(boxvar_lit_realPow)
static const MMC_DEFSTRUCTLIT(boxvar_lit_realString,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(realString),0}};
#define boxvar_realString MMC_REFSTRUCTLIT(boxvar_lit_realString)
static const MMC_DEFSTRUCTLIT(boxvar_lit_realSub,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(realSub),0}};
#define boxvar_realSub MMC_REFSTRUCTLIT(boxvar_lit_realSub)
static const MMC_DEFSTRUCTLIT(boxvar_lit_setGlobalRoot,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(setGlobalRoot),0}};
#define boxvar_setGlobalRoot MMC_REFSTRUCTLIT(boxvar_lit_setGlobalRoot)
static const MMC_DEFSTRUCTLIT(boxvar_lit_stringAppend,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(stringAppend),0}};
#define boxvar_stringAppend MMC_REFSTRUCTLIT(boxvar_lit_stringAppend)
static const MMC_DEFSTRUCTLIT(boxvar_lit_stringCharInt,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(stringCharInt),0}};
#define boxvar_stringCharInt MMC_REFSTRUCTLIT(boxvar_lit_stringCharInt)
static const MMC_DEFSTRUCTLIT(boxvar_lit_stringCompare,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(stringCompare),0}};
#define boxvar_stringCompare MMC_REFSTRUCTLIT(boxvar_lit_stringCompare)
static const MMC_DEFSTRUCTLIT(boxvar_lit_stringDelimitList,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(stringDelimitList),0}};
#define boxvar_stringDelimitList MMC_REFSTRUCTLIT(boxvar_lit_stringDelimitList)
static const MMC_DEFSTRUCTLIT(boxvar_lit_stringEq,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(stringEq),0}};
#define boxvar_stringEq MMC_REFSTRUCTLIT(boxvar_lit_stringEq)
static const MMC_DEFSTRUCTLIT(boxvar_lit_stringEqual,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(stringEqual),0}};
#define boxvar_stringEqual MMC_REFSTRUCTLIT(boxvar_lit_stringEqual)
static const MMC_DEFSTRUCTLIT(boxvar_lit_stringGet,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(stringGet),0}};
#define boxvar_stringGet MMC_REFSTRUCTLIT(boxvar_lit_stringGet)
static const MMC_DEFSTRUCTLIT(boxvar_lit_stringGetStringChar,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(stringGetStringChar),0}};
#define boxvar_stringGetStringChar MMC_REFSTRUCTLIT(boxvar_lit_stringGetStringChar)
static const MMC_DEFSTRUCTLIT(boxvar_lit_stringHash,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(stringHash),0}};
#define boxvar_stringHash MMC_REFSTRUCTLIT(boxvar_lit_stringHash)
static const MMC_DEFSTRUCTLIT(boxvar_lit_stringHashDjb2,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(stringHashDjb2),0}};
#define boxvar_stringHashDjb2 MMC_REFSTRUCTLIT(boxvar_lit_stringHashDjb2)
static const MMC_DEFSTRUCTLIT(boxvar_lit_stringHashDjb2Mod,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(stringHashDjb2Mod),0}};
#define boxvar_stringHashDjb2Mod MMC_REFSTRUCTLIT(boxvar_lit_stringHashDjb2Mod)
static const MMC_DEFSTRUCTLIT(boxvar_lit_stringHashSdbm,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(stringHashSdbm),0}};
#define boxvar_stringHashSdbm MMC_REFSTRUCTLIT(boxvar_lit_stringHashSdbm)
static const MMC_DEFSTRUCTLIT(boxvar_lit_stringInt,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(stringInt),0}};
#define boxvar_stringInt MMC_REFSTRUCTLIT(boxvar_lit_stringInt)
static const MMC_DEFSTRUCTLIT(boxvar_lit_stringLength,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(stringLength),0}};
#define boxvar_stringLength MMC_REFSTRUCTLIT(boxvar_lit_stringLength)
static const MMC_DEFSTRUCTLIT(boxvar_lit_stringReal,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(stringReal),0}};
#define boxvar_stringReal MMC_REFSTRUCTLIT(boxvar_lit_stringReal)
static const MMC_DEFSTRUCTLIT(boxvar_lit_stringUpdateStringChar,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(stringUpdateStringChar),0}};
#define boxvar_stringUpdateStringChar MMC_REFSTRUCTLIT(boxvar_lit_stringUpdateStringChar)
static const MMC_DEFSTRUCTLIT(boxvar_lit_substring,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(substring),0}};
#define boxvar_substring MMC_REFSTRUCTLIT(boxvar_lit_substring)
static const MMC_DEFSTRUCTLIT(boxvar_lit_valueConstructor,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(valueConstructor),0}};
#define boxvar_valueConstructor MMC_REFSTRUCTLIT(boxvar_lit_valueConstructor)
static const MMC_DEFSTRUCTLIT(boxvar_lit_valueEq,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(valueEq),0}};
#define boxvar_valueEq MMC_REFSTRUCTLIT(boxvar_lit_valueEq)
static const MMC_DEFSTRUCTLIT(boxvar_lit_valueHashMod,2,0) {(modelica_metatype) OMC_SYM_BOXPTR(valueHashMod),0}};
#define boxvar_valueHashMod MMC_REFSTRUCTLIT(boxvar_lit_valueHashMod)

#undef OMC_SYM_BOXPTR
#endif /* #if !(defined(OMC_MINIMAL_RUNTIME) || defined(OMC_FMI_RUNTIME)) */
