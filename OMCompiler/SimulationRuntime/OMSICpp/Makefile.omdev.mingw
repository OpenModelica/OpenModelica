# Adrian Pop, adrpo@ida.liu.se, 2006-02-01
# Makefile for compilation of OMC using OMDev-mingw
# OMDev-mingw: http://www.ida.liu.se/~adrpo/omc/omdev/

# specify a list of target platforms, including dynamic, static
# and platform triples for cross compilation
#PLATFORMS=x86_64-linux-gnu i686-w64-mingw32 dynamic
PLATFORMS=static dynamic

top_builddir = $(OMBUILDDIR)/../
builddir_build=$(OMBUILDDIR)
builddir_bin=$(OMBUILDDIR)/bin
builddir_lib=$(OMBUILDDIR)/lib/omc
builddir_inc=$(OMBUILDDIR)/include/omc

OMBUILDDIR_WIN=$(shell cygpath -w $$OMBUILDDIR)

#use this call to use precompiled headers
#use this call if you want to debug the cpp runtime
CMAKE = $(OMDEVMSYS)/bin/cmake/bin/cmake -DCMAKE_VERBOSE_MAKEFILE:Bool=ON

OMDEVMSYS=$(shell cygpath $$OMDEV)

ifeq ($(BUILDTYPE),)
BUILDTYPE=$(BuildType)
endif
ifeq ($(BUILDTYPE),)
BUILDTYPE=Debug
endif

ifeq (MINGW32,$(findstring MINGW32,$(shell uname)))
	IS_MINGW32 = -DIS_MINGW32=ON
	IS_MINGW64 = -DIS_MINGW64=OFF
else
	IS_MINGW32 = -DIS_MINGW32=OFF
	IS_MINGW64 = -DIS_MINGW64=ON
endif

BOOST_STATIC_LINKING="false"
ifeq ($(BOOST_STATIC_LINKING),"true")
	BOOST_STATIC_LINKING_COMMAND=-DBOOST_STATIC_LINKING=ON
else
	BOOST_STATIC_LINKING_COMMAND=-DBOOST_STATIC_LINKING=OFF
endif

BOOST_REALPATHS="false"
ifeq ($(BOOST_REALPATHS),"true")
	BOOST_REALPATHS_COMMAND=-DUSE_BOOST_REALPATHS=ON
else
	BOOST_REALPATHS_COMMAND=-DUSE_BOOST_REALPATHS=OFF
endif

RUNTIME_PROFILING="false"
ifeq ($(RUNTIME_PROFILING),"true")
	RUNTIME_PROFILING_COMMAND=-DRUNTIME_PROFILING=ON
else
	RUNTIME_PROFILING_COMMAND=-DRUNTIME_PROFILING=OFF
endif

SCOREP="false"
ifeq ($(SCOREP),"true")
	USE_SCOREP_COMMAND=-DUSE_SCOREP=ON
else
	USE_SCOREP_COMMAND=-DUSE_SCOREP=OFF
endif

SCOREP_HOME=""
SCOREP_HOME_COMMAND=-DSCOREP_HOME=$(SCOREP_HOME)

FMU_SUNDIALS="false"
ifeq ($(FMU_SUNDIALS),"true")
	FMU_SUNDIALS_COMMAND=-DFMU_SUNDIALS=ON
else
	FMU_SUNDIALS_COMMAND=-DFMU_SUNDIALS=OFF
endif

PARALLEL_OUTPUT="false"
ifeq ($(PARALLEL_OUTPUT),"true")
	PARALLEL_OUTPUT_COMMAND=-DUSE_PARALLEL_OUTPUT=ON
else
	PARALLEL_OUTPUT_COMMAND=-DUSE_PARALLEL_OUTPUT=OFF
endif

USE_LOGGER="true"
ifeq ($(USE_LOGGER),"true")
	USE_LOGGER_COMMAND=-DUSE_LOGGER:BOOL=ON
else
	USE_LOGGER_COMMAND=-DUSE_LOGGER:BOOL=OFF
endif

USE_TRILINOS="false"
ifeq ($(USE_TRILINOS),"true")
	USE_TRILINOS_COMMAND=-DUSE_TRILINOS:BOOL=ON
else
	USE_TRILINOS_COMMAND=-DUSE_TRILINOS:BOOL=OFF
endif

USE_KLU="false"
ifeq ($(USE_KLU),"true")
	USE_KLU_COMMAND=-DUSE_KLU:BOOL=ON
else
	USE_KLU_COMMAND=-DUSE_KLU:BOOL=OFF
endif

getMSVCversion:
	echo "Check for given VSVERSION (2010|2012|2013|2015) version: [VSVERSION=$(VSVERSION)]"
ifeq ("$(VSVERSION)","")
ifeq ("$(VS140COMNTOOLS)", "") #check VS 2015
ifeq ("$(VS120COMNTOOLS)", "") #check VS 2013
ifeq ("$(VS110COMNTOOLS)", "") #check VS 2012
ifeq ("$(VS100COMNTOOLS)", "") #check VS 2010
	echo "Could not identify Visual Studio version, setting it to VSVERSION=2010"
	VSVERSION=2010
	$(eval VSCOMNTOOLS=$(VS100COMNTOOLS))
else
	$(eval VSCOMNTOOLS=$(VS100COMNTOOLS))
endif
else
	$(eval VSCOMNTOOLS=$(VS110COMNTOOLS))
endif
else
	$(eval VSCOMNTOOLS=$(VS120COMNTOOLS))
endif
else
	$(eval VSCOMNTOOLS=$(VS140COMNTOOLS))
	$(eval VCVARS_PARAMS='x86 8.1')
endif
else
ifeq ($(VSVERSION),2010)
	$(eval VSCOMNTOOLS=$(VS100COMNTOOLS))
else
ifeq ($(VSVERSION),2012)
	$(eval VSCOMNTOOLS=$(VS110COMNTOOLS))
else
ifeq ($(VSVERSION),2013)
	$(eval VSCOMNTOOLS=$(VS120COMNTOOLS))
else
ifeq ($(VSVERSION),2015)
	$(eval VSCOMNTOOLS=$(VS140COMNTOOLS))
	$(eval VCVARS_PARAMS='x86 8.1')
endif
endif
endif
endif
endif

CMAKE_FLAGS=-DCMAKE_BUILD_TYPE=$(BUILDTYPE) $(BOOST_STATIC_LINKING_COMMAND) $(BOOST_REALPATHS_COMMAND) $(RUNTIME_PROFILING_COMMAND) $(USE_SCOREP_COMMAND) $(SCOREP_HOME_COMMAND) $(FMU_SUNDIALS_COMMAND) $(PARALLEL_OUTPUT_COMMAND) $(USE_LOGGER_COMMAND) $(USE_TRILINOS_COMMAND) $(USE_KLU_COMMAND)




runtimeCpp: omcCAPIinstall
	$(foreach PLATFORM, $(PLATFORMS), \
	  mkdir -p Build_$(PLATFORM); \
	  (cd ./Build_$(PLATFORM); echo "change to Build_$(PLATFORM)"; \
	   cmake -G "MSYS Makefiles" -DPLATFORM=$(PLATFORM) -DOMC_LIB=$(OMC_LIB) $(CMAKE_FLAGS) $(IS_MINGW32) $(IS_MINGW64) -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX:PATH="$(OMBUILDDIR)" MAKE_CXX_COMPILER=g++ ../; \
	   $(MAKE));)

omcCAPImsvc: getMSVCversion
	test -f """${VSCOMNTOOLS}/../../VC/vcvarsall.bat"""
	echo 'Build the cppRuntime with MSVC' buildtype: $(BUILDTYPE)
	#rm -rf Build_MSVC
	mkdir -p Build_CAPI_MSVC
	echo call '"${VSCOMNTOOLS}\\..\\..\\VC\\vcvarsall.bat" ${VCVARS_PARAMS}' > Build_CAPI_MSVC/build.bat

	echo echo Running CMake from '%OMDEV%\\bin\\cmake\\bin\\cmake' >> Build_CAPI_MSVC/build.bat
	echo echo using omc libraries from "$(OMBUILDDIR)" >> Build_CAPI_MSVC/build.bat
	echo '%OMDEV%\\bin\\cmake\\bin\\cmake -DCMAKE_VERBOSE_MAKEFILE:Bool=ON -DOMC_PATH="$(OMBUILDDIR)/build"  -DCMAKE_INSTALL_PREFIX:PATH=./tmp ../omcCAPI/ -G "NMake Makefiles JOM" -D"CMAKE_MAKE_PROGRAM:PATH=%OMDEV%\\tools\\jom\\jom.exe"' >> Build_CAPI_MSVC/build.bat

	# for some reason, the environment variable 'MAKEFLAGS' was set to 'w' on my and Niklas' machine?!
	echo set MAKEFLAGS="" >> Build_CAPI_MSVC/build.bat
	echo echo Running NMake JOM >> Build_CAPI_MSVC/build.bat
	echo %OMDEV%\\tools\\jom\\jom.exe /f Makefile install >> Build_CAPI_MSVC/build.bat
	cd ./Build_CAPI_MSVC; echo "change to Build_CAPI_MSVC";\
	cmd /c build.bat
runtimeCPPmsvc: getMSVCversion
	test -f """${VSCOMNTOOLS}/../../VC/vcvarsall.bat"""
	echo 'Build the cppRuntime with MSVC' buildtype: $(BUILDTYPE)
	#rm -rf Build_MSVC
	mkdir -p Build_MSVC
	echo call '"${VSCOMNTOOLS}\\..\\..\\VC\\vcvarsall.bat" ${VCVARS_PARAMS}' > Build_MSVC/build.bat

	echo echo Running CMake from '%OMDEV%\\bin\\cmake\\bin\\cmake' >> Build_MSVC/build.bat
	echo '%OMDEV%\\bin\\cmake\\bin\\cmake -DCMAKE_VERBOSE_MAKEFILE:Bool=ON -DPLATFORM="dynamic" $(CMAKE_FLAGS) -DIS_MINGW32=OFF -DIS_MINGW64=OFF  -DCMAKE_INSTALL_PREFIX:PATH=./tmp ../ -G "NMake Makefiles JOM" -D"CMAKE_MAKE_PROGRAM:PATH=%OMDEV%\\tools\\jom\\jom.exe"' >> Build_MSVC/build.bat

	# for some reason, the environment variable 'MAKEFLAGS' was set to 'w' on my and Niklas' machine?!
	echo set MAKEFLAGS="" >> Build_MSVC/build.bat
	echo echo Running NMake JOM >> Build_MSVC/build.bat
	echo %OMDEV%\\tools\\jom\\jom.exe /f Makefile install >> Build_MSVC/build.bat
	cd ./Build_MSVC; echo "change to Build_MSVC";\
	cmd /c build.bat

	echo 'Build cppRuntime (static) with MSVC'
	#rm -rf Build_MSVC_static
	mkdir -p Build_MSVC_static
	echo call '"${VSCOMNTOOLS}\\..\\..\\VC\\vcvarsall.bat" ${VCVARS_PARAMS}' > Build_MSVC_static/build.bat

	echo echo Running CMake from '%OMDEV%\\bin\\cmake\\bin\\cmake' >> Build_MSVC_static/build.bat
	echo '%OMDEV%\\bin\\cmake\\bin\\cmake -DCMAKE_VERBOSE_MAKEFILE:Bool=ON -DPLATFORM="static" $(CMAKE_FLAGS) -DIS_MINGW32=OFF -DIS_MINGW64=OFF -DCMAKE_INSTALL_PREFIX:PATH=./tmp ../ -G "NMake Makefiles JOM" -D"CMAKE_MAKE_PROGRAM:PATH=%OMDEV%\\tools\\jom\\jom.exe"' >> Build_MSVC_static/build.bat

	# for some reason, the environment variable 'MAKEFLAGS' was set to 'w' on my and Niklas' machine?!
	echo set MAKEFLAGS="" >> Build_MSVC_static/build.bat
	echo echo Running NMake JOM >> Build_MSVC_static/build.bat
	echo %OMDEV%\\tools\\jom\\jom.exe /f Makefile install >> Build_MSVC_static/build.bat
	cd ./Build_MSVC_static; echo "change to Build_MSVC_static";\
	cmd /c build.bat

	# move folder to build dir
	cp -R --verbose Build_MSVC/tmp/* $(builddir_build)
	cp -R --verbose Build_MSVC_static/tmp/lib/* $(builddir_build)/lib

omcCAPIinstall:
	mkdir -p Build_CAPI;
	(cd ./Build_CAPI; echo "change to Build_CAPI"; \
	  cmake -G "MSYS Makefiles" -DPLATFORM=$(PLATFORM) -DCMAKE_VERBOSE_MAKEFILE:Bool=ON -DOMC_PATH="$(OMBUILDDIR)"  -DCMAKE_INSTALL_PREFIX:PATH="./lib" MAKE_CXX_COMPILER=g++ ../omcCAPI/; \
	  $(MAKE) install;)
	(cp -puf Build_CAPI/OMCAPIInterface* $(OMBUILDDIR)/bin/)
	(cp -puf Build_CAPI/*.dll* $(OMBUILDDIR)/bin/)
	(cp -puf Build_CAPI/*.dll* $(OMBUILDDIR)/lib/omc/)

install: runtimeCpp
	$(foreach PLATFORM, $(PLATFORMS), \
	  (cd Build_$(PLATFORM); $(MAKE) install);)
	cp -p $(OMDEVMSYS)/lib/3rdParty/boost-1_55/lib/*.dll $(builddir_bin)/.
ifeq (MINGW32,$(findstring MINGW32,$(shell uname)))
	(cd Build; cp -p $(OMDEVMSYS)/tools/msys/mingw32/bin/libboost*.dll $(builddir_bin)/.)
else
	(cd Build; cp -p $(OMDEVMSYS)/tools/msys/mingw64/bin/libboost*.dll $(builddir_bin)/.)
endif


clean:
	$(foreach PLATFORM, $(PLATFORMS), \
	  rm -R -f Build_$(PLATFORM);)
