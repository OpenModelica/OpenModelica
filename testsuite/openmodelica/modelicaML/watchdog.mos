// name:    Simulation ModelicaML model watchdog
// keywords:  ModelicaML, solver, dassl, rungekutta
// cflags: +std=2.x -d=-newInst
// status: correct
// teardown_command: rm -f WatchDogSystem.SystemSimulations.WatchDogSystemSimulation_1 *.c *.plt *.mat *.makefile *.libs *.log *.h *.cpp *.txt
// 
// ModelicaML: 1.3.6 Examples from 29.Nov 2010


loadFile("./WatchDogSystem/package.mo"); getErrorString();
simulate(WatchDogSystem.SystemSimulations.WatchDogSystemSimulation_1,stopTime=150,numberofInterval=1500); getErrorString();

val(dm.watch_dog.on,0);
val(dm.watch_dog.on,10.1);
val(dm.watch_dog.on,40.1);
val(dm.watch_dog.on,45);
val(dm.watch_dog.on,45.1);
val(dm.watch_dog.on,150);
val(dm.watch_dog.battery_level,0);
val(dm.watch_dog.battery_level,40.1);
val(dm.watch_dog.battery_level,45);
val(dm.watch_dog.battery_level,150);

// Result:
// true
// ""
// record SimulationResult
//     resultFile = "",
//     simulationOptions = "startTime = 0.0, stopTime = 150.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'WatchDogSystem.SystemSimulations.WatchDogSystemSimulation_1', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "Simulation execution failed for model: WatchDogSystem.SystemSimulations.WatchDogSystemSimulation_1
// assert            | debug   | No system for the symbolic initialization was generated.
// assert            | info    | simulation terminated by an assertion at initialization
// "
// end SimulationResult;
// "Warning: The initial conditions are not fully specified. For more information set +d=initialization. In OMEdit Tools->Options->Simulation->OMCFlags, in OMNotebook call setCommandLineOptions("+d=initialization").
// [SimCode/SimCodeUtil.mo:6364:9-6364:54:writable] Error: Internal error Inverse Algorithm needs to be solved for {test_scenario.Region_0.turn_off.active,test_scenario.Region_0.turn_on.active,$whenCondition2,$whenCondition4,$whenCondition7,$whenCondition8,$whenCondition13,dm.sensor.alarm_detected,test_scenario.Region_0.simulate_alarm.active,test_scenario.Region_0.numberOfActiveStates,$whenCondition9,dm.watch_dog.on,$whenCondition11,$whenCondition1,test_scenario.Region_0.simulate_alarm.stime,test_scenario.Region_0.init.active,test_scenario.Region_0.Initial_0.stime,$whenCondition12,$whenCondition10,test_scenario.Region_0.turn_on.stime,$whenCondition3,test_scenario.Region_0.init.stime,test_scenario.Region_0.turn_off.stime,test_scenario.stime,test_scenario.startBehaviour,$whenCondition5,$PRE.test_scenario.Region_0.init.active,$whenCondition6} in 
// algorithm
//   test_scenario.startBehaviour := true;
//   $whenCondition1 := test_scenario.startBehaviour;
//   $whenCondition2 := test_scenario.active;
//   $whenCondition3 := test_scenario.selfTransitionActivated;
//   if test_scenario.active then
//     test_scenario.stime := time - test_scenario.timeAtActivation;
//   end if;
//   if not test_scenario.active then
//     test_scenario.stime := 0.0;
//   end if;
//   $whenCondition4 := test_scenario.Region_0.Initial_0.active;
//   $whenCondition5 := test_scenario.Region_0.Initial_0.selfTransitionActivated;
//   if test_scenario.Region_0.Initial_0.active then
//     test_scenario.Region_0.Initial_0.stime := time - test_scenario.Region_0.Initial_0.timeAtActivation;
//   end if;
//   if not test_scenario.Region_0.Initial_0.active then
//     test_scenario.Region_0.Initial_0.stime := 0.0;
//   end if;
//   $whenCondition6 := test_scenario.Region_0.init.active;
//   $whenCondition7 := test_scenario.Region_0.init.selfTransitionActivated;
//   $whenCondition8 := test_scenario.Region_0.turn_on.active;
//   $whenCondition9 := test_scenario.Region_0.turn_on.selfTransitionActivated;
//   $whenCondition10 := test_scenario.Region_0.simulate_alarm.active;
//   $whenCondition11 := test_scenario.Region_0.simulate_alarm.selfTransitionActivated;
//   $whenCondition12 := test_scenario.Region_0.turn_off.active;
//   $whenCondition13 := test_scenario.Region_0.turn_off.selfTransitionActivated;
//   if test_scenario.Region_0.init.active then
//     test_scenario.Region_0.init.stime := time - test_scenario.Region_0.init.timeAtActivation;
//   end if;
//   if not test_scenario.Region_0.init.active then
//     test_scenario.Region_0.init.stime := 0.0;
//   end if;
//   if test_scenario.Region_0.turn_on.active then
//     test_scenario.Region_0.turn_on.stime := time - test_scenario.Region_0.turn_on.timeAtActivation;
//   end if;
//   if not test_scenario.Region_0.turn_on.active then
//     test_scenario.Region_0.turn_on.stime := 0.0;
//   end if;
//   if test_scenario.Region_0.simulate_alarm.active then
//     test_scenario.Region_0.simulate_alarm.stime := time - test_scenario.Region_0.simulate_alarm.timeAtActivation;
//   end if;
//   if not test_scenario.Region_0.simulate_alarm.active then
//     test_scenario.Region_0.simulate_alarm.stime := 0.0;
//   end if;
//   if test_scenario.Region_0.turn_off.active then
//     test_scenario.Region_0.turn_off.stime := time - test_scenario.Region_0.turn_off.timeAtActivation;
//   end if;
//   if not test_scenario.Region_0.turn_off.active then
//     test_scenario.Region_0.turn_off.stime := 0.0;
//   end if;
//   if test_scenario.Region_0.Initial_0.active then
//     test_scenario.Region_0.Initial_0.active := false;
//     test_scenario.Region_0.init.active := true;
//   end if;
//   if test_scenario.active then
//     if $PRE.test_scenario.Region_0.init.active then
//       if test_scenario.Region_0.init.stime > 10.0 then
//         test_scenario.Region_0.init.active := false;
//         test_scenario.Region_0.turn_on.active := true;
//         dm.watch_dog.on := true;
//       end if;
//     elseif $PRE.test_scenario.Region_0.turn_on.active then
//       if test_scenario.Region_0.turn_on.stime > 20.0 then
//         test_scenario.Region_0.turn_on.active := false;
//         test_scenario.Region_0.simulate_alarm.active := true;
//         dm.sensor.alarm_detected := not dm.sensor.alarm_detected;
//       end if;
//     elseif $PRE.test_scenario.Region_0.simulate_alarm.active then
//       if test_scenario.Region_0.simulate_alarm.stime > 10.0 then
//         test_scenario.Region_0.simulate_alarm.active := false;
//         test_scenario.Region_0.turn_off.active := true;
//         dm.watch_dog.on := false;
//       end if;
//     elseif $PRE.test_scenario.Region_0.turn_off.active then
//       if test_scenario.Region_0.turn_off.stime > 5.0 then
//         test_scenario.Region_0.turn_off.active := false;
//         test_scenario.Region_0.turn_on.active := true;
//         dm.watch_dog.on := true;
//       end if;
//     end if;
//   end if;
//   if not test_scenario.active then
//     test_scenario.Region_0.Initial_0.active := false;
//     test_scenario.Region_0.init.active := false;
//     test_scenario.Region_0.turn_on.active := false;
//     test_scenario.Region_0.simulate_alarm.active := false;
//     test_scenario.Region_0.turn_off.active := false;
//   end if;
//   test_scenario.Region_0.numberOfActiveStates := 0;
//   if test_scenario.Region_0.init.active then
//     test_scenario.Region_0.numberOfActiveStates := 1 + test_scenario.Region_0.numberOfActiveStates;
//   end if;
//   if test_scenario.Region_0.turn_on.active then
//     test_scenario.Region_0.numberOfActiveStates := 1 + test_scenario.Region_0.numberOfActiveStates;
//   end if;
//   if test_scenario.Region_0.simulate_alarm.active then
//     test_scenario.Region_0.numberOfActiveStates := 1 + test_scenario.Region_0.numberOfActiveStates;
//   end if;
//   if test_scenario.Region_0.turn_off.active then
//     test_scenario.Region_0.numberOfActiveStates := 1 + test_scenario.Region_0.numberOfActiveStates;
//   end if;
//   if test_scenario.Region_0.Initial_0.active then
//     test_scenario.Region_0.numberOfActiveStates := 1 + test_scenario.Region_0.numberOfActiveStates;
//   end if;
//   if test_scenario.active then
//     assert(not test_scenario.Region_0.numberOfActiveStates < 1, "test_scenario.Region_0 has no active states although the parent state is active!");
//     assert(not test_scenario.Region_0.numberOfActiveStates > 1, "test_scenario.Region_0 has multiple active states which are mutually exclusive!");
//   end if;
//   if not test_scenario.active then
//     assert(test_scenario.Region_0.numberOfActiveStates == 0, "test_scenario.Region_0 has active states although the parent state is not active!");
//   end if;
// This has not been implemented yet.
// [SimCode/SimCodeUtil.mo:6369:7-6369:88:writable] Error: Internal error function createSingleAlgorithmCode failed
// [SimCode/SimCodeUtil.mo:3915:9-3915:50:writable] Error: Internal error function createOdeSystem failed for component Algorithm 26 {14, 28, 141, 139, 138, 135, 132, 47, 21, 1, 136, 112, 134, 143, 18, 35, 4, 131, 133, 25, 142, 32, 11, 40, 37, 140, 36, 137}
// [SimCode/SimCodeUtil.mo:2600:9-2600:54:writable] Error: Internal error function createEquationsForSystem1 failed for component Algorithm 26 {14, 28, 141, 139, 138, 135, 132, 47, 21, 1, 136, 112, 134, 143, 18, 35, 4, 131, 133, 25, 142, 32, 11, 40, 37, 140, 36, 137}
// Error: No system for the symbolic initialization was generated.
// "
//
//
//
//
//
//
//
//
//
//
// endResult
