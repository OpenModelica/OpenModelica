// name: optSimpleSolveDAEdump
// keywords: omc debug dump
// status: correct
// cflags: -d=-newInst
//
// omc debug dump: +d=optdaedump
//

loadString("
model testOptdaedump
  Real x;
  Real y;
  Real z;
equation
  tanh(x) = sin(time*10)*0.9;
  (y^3+x^3)^2 = sin(0);
  (if(noEvent(x > 0)) then 3*z + 1  else 5*z+2 ) = y;
end testOptdaedump;
"); getErrorString();

setPreOptModules("evalFunc");
setPostOptModules("solveSimpleEquations");
setDebugFlags("optdaedump"); getErrorString();
buildModel(testOptdaedump); getErrorString();

// Result:
// true
// ""
// true
// true
// true
// ""
//
// ########################################
// dumpdaelow (before pre-optimization)
// ########################################
//
//
// unknown partition
// ========================================
//
// Variables (3)
// ========================================
// 1: z:VARIABLE()  type: Real
// 2: y:VARIABLE()  type: Real
// 3: x:VARIABLE()  type: Real
//
//
// Equations (3, 3)
// ========================================
// 1/1 (1): tanh(x) = 0.9 * sin(10.0 * time)   [dynamic |0|0|0|0|]
// 2/2 (1): (y ^ 3.0 + x ^ 3.0) ^ 2.0 = 0.0   [dynamic |0|0|0|0|]
// 3/3 (1): if noEvent(x > 0.0) then 1.0 + 3.0 * z else 2.0 + 5.0 * z = y   [dynamic |0|0|0|0|]
//
//
// no matching
//
//
//
// BackendDAEType: simulation
//
//
//
// ########################################
// pre-optimization module evalFunc (simulation)
// ########################################
//
//
// unknown partition
// ========================================
//
// Variables (3)
// ========================================
// 1: z:VARIABLE()  type: Real
// 2: y:VARIABLE()  type: Real
// 3: x:VARIABLE()  type: Real
//
//
// Equations (3, 3)
// ========================================
// 1/1 (1): tanh(x) = 0.9 * sin(10.0 * time)   [dynamic |0|0|0|0|]
// 2/2 (1): (y ^ 3.0 + x ^ 3.0) ^ 2.0 = 0.0   [dynamic |0|0|0|0|]
// 3/3 (1): if noEvent(x > 0.0) then 1.0 + 3.0 * z else 2.0 + 5.0 * z = y   [dynamic |0|0|0|0|]
//
//
// no matching
//
//
//
// BackendDAEType: simulation
//
//
// pre-optimization done.
//
// ########################################
// synchronousFeatures
// ########################################
//
//
// unknown partition
// ========================================
//
// Variables (3)
// ========================================
// 1: z:VARIABLE()  type: Real
// 2: y:VARIABLE()  type: Real
// 3: x:VARIABLE()  type: Real
//
//
// Equations (3, 3)
// ========================================
// 1/1 (1): tanh(x) = 0.9 * sin(10.0 * time)   [dynamic |0|0|0|0|]
// 2/2 (1): (y ^ 3.0 + x ^ 3.0) ^ 2.0 = 0.0   [dynamic |0|0|0|0|]
// 3/3 (1): if noEvent(x > 0.0) then 1.0 + 3.0 * z else 2.0 + 5.0 * z = y   [dynamic |0|0|0|0|]
//
//
// Matching
// ========================================
// 3 variables and equations
// var 1 is solved in eqn 3
// var 2 is solved in eqn 2
// var 3 is solved in eqn 1
//
//
// StrongComponents
// ========================================
// {1:3}
// {2:2}
// {3:1}
//
//
//
// BackendDAEType: simulation
//
//
//
// ########################################
// created initial system
// ########################################
//
//
// unknown partition
// ========================================
//
// Variables (3)
// ========================================
// 1: z:VARIABLE()  type: Real
// 2: y:VARIABLE()  type: Real
// 3: x:VARIABLE()  type: Real
//
//
// Equations (3, 3)
// ========================================
// 1/1 (1): if noEvent(x > 0.0) then 1.0 + 3.0 * z else 2.0 + 5.0 * z = y   [dynamic |0|0|0|0|]
// 2/2 (1): (y ^ 3.0 + x ^ 3.0) ^ 2.0 = 0.0   [dynamic |0|0|0|0|]
// 3/3 (1): tanh(x) = 0.9 * sin(10.0 * time)   [dynamic |0|0|0|0|]
//
//
// no matching
//
//
//
// BackendDAEType: initialization
//
//
//
// ########################################
// partitioned initial system
// ########################################
//
//
// unknown partition
// ========================================
//
// Variables (3)
// ========================================
// 1: z:VARIABLE()  type: Real
// 2: y:VARIABLE()  type: Real
// 3: x:VARIABLE()  type: Real
//
//
// Equations (3, 3)
// ========================================
// 1/1 (1): if noEvent(x > 0.0) then 1.0 + 3.0 * z else 2.0 + 5.0 * z = y   [dynamic |0|0|0|0|]
// 2/2 (1): (y ^ 3.0 + x ^ 3.0) ^ 2.0 = 0.0   [dynamic |0|0|0|0|]
// 3/3 (1): tanh(x) = 0.9 * sin(10.0 * time)   [dynamic |0|0|0|0|]
//
//
// Adjacency Matrix (row: equation)
// ========================================
// number of rows: 3
// 1: 3 2 1
// 2: 3 2
// 3: 3
//
// Transposed Adjacency Matrix (row: variable)
// ========================================
// number of rows: 3
// 1: 1
// 2: 2 1
// 3: 3 2 1
//
// no matching
//
//
//
// BackendDAEType: initialization
//
//
//
// ########################################
// post-optimization module simplifyComplexFunction (initialization)
// ########################################
//
//
// unknown partition
// ========================================
//
// Variables (3)
// ========================================
// 1: z:VARIABLE()  type: Real
// 2: y:VARIABLE()  type: Real
// 3: x:VARIABLE()  type: Real
//
//
// Equations (3, 3)
// ========================================
// 1/1 (1): if noEvent(x > 0.0) then 1.0 + 3.0 * z else 2.0 + 5.0 * z = y   [dynamic |0|0|0|0|]
// 2/2 (1): (y ^ 3.0 + x ^ 3.0) ^ 2.0 = 0.0   [dynamic |0|0|0|0|]
// 3/3 (1): tanh(x) = 0.9 * sin(10.0 * time)   [dynamic |0|0|0|0|]
//
//
// Matching
// ========================================
// 3 variables and equations
// var 1 is solved in eqn 1
// var 2 is solved in eqn 2
// var 3 is solved in eqn 3
//
//
// StrongComponents
// ========================================
// {3:3}
// {2:2}
// {1:1}
//
//
//
// BackendDAEType: initialization
//
//
//
// ########################################
// post-optimization module tearingSystem (initialization)
// ########################################
//
//
// unknown partition
// ========================================
//
// Variables (3)
// ========================================
// 1: z:VARIABLE()  type: Real
// 2: y:VARIABLE()  type: Real
// 3: x:VARIABLE()  type: Real
//
//
// Equations (3, 3)
// ========================================
// 1/1 (1): if noEvent(x > 0.0) then 1.0 + 3.0 * z else 2.0 + 5.0 * z = y   [dynamic |0|0|0|0|]
// 2/2 (1): (y ^ 3.0 + x ^ 3.0) ^ 2.0 = 0.0   [dynamic |0|0|0|0|]
// 3/3 (1): tanh(x) = 0.9 * sin(10.0 * time)   [dynamic |0|0|0|0|]
//
//
// Matching
// ========================================
// 3 variables and equations
// var 1 is solved in eqn 1
// var 2 is solved in eqn 2
// var 3 is solved in eqn 3
//
//
// StrongComponents
// ========================================
// {3:3}
// {2:2}
// {1:1}
//
//
//
// BackendDAEType: initialization
//
//
//
// ########################################
// post-optimization module solveSimpleEquations (initialization)
// ########################################
//
//
// unknown partition
// ========================================
//
// Variables (3)
// ========================================
// 1: z:VARIABLE()  type: Real
// 2: y:VARIABLE()  type: Real
// 3: x:VARIABLE()  type: Real
//
//
// Equations (3, 3)
// ========================================
// 1/1 (1): z = if noEvent(x > 0.0) then y / 3.0 - 0.3333333333333333 else 0.2 * y - 0.4   [dynamic |0|0|0|0|]
// 2/2 (1): y = (-x ^ 3.0) ^ 0.3333333333333333   [dynamic |0|0|0|0|]
// 3/3 (1): x = 0.5 * log((1.0 + 0.9 * sin(10.0 * time)) / (1.0 - 0.9 * sin(10.0 * time)))   [dynamic |0|0|0|0|]
//
//
// Matching
// ========================================
// 3 variables and equations
// var 1 is solved in eqn 1
// var 2 is solved in eqn 2
// var 3 is solved in eqn 3
//
//
// StrongComponents
// ========================================
// {3:3}
// {2:2}
// {1:1}
//
//
//
// BackendDAEType: initialization
//
//
//
// ########################################
// post-optimization module calculateStrongComponentJacobians (initialization)
// ########################################
//
//
// unknown partition
// ========================================
//
// Variables (3)
// ========================================
// 1: z:VARIABLE()  type: Real
// 2: y:VARIABLE()  type: Real
// 3: x:VARIABLE()  type: Real
//
//
// Equations (3, 3)
// ========================================
// 1/1 (1): z = if noEvent(x > 0.0) then y / 3.0 - 0.3333333333333333 else 0.2 * y - 0.4   [dynamic |0|0|0|0|]
// 2/2 (1): y = (-x ^ 3.0) ^ 0.3333333333333333   [dynamic |0|0|0|0|]
// 3/3 (1): x = 0.5 * log((1.0 + 0.9 * sin(10.0 * time)) / (1.0 - 0.9 * sin(10.0 * time)))   [dynamic |0|0|0|0|]
//
//
// Matching
// ========================================
// 3 variables and equations
// var 1 is solved in eqn 1
// var 2 is solved in eqn 2
// var 3 is solved in eqn 3
//
//
// StrongComponents
// ========================================
// {3:3}
// {2:2}
// {1:1}
//
//
//
// BackendDAEType: initialization
//
//
//
// ########################################
// post-optimization module simplifyAllExpressions (initialization)
// ########################################
//
//
// unknown partition
// ========================================
//
// Variables (3)
// ========================================
// 1: z:VARIABLE()  type: Real
// 2: y:VARIABLE()  type: Real
// 3: x:VARIABLE()  type: Real
//
//
// Equations (3, 3)
// ========================================
// 1/1 (1): z = if noEvent(x > 0.0) then y / 3.0 - 0.3333333333333333 else 0.2 * y - 0.4   [dynamic |0|0|0|0|]
// 2/2 (1): y = (-x ^ 3.0) ^ 0.3333333333333333   [dynamic |0|0|0|0|]
// 3/3 (1): x = 0.5 * log((1.0 + 0.9 * sin(10.0 * time)) / (1.0 - 0.9 * sin(10.0 * time)))   [dynamic |0|0|0|0|]
//
//
// Matching
// ========================================
// 3 variables and equations
// var 1 is solved in eqn 1
// var 2 is solved in eqn 2
// var 3 is solved in eqn 3
//
//
// StrongComponents
// ========================================
// {3:3}
// {2:2}
// {1:1}
//
//
//
// BackendDAEType: initialization
//
//
//
// ########################################
// post-optimization module collapseArrayExpressions (initialization)
// ########################################
//
//
// unknown partition
// ========================================
//
// Variables (3)
// ========================================
// 1: z:VARIABLE()  type: Real
// 2: y:VARIABLE()  type: Real
// 3: x:VARIABLE()  type: Real
//
//
// Equations (3, 3)
// ========================================
// 1/1 (1): z = if noEvent(x > 0.0) then y / 3.0 - 0.3333333333333333 else 0.2 * y - 0.4   [dynamic |0|0|0|0|]
// 2/2 (1): y = (-x ^ 3.0) ^ 0.3333333333333333   [dynamic |0|0|0|0|]
// 3/3 (1): x = 0.5 * log((1.0 + 0.9 * sin(10.0 * time)) / (1.0 - 0.9 * sin(10.0 * time)))   [dynamic |0|0|0|0|]
//
//
// Matching
// ========================================
// 3 variables and equations
// var 1 is solved in eqn 1
// var 2 is solved in eqn 2
// var 3 is solved in eqn 3
//
//
// StrongComponents
// ========================================
// {3:3}
// {2:2}
// {1:1}
//
//
//
// BackendDAEType: initialization
//
//
// post-optimization done.
//
// ########################################
// post-optimization module solveSimpleEquations (simulation)
// ########################################
//
//
// unknown partition
// ========================================
//
// Variables (3)
// ========================================
// 1: z:VARIABLE()  type: Real
// 2: y:VARIABLE()  type: Real
// 3: x:VARIABLE()  type: Real
//
//
// Equations (3, 3)
// ========================================
// 1/1 (1): x = 0.5 * log((1.0 + 0.9 * sin(10.0 * time)) / (1.0 - 0.9 * sin(10.0 * time)))   [dynamic |0|0|0|0|]
// 2/2 (1): y = (-x ^ 3.0) ^ 0.3333333333333333   [dynamic |0|0|0|0|]
// 3/3 (1): z = if noEvent(x > 0.0) then y / 3.0 - 0.3333333333333333 else 0.2 * y - 0.4   [dynamic |0|0|0|0|]
//
//
// Matching
// ========================================
// 3 variables and equations
// var 1 is solved in eqn 3
// var 2 is solved in eqn 2
// var 3 is solved in eqn 1
//
//
// StrongComponents
// ========================================
// {1:3}
// {2:2}
// {3:1}
//
//
//
// BackendDAEType: simulation
//
//
// post-optimization done.
// {"testOptdaedump","testOptdaedump_init.xml"}
// ""
// endResult
