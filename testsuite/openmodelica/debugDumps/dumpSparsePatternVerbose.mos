// name: dumpSparsePatternVerbose.mos
// keywords: omc debug dump
// status: correct
// 
// omc debug dump: +d=dumpSparsePatternVerbose
// 

// cflags: -d=-newInst
// TODO: change this model to test the dump +d=dumpSparsePatternVerbose
loadString("
model testDumpSparsePatternVerbose \"testsuite/simulation/modelica/nonlinear_system/nlsTestPackage.mo: model problem6\"
  parameter Integer N = 100;
  parameter Real h = 1/(N+1);
  Real x[N](each start=0.5);
equation
  x[1] = x[N];
  for k in 2:N-1 loop
    0 = -x[k-1] + 2*x[k] -x[k+1] + (h^2/2)*(x[k]+k*h+1)^2;
  end for;
  x[N] = 0;
end testDumpSparsePatternVerbose;
"); getErrorString();

setDebugFlags("dumpSparsePatternVerbose,NLSanalyticJacobian"); getErrorString();
buildModel(testDumpSparsePatternVerbose); getErrorString();

// Result:
// true
// ""
// true
// ""
//  start getting sparsity pattern diff Vars : 1 diffed vars: 1
// 1: output $res1:VARIABLE()  type: Real []
// 2: x[2]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 3: x[3]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 4: x[4]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 5: x[5]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 6: x[6]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 7: x[7]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 8: x[8]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 9: x[9]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 10: x[10]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 11: x[11]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 12: x[12]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 13: x[13]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 14: x[14]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 15: x[15]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 16: x[16]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 17: x[17]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 18: x[18]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 19: x[19]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 20: x[20]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 21: x[21]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 22: x[22]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 23: x[23]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 24: x[24]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 25: x[25]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 26: x[26]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 27: x[27]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 28: x[28]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 29: x[29]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 30: x[30]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 31: x[31]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 32: x[32]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 33: x[33]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 34: x[34]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 35: x[35]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 36: x[36]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 37: x[37]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 38: x[38]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 39: x[39]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 40: x[40]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 41: x[41]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 42: x[42]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 43: x[43]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 44: x[44]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 45: x[45]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 46: x[46]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 47: x[47]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 48: x[48]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 49: x[49]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 50: x[50]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 51: x[51]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 52: x[52]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 53: x[53]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 54: x[54]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 55: x[55]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 56: x[56]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 57: x[57]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 58: x[58]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 59: x[59]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 60: x[60]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 61: x[61]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 62: x[62]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 63: x[63]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 64: x[64]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 65: x[65]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 66: x[66]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 67: x[67]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 68: x[68]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 69: x[69]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 70: x[70]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 71: x[71]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 72: x[72]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 73: x[73]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 74: x[74]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 75: x[75]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 76: x[76]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 77: x[77]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 78: x[78]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 79: x[79]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 80: x[80]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 81: x[81]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 82: x[82]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 83: x[83]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 84: x[84]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 85: x[85]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 86: x[86]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 87: x[87]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 88: x[88]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 89: x[89]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 90: x[90]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 91: x[91]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 92: x[92]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 93: x[93]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 94: x[94]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 95: x[95]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 96: x[96]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 97: x[97]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 98: x[98]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 99: $pDER.x[99]:JACOBIAN_DIFF_VAR(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 1/1 (1): $res1 = 2.0 * x[2] + 0.5 * (0.009900990099009901 * (1.01980198019802 + x[2])) ^ 2.0 - x[3]    [dynamic]
// 2/2 (1): 0.0 = 2.0 * x[3] + 0.5 * (0.009900990099009901 * (1.02970297029703 + x[3])) ^ 2.0 + (-x[4]) - x[2]    [dynamic]
// 3/3 (1): 0.0 = 2.0 * x[4] + 0.5 * (0.009900990099009901 * (1.03960396039604 + x[4])) ^ 2.0 + (-x[5]) - x[3]    [dynamic]
// 4/4 (1): 0.0 = 2.0 * x[5] + 0.5 * (0.009900990099009901 * (1.04950495049505 + x[5])) ^ 2.0 + (-x[6]) - x[4]    [dynamic]
// 5/5 (1): 0.0 = 2.0 * x[6] + 0.5 * (0.009900990099009901 * (1.059405940594059 + x[6])) ^ 2.0 + (-x[7]) - x[5]    [dynamic]
// 6/6 (1): 0.0 = 2.0 * x[7] + 0.5 * (0.009900990099009901 * (1.069306930693069 + x[7])) ^ 2.0 + (-x[8]) - x[6]    [dynamic]
// 7/7 (1): 0.0 = 2.0 * x[8] + 0.5 * (0.009900990099009901 * (1.079207920792079 + x[8])) ^ 2.0 + (-x[9]) - x[7]    [dynamic]
// 8/8 (1): 0.0 = 2.0 * x[9] + 0.5 * (0.009900990099009901 * (1.089108910891089 + x[9])) ^ 2.0 + (-x[10]) - x[8]    [dynamic]
// 9/9 (1): 0.0 = 2.0 * x[10] + 0.5 * (0.009900990099009901 * (1.099009900990099 + x[10])) ^ 2.0 + (-x[11]) - x[9]    [dynamic]
// 10/10 (1): 0.0 = 2.0 * x[11] + 0.5 * (0.009900990099009901 * (1.108910891089109 + x[11])) ^ 2.0 + (-x[12]) - x[10]    [dynamic]
// 11/11 (1): 0.0 = 2.0 * x[12] + 0.5 * (0.009900990099009901 * (1.118811881188119 + x[12])) ^ 2.0 + (-x[13]) - x[11]    [dynamic]
// 12/12 (1): 0.0 = 2.0 * x[13] + 0.5 * (0.009900990099009901 * (1.128712871287129 + x[13])) ^ 2.0 + (-x[14]) - x[12]    [dynamic]
// 13/13 (1): 0.0 = 2.0 * x[14] + 0.5 * (0.009900990099009901 * (1.138613861386139 + x[14])) ^ 2.0 + (-x[15]) - x[13]    [dynamic]
// 14/14 (1): 0.0 = 2.0 * x[15] + 0.5 * (0.009900990099009901 * (1.148514851485148 + x[15])) ^ 2.0 + (-x[16]) - x[14]    [dynamic]
// 15/15 (1): 0.0 = 2.0 * x[16] + 0.5 * (0.009900990099009901 * (1.158415841584158 + x[16])) ^ 2.0 + (-x[17]) - x[15]    [dynamic]
// 16/16 (1): 0.0 = 2.0 * x[17] + 0.5 * (0.009900990099009901 * (1.168316831683168 + x[17])) ^ 2.0 + (-x[18]) - x[16]    [dynamic]
// 17/17 (1): 0.0 = 2.0 * x[18] + 0.5 * (0.009900990099009901 * (1.178217821782178 + x[18])) ^ 2.0 + (-x[19]) - x[17]    [dynamic]
// 18/18 (1): 0.0 = 2.0 * x[19] + 0.5 * (0.009900990099009901 * (1.188118811881188 + x[19])) ^ 2.0 + (-x[20]) - x[18]    [dynamic]
// 19/19 (1): 0.0 = 2.0 * x[20] + 0.5 * (0.009900990099009901 * (1.198019801980198 + x[20])) ^ 2.0 + (-x[21]) - x[19]    [dynamic]
// 20/20 (1): 0.0 = 2.0 * x[21] + 0.5 * (0.009900990099009901 * (1.207920792079208 + x[21])) ^ 2.0 + (-x[22]) - x[20]    [dynamic]
// 21/21 (1): 0.0 = 2.0 * x[22] + 0.5 * (0.009900990099009901 * (1.217821782178218 + x[22])) ^ 2.0 + (-x[23]) - x[21]    [dynamic]
// 22/22 (1): 0.0 = 2.0 * x[23] + 0.5 * (0.009900990099009901 * (1.227722772277228 + x[23])) ^ 2.0 + (-x[24]) - x[22]    [dynamic]
// 23/23 (1): 0.0 = 2.0 * x[24] + 0.5 * (0.009900990099009901 * (1.237623762376238 + x[24])) ^ 2.0 + (-x[25]) - x[23]    [dynamic]
// 24/24 (1): 0.0 = 2.0 * x[25] + 0.5 * (0.009900990099009901 * (1.247524752475248 + x[25])) ^ 2.0 + (-x[26]) - x[24]    [dynamic]
// 25/25 (1): 0.0 = 2.0 * x[26] + 0.5 * (0.009900990099009901 * (1.257425742574257 + x[26])) ^ 2.0 + (-x[27]) - x[25]    [dynamic]
// 26/26 (1): 0.0 = 2.0 * x[27] + 0.5 * (0.009900990099009901 * (1.267326732673267 + x[27])) ^ 2.0 + (-x[28]) - x[26]    [dynamic]
// 27/27 (1): 0.0 = 2.0 * x[28] + 0.5 * (0.009900990099009901 * (1.277227722772277 + x[28])) ^ 2.0 + (-x[29]) - x[27]    [dynamic]
// 28/28 (1): 0.0 = 2.0 * x[29] + 0.5 * (0.009900990099009901 * (1.287128712871287 + x[29])) ^ 2.0 + (-x[30]) - x[28]    [dynamic]
// 29/29 (1): 0.0 = 2.0 * x[30] + 0.5 * (0.009900990099009901 * (1.297029702970297 + x[30])) ^ 2.0 + (-x[31]) - x[29]    [dynamic]
// 30/30 (1): 0.0 = 2.0 * x[31] + 0.5 * (0.009900990099009901 * (1.306930693069307 + x[31])) ^ 2.0 + (-x[32]) - x[30]    [dynamic]
// 31/31 (1): 0.0 = 2.0 * x[32] + 0.5 * (0.009900990099009901 * (1.316831683168317 + x[32])) ^ 2.0 + (-x[33]) - x[31]    [dynamic]
// 32/32 (1): 0.0 = 2.0 * x[33] + 0.5 * (0.009900990099009901 * (1.326732673267327 + x[33])) ^ 2.0 + (-x[34]) - x[32]    [dynamic]
// 33/33 (1): 0.0 = 2.0 * x[34] + 0.5 * (0.009900990099009901 * (1.336633663366337 + x[34])) ^ 2.0 + (-x[35]) - x[33]    [dynamic]
// 34/34 (1): 0.0 = 2.0 * x[35] + 0.5 * (0.009900990099009901 * (1.346534653465347 + x[35])) ^ 2.0 + (-x[36]) - x[34]    [dynamic]
// 35/35 (1): 0.0 = 2.0 * x[36] + 0.5 * (0.009900990099009901 * (1.356435643564356 + x[36])) ^ 2.0 + (-x[37]) - x[35]    [dynamic]
// 36/36 (1): 0.0 = 2.0 * x[37] + 0.5 * (0.009900990099009901 * (1.366336633663366 + x[37])) ^ 2.0 + (-x[38]) - x[36]    [dynamic]
// 37/37 (1): 0.0 = 2.0 * x[38] + 0.5 * (0.009900990099009901 * (1.376237623762376 + x[38])) ^ 2.0 + (-x[39]) - x[37]    [dynamic]
// 38/38 (1): 0.0 = 2.0 * x[39] + 0.5 * (0.009900990099009901 * (1.386138613861386 + x[39])) ^ 2.0 + (-x[40]) - x[38]    [dynamic]
// 39/39 (1): 0.0 = 2.0 * x[40] + 0.5 * (0.009900990099009901 * (1.396039603960396 + x[40])) ^ 2.0 + (-x[41]) - x[39]    [dynamic]
// 40/40 (1): 0.0 = 2.0 * x[41] + 0.5 * (0.009900990099009901 * (1.405940594059406 + x[41])) ^ 2.0 + (-x[42]) - x[40]    [dynamic]
// 41/41 (1): 0.0 = 2.0 * x[42] + 0.5 * (0.009900990099009901 * (1.415841584158416 + x[42])) ^ 2.0 + (-x[43]) - x[41]    [dynamic]
// 42/42 (1): 0.0 = 2.0 * x[43] + 0.5 * (0.009900990099009901 * (1.425742574257426 + x[43])) ^ 2.0 + (-x[44]) - x[42]    [dynamic]
// 43/43 (1): 0.0 = 2.0 * x[44] + 0.5 * (0.009900990099009901 * (1.435643564356436 + x[44])) ^ 2.0 + (-x[45]) - x[43]    [dynamic]
// 44/44 (1): 0.0 = 2.0 * x[45] + 0.5 * (0.009900990099009901 * (1.445544554455445 + x[45])) ^ 2.0 + (-x[46]) - x[44]    [dynamic]
// 45/45 (1): 0.0 = 2.0 * x[46] + 0.5 * (0.009900990099009901 * (1.455445544554455 + x[46])) ^ 2.0 + (-x[47]) - x[45]    [dynamic]
// 46/46 (1): 0.0 = 2.0 * x[47] + 0.5 * (0.009900990099009901 * (1.465346534653465 + x[47])) ^ 2.0 + (-x[48]) - x[46]    [dynamic]
// 47/47 (1): 0.0 = 2.0 * x[48] + 0.5 * (0.009900990099009901 * (1.475247524752475 + x[48])) ^ 2.0 + (-x[49]) - x[47]    [dynamic]
// 48/48 (1): 0.0 = 2.0 * x[49] + 0.5 * (0.009900990099009901 * (1.485148514851485 + x[49])) ^ 2.0 + (-x[50]) - x[48]    [dynamic]
// 49/49 (1): 0.0 = 2.0 * x[50] + 0.5 * (0.009900990099009901 * (1.495049504950495 + x[50])) ^ 2.0 + (-x[51]) - x[49]    [dynamic]
// 50/50 (1): 0.0 = 2.0 * x[51] + 0.5 * (0.009900990099009901 * (1.504950495049505 + x[51])) ^ 2.0 + (-x[52]) - x[50]    [dynamic]
// 51/51 (1): 0.0 = 2.0 * x[52] + 0.5 * (0.009900990099009901 * (1.514851485148515 + x[52])) ^ 2.0 + (-x[53]) - x[51]    [dynamic]
// 52/52 (1): 0.0 = 2.0 * x[53] + 0.5 * (0.009900990099009901 * (1.524752475247525 + x[53])) ^ 2.0 + (-x[54]) - x[52]    [dynamic]
// 53/53 (1): 0.0 = 2.0 * x[54] + 0.5 * (0.009900990099009901 * (1.534653465346535 + x[54])) ^ 2.0 + (-x[55]) - x[53]    [dynamic]
// 54/54 (1): 0.0 = 2.0 * x[55] + 0.5 * (0.009900990099009901 * (1.544554455445545 + x[55])) ^ 2.0 + (-x[56]) - x[54]    [dynamic]
// 55/55 (1): 0.0 = 2.0 * x[56] + 0.5 * (0.009900990099009901 * (1.554455445544555 + x[56])) ^ 2.0 + (-x[57]) - x[55]    [dynamic]
// 56/56 (1): 0.0 = 2.0 * x[57] + 0.5 * (0.009900990099009901 * (1.564356435643564 + x[57])) ^ 2.0 + (-x[58]) - x[56]    [dynamic]
// 57/57 (1): 0.0 = 2.0 * x[58] + 0.5 * (0.009900990099009901 * (1.574257425742574 + x[58])) ^ 2.0 + (-x[59]) - x[57]    [dynamic]
// 58/58 (1): 0.0 = 2.0 * x[59] + 0.5 * (0.009900990099009901 * (1.584158415841584 + x[59])) ^ 2.0 + (-x[60]) - x[58]    [dynamic]
// 59/59 (1): 0.0 = 2.0 * x[60] + 0.5 * (0.009900990099009901 * (1.594059405940594 + x[60])) ^ 2.0 + (-x[61]) - x[59]    [dynamic]
// 60/60 (1): 0.0 = 2.0 * x[61] + 0.5 * (0.009900990099009901 * (1.603960396039604 + x[61])) ^ 2.0 + (-x[62]) - x[60]    [dynamic]
// 61/61 (1): 0.0 = 2.0 * x[62] + 0.5 * (0.009900990099009901 * (1.613861386138614 + x[62])) ^ 2.0 + (-x[63]) - x[61]    [dynamic]
// 62/62 (1): 0.0 = 2.0 * x[63] + 0.5 * (0.009900990099009901 * (1.623762376237624 + x[63])) ^ 2.0 + (-x[64]) - x[62]    [dynamic]
// 63/63 (1): 0.0 = 2.0 * x[64] + 0.5 * (0.009900990099009901 * (1.633663366336634 + x[64])) ^ 2.0 + (-x[65]) - x[63]    [dynamic]
// 64/64 (1): 0.0 = 2.0 * x[65] + 0.5 * (0.009900990099009901 * (1.643564356435644 + x[65])) ^ 2.0 + (-x[66]) - x[64]    [dynamic]
// 65/65 (1): 0.0 = 2.0 * x[66] + 0.5 * (0.009900990099009901 * (1.653465346534654 + x[66])) ^ 2.0 + (-x[67]) - x[65]    [dynamic]
// 66/66 (1): 0.0 = 2.0 * x[67] + 0.5 * (0.009900990099009901 * (1.663366336633664 + x[67])) ^ 2.0 + (-x[68]) - x[66]    [dynamic]
// 67/67 (1): 0.0 = 2.0 * x[68] + 0.5 * (0.009900990099009901 * (1.673267326732673 + x[68])) ^ 2.0 + (-x[69]) - x[67]    [dynamic]
// 68/68 (1): 0.0 = 2.0 * x[69] + 0.5 * (0.009900990099009901 * (1.683168316831683 + x[69])) ^ 2.0 + (-x[70]) - x[68]    [dynamic]
// 69/69 (1): 0.0 = 2.0 * x[70] + 0.5 * (0.009900990099009901 * (1.693069306930693 + x[70])) ^ 2.0 + (-x[71]) - x[69]    [dynamic]
// 70/70 (1): 0.0 = 2.0 * x[71] + 0.5 * (0.009900990099009901 * (1.702970297029703 + x[71])) ^ 2.0 + (-x[72]) - x[70]    [dynamic]
// 71/71 (1): 0.0 = 2.0 * x[72] + 0.5 * (0.009900990099009901 * (1.712871287128713 + x[72])) ^ 2.0 + (-x[73]) - x[71]    [dynamic]
// 72/72 (1): 0.0 = 2.0 * x[73] + 0.5 * (0.009900990099009901 * (1.722772277227723 + x[73])) ^ 2.0 + (-x[74]) - x[72]    [dynamic]
// 73/73 (1): 0.0 = 2.0 * x[74] + 0.5 * (0.009900990099009901 * (1.732673267326733 + x[74])) ^ 2.0 + (-x[75]) - x[73]    [dynamic]
// 74/74 (1): 0.0 = 2.0 * x[75] + 0.5 * (0.009900990099009901 * (1.742574257425743 + x[75])) ^ 2.0 + (-x[76]) - x[74]    [dynamic]
// 75/75 (1): 0.0 = 2.0 * x[76] + 0.5 * (0.009900990099009901 * (1.752475247524752 + x[76])) ^ 2.0 + (-x[77]) - x[75]    [dynamic]
// 76/76 (1): 0.0 = 2.0 * x[77] + 0.5 * (0.009900990099009901 * (1.762376237623762 + x[77])) ^ 2.0 + (-x[78]) - x[76]    [dynamic]
// 77/77 (1): 0.0 = 2.0 * x[78] + 0.5 * (0.009900990099009901 * (1.772277227722772 + x[78])) ^ 2.0 + (-x[79]) - x[77]    [dynamic]
// 78/78 (1): 0.0 = 2.0 * x[79] + 0.5 * (0.009900990099009901 * (1.782178217821782 + x[79])) ^ 2.0 + (-x[80]) - x[78]    [dynamic]
// 79/79 (1): 0.0 = 2.0 * x[80] + 0.5 * (0.009900990099009901 * (1.792079207920792 + x[80])) ^ 2.0 + (-x[81]) - x[79]    [dynamic]
// 80/80 (1): 0.0 = 2.0 * x[81] + 0.5 * (0.009900990099009901 * (1.801980198019802 + x[81])) ^ 2.0 + (-x[82]) - x[80]    [dynamic]
// 81/81 (1): 0.0 = 2.0 * x[82] + 0.5 * (0.009900990099009901 * (1.811881188118812 + x[82])) ^ 2.0 + (-x[83]) - x[81]    [dynamic]
// 82/82 (1): 0.0 = 2.0 * x[83] + 0.5 * (0.009900990099009901 * (1.821782178217822 + x[83])) ^ 2.0 + (-x[84]) - x[82]    [dynamic]
// 83/83 (1): 0.0 = 2.0 * x[84] + 0.5 * (0.009900990099009901 * (1.831683168316832 + x[84])) ^ 2.0 + (-x[85]) - x[83]    [dynamic]
// 84/84 (1): 0.0 = 2.0 * x[85] + 0.5 * (0.009900990099009901 * (1.841584158415841 + x[85])) ^ 2.0 + (-x[86]) - x[84]    [dynamic]
// 85/85 (1): 0.0 = 2.0 * x[86] + 0.5 * (0.009900990099009901 * (1.851485148514851 + x[86])) ^ 2.0 + (-x[87]) - x[85]    [dynamic]
// 86/86 (1): 0.0 = 2.0 * x[87] + 0.5 * (0.009900990099009901 * (1.861386138613861 + x[87])) ^ 2.0 + (-x[88]) - x[86]    [dynamic]
// 87/87 (1): 0.0 = 2.0 * x[88] + 0.5 * (0.009900990099009901 * (1.871287128712871 + x[88])) ^ 2.0 + (-x[89]) - x[87]    [dynamic]
// 88/88 (1): 0.0 = 2.0 * x[89] + 0.5 * (0.009900990099009901 * (1.881188118811881 + x[89])) ^ 2.0 + (-x[90]) - x[88]    [dynamic]
// 89/89 (1): 0.0 = 2.0 * x[90] + 0.5 * (0.009900990099009901 * (1.891089108910891 + x[90])) ^ 2.0 + (-x[91]) - x[89]    [dynamic]
// 90/90 (1): 0.0 = 2.0 * x[91] + 0.5 * (0.009900990099009901 * (1.900990099009901 + x[91])) ^ 2.0 + (-x[92]) - x[90]    [dynamic]
// 91/91 (1): 0.0 = 2.0 * x[92] + 0.5 * (0.009900990099009901 * (1.910891089108911 + x[92])) ^ 2.0 + (-x[93]) - x[91]    [dynamic]
// 92/92 (1): 0.0 = 2.0 * x[93] + 0.5 * (0.009900990099009901 * (1.920792079207921 + x[93])) ^ 2.0 + (-x[94]) - x[92]    [dynamic]
// 93/93 (1): 0.0 = 2.0 * x[94] + 0.5 * (0.009900990099009901 * (1.930693069306931 + x[94])) ^ 2.0 + (-x[95]) - x[93]    [dynamic]
// 94/94 (1): 0.0 = 2.0 * x[95] + 0.5 * (0.009900990099009901 * (1.940594059405941 + x[95])) ^ 2.0 + (-x[96]) - x[94]    [dynamic]
// 95/95 (1): 0.0 = 2.0 * x[96] + 0.5 * (0.009900990099009901 * (1.95049504950495 + x[96])) ^ 2.0 + (-x[97]) - x[95]    [dynamic]
// 96/96 (1): 0.0 = 2.0 * x[97] + 0.5 * (0.009900990099009901 * (1.96039603960396 + x[97])) ^ 2.0 + (-x[98]) - x[96]    [dynamic]
// 97/97 (1): 0.0 = 2.0 * x[98] + 0.5 * (0.009900990099009901 * (1.97029702970297 + x[98])) ^ 2.0 + (-x[99]) - x[97]    [dynamic]
// 98/98 (1): 0.0 = 2.0 * x[99] + 0.5 * (0.009900990099009901 * (1.98019801980198 + x[99])) ^ 2.0 - x[98]    [dynamic]
//
// Adjacency Matrix (row: equation)
// ========================================
// number of rows: 98
// 1: 3 2 1
// 2: 2 4 3
// 3: 3 5 4
// 4: 4 6 5
// 5: 5 7 6
// 6: 6 8 7
// 7: 7 9 8
// 8: 8 10 9
// 9: 9 11 10
// 10: 10 12 11
// 11: 11 13 12
// 12: 12 14 13
// 13: 13 15 14
// 14: 14 16 15
// 15: 15 17 16
// 16: 16 18 17
// 17: 17 19 18
// 18: 18 20 19
// 19: 19 21 20
// 20: 20 22 21
// 21: 21 23 22
// 22: 22 24 23
// 23: 23 25 24
// 24: 24 26 25
// 25: 25 27 26
// 26: 26 28 27
// 27: 27 29 28
// 28: 28 30 29
// 29: 29 31 30
// 30: 30 32 31
// 31: 31 33 32
// 32: 32 34 33
// 33: 33 35 34
// 34: 34 36 35
// 35: 35 37 36
// 36: 36 38 37
// 37: 37 39 38
// 38: 38 40 39
// 39: 39 41 40
// 40: 40 42 41
// 41: 41 43 42
// 42: 42 44 43
// 43: 43 45 44
// 44: 44 46 45
// 45: 45 47 46
// 46: 46 48 47
// 47: 47 49 48
// 48: 48 50 49
// 49: 49 51 50
// 50: 50 52 51
// 51: 51 53 52
// 52: 52 54 53
// 53: 53 55 54
// 54: 54 56 55
// 55: 55 57 56
// 56: 56 58 57
// 57: 57 59 58
// 58: 58 60 59
// 59: 59 61 60
// 60: 60 62 61
// 61: 61 63 62
// 62: 62 64 63
// 63: 63 65 64
// 64: 64 66 65
// 65: 65 67 66
// 66: 66 68 67
// 67: 67 69 68
// 68: 68 70 69
// 69: 69 71 70
// 70: 70 72 71
// 71: 71 73 72
// 72: 72 74 73
// 73: 73 75 74
// 74: 74 76 75
// 75: 75 77 76
// 76: 76 78 77
// 77: 77 79 78
// 78: 78 80 79
// 79: 79 81 80
// 80: 80 82 81
// 81: 81 83 82
// 82: 82 84 83
// 83: 83 85 84
// 84: 84 86 85
// 85: 85 87 86
// 86: 86 88 87
// 87: 87 89 88
// 88: 88 90 89
// 89: 89 91 90
// 90: 90 92 91
// 91: 91 93 92
// 92: 92 94 93
// 93: 93 95 94
// 94: 94 96 95
// 95: 95 97 96
// 96: 96 98 97
// 97: 97 99 98
// 98: 98 99
//
// Transposed Adjacency Matrix (row: variable)
// ========================================
// number of rows: 99
// 1: 1
// 2: 2 1
// 3: 3 2 1
// 4: 4 3 2
// 5: 5 4 3
// 6: 6 5 4
// 7: 7 6 5
// 8: 8 7 6
// 9: 9 8 7
// 10: 10 9 8
// 11: 11 10 9
// 12: 12 11 10
// 13: 13 12 11
// 14: 14 13 12
// 15: 15 14 13
// 16: 16 15 14
// 17: 17 16 15
// 18: 18 17 16
// 19: 19 18 17
// 20: 20 19 18
// 21: 21 20 19
// 22: 22 21 20
// 23: 23 22 21
// 24: 24 23 22
// 25: 25 24 23
// 26: 26 25 24
// 27: 27 26 25
// 28: 28 27 26
// 29: 29 28 27
// 30: 30 29 28
// 31: 31 30 29
// 32: 32 31 30
// 33: 33 32 31
// 34: 34 33 32
// 35: 35 34 33
// 36: 36 35 34
// 37: 37 36 35
// 38: 38 37 36
// 39: 39 38 37
// 40: 40 39 38
// 41: 41 40 39
// 42: 42 41 40
// 43: 43 42 41
// 44: 44 43 42
// 45: 45 44 43
// 46: 46 45 44
// 47: 47 46 45
// 48: 48 47 46
// 49: 49 48 47
// 50: 50 49 48
// 51: 51 50 49
// 52: 52 51 50
// 53: 53 52 51
// 54: 54 53 52
// 55: 55 54 53
// 56: 56 55 54
// 57: 57 56 55
// 58: 58 57 56
// 59: 59 58 57
// 60: 60 59 58
// 61: 61 60 59
// 62: 62 61 60
// 63: 63 62 61
// 64: 64 63 62
// 65: 65 64 63
// 66: 66 65 64
// 67: 67 66 65
// 68: 68 67 66
// 69: 69 68 67
// 70: 70 69 68
// 71: 71 70 69
// 72: 72 71 70
// 73: 73 72 71
// 74: 74 73 72
// 75: 75 74 73
// 76: 76 75 74
// 77: 77 76 75
// 78: 78 77 76
// 79: 79 78 77
// 80: 80 79 78
// 81: 81 80 79
// 82: 82 81 80
// 83: 83 82 81
// 84: 84 83 82
// 85: 85 84 83
// 86: 86 85 84
// 87: 87 86 85
// 88: 88 87 86
// 89: 89 88 87
// 90: 90 89 88
// 91: 91 90 89
// 92: 92 91 90
// 93: 93 92 91
// 94: 94 93 92
// 95: 95 94 93
// 96: 96 95 94
// 97: 97 96 95
// 98: 98 97 96
// 99: 98 97
// Matching
// ========================================
// 98 variables and equations
// var 1 is solved in eqn 1
// var 2 is solved in eqn 2
// var 3 is solved in eqn 3
// var 4 is solved in eqn 4
// var 5 is solved in eqn 5
// var 6 is solved in eqn 6
// var 7 is solved in eqn 7
// var 8 is solved in eqn 8
// var 9 is solved in eqn 9
// var 10 is solved in eqn 10
// var 11 is solved in eqn 11
// var 12 is solved in eqn 12
// var 13 is solved in eqn 13
// var 14 is solved in eqn 14
// var 15 is solved in eqn 15
// var 16 is solved in eqn 16
// var 17 is solved in eqn 17
// var 18 is solved in eqn 18
// var 19 is solved in eqn 19
// var 20 is solved in eqn 20
// var 21 is solved in eqn 21
// var 22 is solved in eqn 22
// var 23 is solved in eqn 23
// var 24 is solved in eqn 24
// var 25 is solved in eqn 25
// var 26 is solved in eqn 26
// var 27 is solved in eqn 27
// var 28 is solved in eqn 28
// var 29 is solved in eqn 29
// var 30 is solved in eqn 30
// var 31 is solved in eqn 31
// var 32 is solved in eqn 32
// var 33 is solved in eqn 33
// var 34 is solved in eqn 34
// var 35 is solved in eqn 35
// var 36 is solved in eqn 36
// var 37 is solved in eqn 37
// var 38 is solved in eqn 38
// var 39 is solved in eqn 39
// var 40 is solved in eqn 40
// var 41 is solved in eqn 41
// var 42 is solved in eqn 42
// var 43 is solved in eqn 43
// var 44 is solved in eqn 44
// var 45 is solved in eqn 45
// var 46 is solved in eqn 46
// var 47 is solved in eqn 47
// var 48 is solved in eqn 48
// var 49 is solved in eqn 49
// var 50 is solved in eqn 50
// var 51 is solved in eqn 51
// var 52 is solved in eqn 52
// var 53 is solved in eqn 53
// var 54 is solved in eqn 54
// var 55 is solved in eqn 55
// var 56 is solved in eqn 56
// var 57 is solved in eqn 57
// var 58 is solved in eqn 58
// var 59 is solved in eqn 59
// var 60 is solved in eqn 60
// var 61 is solved in eqn 61
// var 62 is solved in eqn 62
// var 63 is solved in eqn 63
// var 64 is solved in eqn 64
// var 65 is solved in eqn 65
// var 66 is solved in eqn 66
// var 67 is solved in eqn 67
// var 68 is solved in eqn 68
// var 69 is solved in eqn 69
// var 70 is solved in eqn 70
// var 71 is solved in eqn 71
// var 72 is solved in eqn 72
// var 73 is solved in eqn 73
// var 74 is solved in eqn 74
// var 75 is solved in eqn 75
// var 76 is solved in eqn 76
// var 77 is solved in eqn 77
// var 78 is solved in eqn 78
// var 79 is solved in eqn 79
// var 80 is solved in eqn 80
// var 81 is solved in eqn 81
// var 82 is solved in eqn 82
// var 83 is solved in eqn 83
// var 84 is solved in eqn 84
// var 85 is solved in eqn 85
// var 86 is solved in eqn 86
// var 87 is solved in eqn 87
// var 88 is solved in eqn 88
// var 89 is solved in eqn 89
// var 90 is solved in eqn 90
// var 91 is solved in eqn 91
// var 92 is solved in eqn 92
// var 93 is solved in eqn 93
// var 94 is solved in eqn 94
// var 95 is solved in eqn 95
// var 96 is solved in eqn 96
// var 97 is solved in eqn 97
// var 98 is solved in eqn 98
//
//
// StrongComponents
// ========================================
// {98:98}
// {97:97}
// {96:96}
// {95:95}
// {94:94}
// {93:93}
// {92:92}
// {91:91}
// {90:90}
// {89:89}
// {88:88}
// {87:87}
// {86:86}
// {85:85}
// {84:84}
// {83:83}
// {82:82}
// {81:81}
// {80:80}
// {79:79}
// {78:78}
// {77:77}
// {76:76}
// {75:75}
// {74:74}
// {73:73}
// {72:72}
// {71:71}
// {70:70}
// {69:69}
// {68:68}
// {67:67}
// {66:66}
// {65:65}
// {64:64}
// {63:63}
// {62:62}
// {61:61}
// {60:60}
// {59:59}
// {58:58}
// {57:57}
// {56:56}
// {55:55}
// {54:54}
// {53:53}
// {52:52}
// {51:51}
// {50:50}
// {49:49}
// {48:48}
// {47:47}
// {46:46}
// {45:45}
// {44:44}
// {43:43}
// {42:42}
// {41:41}
// {40:40}
// {39:39}
// {38:38}
// {37:37}
// {36:36}
// {35:35}
// {34:34}
// {33:33}
// {32:32}
// {31:31}
// {30:30}
// {29:29}
// {28:28}
// {27:27}
// {26:26}
// {25:25}
// {24:24}
// {23:23}
// {22:22}
// {21:21}
// {20:20}
// {19:19}
// {18:18}
// {17:17}
// {16:16}
// {15:15}
// {14:14}
// {13:13}
// {12:12}
// {11:11}
// {10:10}
// {9:9}
// {8:8}
// {7:7}
// {6:6}
// {5:5}
// {4:4}
// {3:3}
// {2:2}
// {1:1}
// nodesEqnsIndexs: 1 
//
// analytical Jacobians[SPARSE] -> build sparse graph: 0.0
// Print sparse pattern: 99
// Row[1] = {99}
// Row[2] = {99}
// Row[3] = {99}
// Row[4] = {99}
// Row[5] = {99}
// Row[6] = {99}
// Row[7] = {99}
// Row[8] = {99}
// Row[9] = {99}
// Row[10] = {99}
// Row[11] = {99}
// Row[12] = {99}
// Row[13] = {99}
// Row[14] = {99}
// Row[15] = {99}
// Row[16] = {99}
// Row[17] = {99}
// Row[18] = {99}
// Row[19] = {99}
// Row[20] = {99}
// Row[21] = {99}
// Row[22] = {99}
// Row[23] = {99}
// Row[24] = {99}
// Row[25] = {99}
// Row[26] = {99}
// Row[27] = {99}
// Row[28] = {99}
// Row[29] = {99}
// Row[30] = {99}
// Row[31] = {99}
// Row[32] = {99}
// Row[33] = {99}
// Row[34] = {99}
// Row[35] = {99}
// Row[36] = {99}
// Row[37] = {99}
// Row[38] = {99}
// Row[39] = {99}
// Row[40] = {99}
// Row[41] = {99}
// Row[42] = {99}
// Row[43] = {99}
// Row[44] = {99}
// Row[45] = {99}
// Row[46] = {99}
// Row[47] = {99}
// Row[48] = {99}
// Row[49] = {99}
// Row[50] = {99}
// Row[51] = {99}
// Row[52] = {99}
// Row[53] = {99}
// Row[54] = {99}
// Row[55] = {99}
// Row[56] = {99}
// Row[57] = {99}
// Row[58] = {99}
// Row[59] = {99}
// Row[60] = {99}
// Row[61] = {99}
// Row[62] = {99}
// Row[63] = {99}
// Row[64] = {99}
// Row[65] = {99}
// Row[66] = {99}
// Row[67] = {99}
// Row[68] = {99}
// Row[69] = {99}
// Row[70] = {99}
// Row[71] = {99}
// Row[72] = {99}
// Row[73] = {99}
// Row[74] = {99}
// Row[75] = {99}
// Row[76] = {99}
// Row[77] = {99}
// Row[78] = {99}
// Row[79] = {99}
// Row[80] = {99}
// Row[81] = {99}
// Row[82] = {99}
// Row[83] = {99}
// Row[84] = {99}
// Row[85] = {99}
// Row[86] = {99}
// Row[87] = {99}
// Row[88] = {99}
// Row[89] = {99}
// Row[90] = {99}
// Row[91] = {99}
// Row[92] = {99}
// Row[93] = {99}
// Row[94] = {99}
// Row[95] = {99}
// Row[96] = {99}
// Row[97] = {99}
// Row[98] = {99}
// Row[99] = {}
//
// analytical Jacobians[SPARSE] -> prepared arrayList for transpose list: 0.7908902093
// analytical Jacobians[SPARSE] -> build sparse graph.
// sparse graph: 
// Node : 1 Edges: 1 
// Node : 2 Edges: 
// Node : 3 Edges: 
// Node : 4 Edges: 
// Node : 5 Edges: 
// Node : 6 Edges: 
// Node : 7 Edges: 
// Node : 8 Edges: 
// Node : 9 Edges: 
// Node : 10 Edges: 
// Node : 11 Edges: 
// Node : 12 Edges: 
// Node : 13 Edges: 
// Node : 14 Edges: 
// Node : 15 Edges: 
// Node : 16 Edges: 
// Node : 17 Edges: 
// Node : 18 Edges: 
// Node : 19 Edges: 
// Node : 20 Edges: 
// Node : 21 Edges: 
// Node : 22 Edges: 
// Node : 23 Edges: 
// Node : 24 Edges: 
// Node : 25 Edges: 
// Node : 26 Edges: 
// Node : 27 Edges: 
// Node : 28 Edges: 
// Node : 29 Edges: 
// Node : 30 Edges: 
// Node : 31 Edges: 
// Node : 32 Edges: 
// Node : 33 Edges: 
// Node : 34 Edges: 
// Node : 35 Edges: 
// Node : 36 Edges: 
// Node : 37 Edges: 
// Node : 38 Edges: 
// Node : 39 Edges: 
// Node : 40 Edges: 
// Node : 41 Edges: 
// Node : 42 Edges: 
// Node : 43 Edges: 
// Node : 44 Edges: 
// Node : 45 Edges: 
// Node : 46 Edges: 
// Node : 47 Edges: 
// Node : 48 Edges: 
// Node : 49 Edges: 
// Node : 50 Edges: 
// Node : 51 Edges: 
// Node : 52 Edges: 
// Node : 53 Edges: 
// Node : 54 Edges: 
// Node : 55 Edges: 
// Node : 56 Edges: 
// Node : 57 Edges: 
// Node : 58 Edges: 
// Node : 59 Edges: 
// Node : 60 Edges: 
// Node : 61 Edges: 
// Node : 62 Edges: 
// Node : 63 Edges: 
// Node : 64 Edges: 
// Node : 65 Edges: 
// Node : 66 Edges: 
// Node : 67 Edges: 
// Node : 68 Edges: 
// Node : 69 Edges: 
// Node : 70 Edges: 
// Node : 71 Edges: 
// Node : 72 Edges: 
// Node : 73 Edges: 
// Node : 74 Edges: 
// Node : 75 Edges: 
// Node : 76 Edges: 
// Node : 77 Edges: 
// Node : 78 Edges: 
// Node : 79 Edges: 
// Node : 80 Edges: 
// Node : 81 Edges: 
// Node : 82 Edges: 
// Node : 83 Edges: 
// Node : 84 Edges: 
// Node : 85 Edges: 
// Node : 86 Edges: 
// Node : 87 Edges: 
// Node : 88 Edges: 
// Node : 89 Edges: 
// Node : 90 Edges: 
// Node : 91 Edges: 
// Node : 92 Edges: 
// Node : 93 Edges: 
// Node : 94 Edges: 
// Node : 95 Edges: 
// Node : 96 Edges: 
// Node : 97 Edges: 
// Node : 98 Edges: 
// transposed sparse graph: 
// Node : 1 Edges: 1 
// analytical Jacobians[SPARSE] -> builded graph for coloring.
// analytical Jacobians[SPARSE] -> ready! 0.7910122092999999
//  start getting sparsity pattern diff Vars : 1 diffed vars: 1
// 1: x[99]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 2: x[98]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 3: x[97]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 4: x[96]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 5: x[95]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 6: x[94]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 7: x[93]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 8: x[92]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 9: x[91]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 10: x[90]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 11: x[89]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 12: x[88]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 13: x[87]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 14: x[86]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 15: x[85]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 16: x[84]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 17: x[83]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 18: x[82]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 19: x[81]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 20: x[80]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 21: x[79]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 22: x[78]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 23: x[77]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 24: x[76]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 25: x[75]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 26: x[74]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 27: x[73]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 28: x[72]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 29: x[71]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 30: x[70]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 31: x[69]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 32: x[68]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 33: x[67]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 34: x[66]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 35: x[65]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 36: x[64]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 37: x[63]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 38: x[62]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 39: x[61]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 40: x[60]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 41: x[59]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 42: x[58]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 43: x[57]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 44: x[56]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 45: x[55]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 46: x[54]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 47: x[53]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 48: x[52]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 49: x[51]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 50: x[50]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 51: x[49]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 52: x[48]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 53: x[47]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 54: x[46]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 55: x[45]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 56: x[44]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 57: x[43]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 58: x[42]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 59: x[41]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 60: x[40]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 61: x[39]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 62: x[38]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 63: x[37]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 64: x[36]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 65: x[35]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 66: x[34]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 67: x[33]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 68: x[32]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 69: x[31]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 70: x[30]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 71: x[29]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 72: x[28]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 73: x[27]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 74: x[26]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 75: x[25]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 76: x[24]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 77: x[23]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 78: x[22]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 79: x[21]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 80: x[20]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 81: x[19]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 82: x[18]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 83: x[17]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 84: x[16]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 85: x[15]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 86: x[14]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 87: x[13]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 88: x[12]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 89: x[11]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 90: x[10]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 91: x[9]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 92: x[8]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 93: x[7]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 94: x[6]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 95: x[5]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 96: x[4]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 97: x[3]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 98: x[2]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 99: $dummy:STATE(1)(fixed = true )  type: Real []
// 100: $pDER.$dummy:JACOBIAN_DIFF_VAR(fixed = true )  type: Real []
// 1/1 (1): der($dummy) = 0.0    [unknown]
// 2/2 (1): 0.0 = 2.0 * x[99] + 0.5 * (0.009900990099009901 * (1.98019801980198 + x[99])) ^ 2.0 - x[98]    [dynamic]
// 3/3 (1): 0.0 = 2.0 * x[98] + 0.5 * (0.009900990099009901 * (1.97029702970297 + x[98])) ^ 2.0 + (-x[99]) - x[97]    [dynamic]
// 4/4 (1): 0.0 = 2.0 * x[97] + 0.5 * (0.009900990099009901 * (1.96039603960396 + x[97])) ^ 2.0 + (-x[98]) - x[96]    [dynamic]
// 5/5 (1): 0.0 = 2.0 * x[96] + 0.5 * (0.009900990099009901 * (1.95049504950495 + x[96])) ^ 2.0 + (-x[97]) - x[95]    [dynamic]
// 6/6 (1): 0.0 = 2.0 * x[95] + 0.5 * (0.009900990099009901 * (1.940594059405941 + x[95])) ^ 2.0 + (-x[96]) - x[94]    [dynamic]
// 7/7 (1): 0.0 = 2.0 * x[94] + 0.5 * (0.009900990099009901 * (1.930693069306931 + x[94])) ^ 2.0 + (-x[95]) - x[93]    [dynamic]
// 8/8 (1): 0.0 = 2.0 * x[93] + 0.5 * (0.009900990099009901 * (1.920792079207921 + x[93])) ^ 2.0 + (-x[94]) - x[92]    [dynamic]
// 9/9 (1): 0.0 = 2.0 * x[92] + 0.5 * (0.009900990099009901 * (1.910891089108911 + x[92])) ^ 2.0 + (-x[93]) - x[91]    [dynamic]
// 10/10 (1): 0.0 = 2.0 * x[91] + 0.5 * (0.009900990099009901 * (1.900990099009901 + x[91])) ^ 2.0 + (-x[92]) - x[90]    [dynamic]
// 11/11 (1): 0.0 = 2.0 * x[90] + 0.5 * (0.009900990099009901 * (1.891089108910891 + x[90])) ^ 2.0 + (-x[91]) - x[89]    [dynamic]
// 12/12 (1): 0.0 = 2.0 * x[89] + 0.5 * (0.009900990099009901 * (1.881188118811881 + x[89])) ^ 2.0 + (-x[90]) - x[88]    [dynamic]
// 13/13 (1): 0.0 = 2.0 * x[88] + 0.5 * (0.009900990099009901 * (1.871287128712871 + x[88])) ^ 2.0 + (-x[89]) - x[87]    [dynamic]
// 14/14 (1): 0.0 = 2.0 * x[87] + 0.5 * (0.009900990099009901 * (1.861386138613861 + x[87])) ^ 2.0 + (-x[88]) - x[86]    [dynamic]
// 15/15 (1): 0.0 = 2.0 * x[86] + 0.5 * (0.009900990099009901 * (1.851485148514851 + x[86])) ^ 2.0 + (-x[87]) - x[85]    [dynamic]
// 16/16 (1): 0.0 = 2.0 * x[85] + 0.5 * (0.009900990099009901 * (1.841584158415841 + x[85])) ^ 2.0 + (-x[86]) - x[84]    [dynamic]
// 17/17 (1): 0.0 = 2.0 * x[84] + 0.5 * (0.009900990099009901 * (1.831683168316832 + x[84])) ^ 2.0 + (-x[85]) - x[83]    [dynamic]
// 18/18 (1): 0.0 = 2.0 * x[83] + 0.5 * (0.009900990099009901 * (1.821782178217822 + x[83])) ^ 2.0 + (-x[84]) - x[82]    [dynamic]
// 19/19 (1): 0.0 = 2.0 * x[82] + 0.5 * (0.009900990099009901 * (1.811881188118812 + x[82])) ^ 2.0 + (-x[83]) - x[81]    [dynamic]
// 20/20 (1): 0.0 = 2.0 * x[81] + 0.5 * (0.009900990099009901 * (1.801980198019802 + x[81])) ^ 2.0 + (-x[82]) - x[80]    [dynamic]
// 21/21 (1): 0.0 = 2.0 * x[80] + 0.5 * (0.009900990099009901 * (1.792079207920792 + x[80])) ^ 2.0 + (-x[81]) - x[79]    [dynamic]
// 22/22 (1): 0.0 = 2.0 * x[79] + 0.5 * (0.009900990099009901 * (1.782178217821782 + x[79])) ^ 2.0 + (-x[80]) - x[78]    [dynamic]
// 23/23 (1): 0.0 = 2.0 * x[78] + 0.5 * (0.009900990099009901 * (1.772277227722772 + x[78])) ^ 2.0 + (-x[79]) - x[77]    [dynamic]
// 24/24 (1): 0.0 = 2.0 * x[77] + 0.5 * (0.009900990099009901 * (1.762376237623762 + x[77])) ^ 2.0 + (-x[78]) - x[76]    [dynamic]
// 25/25 (1): 0.0 = 2.0 * x[76] + 0.5 * (0.009900990099009901 * (1.752475247524752 + x[76])) ^ 2.0 + (-x[77]) - x[75]    [dynamic]
// 26/26 (1): 0.0 = 2.0 * x[75] + 0.5 * (0.009900990099009901 * (1.742574257425743 + x[75])) ^ 2.0 + (-x[76]) - x[74]    [dynamic]
// 27/27 (1): 0.0 = 2.0 * x[74] + 0.5 * (0.009900990099009901 * (1.732673267326733 + x[74])) ^ 2.0 + (-x[75]) - x[73]    [dynamic]
// 28/28 (1): 0.0 = 2.0 * x[73] + 0.5 * (0.009900990099009901 * (1.722772277227723 + x[73])) ^ 2.0 + (-x[74]) - x[72]    [dynamic]
// 29/29 (1): 0.0 = 2.0 * x[72] + 0.5 * (0.009900990099009901 * (1.712871287128713 + x[72])) ^ 2.0 + (-x[73]) - x[71]    [dynamic]
// 30/30 (1): 0.0 = 2.0 * x[71] + 0.5 * (0.009900990099009901 * (1.702970297029703 + x[71])) ^ 2.0 + (-x[72]) - x[70]    [dynamic]
// 31/31 (1): 0.0 = 2.0 * x[70] + 0.5 * (0.009900990099009901 * (1.693069306930693 + x[70])) ^ 2.0 + (-x[71]) - x[69]    [dynamic]
// 32/32 (1): 0.0 = 2.0 * x[69] + 0.5 * (0.009900990099009901 * (1.683168316831683 + x[69])) ^ 2.0 + (-x[70]) - x[68]    [dynamic]
// 33/33 (1): 0.0 = 2.0 * x[68] + 0.5 * (0.009900990099009901 * (1.673267326732673 + x[68])) ^ 2.0 + (-x[69]) - x[67]    [dynamic]
// 34/34 (1): 0.0 = 2.0 * x[67] + 0.5 * (0.009900990099009901 * (1.663366336633664 + x[67])) ^ 2.0 + (-x[68]) - x[66]    [dynamic]
// 35/35 (1): 0.0 = 2.0 * x[66] + 0.5 * (0.009900990099009901 * (1.653465346534654 + x[66])) ^ 2.0 + (-x[67]) - x[65]    [dynamic]
// 36/36 (1): 0.0 = 2.0 * x[65] + 0.5 * (0.009900990099009901 * (1.643564356435644 + x[65])) ^ 2.0 + (-x[66]) - x[64]    [dynamic]
// 37/37 (1): 0.0 = 2.0 * x[64] + 0.5 * (0.009900990099009901 * (1.633663366336634 + x[64])) ^ 2.0 + (-x[65]) - x[63]    [dynamic]
// 38/38 (1): 0.0 = 2.0 * x[63] + 0.5 * (0.009900990099009901 * (1.623762376237624 + x[63])) ^ 2.0 + (-x[64]) - x[62]    [dynamic]
// 39/39 (1): 0.0 = 2.0 * x[62] + 0.5 * (0.009900990099009901 * (1.613861386138614 + x[62])) ^ 2.0 + (-x[63]) - x[61]    [dynamic]
// 40/40 (1): 0.0 = 2.0 * x[61] + 0.5 * (0.009900990099009901 * (1.603960396039604 + x[61])) ^ 2.0 + (-x[62]) - x[60]    [dynamic]
// 41/41 (1): 0.0 = 2.0 * x[60] + 0.5 * (0.009900990099009901 * (1.594059405940594 + x[60])) ^ 2.0 + (-x[61]) - x[59]    [dynamic]
// 42/42 (1): 0.0 = 2.0 * x[59] + 0.5 * (0.009900990099009901 * (1.584158415841584 + x[59])) ^ 2.0 + (-x[60]) - x[58]    [dynamic]
// 43/43 (1): 0.0 = 2.0 * x[58] + 0.5 * (0.009900990099009901 * (1.574257425742574 + x[58])) ^ 2.0 + (-x[59]) - x[57]    [dynamic]
// 44/44 (1): 0.0 = 2.0 * x[57] + 0.5 * (0.009900990099009901 * (1.564356435643564 + x[57])) ^ 2.0 + (-x[58]) - x[56]    [dynamic]
// 45/45 (1): 0.0 = 2.0 * x[56] + 0.5 * (0.009900990099009901 * (1.554455445544555 + x[56])) ^ 2.0 + (-x[57]) - x[55]    [dynamic]
// 46/46 (1): 0.0 = 2.0 * x[55] + 0.5 * (0.009900990099009901 * (1.544554455445545 + x[55])) ^ 2.0 + (-x[56]) - x[54]    [dynamic]
// 47/47 (1): 0.0 = 2.0 * x[54] + 0.5 * (0.009900990099009901 * (1.534653465346535 + x[54])) ^ 2.0 + (-x[55]) - x[53]    [dynamic]
// 48/48 (1): 0.0 = 2.0 * x[53] + 0.5 * (0.009900990099009901 * (1.524752475247525 + x[53])) ^ 2.0 + (-x[54]) - x[52]    [dynamic]
// 49/49 (1): 0.0 = 2.0 * x[52] + 0.5 * (0.009900990099009901 * (1.514851485148515 + x[52])) ^ 2.0 + (-x[53]) - x[51]    [dynamic]
// 50/50 (1): 0.0 = 2.0 * x[51] + 0.5 * (0.009900990099009901 * (1.504950495049505 + x[51])) ^ 2.0 + (-x[52]) - x[50]    [dynamic]
// 51/51 (1): 0.0 = 2.0 * x[50] + 0.5 * (0.009900990099009901 * (1.495049504950495 + x[50])) ^ 2.0 + (-x[51]) - x[49]    [dynamic]
// 52/52 (1): 0.0 = 2.0 * x[49] + 0.5 * (0.009900990099009901 * (1.485148514851485 + x[49])) ^ 2.0 + (-x[50]) - x[48]    [dynamic]
// 53/53 (1): 0.0 = 2.0 * x[48] + 0.5 * (0.009900990099009901 * (1.475247524752475 + x[48])) ^ 2.0 + (-x[49]) - x[47]    [dynamic]
// 54/54 (1): 0.0 = 2.0 * x[47] + 0.5 * (0.009900990099009901 * (1.465346534653465 + x[47])) ^ 2.0 + (-x[48]) - x[46]    [dynamic]
// 55/55 (1): 0.0 = 2.0 * x[46] + 0.5 * (0.009900990099009901 * (1.455445544554455 + x[46])) ^ 2.0 + (-x[47]) - x[45]    [dynamic]
// 56/56 (1): 0.0 = 2.0 * x[45] + 0.5 * (0.009900990099009901 * (1.445544554455445 + x[45])) ^ 2.0 + (-x[46]) - x[44]    [dynamic]
// 57/57 (1): 0.0 = 2.0 * x[44] + 0.5 * (0.009900990099009901 * (1.435643564356436 + x[44])) ^ 2.0 + (-x[45]) - x[43]    [dynamic]
// 58/58 (1): 0.0 = 2.0 * x[43] + 0.5 * (0.009900990099009901 * (1.425742574257426 + x[43])) ^ 2.0 + (-x[44]) - x[42]    [dynamic]
// 59/59 (1): 0.0 = 2.0 * x[42] + 0.5 * (0.009900990099009901 * (1.415841584158416 + x[42])) ^ 2.0 + (-x[43]) - x[41]    [dynamic]
// 60/60 (1): 0.0 = 2.0 * x[41] + 0.5 * (0.009900990099009901 * (1.405940594059406 + x[41])) ^ 2.0 + (-x[42]) - x[40]    [dynamic]
// 61/61 (1): 0.0 = 2.0 * x[40] + 0.5 * (0.009900990099009901 * (1.396039603960396 + x[40])) ^ 2.0 + (-x[41]) - x[39]    [dynamic]
// 62/62 (1): 0.0 = 2.0 * x[39] + 0.5 * (0.009900990099009901 * (1.386138613861386 + x[39])) ^ 2.0 + (-x[40]) - x[38]    [dynamic]
// 63/63 (1): 0.0 = 2.0 * x[38] + 0.5 * (0.009900990099009901 * (1.376237623762376 + x[38])) ^ 2.0 + (-x[39]) - x[37]    [dynamic]
// 64/64 (1): 0.0 = 2.0 * x[37] + 0.5 * (0.009900990099009901 * (1.366336633663366 + x[37])) ^ 2.0 + (-x[38]) - x[36]    [dynamic]
// 65/65 (1): 0.0 = 2.0 * x[36] + 0.5 * (0.009900990099009901 * (1.356435643564356 + x[36])) ^ 2.0 + (-x[37]) - x[35]    [dynamic]
// 66/66 (1): 0.0 = 2.0 * x[35] + 0.5 * (0.009900990099009901 * (1.346534653465347 + x[35])) ^ 2.0 + (-x[36]) - x[34]    [dynamic]
// 67/67 (1): 0.0 = 2.0 * x[34] + 0.5 * (0.009900990099009901 * (1.336633663366337 + x[34])) ^ 2.0 + (-x[35]) - x[33]    [dynamic]
// 68/68 (1): 0.0 = 2.0 * x[33] + 0.5 * (0.009900990099009901 * (1.326732673267327 + x[33])) ^ 2.0 + (-x[34]) - x[32]    [dynamic]
// 69/69 (1): 0.0 = 2.0 * x[32] + 0.5 * (0.009900990099009901 * (1.316831683168317 + x[32])) ^ 2.0 + (-x[33]) - x[31]    [dynamic]
// 70/70 (1): 0.0 = 2.0 * x[31] + 0.5 * (0.009900990099009901 * (1.306930693069307 + x[31])) ^ 2.0 + (-x[32]) - x[30]    [dynamic]
// 71/71 (1): 0.0 = 2.0 * x[30] + 0.5 * (0.009900990099009901 * (1.297029702970297 + x[30])) ^ 2.0 + (-x[31]) - x[29]    [dynamic]
// 72/72 (1): 0.0 = 2.0 * x[29] + 0.5 * (0.009900990099009901 * (1.287128712871287 + x[29])) ^ 2.0 + (-x[30]) - x[28]    [dynamic]
// 73/73 (1): 0.0 = 2.0 * x[28] + 0.5 * (0.009900990099009901 * (1.277227722772277 + x[28])) ^ 2.0 + (-x[29]) - x[27]    [dynamic]
// 74/74 (1): 0.0 = 2.0 * x[27] + 0.5 * (0.009900990099009901 * (1.267326732673267 + x[27])) ^ 2.0 + (-x[28]) - x[26]    [dynamic]
// 75/75 (1): 0.0 = 2.0 * x[26] + 0.5 * (0.009900990099009901 * (1.257425742574257 + x[26])) ^ 2.0 + (-x[27]) - x[25]    [dynamic]
// 76/76 (1): 0.0 = 2.0 * x[25] + 0.5 * (0.009900990099009901 * (1.247524752475248 + x[25])) ^ 2.0 + (-x[26]) - x[24]    [dynamic]
// 77/77 (1): 0.0 = 2.0 * x[24] + 0.5 * (0.009900990099009901 * (1.237623762376238 + x[24])) ^ 2.0 + (-x[25]) - x[23]    [dynamic]
// 78/78 (1): 0.0 = 2.0 * x[23] + 0.5 * (0.009900990099009901 * (1.227722772277228 + x[23])) ^ 2.0 + (-x[24]) - x[22]    [dynamic]
// 79/79 (1): 0.0 = 2.0 * x[22] + 0.5 * (0.009900990099009901 * (1.217821782178218 + x[22])) ^ 2.0 + (-x[23]) - x[21]    [dynamic]
// 80/80 (1): 0.0 = 2.0 * x[21] + 0.5 * (0.009900990099009901 * (1.207920792079208 + x[21])) ^ 2.0 + (-x[22]) - x[20]    [dynamic]
// 81/81 (1): 0.0 = 2.0 * x[20] + 0.5 * (0.009900990099009901 * (1.198019801980198 + x[20])) ^ 2.0 + (-x[21]) - x[19]    [dynamic]
// 82/82 (1): 0.0 = 2.0 * x[19] + 0.5 * (0.009900990099009901 * (1.188118811881188 + x[19])) ^ 2.0 + (-x[20]) - x[18]    [dynamic]
// 83/83 (1): 0.0 = 2.0 * x[18] + 0.5 * (0.009900990099009901 * (1.178217821782178 + x[18])) ^ 2.0 + (-x[19]) - x[17]    [dynamic]
// 84/84 (1): 0.0 = 2.0 * x[17] + 0.5 * (0.009900990099009901 * (1.168316831683168 + x[17])) ^ 2.0 + (-x[18]) - x[16]    [dynamic]
// 85/85 (1): 0.0 = 2.0 * x[16] + 0.5 * (0.009900990099009901 * (1.158415841584158 + x[16])) ^ 2.0 + (-x[17]) - x[15]    [dynamic]
// 86/86 (1): 0.0 = 2.0 * x[15] + 0.5 * (0.009900990099009901 * (1.148514851485148 + x[15])) ^ 2.0 + (-x[16]) - x[14]    [dynamic]
// 87/87 (1): 0.0 = 2.0 * x[14] + 0.5 * (0.009900990099009901 * (1.138613861386139 + x[14])) ^ 2.0 + (-x[15]) - x[13]    [dynamic]
// 88/88 (1): 0.0 = 2.0 * x[13] + 0.5 * (0.009900990099009901 * (1.128712871287129 + x[13])) ^ 2.0 + (-x[14]) - x[12]    [dynamic]
// 89/89 (1): 0.0 = 2.0 * x[12] + 0.5 * (0.009900990099009901 * (1.118811881188119 + x[12])) ^ 2.0 + (-x[13]) - x[11]    [dynamic]
// 90/90 (1): 0.0 = 2.0 * x[11] + 0.5 * (0.009900990099009901 * (1.108910891089109 + x[11])) ^ 2.0 + (-x[12]) - x[10]    [dynamic]
// 91/91 (1): 0.0 = 2.0 * x[10] + 0.5 * (0.009900990099009901 * (1.099009900990099 + x[10])) ^ 2.0 + (-x[11]) - x[9]    [dynamic]
// 92/92 (1): 0.0 = 2.0 * x[9] + 0.5 * (0.009900990099009901 * (1.089108910891089 + x[9])) ^ 2.0 + (-x[10]) - x[8]    [dynamic]
// 93/93 (1): 0.0 = 2.0 * x[8] + 0.5 * (0.009900990099009901 * (1.079207920792079 + x[8])) ^ 2.0 + (-x[9]) - x[7]    [dynamic]
// 94/94 (1): 0.0 = 2.0 * x[7] + 0.5 * (0.009900990099009901 * (1.069306930693069 + x[7])) ^ 2.0 + (-x[8]) - x[6]    [dynamic]
// 95/95 (1): 0.0 = 2.0 * x[6] + 0.5 * (0.009900990099009901 * (1.059405940594059 + x[6])) ^ 2.0 + (-x[7]) - x[5]    [dynamic]
// 96/96 (1): 0.0 = 2.0 * x[5] + 0.5 * (0.009900990099009901 * (1.04950495049505 + x[5])) ^ 2.0 + (-x[6]) - x[4]    [dynamic]
// 97/97 (1): 0.0 = 2.0 * x[4] + 0.5 * (0.009900990099009901 * (1.03960396039604 + x[4])) ^ 2.0 + (-x[5]) - x[3]    [dynamic]
// 98/98 (1): 0.0 = 2.0 * x[3] + 0.5 * (0.009900990099009901 * (1.02970297029703 + x[3])) ^ 2.0 + (-x[4]) - x[2]    [dynamic]
// 99/99 (1): 0.0 = 2.0 * x[2] + 0.5 * (0.009900990099009901 * (1.01980198019802 + x[2])) ^ 2.0 - x[3]    [dynamic]
//
// Adjacency Matrix (row: equation)
// ========================================
// number of rows: 99
// 1: 99
// 2: 2 1
// 3: 3 1 2
// 4: 4 2 3
// 5: 5 3 4
// 6: 6 4 5
// 7: 7 5 6
// 8: 8 6 7
// 9: 9 7 8
// 10: 10 8 9
// 11: 11 9 10
// 12: 12 10 11
// 13: 13 11 12
// 14: 14 12 13
// 15: 15 13 14
// 16: 16 14 15
// 17: 17 15 16
// 18: 18 16 17
// 19: 19 17 18
// 20: 20 18 19
// 21: 21 19 20
// 22: 22 20 21
// 23: 23 21 22
// 24: 24 22 23
// 25: 25 23 24
// 26: 26 24 25
// 27: 27 25 26
// 28: 28 26 27
// 29: 29 27 28
// 30: 30 28 29
// 31: 31 29 30
// 32: 32 30 31
// 33: 33 31 32
// 34: 34 32 33
// 35: 35 33 34
// 36: 36 34 35
// 37: 37 35 36
// 38: 38 36 37
// 39: 39 37 38
// 40: 40 38 39
// 41: 41 39 40
// 42: 42 40 41
// 43: 43 41 42
// 44: 44 42 43
// 45: 45 43 44
// 46: 46 44 45
// 47: 47 45 46
// 48: 48 46 47
// 49: 49 47 48
// 50: 50 48 49
// 51: 51 49 50
// 52: 52 50 51
// 53: 53 51 52
// 54: 54 52 53
// 55: 55 53 54
// 56: 56 54 55
// 57: 57 55 56
// 58: 58 56 57
// 59: 59 57 58
// 60: 60 58 59
// 61: 61 59 60
// 62: 62 60 61
// 63: 63 61 62
// 64: 64 62 63
// 65: 65 63 64
// 66: 66 64 65
// 67: 67 65 66
// 68: 68 66 67
// 69: 69 67 68
// 70: 70 68 69
// 71: 71 69 70
// 72: 72 70 71
// 73: 73 71 72
// 74: 74 72 73
// 75: 75 73 74
// 76: 76 74 75
// 77: 77 75 76
// 78: 78 76 77
// 79: 79 77 78
// 80: 80 78 79
// 81: 81 79 80
// 82: 82 80 81
// 83: 83 81 82
// 84: 84 82 83
// 85: 85 83 84
// 86: 86 84 85
// 87: 87 85 86
// 88: 88 86 87
// 89: 89 87 88
// 90: 90 88 89
// 91: 91 89 90
// 92: 92 90 91
// 93: 93 91 92
// 94: 94 92 93
// 95: 95 93 94
// 96: 96 94 95
// 97: 97 95 96
// 98: 98 96 97
// 99: 97 98
//
// Transposed Adjacency Matrix (row: variable)
// ========================================
// number of rows: 100
// 1: 3 2
// 2: 4 3 2
// 3: 5 4 3
// 4: 6 5 4
// 5: 7 6 5
// 6: 8 7 6
// 7: 9 8 7
// 8: 10 9 8
// 9: 11 10 9
// 10: 12 11 10
// 11: 13 12 11
// 12: 14 13 12
// 13: 15 14 13
// 14: 16 15 14
// 15: 17 16 15
// 16: 18 17 16
// 17: 19 18 17
// 18: 20 19 18
// 19: 21 20 19
// 20: 22 21 20
// 21: 23 22 21
// 22: 24 23 22
// 23: 25 24 23
// 24: 26 25 24
// 25: 27 26 25
// 26: 28 27 26
// 27: 29 28 27
// 28: 30 29 28
// 29: 31 30 29
// 30: 32 31 30
// 31: 33 32 31
// 32: 34 33 32
// 33: 35 34 33
// 34: 36 35 34
// 35: 37 36 35
// 36: 38 37 36
// 37: 39 38 37
// 38: 40 39 38
// 39: 41 40 39
// 40: 42 41 40
// 41: 43 42 41
// 42: 44 43 42
// 43: 45 44 43
// 44: 46 45 44
// 45: 47 46 45
// 46: 48 47 46
// 47: 49 48 47
// 48: 50 49 48
// 49: 51 50 49
// 50: 52 51 50
// 51: 53 52 51
// 52: 54 53 52
// 53: 55 54 53
// 54: 56 55 54
// 55: 57 56 55
// 56: 58 57 56
// 57: 59 58 57
// 58: 60 59 58
// 59: 61 60 59
// 60: 62 61 60
// 61: 63 62 61
// 62: 64 63 62
// 63: 65 64 63
// 64: 66 65 64
// 65: 67 66 65
// 66: 68 67 66
// 67: 69 68 67
// 68: 70 69 68
// 69: 71 70 69
// 70: 72 71 70
// 71: 73 72 71
// 72: 74 73 72
// 73: 75 74 73
// 74: 76 75 74
// 75: 77 76 75
// 76: 78 77 76
// 77: 79 78 77
// 78: 80 79 78
// 79: 81 80 79
// 80: 82 81 80
// 81: 83 82 81
// 82: 84 83 82
// 83: 85 84 83
// 84: 86 85 84
// 85: 87 86 85
// 86: 88 87 86
// 87: 89 88 87
// 88: 90 89 88
// 89: 91 90 89
// 90: 92 91 90
// 91: 93 92 91
// 92: 94 93 92
// 93: 95 94 93
// 94: 96 95 94
// 95: 97 96 95
// 96: 98 97 96
// 97: 99 98 97
// 98: 99 98
// 99: 1
// 100:
// Matching
// ========================================
// 99 variables and equations
// var 1 is solved in eqn 2
// var 2 is solved in eqn 3
// var 3 is solved in eqn 4
// var 4 is solved in eqn 6
// var 5 is solved in eqn 5
// var 6 is solved in eqn 7
// var 7 is solved in eqn 9
// var 8 is solved in eqn 8
// var 9 is solved in eqn 10
// var 10 is solved in eqn 12
// var 11 is solved in eqn 11
// var 12 is solved in eqn 14
// var 13 is solved in eqn 13
// var 14 is solved in eqn 15
// var 15 is solved in eqn 16
// var 16 is solved in eqn 17
// var 17 is solved in eqn 18
// var 18 is solved in eqn 19
// var 19 is solved in eqn 20
// var 20 is solved in eqn 21
// var 21 is solved in eqn 22
// var 22 is solved in eqn 23
// var 23 is solved in eqn 24
// var 24 is solved in eqn 25
// var 25 is solved in eqn 26
// var 26 is solved in eqn 27
// var 27 is solved in eqn 28
// var 28 is solved in eqn 29
// var 29 is solved in eqn 30
// var 30 is solved in eqn 31
// var 31 is solved in eqn 32
// var 32 is solved in eqn 34
// var 33 is solved in eqn 33
// var 34 is solved in eqn 36
// var 35 is solved in eqn 35
// var 36 is solved in eqn 38
// var 37 is solved in eqn 37
// var 38 is solved in eqn 40
// var 39 is solved in eqn 39
// var 40 is solved in eqn 42
// var 41 is solved in eqn 41
// var 42 is solved in eqn 44
// var 43 is solved in eqn 43
// var 44 is solved in eqn 46
// var 45 is solved in eqn 45
// var 46 is solved in eqn 48
// var 47 is solved in eqn 47
// var 48 is solved in eqn 50
// var 49 is solved in eqn 49
// var 50 is solved in eqn 51
// var 51 is solved in eqn 52
// var 52 is solved in eqn 54
// var 53 is solved in eqn 53
// var 54 is solved in eqn 56
// var 55 is solved in eqn 55
// var 56 is solved in eqn 58
// var 57 is solved in eqn 57
// var 58 is solved in eqn 60
// var 59 is solved in eqn 59
// var 60 is solved in eqn 61
// var 61 is solved in eqn 62
// var 62 is solved in eqn 64
// var 63 is solved in eqn 63
// var 64 is solved in eqn 66
// var 65 is solved in eqn 65
// var 66 is solved in eqn 68
// var 67 is solved in eqn 67
// var 68 is solved in eqn 69
// var 69 is solved in eqn 71
// var 70 is solved in eqn 70
// var 71 is solved in eqn 73
// var 72 is solved in eqn 72
// var 73 is solved in eqn 74
// var 74 is solved in eqn 75
// var 75 is solved in eqn 76
// var 76 is solved in eqn 78
// var 77 is solved in eqn 77
// var 78 is solved in eqn 80
// var 79 is solved in eqn 79
// var 80 is solved in eqn 81
// var 81 is solved in eqn 82
// var 82 is solved in eqn 83
// var 83 is solved in eqn 84
// var 84 is solved in eqn 86
// var 85 is solved in eqn 85
// var 86 is solved in eqn 88
// var 87 is solved in eqn 87
// var 88 is solved in eqn 89
// var 89 is solved in eqn 90
// var 90 is solved in eqn 92
// var 91 is solved in eqn 91
// var 92 is solved in eqn 93
// var 93 is solved in eqn 95
// var 94 is solved in eqn 94
// var 95 is solved in eqn 96
// var 96 is solved in eqn 98
// var 97 is solved in eqn 97
// var 98 is solved in eqn 99
// var 99 is solved in eqn 1
//
//
// StrongComponents
// ========================================
// {2, 3, 4, 5, 7, 8, 10, 11, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 52, 53, 55, 57, 59, 61, 62, 63, 65, 67, 69, 70, 72, 74, 75, 76, 77, 79, 81, 82, 83, 84, 85, 87, 89, 90, 91, 93, 94, 96, 97, 99, 98, 95, 92, 88, 86, 80, 78, 73, 71, 68, 66, 64, 60, 58, 56, 54, 50, 48, 46, 44, 42, 40, 38, 36, 34, 14, 12, 9, 6:4, 7, 10, 12, 32, 34, 36, 38, 40, 42, 44, 46, 48, 52, 54, 56, 58, 62, 64, 66, 69, 71, 76, 78, 84, 86, 90, 93, 96, 98, 97, 95, 94, 92, 91, 89, 88, 87, 85, 83, 82, 81, 80, 79, 77, 75, 74, 73, 72, 70, 68, 67, 65, 63, 61, 60, 59, 57, 55, 53, 51, 50, 49, 47, 45, 43, 41, 39, 37, 35, 33, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 11, 9, 8, 6, 5, 3, 2, 1} Size: 98 Jacobian Nonlinear
// {1:99}
// nodesEqnsIndexs: 1 
//
// analytical Jacobians[SPARSE] -> build sparse graph: 0.8492152092999999
// Print sparse pattern: 100
// Row[1] = {}
// Row[2] = {}
// Row[3] = {}
// Row[4] = {}
// Row[5] = {}
// Row[6] = {}
// Row[7] = {}
// Row[8] = {}
// Row[9] = {}
// Row[10] = {}
// Row[11] = {}
// Row[12] = {}
// Row[13] = {}
// Row[14] = {}
// Row[15] = {}
// Row[16] = {}
// Row[17] = {}
// Row[18] = {}
// Row[19] = {}
// Row[20] = {}
// Row[21] = {}
// Row[22] = {}
// Row[23] = {}
// Row[24] = {}
// Row[25] = {}
// Row[26] = {}
// Row[27] = {}
// Row[28] = {}
// Row[29] = {}
// Row[30] = {}
// Row[31] = {}
// Row[32] = {}
// Row[33] = {}
// Row[34] = {}
// Row[35] = {}
// Row[36] = {}
// Row[37] = {}
// Row[38] = {}
// Row[39] = {}
// Row[40] = {}
// Row[41] = {}
// Row[42] = {}
// Row[43] = {}
// Row[44] = {}
// Row[45] = {}
// Row[46] = {}
// Row[47] = {}
// Row[48] = {}
// Row[49] = {}
// Row[50] = {}
// Row[51] = {}
// Row[52] = {}
// Row[53] = {}
// Row[54] = {}
// Row[55] = {}
// Row[56] = {}
// Row[57] = {}
// Row[58] = {}
// Row[59] = {}
// Row[60] = {}
// Row[61] = {}
// Row[62] = {}
// Row[63] = {}
// Row[64] = {}
// Row[65] = {}
// Row[66] = {}
// Row[67] = {}
// Row[68] = {}
// Row[69] = {}
// Row[70] = {}
// Row[71] = {}
// Row[72] = {}
// Row[73] = {}
// Row[74] = {}
// Row[75] = {}
// Row[76] = {}
// Row[77] = {}
// Row[78] = {}
// Row[79] = {}
// Row[80] = {}
// Row[81] = {}
// Row[82] = {}
// Row[83] = {}
// Row[84] = {}
// Row[85] = {}
// Row[86] = {}
// Row[87] = {}
// Row[88] = {}
// Row[89] = {}
// Row[90] = {}
// Row[91] = {}
// Row[92] = {}
// Row[93] = {}
// Row[94] = {}
// Row[95] = {}
// Row[96] = {}
// Row[97] = {}
// Row[98] = {}
// Row[99] = {}
// Row[100] = {}
//
// analytical Jacobians[SPARSE] -> prepared arrayList for transpose list: 0.8497322093
// analytical Jacobians[SPARSE] -> build sparse graph.
// sparse graph: 
// Node : 1 Edges: 
// Node : 2 Edges: 
// Node : 3 Edges: 
// Node : 4 Edges: 
// Node : 5 Edges: 
// Node : 6 Edges: 
// Node : 7 Edges: 
// Node : 8 Edges: 
// Node : 9 Edges: 
// Node : 10 Edges: 
// Node : 11 Edges: 
// Node : 12 Edges: 
// Node : 13 Edges: 
// Node : 14 Edges: 
// Node : 15 Edges: 
// Node : 16 Edges: 
// Node : 17 Edges: 
// Node : 18 Edges: 
// Node : 19 Edges: 
// Node : 20 Edges: 
// Node : 21 Edges: 
// Node : 22 Edges: 
// Node : 23 Edges: 
// Node : 24 Edges: 
// Node : 25 Edges: 
// Node : 26 Edges: 
// Node : 27 Edges: 
// Node : 28 Edges: 
// Node : 29 Edges: 
// Node : 30 Edges: 
// Node : 31 Edges: 
// Node : 32 Edges: 
// Node : 33 Edges: 
// Node : 34 Edges: 
// Node : 35 Edges: 
// Node : 36 Edges: 
// Node : 37 Edges: 
// Node : 38 Edges: 
// Node : 39 Edges: 
// Node : 40 Edges: 
// Node : 41 Edges: 
// Node : 42 Edges: 
// Node : 43 Edges: 
// Node : 44 Edges: 
// Node : 45 Edges: 
// Node : 46 Edges: 
// Node : 47 Edges: 
// Node : 48 Edges: 
// Node : 49 Edges: 
// Node : 50 Edges: 
// Node : 51 Edges: 
// Node : 52 Edges: 
// Node : 53 Edges: 
// Node : 54 Edges: 
// Node : 55 Edges: 
// Node : 56 Edges: 
// Node : 57 Edges: 
// Node : 58 Edges: 
// Node : 59 Edges: 
// Node : 60 Edges: 
// Node : 61 Edges: 
// Node : 62 Edges: 
// Node : 63 Edges: 
// Node : 64 Edges: 
// Node : 65 Edges: 
// Node : 66 Edges: 
// Node : 67 Edges: 
// Node : 68 Edges: 
// Node : 69 Edges: 
// Node : 70 Edges: 
// Node : 71 Edges: 
// Node : 72 Edges: 
// Node : 73 Edges: 
// Node : 74 Edges: 
// Node : 75 Edges: 
// Node : 76 Edges: 
// Node : 77 Edges: 
// Node : 78 Edges: 
// Node : 79 Edges: 
// Node : 80 Edges: 
// Node : 81 Edges: 
// Node : 82 Edges: 
// Node : 83 Edges: 
// Node : 84 Edges: 
// Node : 85 Edges: 
// Node : 86 Edges: 
// Node : 87 Edges: 
// Node : 88 Edges: 
// Node : 89 Edges: 
// Node : 90 Edges: 
// Node : 91 Edges: 
// Node : 92 Edges: 
// Node : 93 Edges: 
// Node : 94 Edges: 
// Node : 95 Edges: 
// Node : 96 Edges: 
// Node : 97 Edges: 
// Node : 98 Edges: 
// Node : 99 Edges: 
// transposed sparse graph: 
// Node : 1 Edges: 
// analytical Jacobians[SPARSE] -> builded graph for coloring.
// analytical Jacobians[SPARSE] -> ready! 0.8498262093
//  start getting sparsity pattern diff Vars : 1 diffed vars: 1
// 1: output $res1:VARIABLE()  type: Real []
// 2: x[99]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 3: x[98]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 4: x[97]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 5: x[96]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 6: x[95]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 7: x[94]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 8: x[93]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 9: x[92]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 10: x[91]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 11: x[90]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 12: x[89]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 13: x[88]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 14: x[87]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 15: x[86]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 16: x[85]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 17: x[84]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 18: x[83]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 19: x[82]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 20: x[81]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 21: x[80]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 22: x[79]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 23: x[78]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 24: x[77]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 25: x[76]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 26: x[75]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 27: x[74]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 28: x[73]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 29: x[72]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 30: x[71]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 31: x[70]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 32: x[69]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 33: x[68]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 34: x[67]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 35: x[66]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 36: x[65]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 37: x[64]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 38: x[63]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 39: x[62]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 40: x[61]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 41: x[60]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 42: x[59]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 43: x[58]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 44: x[57]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 45: x[56]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 46: x[55]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 47: x[54]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 48: x[53]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 49: x[52]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 50: x[51]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 51: x[50]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 52: x[49]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 53: x[48]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 54: x[47]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 55: x[46]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 56: x[45]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 57: x[44]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 58: x[43]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 59: x[42]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 60: x[41]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 61: x[40]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 62: x[39]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 63: x[38]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 64: x[37]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 65: x[36]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 66: x[35]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 67: x[34]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 68: x[33]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 69: x[32]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 70: x[31]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 71: x[30]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 72: x[29]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 73: x[28]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 74: x[27]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 75: x[26]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 76: x[25]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 77: x[24]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 78: x[23]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 79: x[22]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 80: x[21]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 81: x[20]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 82: x[19]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 83: x[18]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 84: x[17]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 85: x[16]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 86: x[15]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 87: x[14]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 88: x[13]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 89: x[12]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 90: x[11]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 91: x[10]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 92: x[9]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 93: x[8]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 94: x[7]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 95: x[6]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 96: x[5]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 97: x[4]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 98: x[3]:VARIABLE(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 99: $pDER.x[2]:JACOBIAN_DIFF_VAR(start = 0.5 ) .testDumpSparsePatternVerbose, .Real type: Real [100]
// 1/1 (1): $res1 = 2.0 * x[99] + 0.5 * (0.009900990099009901 * (1.98019801980198 + x[99])) ^ 2.0 - x[98]    [dynamic]
// 2/2 (1): 0.0 = 2.0 * x[98] + 0.5 * (0.009900990099009901 * (1.97029702970297 + x[98])) ^ 2.0 + (-x[99]) - x[97]    [dynamic]
// 3/3 (1): 0.0 = 2.0 * x[97] + 0.5 * (0.009900990099009901 * (1.96039603960396 + x[97])) ^ 2.0 + (-x[98]) - x[96]    [dynamic]
// 4/4 (1): 0.0 = 2.0 * x[96] + 0.5 * (0.009900990099009901 * (1.95049504950495 + x[96])) ^ 2.0 + (-x[97]) - x[95]    [dynamic]
// 5/5 (1): 0.0 = 2.0 * x[95] + 0.5 * (0.009900990099009901 * (1.940594059405941 + x[95])) ^ 2.0 + (-x[96]) - x[94]    [dynamic]
// 6/6 (1): 0.0 = 2.0 * x[94] + 0.5 * (0.009900990099009901 * (1.930693069306931 + x[94])) ^ 2.0 + (-x[95]) - x[93]    [dynamic]
// 7/7 (1): 0.0 = 2.0 * x[93] + 0.5 * (0.009900990099009901 * (1.920792079207921 + x[93])) ^ 2.0 + (-x[94]) - x[92]    [dynamic]
// 8/8 (1): 0.0 = 2.0 * x[92] + 0.5 * (0.009900990099009901 * (1.910891089108911 + x[92])) ^ 2.0 + (-x[93]) - x[91]    [dynamic]
// 9/9 (1): 0.0 = 2.0 * x[91] + 0.5 * (0.009900990099009901 * (1.900990099009901 + x[91])) ^ 2.0 + (-x[92]) - x[90]    [dynamic]
// 10/10 (1): 0.0 = 2.0 * x[90] + 0.5 * (0.009900990099009901 * (1.891089108910891 + x[90])) ^ 2.0 + (-x[91]) - x[89]    [dynamic]
// 11/11 (1): 0.0 = 2.0 * x[89] + 0.5 * (0.009900990099009901 * (1.881188118811881 + x[89])) ^ 2.0 + (-x[90]) - x[88]    [dynamic]
// 12/12 (1): 0.0 = 2.0 * x[88] + 0.5 * (0.009900990099009901 * (1.871287128712871 + x[88])) ^ 2.0 + (-x[89]) - x[87]    [dynamic]
// 13/13 (1): 0.0 = 2.0 * x[87] + 0.5 * (0.009900990099009901 * (1.861386138613861 + x[87])) ^ 2.0 + (-x[88]) - x[86]    [dynamic]
// 14/14 (1): 0.0 = 2.0 * x[86] + 0.5 * (0.009900990099009901 * (1.851485148514851 + x[86])) ^ 2.0 + (-x[87]) - x[85]    [dynamic]
// 15/15 (1): 0.0 = 2.0 * x[85] + 0.5 * (0.009900990099009901 * (1.841584158415841 + x[85])) ^ 2.0 + (-x[86]) - x[84]    [dynamic]
// 16/16 (1): 0.0 = 2.0 * x[84] + 0.5 * (0.009900990099009901 * (1.831683168316832 + x[84])) ^ 2.0 + (-x[85]) - x[83]    [dynamic]
// 17/17 (1): 0.0 = 2.0 * x[83] + 0.5 * (0.009900990099009901 * (1.821782178217822 + x[83])) ^ 2.0 + (-x[84]) - x[82]    [dynamic]
// 18/18 (1): 0.0 = 2.0 * x[82] + 0.5 * (0.009900990099009901 * (1.811881188118812 + x[82])) ^ 2.0 + (-x[83]) - x[81]    [dynamic]
// 19/19 (1): 0.0 = 2.0 * x[81] + 0.5 * (0.009900990099009901 * (1.801980198019802 + x[81])) ^ 2.0 + (-x[82]) - x[80]    [dynamic]
// 20/20 (1): 0.0 = 2.0 * x[80] + 0.5 * (0.009900990099009901 * (1.792079207920792 + x[80])) ^ 2.0 + (-x[81]) - x[79]    [dynamic]
// 21/21 (1): 0.0 = 2.0 * x[79] + 0.5 * (0.009900990099009901 * (1.782178217821782 + x[79])) ^ 2.0 + (-x[80]) - x[78]    [dynamic]
// 22/22 (1): 0.0 = 2.0 * x[78] + 0.5 * (0.009900990099009901 * (1.772277227722772 + x[78])) ^ 2.0 + (-x[79]) - x[77]    [dynamic]
// 23/23 (1): 0.0 = 2.0 * x[77] + 0.5 * (0.009900990099009901 * (1.762376237623762 + x[77])) ^ 2.0 + (-x[78]) - x[76]    [dynamic]
// 24/24 (1): 0.0 = 2.0 * x[76] + 0.5 * (0.009900990099009901 * (1.752475247524752 + x[76])) ^ 2.0 + (-x[77]) - x[75]    [dynamic]
// 25/25 (1): 0.0 = 2.0 * x[75] + 0.5 * (0.009900990099009901 * (1.742574257425743 + x[75])) ^ 2.0 + (-x[76]) - x[74]    [dynamic]
// 26/26 (1): 0.0 = 2.0 * x[74] + 0.5 * (0.009900990099009901 * (1.732673267326733 + x[74])) ^ 2.0 + (-x[75]) - x[73]    [dynamic]
// 27/27 (1): 0.0 = 2.0 * x[73] + 0.5 * (0.009900990099009901 * (1.722772277227723 + x[73])) ^ 2.0 + (-x[74]) - x[72]    [dynamic]
// 28/28 (1): 0.0 = 2.0 * x[72] + 0.5 * (0.009900990099009901 * (1.712871287128713 + x[72])) ^ 2.0 + (-x[73]) - x[71]    [dynamic]
// 29/29 (1): 0.0 = 2.0 * x[71] + 0.5 * (0.009900990099009901 * (1.702970297029703 + x[71])) ^ 2.0 + (-x[72]) - x[70]    [dynamic]
// 30/30 (1): 0.0 = 2.0 * x[70] + 0.5 * (0.009900990099009901 * (1.693069306930693 + x[70])) ^ 2.0 + (-x[71]) - x[69]    [dynamic]
// 31/31 (1): 0.0 = 2.0 * x[69] + 0.5 * (0.009900990099009901 * (1.683168316831683 + x[69])) ^ 2.0 + (-x[70]) - x[68]    [dynamic]
// 32/32 (1): 0.0 = 2.0 * x[68] + 0.5 * (0.009900990099009901 * (1.673267326732673 + x[68])) ^ 2.0 + (-x[69]) - x[67]    [dynamic]
// 33/33 (1): 0.0 = 2.0 * x[67] + 0.5 * (0.009900990099009901 * (1.663366336633664 + x[67])) ^ 2.0 + (-x[68]) - x[66]    [dynamic]
// 34/34 (1): 0.0 = 2.0 * x[66] + 0.5 * (0.009900990099009901 * (1.653465346534654 + x[66])) ^ 2.0 + (-x[67]) - x[65]    [dynamic]
// 35/35 (1): 0.0 = 2.0 * x[65] + 0.5 * (0.009900990099009901 * (1.643564356435644 + x[65])) ^ 2.0 + (-x[66]) - x[64]    [dynamic]
// 36/36 (1): 0.0 = 2.0 * x[64] + 0.5 * (0.009900990099009901 * (1.633663366336634 + x[64])) ^ 2.0 + (-x[65]) - x[63]    [dynamic]
// 37/37 (1): 0.0 = 2.0 * x[63] + 0.5 * (0.009900990099009901 * (1.623762376237624 + x[63])) ^ 2.0 + (-x[64]) - x[62]    [dynamic]
// 38/38 (1): 0.0 = 2.0 * x[62] + 0.5 * (0.009900990099009901 * (1.613861386138614 + x[62])) ^ 2.0 + (-x[63]) - x[61]    [dynamic]
// 39/39 (1): 0.0 = 2.0 * x[61] + 0.5 * (0.009900990099009901 * (1.603960396039604 + x[61])) ^ 2.0 + (-x[62]) - x[60]    [dynamic]
// 40/40 (1): 0.0 = 2.0 * x[60] + 0.5 * (0.009900990099009901 * (1.594059405940594 + x[60])) ^ 2.0 + (-x[61]) - x[59]    [dynamic]
// 41/41 (1): 0.0 = 2.0 * x[59] + 0.5 * (0.009900990099009901 * (1.584158415841584 + x[59])) ^ 2.0 + (-x[60]) - x[58]    [dynamic]
// 42/42 (1): 0.0 = 2.0 * x[58] + 0.5 * (0.009900990099009901 * (1.574257425742574 + x[58])) ^ 2.0 + (-x[59]) - x[57]    [dynamic]
// 43/43 (1): 0.0 = 2.0 * x[57] + 0.5 * (0.009900990099009901 * (1.564356435643564 + x[57])) ^ 2.0 + (-x[58]) - x[56]    [dynamic]
// 44/44 (1): 0.0 = 2.0 * x[56] + 0.5 * (0.009900990099009901 * (1.554455445544555 + x[56])) ^ 2.0 + (-x[57]) - x[55]    [dynamic]
// 45/45 (1): 0.0 = 2.0 * x[55] + 0.5 * (0.009900990099009901 * (1.544554455445545 + x[55])) ^ 2.0 + (-x[56]) - x[54]    [dynamic]
// 46/46 (1): 0.0 = 2.0 * x[54] + 0.5 * (0.009900990099009901 * (1.534653465346535 + x[54])) ^ 2.0 + (-x[55]) - x[53]    [dynamic]
// 47/47 (1): 0.0 = 2.0 * x[53] + 0.5 * (0.009900990099009901 * (1.524752475247525 + x[53])) ^ 2.0 + (-x[54]) - x[52]    [dynamic]
// 48/48 (1): 0.0 = 2.0 * x[52] + 0.5 * (0.009900990099009901 * (1.514851485148515 + x[52])) ^ 2.0 + (-x[53]) - x[51]    [dynamic]
// 49/49 (1): 0.0 = 2.0 * x[51] + 0.5 * (0.009900990099009901 * (1.504950495049505 + x[51])) ^ 2.0 + (-x[52]) - x[50]    [dynamic]
// 50/50 (1): 0.0 = 2.0 * x[50] + 0.5 * (0.009900990099009901 * (1.495049504950495 + x[50])) ^ 2.0 + (-x[51]) - x[49]    [dynamic]
// 51/51 (1): 0.0 = 2.0 * x[49] + 0.5 * (0.009900990099009901 * (1.485148514851485 + x[49])) ^ 2.0 + (-x[50]) - x[48]    [dynamic]
// 52/52 (1): 0.0 = 2.0 * x[48] + 0.5 * (0.009900990099009901 * (1.475247524752475 + x[48])) ^ 2.0 + (-x[49]) - x[47]    [dynamic]
// 53/53 (1): 0.0 = 2.0 * x[47] + 0.5 * (0.009900990099009901 * (1.465346534653465 + x[47])) ^ 2.0 + (-x[48]) - x[46]    [dynamic]
// 54/54 (1): 0.0 = 2.0 * x[46] + 0.5 * (0.009900990099009901 * (1.455445544554455 + x[46])) ^ 2.0 + (-x[47]) - x[45]    [dynamic]
// 55/55 (1): 0.0 = 2.0 * x[45] + 0.5 * (0.009900990099009901 * (1.445544554455445 + x[45])) ^ 2.0 + (-x[46]) - x[44]    [dynamic]
// 56/56 (1): 0.0 = 2.0 * x[44] + 0.5 * (0.009900990099009901 * (1.435643564356436 + x[44])) ^ 2.0 + (-x[45]) - x[43]    [dynamic]
// 57/57 (1): 0.0 = 2.0 * x[43] + 0.5 * (0.009900990099009901 * (1.425742574257426 + x[43])) ^ 2.0 + (-x[44]) - x[42]    [dynamic]
// 58/58 (1): 0.0 = 2.0 * x[42] + 0.5 * (0.009900990099009901 * (1.415841584158416 + x[42])) ^ 2.0 + (-x[43]) - x[41]    [dynamic]
// 59/59 (1): 0.0 = 2.0 * x[41] + 0.5 * (0.009900990099009901 * (1.405940594059406 + x[41])) ^ 2.0 + (-x[42]) - x[40]    [dynamic]
// 60/60 (1): 0.0 = 2.0 * x[40] + 0.5 * (0.009900990099009901 * (1.396039603960396 + x[40])) ^ 2.0 + (-x[41]) - x[39]    [dynamic]
// 61/61 (1): 0.0 = 2.0 * x[39] + 0.5 * (0.009900990099009901 * (1.386138613861386 + x[39])) ^ 2.0 + (-x[40]) - x[38]    [dynamic]
// 62/62 (1): 0.0 = 2.0 * x[38] + 0.5 * (0.009900990099009901 * (1.376237623762376 + x[38])) ^ 2.0 + (-x[39]) - x[37]    [dynamic]
// 63/63 (1): 0.0 = 2.0 * x[37] + 0.5 * (0.009900990099009901 * (1.366336633663366 + x[37])) ^ 2.0 + (-x[38]) - x[36]    [dynamic]
// 64/64 (1): 0.0 = 2.0 * x[36] + 0.5 * (0.009900990099009901 * (1.356435643564356 + x[36])) ^ 2.0 + (-x[37]) - x[35]    [dynamic]
// 65/65 (1): 0.0 = 2.0 * x[35] + 0.5 * (0.009900990099009901 * (1.346534653465347 + x[35])) ^ 2.0 + (-x[36]) - x[34]    [dynamic]
// 66/66 (1): 0.0 = 2.0 * x[34] + 0.5 * (0.009900990099009901 * (1.336633663366337 + x[34])) ^ 2.0 + (-x[35]) - x[33]    [dynamic]
// 67/67 (1): 0.0 = 2.0 * x[33] + 0.5 * (0.009900990099009901 * (1.326732673267327 + x[33])) ^ 2.0 + (-x[34]) - x[32]    [dynamic]
// 68/68 (1): 0.0 = 2.0 * x[32] + 0.5 * (0.009900990099009901 * (1.316831683168317 + x[32])) ^ 2.0 + (-x[33]) - x[31]    [dynamic]
// 69/69 (1): 0.0 = 2.0 * x[31] + 0.5 * (0.009900990099009901 * (1.306930693069307 + x[31])) ^ 2.0 + (-x[32]) - x[30]    [dynamic]
// 70/70 (1): 0.0 = 2.0 * x[30] + 0.5 * (0.009900990099009901 * (1.297029702970297 + x[30])) ^ 2.0 + (-x[31]) - x[29]    [dynamic]
// 71/71 (1): 0.0 = 2.0 * x[29] + 0.5 * (0.009900990099009901 * (1.287128712871287 + x[29])) ^ 2.0 + (-x[30]) - x[28]    [dynamic]
// 72/72 (1): 0.0 = 2.0 * x[28] + 0.5 * (0.009900990099009901 * (1.277227722772277 + x[28])) ^ 2.0 + (-x[29]) - x[27]    [dynamic]
// 73/73 (1): 0.0 = 2.0 * x[27] + 0.5 * (0.009900990099009901 * (1.267326732673267 + x[27])) ^ 2.0 + (-x[28]) - x[26]    [dynamic]
// 74/74 (1): 0.0 = 2.0 * x[26] + 0.5 * (0.009900990099009901 * (1.257425742574257 + x[26])) ^ 2.0 + (-x[27]) - x[25]    [dynamic]
// 75/75 (1): 0.0 = 2.0 * x[25] + 0.5 * (0.009900990099009901 * (1.247524752475248 + x[25])) ^ 2.0 + (-x[26]) - x[24]    [dynamic]
// 76/76 (1): 0.0 = 2.0 * x[24] + 0.5 * (0.009900990099009901 * (1.237623762376238 + x[24])) ^ 2.0 + (-x[25]) - x[23]    [dynamic]
// 77/77 (1): 0.0 = 2.0 * x[23] + 0.5 * (0.009900990099009901 * (1.227722772277228 + x[23])) ^ 2.0 + (-x[24]) - x[22]    [dynamic]
// 78/78 (1): 0.0 = 2.0 * x[22] + 0.5 * (0.009900990099009901 * (1.217821782178218 + x[22])) ^ 2.0 + (-x[23]) - x[21]    [dynamic]
// 79/79 (1): 0.0 = 2.0 * x[21] + 0.5 * (0.009900990099009901 * (1.207920792079208 + x[21])) ^ 2.0 + (-x[22]) - x[20]    [dynamic]
// 80/80 (1): 0.0 = 2.0 * x[20] + 0.5 * (0.009900990099009901 * (1.198019801980198 + x[20])) ^ 2.0 + (-x[21]) - x[19]    [dynamic]
// 81/81 (1): 0.0 = 2.0 * x[19] + 0.5 * (0.009900990099009901 * (1.188118811881188 + x[19])) ^ 2.0 + (-x[20]) - x[18]    [dynamic]
// 82/82 (1): 0.0 = 2.0 * x[18] + 0.5 * (0.009900990099009901 * (1.178217821782178 + x[18])) ^ 2.0 + (-x[19]) - x[17]    [dynamic]
// 83/83 (1): 0.0 = 2.0 * x[17] + 0.5 * (0.009900990099009901 * (1.168316831683168 + x[17])) ^ 2.0 + (-x[18]) - x[16]    [dynamic]
// 84/84 (1): 0.0 = 2.0 * x[16] + 0.5 * (0.009900990099009901 * (1.158415841584158 + x[16])) ^ 2.0 + (-x[17]) - x[15]    [dynamic]
// 85/85 (1): 0.0 = 2.0 * x[15] + 0.5 * (0.009900990099009901 * (1.148514851485148 + x[15])) ^ 2.0 + (-x[16]) - x[14]    [dynamic]
// 86/86 (1): 0.0 = 2.0 * x[14] + 0.5 * (0.009900990099009901 * (1.138613861386139 + x[14])) ^ 2.0 + (-x[15]) - x[13]    [dynamic]
// 87/87 (1): 0.0 = 2.0 * x[13] + 0.5 * (0.009900990099009901 * (1.128712871287129 + x[13])) ^ 2.0 + (-x[14]) - x[12]    [dynamic]
// 88/88 (1): 0.0 = 2.0 * x[12] + 0.5 * (0.009900990099009901 * (1.118811881188119 + x[12])) ^ 2.0 + (-x[13]) - x[11]    [dynamic]
// 89/89 (1): 0.0 = 2.0 * x[11] + 0.5 * (0.009900990099009901 * (1.108910891089109 + x[11])) ^ 2.0 + (-x[12]) - x[10]    [dynamic]
// 90/90 (1): 0.0 = 2.0 * x[10] + 0.5 * (0.009900990099009901 * (1.099009900990099 + x[10])) ^ 2.0 + (-x[11]) - x[9]    [dynamic]
// 91/91 (1): 0.0 = 2.0 * x[9] + 0.5 * (0.009900990099009901 * (1.089108910891089 + x[9])) ^ 2.0 + (-x[10]) - x[8]    [dynamic]
// 92/92 (1): 0.0 = 2.0 * x[8] + 0.5 * (0.009900990099009901 * (1.079207920792079 + x[8])) ^ 2.0 + (-x[9]) - x[7]    [dynamic]
// 93/93 (1): 0.0 = 2.0 * x[7] + 0.5 * (0.009900990099009901 * (1.069306930693069 + x[7])) ^ 2.0 + (-x[8]) - x[6]    [dynamic]
// 94/94 (1): 0.0 = 2.0 * x[6] + 0.5 * (0.009900990099009901 * (1.059405940594059 + x[6])) ^ 2.0 + (-x[7]) - x[5]    [dynamic]
// 95/95 (1): 0.0 = 2.0 * x[5] + 0.5 * (0.009900990099009901 * (1.04950495049505 + x[5])) ^ 2.0 + (-x[6]) - x[4]    [dynamic]
// 96/96 (1): 0.0 = 2.0 * x[4] + 0.5 * (0.009900990099009901 * (1.03960396039604 + x[4])) ^ 2.0 + (-x[5]) - x[3]    [dynamic]
// 97/97 (1): 0.0 = 2.0 * x[3] + 0.5 * (0.009900990099009901 * (1.02970297029703 + x[3])) ^ 2.0 + (-x[4]) - x[2]    [dynamic]
// 98/98 (1): 0.0 = 2.0 * x[2] + 0.5 * (0.009900990099009901 * (1.01980198019802 + x[2])) ^ 2.0 - x[3]    [dynamic]
//
// Adjacency Matrix (row: equation)
// ========================================
// number of rows: 98
// 1: 3 2 1
// 2: 4 2 3
// 3: 5 3 4
// 4: 6 4 5
// 5: 7 5 6
// 6: 8 6 7
// 7: 9 7 8
// 8: 10 8 9
// 9: 11 9 10
// 10: 12 10 11
// 11: 13 11 12
// 12: 14 12 13
// 13: 15 13 14
// 14: 16 14 15
// 15: 17 15 16
// 16: 18 16 17
// 17: 19 17 18
// 18: 20 18 19
// 19: 21 19 20
// 20: 22 20 21
// 21: 23 21 22
// 22: 24 22 23
// 23: 25 23 24
// 24: 26 24 25
// 25: 27 25 26
// 26: 28 26 27
// 27: 29 27 28
// 28: 30 28 29
// 29: 31 29 30
// 30: 32 30 31
// 31: 33 31 32
// 32: 34 32 33
// 33: 35 33 34
// 34: 36 34 35
// 35: 37 35 36
// 36: 38 36 37
// 37: 39 37 38
// 38: 40 38 39
// 39: 41 39 40
// 40: 42 40 41
// 41: 43 41 42
// 42: 44 42 43
// 43: 45 43 44
// 44: 46 44 45
// 45: 47 45 46
// 46: 48 46 47
// 47: 49 47 48
// 48: 50 48 49
// 49: 51 49 50
// 50: 52 50 51
// 51: 53 51 52
// 52: 54 52 53
// 53: 55 53 54
// 54: 56 54 55
// 55: 57 55 56
// 56: 58 56 57
// 57: 59 57 58
// 58: 60 58 59
// 59: 61 59 60
// 60: 62 60 61
// 61: 63 61 62
// 62: 64 62 63
// 63: 65 63 64
// 64: 66 64 65
// 65: 67 65 66
// 66: 68 66 67
// 67: 69 67 68
// 68: 70 68 69
// 69: 71 69 70
// 70: 72 70 71
// 71: 73 71 72
// 72: 74 72 73
// 73: 75 73 74
// 74: 76 74 75
// 75: 77 75 76
// 76: 78 76 77
// 77: 79 77 78
// 78: 80 78 79
// 79: 81 79 80
// 80: 82 80 81
// 81: 83 81 82
// 82: 84 82 83
// 83: 85 83 84
// 84: 86 84 85
// 85: 87 85 86
// 86: 88 86 87
// 87: 89 87 88
// 88: 90 88 89
// 89: 91 89 90
// 90: 92 90 91
// 91: 93 91 92
// 92: 94 92 93
// 93: 95 93 94
// 94: 96 94 95
// 95: 97 95 96
// 96: 98 96 97
// 97: 99 97 98
// 98: 98 99
//
// Transposed Adjacency Matrix (row: variable)
// ========================================
// number of rows: 99
// 1: 1
// 2: 2 1
// 3: 3 2 1
// 4: 4 3 2
// 5: 5 4 3
// 6: 6 5 4
// 7: 7 6 5
// 8: 8 7 6
// 9: 9 8 7
// 10: 10 9 8
// 11: 11 10 9
// 12: 12 11 10
// 13: 13 12 11
// 14: 14 13 12
// 15: 15 14 13
// 16: 16 15 14
// 17: 17 16 15
// 18: 18 17 16
// 19: 19 18 17
// 20: 20 19 18
// 21: 21 20 19
// 22: 22 21 20
// 23: 23 22 21
// 24: 24 23 22
// 25: 25 24 23
// 26: 26 25 24
// 27: 27 26 25
// 28: 28 27 26
// 29: 29 28 27
// 30: 30 29 28
// 31: 31 30 29
// 32: 32 31 30
// 33: 33 32 31
// 34: 34 33 32
// 35: 35 34 33
// 36: 36 35 34
// 37: 37 36 35
// 38: 38 37 36
// 39: 39 38 37
// 40: 40 39 38
// 41: 41 40 39
// 42: 42 41 40
// 43: 43 42 41
// 44: 44 43 42
// 45: 45 44 43
// 46: 46 45 44
// 47: 47 46 45
// 48: 48 47 46
// 49: 49 48 47
// 50: 50 49 48
// 51: 51 50 49
// 52: 52 51 50
// 53: 53 52 51
// 54: 54 53 52
// 55: 55 54 53
// 56: 56 55 54
// 57: 57 56 55
// 58: 58 57 56
// 59: 59 58 57
// 60: 60 59 58
// 61: 61 60 59
// 62: 62 61 60
// 63: 63 62 61
// 64: 64 63 62
// 65: 65 64 63
// 66: 66 65 64
// 67: 67 66 65
// 68: 68 67 66
// 69: 69 68 67
// 70: 70 69 68
// 71: 71 70 69
// 72: 72 71 70
// 73: 73 72 71
// 74: 74 73 72
// 75: 75 74 73
// 76: 76 75 74
// 77: 77 76 75
// 78: 78 77 76
// 79: 79 78 77
// 80: 80 79 78
// 81: 81 80 79
// 82: 82 81 80
// 83: 83 82 81
// 84: 84 83 82
// 85: 85 84 83
// 86: 86 85 84
// 87: 87 86 85
// 88: 88 87 86
// 89: 89 88 87
// 90: 90 89 88
// 91: 91 90 89
// 92: 92 91 90
// 93: 93 92 91
// 94: 94 93 92
// 95: 95 94 93
// 96: 96 95 94
// 97: 97 96 95
// 98: 98 97 96
// 99: 98 97
// Matching
// ========================================
// 98 variables and equations
// var 1 is solved in eqn 1
// var 2 is solved in eqn 2
// var 3 is solved in eqn 3
// var 4 is solved in eqn 4
// var 5 is solved in eqn 5
// var 6 is solved in eqn 6
// var 7 is solved in eqn 7
// var 8 is solved in eqn 8
// var 9 is solved in eqn 9
// var 10 is solved in eqn 10
// var 11 is solved in eqn 11
// var 12 is solved in eqn 12
// var 13 is solved in eqn 13
// var 14 is solved in eqn 14
// var 15 is solved in eqn 15
// var 16 is solved in eqn 16
// var 17 is solved in eqn 17
// var 18 is solved in eqn 18
// var 19 is solved in eqn 19
// var 20 is solved in eqn 20
// var 21 is solved in eqn 21
// var 22 is solved in eqn 22
// var 23 is solved in eqn 23
// var 24 is solved in eqn 24
// var 25 is solved in eqn 25
// var 26 is solved in eqn 26
// var 27 is solved in eqn 27
// var 28 is solved in eqn 28
// var 29 is solved in eqn 29
// var 30 is solved in eqn 30
// var 31 is solved in eqn 31
// var 32 is solved in eqn 32
// var 33 is solved in eqn 33
// var 34 is solved in eqn 34
// var 35 is solved in eqn 35
// var 36 is solved in eqn 36
// var 37 is solved in eqn 37
// var 38 is solved in eqn 38
// var 39 is solved in eqn 39
// var 40 is solved in eqn 40
// var 41 is solved in eqn 41
// var 42 is solved in eqn 42
// var 43 is solved in eqn 43
// var 44 is solved in eqn 44
// var 45 is solved in eqn 45
// var 46 is solved in eqn 46
// var 47 is solved in eqn 47
// var 48 is solved in eqn 48
// var 49 is solved in eqn 49
// var 50 is solved in eqn 50
// var 51 is solved in eqn 51
// var 52 is solved in eqn 52
// var 53 is solved in eqn 53
// var 54 is solved in eqn 54
// var 55 is solved in eqn 55
// var 56 is solved in eqn 56
// var 57 is solved in eqn 57
// var 58 is solved in eqn 58
// var 59 is solved in eqn 59
// var 60 is solved in eqn 60
// var 61 is solved in eqn 61
// var 62 is solved in eqn 62
// var 63 is solved in eqn 63
// var 64 is solved in eqn 64
// var 65 is solved in eqn 65
// var 66 is solved in eqn 66
// var 67 is solved in eqn 67
// var 68 is solved in eqn 68
// var 69 is solved in eqn 69
// var 70 is solved in eqn 70
// var 71 is solved in eqn 71
// var 72 is solved in eqn 72
// var 73 is solved in eqn 73
// var 74 is solved in eqn 74
// var 75 is solved in eqn 75
// var 76 is solved in eqn 76
// var 77 is solved in eqn 77
// var 78 is solved in eqn 78
// var 79 is solved in eqn 79
// var 80 is solved in eqn 80
// var 81 is solved in eqn 81
// var 82 is solved in eqn 82
// var 83 is solved in eqn 83
// var 84 is solved in eqn 84
// var 85 is solved in eqn 85
// var 86 is solved in eqn 86
// var 87 is solved in eqn 87
// var 88 is solved in eqn 88
// var 89 is solved in eqn 89
// var 90 is solved in eqn 90
// var 91 is solved in eqn 91
// var 92 is solved in eqn 92
// var 93 is solved in eqn 93
// var 94 is solved in eqn 94
// var 95 is solved in eqn 95
// var 96 is solved in eqn 96
// var 97 is solved in eqn 97
// var 98 is solved in eqn 98
//
//
// StrongComponents
// ========================================
// {98:98}
// {97:97}
// {96:96}
// {95:95}
// {94:94}
// {93:93}
// {92:92}
// {91:91}
// {90:90}
// {89:89}
// {88:88}
// {87:87}
// {86:86}
// {85:85}
// {84:84}
// {83:83}
// {82:82}
// {81:81}
// {80:80}
// {79:79}
// {78:78}
// {77:77}
// {76:76}
// {75:75}
// {74:74}
// {73:73}
// {72:72}
// {71:71}
// {70:70}
// {69:69}
// {68:68}
// {67:67}
// {66:66}
// {65:65}
// {64:64}
// {63:63}
// {62:62}
// {61:61}
// {60:60}
// {59:59}
// {58:58}
// {57:57}
// {56:56}
// {55:55}
// {54:54}
// {53:53}
// {52:52}
// {51:51}
// {50:50}
// {49:49}
// {48:48}
// {47:47}
// {46:46}
// {45:45}
// {44:44}
// {43:43}
// {42:42}
// {41:41}
// {40:40}
// {39:39}
// {38:38}
// {37:37}
// {36:36}
// {35:35}
// {34:34}
// {33:33}
// {32:32}
// {31:31}
// {30:30}
// {29:29}
// {28:28}
// {27:27}
// {26:26}
// {25:25}
// {24:24}
// {23:23}
// {22:22}
// {21:21}
// {20:20}
// {19:19}
// {18:18}
// {17:17}
// {16:16}
// {15:15}
// {14:14}
// {13:13}
// {12:12}
// {11:11}
// {10:10}
// {9:9}
// {8:8}
// {7:7}
// {6:6}
// {5:5}
// {4:4}
// {3:3}
// {2:2}
// {1:1}
// nodesEqnsIndexs: 1 
//
// analytical Jacobians[SPARSE] -> build sparse graph: 1.2052872093
// Print sparse pattern: 99
// Row[1] = {99}
// Row[2] = {99}
// Row[3] = {99}
// Row[4] = {99}
// Row[5] = {99}
// Row[6] = {99}
// Row[7] = {99}
// Row[8] = {99}
// Row[9] = {99}
// Row[10] = {99}
// Row[11] = {99}
// Row[12] = {99}
// Row[13] = {99}
// Row[14] = {99}
// Row[15] = {99}
// Row[16] = {99}
// Row[17] = {99}
// Row[18] = {99}
// Row[19] = {99}
// Row[20] = {99}
// Row[21] = {99}
// Row[22] = {99}
// Row[23] = {99}
// Row[24] = {99}
// Row[25] = {99}
// Row[26] = {99}
// Row[27] = {99}
// Row[28] = {99}
// Row[29] = {99}
// Row[30] = {99}
// Row[31] = {99}
// Row[32] = {99}
// Row[33] = {99}
// Row[34] = {99}
// Row[35] = {99}
// Row[36] = {99}
// Row[37] = {99}
// Row[38] = {99}
// Row[39] = {99}
// Row[40] = {99}
// Row[41] = {99}
// Row[42] = {99}
// Row[43] = {99}
// Row[44] = {99}
// Row[45] = {99}
// Row[46] = {99}
// Row[47] = {99}
// Row[48] = {99}
// Row[49] = {99}
// Row[50] = {99}
// Row[51] = {99}
// Row[52] = {99}
// Row[53] = {99}
// Row[54] = {99}
// Row[55] = {99}
// Row[56] = {99}
// Row[57] = {99}
// Row[58] = {99}
// Row[59] = {99}
// Row[60] = {99}
// Row[61] = {99}
// Row[62] = {99}
// Row[63] = {99}
// Row[64] = {99}
// Row[65] = {99}
// Row[66] = {99}
// Row[67] = {99}
// Row[68] = {99}
// Row[69] = {99}
// Row[70] = {99}
// Row[71] = {99}
// Row[72] = {99}
// Row[73] = {99}
// Row[74] = {99}
// Row[75] = {99}
// Row[76] = {99}
// Row[77] = {99}
// Row[78] = {99}
// Row[79] = {99}
// Row[80] = {99}
// Row[81] = {99}
// Row[82] = {99}
// Row[83] = {99}
// Row[84] = {99}
// Row[85] = {99}
// Row[86] = {99}
// Row[87] = {99}
// Row[88] = {99}
// Row[89] = {99}
// Row[90] = {99}
// Row[91] = {99}
// Row[92] = {99}
// Row[93] = {99}
// Row[94] = {99}
// Row[95] = {99}
// Row[96] = {99}
// Row[97] = {99}
// Row[98] = {99}
// Row[99] = {}
//
// analytical Jacobians[SPARSE] -> prepared arrayList for transpose list: 1.2054782093
// analytical Jacobians[SPARSE] -> build sparse graph.
// sparse graph: 
// Node : 1 Edges: 1 
// Node : 2 Edges: 
// Node : 3 Edges: 
// Node : 4 Edges: 
// Node : 5 Edges: 
// Node : 6 Edges: 
// Node : 7 Edges: 
// Node : 8 Edges: 
// Node : 9 Edges: 
// Node : 10 Edges: 
// Node : 11 Edges: 
// Node : 12 Edges: 
// Node : 13 Edges: 
// Node : 14 Edges: 
// Node : 15 Edges: 
// Node : 16 Edges: 
// Node : 17 Edges: 
// Node : 18 Edges: 
// Node : 19 Edges: 
// Node : 20 Edges: 
// Node : 21 Edges: 
// Node : 22 Edges: 
// Node : 23 Edges: 
// Node : 24 Edges: 
// Node : 25 Edges: 
// Node : 26 Edges: 
// Node : 27 Edges: 
// Node : 28 Edges: 
// Node : 29 Edges: 
// Node : 30 Edges: 
// Node : 31 Edges: 
// Node : 32 Edges: 
// Node : 33 Edges: 
// Node : 34 Edges: 
// Node : 35 Edges: 
// Node : 36 Edges: 
// Node : 37 Edges: 
// Node : 38 Edges: 
// Node : 39 Edges: 
// Node : 40 Edges: 
// Node : 41 Edges: 
// Node : 42 Edges: 
// Node : 43 Edges: 
// Node : 44 Edges: 
// Node : 45 Edges: 
// Node : 46 Edges: 
// Node : 47 Edges: 
// Node : 48 Edges: 
// Node : 49 Edges: 
// Node : 50 Edges: 
// Node : 51 Edges: 
// Node : 52 Edges: 
// Node : 53 Edges: 
// Node : 54 Edges: 
// Node : 55 Edges: 
// Node : 56 Edges: 
// Node : 57 Edges: 
// Node : 58 Edges: 
// Node : 59 Edges: 
// Node : 60 Edges: 
// Node : 61 Edges: 
// Node : 62 Edges: 
// Node : 63 Edges: 
// Node : 64 Edges: 
// Node : 65 Edges: 
// Node : 66 Edges: 
// Node : 67 Edges: 
// Node : 68 Edges: 
// Node : 69 Edges: 
// Node : 70 Edges: 
// Node : 71 Edges: 
// Node : 72 Edges: 
// Node : 73 Edges: 
// Node : 74 Edges: 
// Node : 75 Edges: 
// Node : 76 Edges: 
// Node : 77 Edges: 
// Node : 78 Edges: 
// Node : 79 Edges: 
// Node : 80 Edges: 
// Node : 81 Edges: 
// Node : 82 Edges: 
// Node : 83 Edges: 
// Node : 84 Edges: 
// Node : 85 Edges: 
// Node : 86 Edges: 
// Node : 87 Edges: 
// Node : 88 Edges: 
// Node : 89 Edges: 
// Node : 90 Edges: 
// Node : 91 Edges: 
// Node : 92 Edges: 
// Node : 93 Edges: 
// Node : 94 Edges: 
// Node : 95 Edges: 
// Node : 96 Edges: 
// Node : 97 Edges: 
// Node : 98 Edges: 
// transposed sparse graph: 
// Node : 1 Edges: 1 
// analytical Jacobians[SPARSE] -> builded graph for coloring.
// analytical Jacobians[SPARSE] -> ready! 1.2055602093
// {"testDumpSparsePatternVerbose","testDumpSparsePatternVerbose_init.xml"}
// ""
// endResult
