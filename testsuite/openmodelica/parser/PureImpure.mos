// name: PureImpure.mos
// keywords: test pure/impure Modelica 3.3 keywords
// status: correct
// cflags: -d=-newInst
//
// Test pure/impure keywords
//

loadFile("PureImpure.mo"); getErrorString();
"see that absyn dumping works";
list();
"see that absyn->scode trasfer is working";
saveTotalSCode("pi.mo", PureImpure); getErrorString();
readFile("pi.mo"); getErrorString();
system("rm -f pi.mo");
"see that scode->DAE trasfer is working";
instantiateModel(PureImpure);







// Result:
// true
// ""
// "see that absyn dumping works"
// "pure function f
//   // name: PureImpure.mo
//   // keywords: test pure/impure Modelica 3.3 keywords
//   // status: correct
//   //
//   // Test pure/impure keywords
//   //
//   input Boolean a;
//   output Boolean b;
// algorithm
//   b:=a;
// end f;
// impure function fimpure
//   input Boolean a;
//   output Boolean b;
// algorithm
//   b:=a;
// end fimpure;
// function fdefaultpure
//   input Boolean a;
//   output Boolean b;
// algorithm
//   b:=a;
// end fdefaultpure;
// model PureImpure
//   parameter Boolean y = true;
//   parameter Boolean x = f(y);
//   parameter Boolean z = fimpure(y);
//   parameter Boolean w = fdefaultpure(y);
// end PureImpure;
// 
// "
// "see that absyn->scode trasfer is working"
// true
// ""
// "function f 
//   input Boolean a;
//   output Boolean b;
// algorithm
//   b := a;
// end f;
// 
// impure function fimpure 
//   input Boolean a;
//   output Boolean b;
// algorithm
//   b := a;
// end fimpure;
// 
// function fdefaultpure 
//   input Boolean a;
//   output Boolean b;
// algorithm
//   b := a;
// end fdefaultpure;
// 
// model PureImpure 
//   parameter Boolean y = true;
//   parameter Boolean x = f(y);
//   parameter Boolean z = fimpure(y);
//   parameter Boolean w = fdefaultpure(y);
// end PureImpure;
// "
// ""
// 0
// "see that scode->DAE trasfer is working"
// "function f
//   input Boolean a;
//   output Boolean b;
// algorithm
//   b := a;
// end f;
// 
// function fdefaultpure
//   input Boolean a;
//   output Boolean b;
// algorithm
//   b := a;
// end fdefaultpure;
// 
// impure function fimpure
//   input Boolean a;
//   output Boolean b;
// algorithm
//   b := a;
// end fimpure;
// 
// class PureImpure
//   parameter Boolean y = true;
//   parameter Boolean x = f(y);
//   parameter Boolean z = fimpure(y);
//   parameter Boolean w = fdefaultpure(y);
// end PureImpure;
// "
// endResult
