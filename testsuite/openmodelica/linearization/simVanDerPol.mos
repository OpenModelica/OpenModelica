// name:     VanDerPol linearization
// keywords: VanDerPol, linearization
// status:   correct
// teardown_command: rm -rf VanDerPol.* VanDerPol_* output.log linear_VanDerPol.* linear_VanDerPol_* linear_VanDerPol VanDerPol
// 
//  Case for numeric linearization of VanDerPol model
//
//linearize with numeric linearization and data recovery
loadFile("modelVanDerPol.mo");
simulate(VanDerPol, simflags="-l=0 -l_datarec");
getErrorString();
loadFile("linear_VanDerPol.mo");
list(linear_VanDerPol);
simulate(linear_VanDerPol);
getErrorString();
readFile("linear_VanDerPol.log"); // Check that output log is empty

// 
//  Case for linearization of VanDerPol model
//
setCommandLineOptions("+generateSymbolicLinearization");
//linearize
linearize(VanDerPol,stopTime=0);
getErrorString();
loadFile("linear_VanDerPol.mo");
list(linear_VanDerPol);
simulate(linear_VanDerPol);
getErrorString();
readFile("linear_VanDerPol.log"); // Check that output log is empty

// Result:
// true
// record SimulationResult
//     resultFile = "VanDerPol_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'VanDerPol', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = '-l=0 -l_datarec'",
//     messages = "stdout            | info    | Linearization will performed at point of time: 0.000000
// LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// stdout            | info    | Linear model is created!
// "
// end SimulationResult;
// "Warning: The initial conditions are not fully specified. For more information set -d=initialization. In OMEdit Tools->Options->Simulation->OMCFlags, in OMNotebook call setCommandLineOptions("-d=initialization").
// "
// true
// "model linear_VanDerPol
//   parameter Integer n = 2 \"number of states\";
//   parameter Integer p = 0 \"number of inputs\";
//   parameter Integer q = 0 \"number of outputs\";
//   parameter Integer nz = 0 \"data recovery variables\";
//   parameter Real x0[2] = {1, 2};
//   parameter Real u0[0] = zeros(0);
//   parameter Real z0[0] = zeros(0);
//   parameter Real A[n, n] = [0, 1.000000001354202; -2.200000078615666, 0];
//   parameter Real B[n, p] = zeros(n, p);
//   parameter Real C[q, n] = zeros(q, n);
//   parameter Real D[q, p] = zeros(q, p);
//   parameter Real Cz[nz, n] = zeros(nz, n);
//   parameter Real Dz[nz, p] = zeros(nz, p);
//   Real x[n](start = x0);
//   input Real u[p];
//   output Real y[q];
//   output Real z[nz];
//   Real 'x_x' = x[1];
//   Real 'x_y' = x[2];
// equation
//   der(x) = A * x + B * u;
//   y = C * x + D * u;
//   z = Cz * x + Dz * u;
// end linear_VanDerPol;"
// record SimulationResult
//     resultFile = "linear_VanDerPol_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'linear_VanDerPol', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// end SimulationResult;
// "Warning: The initial conditions are not fully specified. For more information set -d=initialization. In OMEdit Tools->Options->Simulation->OMCFlags, in OMNotebook call setCommandLineOptions("-d=initialization").
// "
// "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// true
// record SimulationResult
//     resultFile = "VanDerPol_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 0.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'VanDerPol', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "stdout            | info    | Linearization will performed at point of time: 0.000000
// LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// stdout            | info    | Linear model is created!
// "
// end SimulationResult;
// "Warning: The initial conditions are not fully specified. For more information set -d=initialization. In OMEdit Tools->Options->Simulation->OMCFlags, in OMNotebook call setCommandLineOptions("-d=initialization").
// "
// true
// "model linear_VanDerPol
//   parameter Integer n = 2 \"number of states\";
//   parameter Integer p = 0 \"number of inputs\";
//   parameter Integer q = 0 \"number of outputs\";
//   parameter Real x0[n] = {1, 2};
//   parameter Real u0[p] = zeros(0);
//   parameter Real A[n, n] = [0, 1; -2.2, 0];
//   parameter Real B[n, p] = zeros(n, p);
//   parameter Real C[q, n] = zeros(q, n);
//   parameter Real D[q, p] = zeros(q, p);
//   Real x[n](start = x0);
//   input Real u[p];
//   output Real y[q];
//   Real 'x_x' = x[1];
//   Real 'x_y' = x[2];
// equation
//   der(x) = A * x + B * u;
//   y = C * x + D * u;
// end linear_VanDerPol;"
// record SimulationResult
//     resultFile = "linear_VanDerPol_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'linear_VanDerPol', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// end SimulationResult;
// "Warning: The initial conditions are not fully specified. For more information set -d=initialization. In OMEdit Tools->Options->Simulation->OMCFlags, in OMNotebook call setCommandLineOptions("-d=initialization").
// "
// "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// endResult
