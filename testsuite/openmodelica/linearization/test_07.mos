// name:     test_07.mos
// keywords: <...>
// status:   correct
// teardown_command: rm -rf *simple_test* output.log
//
// <insert description here>
//

loadFile("test_07.mo");

setCommandLineOptions("--generateSymbolicLinearization");
getErrorString();
linearize(simple_test, stopTime=0);
getErrorString();
setCommandLineOptions("--generateSymbolicLinearization=false");
getErrorString();

loadFile("linearized_model.mo");
getErrorString();
simulate(linearized_model, startTime=0.0, stopTime=10.0, method="euler");
getErrorString();
readFile("linearized_model.log");
list(linearized_model);

//
//  Case for numeric linearization of LotkaVolterra model
//
//linearize with numeric linearization and data recovery
simulate(simple_test, simflags="-l=0 -l_datarec");
getErrorString();
loadFile("linearized_model.mo");
simulate(linearized_model, startTime=0.0, stopTime=10.0, method="euler");
getErrorString();
readFile("linearized_model.log"); // Check that output log is empty
list(linearized_model);

// Result:
// true
// true
// ""
// record SimulationResult
//     resultFile = "simple_test_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 0.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'simple_test', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "stdout            | info    | Linearization will be performed at point of time: 0.000000
// LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// stdout            | info    | Linear model is created.
// "
// end SimulationResult;
// "Warning: The initial conditions are not fully specified. For more information set -d=initialization. In OMEdit Tools->Options->Simulation->OMCFlags, in OMNotebook call setCommandLineOptions(\"-d=initialization\").
// "
// true
// ""
// true
// ""
// record SimulationResult
//     resultFile = "linearized_model_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 10.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'euler', fileNamePrefix = 'linearized_model', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// end SimulationResult;
// "Warning: The initial conditions are not fully specified. For more information set -d=initialization. In OMEdit Tools->Options->Simulation->OMCFlags, in OMNotebook call setCommandLineOptions(\"-d=initialization\").
// "
// "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// "model linearized_model \"simple_test\"
//   parameter Integer n = 2 \"number of states\";
//   parameter Integer m = 0 \"number of inputs\";
//   parameter Integer p = 0 \"number of outputs\";
//   parameter Real x0[n] = {1, 1};
//   parameter Real u0[m] = zeros(0);
//   parameter Real A[n, n] = [0, 2.666666666666667; 0, 0];
//   parameter Real B[n, m] = zeros(n, m);
//   parameter Real C[p, n] = zeros(p, n);
//   parameter Real D[p, m] = zeros(p, m);
//   Real x[n](start = x0);
//   input Real u[m];
//   output Real y[p];
//   Real 'x_z1' = x[1];
//   Real 'x_z2' = x[2];
// equation
//   der(x) = A * x + B * u;
//   y = C * x + D * u;
// end linearized_model;"
// record SimulationResult
//     resultFile = "simple_test_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'simple_test', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = '-l=0 -l_datarec'",
//     messages = "stdout            | info    | Linearization will be performed at point of time: 0.000000
// LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// stdout            | info    | Linear model is created.
// "
// end SimulationResult;
// "Warning: The initial conditions are not fully specified. For more information set -d=initialization. In OMEdit Tools->Options->Simulation->OMCFlags, in OMNotebook call setCommandLineOptions(\"-d=initialization\").
// "
// true
// record SimulationResult
//     resultFile = "linearized_model_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 10.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'euler', fileNamePrefix = 'linearized_model', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// end SimulationResult;
// "Warning: The initial conditions are not fully specified. For more information set -d=initialization. In OMEdit Tools->Options->Simulation->OMCFlags, in OMNotebook call setCommandLineOptions(\"-d=initialization\").
// "
// "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// "model linearized_model \"simple_test\"
//   parameter Integer n = 2 \"number of states\";
//   parameter Integer m = 0 \"number of inputs\";
//   parameter Integer p = 0 \"number of outputs\";
//   parameter Integer nz = 2 \"data recovery variables\";
//   parameter Real x0[2] = {1, 1};
//   parameter Real u0[0] = zeros(0);
//   parameter Real z0[2] = {24, 1.708333333333333};
//   parameter Real A[n, n] = [0, 2.666666830213917; 0, 0];
//   parameter Real B[n, m] = zeros(n, m);
//   parameter Real C[p, n] = zeros(p, n);
//   parameter Real D[p, m] = zeros(p, m);
//   parameter Real Cz[nz, n] = [0, 0; 0, 2.666666830213917];
//   parameter Real Dz[nz, m] = zeros(nz, m);
//   Real x[n](start = x0);
//   input Real u[m];
//   output Real y[p];
//   output Real z[nz];
//   Real 'x_z1' = x[1];
//   Real 'x_z2' = x[2];
//   Real 'z_fac' = z[1];
//   Real 'z_y' = z[2];
// equation
//   der(x) = A * x + B * u;
//   y = C * x + D * u;
//   z = Cz * x + Dz * u;
// end linearized_model;"
// endResult
