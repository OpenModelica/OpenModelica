// name:     DataReconciliationOpenCpsTests
// keywords: extraction algorithm
// status:   correct
// depends: Splitter1_Sx.csv
// cflags: -d=-newInst

//loadModel(Modelica,{"3.1"}); getErrorString();

setCommandLineOptions("--preOptModules+=dataReconciliation");
getErrorString();

loadFile("DataReconciliationTests21jan2013Total.mo");
getErrorString();

translateModel(DataReconciliationTests.DistillationTower);
getErrorString();

translateModel(DataReconciliationTests.VDI2048Exple);
getErrorString();

translateModel(DataReconciliationTests.FlatSimpleExple);
getErrorString();

translateModel(DataReconciliationTests.ExtractionSetS_NL_Test);
getErrorString();

translateModel(DataReconciliationTests.ExtractionSetSTest);
getErrorString();

translateModel(DataReconciliationTests.ExtractionSetSTest2);
getErrorString();

//translateModel(DataReconciliationTests.Pipe1);
//getErrorString();

//translateModel(DataReconciliationTests.Pipe2);
//getErrorString();

//translateModel(DataReconciliationTests.Pipe3);
//getErrorString();

//translateModel(DataReconciliationTests.Pipe4);
//getErrorString();

//translateModel(DataReconciliationTests.Pipe5);
//getErrorString();

translateModel(DataReconciliationTests.RedundancyTestCase1);
getErrorString();

translateModel(DataReconciliationTests.RedundancyTestCase2);
getErrorString();

translateModel(DataReconciliationTests.RedundancyTestCase3);
getErrorString();

simulate(DataReconciliationTests.Splitter1, simflags="-reconcile -sx=./Splitter1_Sx.csv -eps=0.0023");
getErrorString();


// Result:
// true
// ""
// true
// "Notification: Automatically loaded package Complex 3.2.3 due to uses annotation.
// Notification: Automatically loaded package ModelicaServices 3.2.3 due to uses annotation.
// Warning: Requested package Modelica of version 3.2.3, but this package was already loaded with version 3.2. There are no conversion annotations for this version but 3.2.3 is newer than 3.2. There is a possibility that 3.2 remains backwards compatible, but it is not loaded so OpenModelica cannot verify this.
// "
//
// ModelInfo: DataReconciliationTests.DistillationTower
// ==========================================================================
//
//
// orderedEquation (9, 9)
// ========================================
// 1/1 (1): F = 1.0   [binding |0|0|0|0|]
// 2/2 (1): B = 1.0   [binding |0|0|0|0|]
// 3/3 (1): xB1 = 1.0   [binding |0|0|0|0|]
// 4/4 (1): xT1 = 1.0   [binding |0|0|0|0|]
// 5/5 (1): F * xF1 + (-B) * xB1 - T * xT1 = 0.0   [dynamic |0|0|0|0|]
// 6/6 (1): F * xF2 + (-B) * xB2 - T * xT2 = 0.0   [dynamic |0|0|0|0|]
// 7/7 (1): xF1 + xF2 = 100.0   [dynamic |0|0|0|0|]
// 8/8 (1): xB1 + xB2 = 100.0   [dynamic |0|0|0|0|]
// 9/9 (1): xT1 + xT2 = 100.0   [dynamic |0|0|0|0|]
//
//
// orderedVariables (9)
// ========================================
// 1: xT2:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 2: xT1:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 3: xB2:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 4: xB1:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 5: xF2:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 6: xF1:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 7: T:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 8: B:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 9: F:VARIABLE(uncertain=Uncertainty.refine)  type: Real
//
// Matching
// ========================================
// 9 variables and equations
// var 1 is solved in eqn 9
// var 2 is solved in eqn 4
// var 3 is solved in eqn 8
// var 4 is solved in eqn 3
// var 5 is solved in eqn 6
// var 6 is solved in eqn 7
// var 7 is solved in eqn 5
// var 8 is solved in eqn 2
// var 9 is solved in eqn 1
//
// BLT_BLOCKS:
// ==========================================================================
// {{4},{9},{3},{8},{1},{2},{7, 5, 6}}
//
// Targets of blocks without predecessors
// =====================================
// target({4}) : {({4}, 1), ({9}, 2), ({7, 5, 6}, 7)} => Blue_Block_Ranks in target {1, 2, 7} => Blue Block Equations : {4, 9, 7, 5, 6}
// target({3}) : {({3}, 3), ({8}, 4), ({7, 5, 6}, 7)} => Blue_Block_Ranks in target {3, 4, 7} => Blue Block Equations : {3, 8, 7, 5, 6}
// target({1}) : {({1}, 5), ({7, 5, 6}, 7)} => Blue_Block_Ranks in target {5, 7} => Blue Block Equations : {1, 7, 5, 6}
// target({2}) : {({2}, 6), ({7, 5, 6}, 7)} => Blue_Block_Ranks in target {6, 7} => Blue Block Equations : {2, 7, 5, 6}
//
// Loop-1
// ========
//
// ExtractEquationsfromNoPredecessorBlocks :{4} => {4} => known blocks:{4, 9, 7, 5, 6}
//
// ExtractEquationsfromNoPredecessorBlocks :{3} => {3} => known blocks:{3, 8, 7, 5, 6}
//
// ExtractEquationsfromNoPredecessorBlocks :{1} => {1} => known blocks:{1, 7, 5, 6}
//
// ExtractEquationsfromNoPredecessorBlocks :{2} => {2} => known blocks:{2, 7, 5, 6}
//
// Final Extraction After Loop-1:
// ===================================
// SET_C : {}
// SET_S : {}
//
// Loop-2
// ===========
//
// Final Extraction After Loop 2:
// =============================
// SET_C : {9, 6, 5, 7, 8}
// SET_S: {}
//
// FINAL SET OF EQUATIONS After Reconciliation 
// ==========================================================================
// SET_C: {9, 6, 5, 7, 8}
// SET_S: {}
//
//
// SET_C (5)
// ========================================
// 1/1 (1): xT1 + xT2 = 100.0   [dynamic |0|0|0|0|]
// 2/2 (1): F * xF2 + (-B) * xB2 - T * xT2 = 0.0   [dynamic |0|0|0|0|]
// 3/3 (1): F * xF1 + (-B) * xB1 - T * xT1 = 0.0   [dynamic |0|0|0|0|]
// 4/4 (1): xF1 + xF2 = 100.0   [dynamic |0|0|0|0|]
// 5/5 (1): xB1 + xB2 = 100.0   [dynamic |0|0|0|0|]
//
//
//
// Automatic Verification Steps of DataReconciliation Algorithm
// ==========================================================================
//
// knownVariables:{9, 8, 7, 6, 5, 4, 3, 2, 1} (9)
// ========================================
// 1: F:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 2: B:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 3: T:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 4: xF1:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 5: xF2:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 6: xB1:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 7: xB2:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 8: xT1:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 9: xT2:VARIABLE(uncertain=Uncertainty.refine)  type: Real
//
// -SET_C:{9, 6, 5, 7, 8}
// -SET_S:{}
//
// Condition-1 "SET_C and SET_S must not have no equations in common"
// ==========================================================================
// -Passed
//
// Condition-2 "All variables of interest must be involved in SET_C or SET_S"
// ==========================================================================
// -Passed 
//
// -SET_C has all known variables:{3, 4, 5, 6, 2, 7, 8, 9, 1} (9)
// ========================================
// 1: xB2:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 2: xB1:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 3: xF2:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 4: xF1:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 5: xT1:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 6: T:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 7: B:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 8: F:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 9: xT2:VARIABLE(uncertain=Uncertainty.refine)  type: Real
//
// Condition-3 "SET_C equations must be strictly less than Variable of Interest"
// ==========================================================================
// -Passed
// -SET_C contains:5 equations < 9 known variables 
//
// Condition-4 "SET_S should contain all intermediate variables involved in SET_C"
// ==========================================================================
// -Passed
// -SET_C contains No Intermediate Variables 
//
// true
// "Warning: Requested package Modelica of version 3.2.3, but this package was already loaded with version 3.2. There are no conversion annotations for this version but 3.2.3 is newer than 3.2. There is a possibility that 3.2 remains backwards compatible, but it is not loaded so OpenModelica cannot verify this.
// "
//
// ModelInfo: DataReconciliationTests.VDI2048Exple
// ==========================================================================
//
//
// orderedEquation (11, 11)
// ========================================
// 1/1 (1): mFDKEL = 46.241   [binding |0|0|0|0|]
// 2/2 (1): mFDKELL = 45.668   [binding |0|0|0|0|]
// 3/3 (1): mSPL = 44.575   [binding |0|0|0|0|]
// 4/4 (1): mSPLL = 44.319   [binding |0|0|0|0|]
// 5/5 (1): mHK = 69.97799999999999   [binding |0|0|0|0|]
// 6/6 (1): mA7 = 10.364   [binding |0|0|0|0|]
// 7/7 (1): mA6 = 3.744   [binding |0|0|0|0|]
// 8/8 (1): mD = 2.092   [binding |0|0|0|0|]
// 9/9 (1): mFDKEL + mFDKELL + 0.4 * mV + (-mSPLL) - mSPL = 0.0   [dynamic |0|0|0|0|]
// 10/10 (1): mSPL + mSPLL + (-mA5) - mHK - mA7 - mV - mA6 = 0.0   [dynamic |0|0|0|0|]
// 11/11 (1): mA7 + mA6 + mA5 - mHDNK = 0.0   [dynamic |0|0|0|0|]
//
//
// orderedVariables (11)
// ========================================
// 1: mD:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 2: mHDNK:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 3: mA5:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 4: mA6:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 5: mA7:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 6: mHK:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 7: mV:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 8: mSPLL:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 9: mSPL:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 10: mFDKELL:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 11: mFDKEL:VARIABLE(uncertain=Uncertainty.refine)  type: Real
//
// Matching
// ========================================
// 11 variables and equations
// var 1 is solved in eqn 8
// var 2 is solved in eqn 11
// var 3 is solved in eqn 10
// var 4 is solved in eqn 7
// var 5 is solved in eqn 6
// var 6 is solved in eqn 5
// var 7 is solved in eqn 9
// var 8 is solved in eqn 4
// var 9 is solved in eqn 3
// var 10 is solved in eqn 2
// var 11 is solved in eqn 1
//
// BLT_BLOCKS:
// ==========================================================================
// {{8},{6},{7},{3},{4},{1},{2},{9},{5},{10},{11}}
//
// Targets of blocks without predecessors
// =====================================
// target({8}) : {({8}, 1)} => Blue_Block_Ranks in target {1} => Blue Block Equations : {8}
// target({6}) : {({6}, 2), ({10}, 10), ({11}, 11)} => Blue_Block_Ranks in target {2, 10, 11} => Blue Block Equations : {6, 10, 11}
// target({7}) : {({7}, 3), ({10}, 10), ({11}, 11)} => Blue_Block_Ranks in target {3, 10, 11} => Blue Block Equations : {7, 10, 11}
// target({3}) : {({3}, 4), ({9}, 8), ({10}, 10), ({11}, 11)} => Blue_Block_Ranks in target {4, 8, 10, 11} => Blue Block Equations : {3, 9, 10, 11}
// target({4}) : {({4}, 5), ({9}, 8), ({10}, 10), ({11}, 11)} => Blue_Block_Ranks in target {5, 8, 10, 11} => Blue Block Equations : {4, 9, 10, 11}
// target({1}) : {({1}, 6), ({9}, 8), ({10}, 10), ({11}, 11)} => Blue_Block_Ranks in target {6, 8, 10, 11} => Blue Block Equations : {1, 9, 10, 11}
// target({2}) : {({2}, 7), ({9}, 8), ({10}, 10), ({11}, 11)} => Blue_Block_Ranks in target {7, 8, 10, 11} => Blue Block Equations : {2, 9, 10, 11}
// target({5}) : {({5}, 9), ({10}, 10), ({11}, 11)} => Blue_Block_Ranks in target {9, 10, 11} => Blue Block Equations : {5, 10, 11}
//
// Loop-1
// ========
//
// ExtractEquationsfromNoPredecessorBlocks :{8} => {8} => known blocks:{8}
//
// ExtractEquationsfromNoPredecessorBlocks :{6} => {6} => known blocks:{6, 10, 11}
//
// ExtractEquationsfromNoPredecessorBlocks :{7} => {7} => known blocks:{7, 10, 11}
//
// ExtractEquationsfromNoPredecessorBlocks :{3} => {3} => known blocks:{3, 9, 10, 11}
//
// ExtractEquationsfromNoPredecessorBlocks :{4} => {4} => known blocks:{4, 9, 10, 11}
//
// ExtractEquationsfromNoPredecessorBlocks :{1} => {1} => known blocks:{1, 9, 10, 11}
//
// ExtractEquationsfromNoPredecessorBlocks :{2} => {2} => known blocks:{2, 9, 10, 11}
//
// ExtractEquationsfromNoPredecessorBlocks :{5} => {5} => known blocks:{5, 10, 11}
//
// Final Extraction After Loop-1:
// ===================================
// SET_C : {}
// SET_S : {}
//
// Loop-2
// ===========
//
// Final Extraction After Loop 2:
// =============================
// SET_C : {10, 11, 9}
// SET_S: {}
//
// FINAL SET OF EQUATIONS After Reconciliation 
// ==========================================================================
// SET_C: {10, 11, 9}
// SET_S: {}
//
//
// SET_C (3)
// ========================================
// 1/1 (1): mSPL + mSPLL + (-mA5) - mHK - mA7 - mV - mA6 = 0.0   [dynamic |0|0|0|0|]
// 2/2 (1): mA7 + mA6 + mA5 - mHDNK = 0.0   [dynamic |0|0|0|0|]
// 3/3 (1): mFDKEL + mFDKELL + 0.4 * mV + (-mSPLL) - mSPL = 0.0   [dynamic |0|0|0|0|]
//
//
//
// Automatic Verification Steps of DataReconciliation Algorithm
// ==========================================================================
//
// knownVariables:{11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1} (11)
// ========================================
// 1: mFDKEL:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 2: mFDKELL:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 3: mSPL:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 4: mSPLL:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 5: mV:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 6: mHK:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 7: mA7:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 8: mA6:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 9: mA5:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 10: mHDNK:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 11: mD:VARIABLE(uncertain=Uncertainty.refine)  type: Real
//
// -SET_C:{10, 11, 9}
// -SET_S:{}
//
// Condition-1 "SET_C and SET_S must not have no equations in common"
// ==========================================================================
// -Passed
//
// Condition-2 "All variables of interest must be involved in SET_C or SET_S"
// ==========================================================================
// -Failed
//
// knownVariables not Found:{1} (1)
// ========================================
// 1: mD:VARIABLE(uncertain=Uncertainty.refine)  type: Real
//
// false
// "Warning: Requested package Modelica of version 3.2.3, but this package was already loaded with version 3.2. There are no conversion annotations for this version but 3.2.3 is newer than 3.2. There is a possibility that 3.2 remains backwards compatible, but it is not loaded so OpenModelica cannot verify this.
// Error: Internal error : Condition 2- Failed : The system is ill-posed.
// Error: pre-optimization module dataReconciliation (simulation) failed.
// "
//
// ModelInfo: DataReconciliationTests.FlatSimpleExple
// ==========================================================================
//
//
// orderedEquation (4, 4)
// ========================================
// 1/1 (1): q1 = 1.0   [binding |0|0|0|0|]
// 2/2 (1): q2 = 2.0   [binding |0|0|0|0|]
// 3/3 (1): q1 = q2 + q3   [dynamic |0|0|0|0|]
// 4/4 (1): q4 = q2 + q3   [dynamic |0|0|0|0|]
//
//
// orderedVariables (4)
// ========================================
// 1: q4:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 2: q3:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 3: q2:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 4: q1:VARIABLE(uncertain=Uncertainty.refine)  type: Real
//
// Matching
// ========================================
// 4 variables and equations
// var 1 is solved in eqn 4
// var 2 is solved in eqn 3
// var 3 is solved in eqn 2
// var 4 is solved in eqn 1
//
// BLT_BLOCKS:
// ==========================================================================
// {{2},{1},{3},{4}}
//
// Targets of blocks without predecessors
// =====================================
// target({2}) : {({2}, 1), ({3}, 3), ({4}, 4)} => Blue_Block_Ranks in target {1, 3, 4} => Blue Block Equations : {2, 3, 4}
// target({1}) : {({1}, 2), ({3}, 3), ({4}, 4)} => Blue_Block_Ranks in target {2, 3, 4} => Blue Block Equations : {1, 3, 4}
//
// Loop-1
// ========
//
// ExtractEquationsfromNoPredecessorBlocks :{2} => {2} => known blocks:{2, 3, 4}
//
// ExtractEquationsfromNoPredecessorBlocks :{1} => {1} => known blocks:{1, 3, 4}
//
// Final Extraction After Loop-1:
// ===================================
// SET_C : {}
// SET_S : {}
//
// Loop-2
// ===========
//
// Final Extraction After Loop 2:
// =============================
// SET_C : {3, 4}
// SET_S: {}
//
// FINAL SET OF EQUATIONS After Reconciliation 
// ==========================================================================
// SET_C: {3, 4}
// SET_S: {}
//
//
// SET_C (2)
// ========================================
// 1/1 (1): q1 = q2 + q3   [dynamic |0|0|0|0|]
// 2/2 (1): q4 = q2 + q3   [dynamic |0|0|0|0|]
//
//
//
// Automatic Verification Steps of DataReconciliation Algorithm
// ==========================================================================
//
// knownVariables:{4, 3, 2, 1} (4)
// ========================================
// 1: q1:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 2: q2:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 3: q3:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 4: q4:VARIABLE(uncertain=Uncertainty.refine)  type: Real
//
// -SET_C:{3, 4}
// -SET_S:{}
//
// Condition-1 "SET_C and SET_S must not have no equations in common"
// ==========================================================================
// -Passed
//
// Condition-2 "All variables of interest must be involved in SET_C or SET_S"
// ==========================================================================
// -Passed 
//
// -SET_C has all known variables:{1, 2, 3, 4} (4)
// ========================================
// 1: q4:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 2: q3:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 3: q2:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 4: q1:VARIABLE(uncertain=Uncertainty.refine)  type: Real
//
// Condition-3 "SET_C equations must be strictly less than Variable of Interest"
// ==========================================================================
// -Passed
// -SET_C contains:2 equations < 4 known variables 
//
// Condition-4 "SET_S should contain all intermediate variables involved in SET_C"
// ==========================================================================
// -Passed
// -SET_C contains No Intermediate Variables 
//
// true
// "Warning: Requested package Modelica of version 3.2.3, but this package was already loaded with version 3.2. There are no conversion annotations for this version but 3.2.3 is newer than 3.2. There is a possibility that 3.2 remains backwards compatible, but it is not loaded so OpenModelica cannot verify this.
// "
//
// ModelInfo: DataReconciliationTests.ExtractionSetS_NL_Test
// ==========================================================================
//
//
// orderedEquation (6, 6)
// ========================================
// 1/1 (1): x1 + x2 = 0.0   [dynamic |0|0|0|0|]
// 2/2 (1): x1 - x2 = 0.0   [dynamic |0|0|0|0|]
// 3/3 (1): y1 = x2 + 2.0 * x3   [dynamic |0|0|0|0|]
// 4/4 (1): x3 + y2 - y1 = x2   [dynamic |0|0|0|0|]
// 5/5 (1): y2 + y3 = 0.0   [dynamic |0|0|0|0|]
// 6/6 (1): y2 * y3 = 3.0   [dynamic |0|0|0|0|]
//
//
// orderedVariables (6)
// ========================================
// 1: y3:VARIABLE()  type: Real
// 2: y2:VARIABLE()  type: Real
// 3: y1:VARIABLE()  type: Real
// 4: x3:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 5: x2:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 6: x1:VARIABLE(uncertain=Uncertainty.refine)  type: Real
//
// Matching
// ========================================
// 6 variables and equations
// var 1 is solved in eqn 6
// var 2 is solved in eqn 5
// var 3 is solved in eqn 4
// var 4 is solved in eqn 3
// var 5 is solved in eqn 2
// var 6 is solved in eqn 1
//
// BLT_BLOCKS:
// ==========================================================================
// {{5, 6},{1, 2},{3, 4}}
//
// Targets of blocks without predecessors
// =====================================
// target({5, 6}) : {({5, 6}, 1), ({3, 4}, 3)} => Blue_Block_Ranks in target {3} => Blue Block Equations : {3}
// target({1, 2}) : {({1, 2}, 2), ({3, 4}, 3)} => Blue_Block_Ranks in target {2, 3} => Blue Block Equations : {1, 2, 3}
//
// Loop-1
// ========
//
// ExtractEquationsfromNoPredecessorBlocks :{5, 6} => {3, 4} => known blocks:{3}
//
// Afterinsertion :{3}=> SET_S :{3, 5}
//
// ExtractEquationsfromNoPredecessorBlocks :{1, 2} => {1, 2} => known blocks:{1, 2}
//
// Final Extraction After Loop-1:
// ===================================
// SET_C : {}
// SET_S : {3, 5}
//
// Loop-2
// ===========
//
// Final Extraction After Loop 2:
// =============================
// SET_C : {}
// SET_S: {3, 5, 4}
// false
// "Warning: Requested package Modelica of version 3.2.3, but this package was already loaded with version 3.2. There are no conversion annotations for this version but 3.2.3 is newer than 3.2. There is a possibility that 3.2 remains backwards compatible, but it is not loaded so OpenModelica cannot verify this.
// Error: Internal error : Problem is ill posed because a variable of interest is set on boundary condition B
// Error: Internal error  Set-C is Empty! : Problem is ill posed because there are two few variables of interest
// Error: pre-optimization module dataReconciliation (simulation) failed.
// "
//
// ModelInfo: DataReconciliationTests.ExtractionSetSTest
// ==========================================================================
//
//
// orderedEquation (6, 6)
// ========================================
// 1/1 (1): x1 + x2 = 0.0   [dynamic |0|0|0|0|]
// 2/2 (1): x1 - x2 = 0.0   [dynamic |0|0|0|0|]
// 3/3 (1): y1 = x2 + 2.0 * x3   [dynamic |0|0|0|0|]
// 4/4 (1): x3 + y2 - y1 = x2   [dynamic |0|0|0|0|]
// 5/5 (1): y2 + y3 = 0.0   [dynamic |0|0|0|0|]
// 6/6 (1): y2 + (-2.0) * y3 = 3.0   [dynamic |0|0|0|0|]
//
//
// orderedVariables (6)
// ========================================
// 1: y3:VARIABLE()  type: Real
// 2: y2:VARIABLE()  type: Real
// 3: y1:VARIABLE()  type: Real
// 4: x3:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 5: x2:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 6: x1:VARIABLE(uncertain=Uncertainty.refine)  type: Real
//
// Matching
// ========================================
// 6 variables and equations
// var 1 is solved in eqn 6
// var 2 is solved in eqn 5
// var 3 is solved in eqn 4
// var 4 is solved in eqn 3
// var 5 is solved in eqn 2
// var 6 is solved in eqn 1
//
// BLT_BLOCKS:
// ==========================================================================
// {{5, 6},{1, 2},{3, 4}}
//
// Targets of blocks without predecessors
// =====================================
// target({5, 6}) : {({5, 6}, 1), ({3, 4}, 3)} => Blue_Block_Ranks in target {3} => Blue Block Equations : {3}
// target({1, 2}) : {({1, 2}, 2), ({3, 4}, 3)} => Blue_Block_Ranks in target {2, 3} => Blue Block Equations : {1, 2, 3}
//
// Loop-1
// ========
//
// ExtractEquationsfromNoPredecessorBlocks :{5, 6} => {3, 4} => known blocks:{3}
//
// Afterinsertion :{3}=> SET_S :{3, 5}
//
// ExtractEquationsfromNoPredecessorBlocks :{1, 2} => {1, 2} => known blocks:{1, 2}
//
// Final Extraction After Loop-1:
// ===================================
// SET_C : {}
// SET_S : {3, 5}
//
// Loop-2
// ===========
//
// Final Extraction After Loop 2:
// =============================
// SET_C : {}
// SET_S: {3, 5, 4}
// false
// "Warning: Requested package Modelica of version 3.2.3, but this package was already loaded with version 3.2. There are no conversion annotations for this version but 3.2.3 is newer than 3.2. There is a possibility that 3.2 remains backwards compatible, but it is not loaded so OpenModelica cannot verify this.
// Error: Internal error : Problem is ill posed because a variable of interest is set on boundary condition B
// Error: Internal error  Set-C is Empty! : Problem is ill posed because there are two few variables of interest
// Error: pre-optimization module dataReconciliation (simulation) failed.
// "
//
// ModelInfo: DataReconciliationTests.ExtractionSetSTest2
// ==========================================================================
//
//
// orderedEquation (11, 11)
// ========================================
// 1/1 (1): x1 + x2 = 0.0   [dynamic |0|0|0|0|]
// 2/2 (1): x1 - x2 = 0.0   [dynamic |0|0|0|0|]
// 3/3 (1): y1 = x2 + 2.0 * x3   [dynamic |0|0|0|0|]
// 4/4 (1): x3 + y2 - y1 = x2   [dynamic |0|0|0|0|]
// 5/5 (1): y2 + y3 = 0.0   [dynamic |0|0|0|0|]
// 6/6 (1): y2 + (-2.0) * y3 = 3.0   [dynamic |0|0|0|0|]
// 7/7 (1): z1 + z2 + z3 + y3 = 2.0   [dynamic |0|0|0|0|]
// 8/8 (1): z2 + 2.0 * z3 = x1 - x2   [dynamic |0|0|0|0|]
// 9/9 (1): z3 = 2.0 * x3   [dynamic |0|0|0|0|]
// 10/10 (1): y1 + y2 + z4 = x2 + 3.0 * x3   [dynamic |0|0|0|0|]
// 11/11 (1): z4 - z5 = x1 - x3   [dynamic |0|0|0|0|]
//
//
// orderedVariables (11)
// ========================================
// 1: z5:VARIABLE()  type: Real
// 2: z4:VARIABLE()  type: Real
// 3: z3:VARIABLE()  type: Real
// 4: z2:VARIABLE()  type: Real
// 5: z1:VARIABLE()  type: Real
// 6: y3:VARIABLE()  type: Real
// 7: y2:VARIABLE()  type: Real
// 8: y1:VARIABLE()  type: Real
// 9: x3:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 10: x2:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 11: x1:VARIABLE(uncertain=Uncertainty.refine)  type: Real
//
// Matching
// ========================================
// 11 variables and equations
// var 1 is solved in eqn 11
// var 2 is solved in eqn 10
// var 3 is solved in eqn 9
// var 4 is solved in eqn 8
// var 5 is solved in eqn 7
// var 6 is solved in eqn 6
// var 7 is solved in eqn 5
// var 8 is solved in eqn 4
// var 9 is solved in eqn 3
// var 10 is solved in eqn 2
// var 11 is solved in eqn 1
//
// BLT_BLOCKS:
// ==========================================================================
// {{2, 1},{6, 5},{4, 3},{10},{11},{9},{8},{7}}
//
// Targets of blocks without predecessors
// =====================================
// target({2, 1}) : {({2, 1}, 1), ({4, 3}, 3)} => Blue_Block_Ranks in target {1, 3} => Blue Block Equations : {2, 1, 3}
// target({6, 5}) : {({6, 5}, 2), ({4, 3}, 3)} => Blue_Block_Ranks in target {3} => Blue Block Equations : {3}
//
// Loop-1
// ========
//
// ExtractEquationsfromNoPredecessorBlocks :{2, 1} => {2, 1} => known blocks:{2, 1, 3}
//
// ExtractEquationsfromNoPredecessorBlocks :{6, 5} => {4, 3} => known blocks:{3}
//
// Afterinsertion :{3}=> SET_S :{3, 6}
//
// Final Extraction After Loop-1:
// ===================================
// SET_C : {}
// SET_S : {3, 6}
//
// Loop-2
// ===========
//
// Final Extraction After Loop 2:
// =============================
// SET_C : {}
// SET_S: {3, 6, 4}
// false
// "Warning: Requested package Modelica of version 3.2.3, but this package was already loaded with version 3.2. There are no conversion annotations for this version but 3.2.3 is newer than 3.2. There is a possibility that 3.2 remains backwards compatible, but it is not loaded so OpenModelica cannot verify this.
// Error: Internal error : Problem is ill posed because a variable of interest is set on boundary condition B
// Error: Internal error  Set-C is Empty! : Problem is ill posed because there are two few variables of interest
// Error: pre-optimization module dataReconciliation (simulation) failed.
// "
//
// ModelInfo: DataReconciliationTests.RedundancyTestCase1
// ==========================================================================
//
//
// orderedEquation (6, 6)
// ========================================
// 1/1 (1): x1 = 1.0   [binding |0|0|0|0|]
// 2/2 (1): x2 = 2.0   [binding |0|0|0|0|]
// 3/3 (1): x1 + (-x2) - x3 = 0.0   [dynamic |0|0|0|0|]
// 4/4 (1): x2 - x4 = 0.0   [dynamic |0|0|0|0|]
// 5/5 (1): x3 - x5 = 0.0   [dynamic |0|0|0|0|]
// 6/6 (1): x4 + x5 - x6 = 0.0   [dynamic |0|0|0|0|]
//
//
// orderedVariables (6)
// ========================================
// 1: x6:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 2: x5:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 3: x4:VARIABLE()  type: Real
// 4: x3:VARIABLE()  type: Real
// 5: x2:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 6: x1:VARIABLE(uncertain=Uncertainty.refine)  type: Real
//
// Matching
// ========================================
// 6 variables and equations
// var 1 is solved in eqn 6
// var 2 is solved in eqn 5
// var 3 is solved in eqn 4
// var 4 is solved in eqn 3
// var 5 is solved in eqn 2
// var 6 is solved in eqn 1
//
// BLT_BLOCKS:
// ==========================================================================
// {{2},{4},{1},{3},{5},{6}}
//
// Targets of blocks without predecessors
// =====================================
// target({2}) : {({2}, 1), ({4}, 2), ({3}, 4), ({5}, 5), ({6}, 6)} => Blue_Block_Ranks in target {1, 5, 6} => Blue Block Equations : {2, 5, 6}
// target({1}) : {({1}, 3), ({3}, 4), ({5}, 5), ({6}, 6)} => Blue_Block_Ranks in target {3, 5, 6} => Blue Block Equations : {1, 5, 6}
//
// Loop-1
// ========
//
// ExtractEquationsfromNoPredecessorBlocks :{2} => {2} => known blocks:{2, 5, 6}
//
// ExtractEquationsfromNoPredecessorBlocks :{1} => {1} => known blocks:{1, 5, 6}
//
// Final Extraction After Loop-1:
// ===================================
// SET_C : {}
// SET_S : {}
//
// Loop-2
// ===========
//
// Final Extraction After Loop 2:
// =============================
// SET_C : {5, 6}
// SET_S: {4, 3}
//
// FINAL SET OF EQUATIONS After Reconciliation 
// ==========================================================================
// SET_C: {5, 6}
// SET_S: {4, 3}
//
//
// SET_C (2)
// ========================================
// 1/1 (1): x3 - x5 = 0.0   [dynamic |0|0|0|0|]
// 2/2 (1): x4 + x5 - x6 = 0.0   [dynamic |0|0|0|0|]
//
//
// SET_S (2)
// ========================================
// 1/1 (1): x2 - x4 = 0.0   [dynamic |0|0|0|0|]
// 2/2 (1): x1 + (-x2) - x3 = 0.0   [dynamic |0|0|0|0|]
//
//
// Unknown variables in SET_S  (2)
// ========================================
// 1: x3:VARIABLE()  type: Real
// 2: x4:VARIABLE()  type: Real
//
//
//
// Automatic Verification Steps of DataReconciliation Algorithm
// ==========================================================================
//
// knownVariables:{6, 5, 2, 1} (4)
// ========================================
// 1: x1:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 2: x2:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 3: x5:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 4: x6:VARIABLE(uncertain=Uncertainty.refine)  type: Real
//
// -SET_C:{5, 6}
// -SET_S:{4, 3}
//
// Condition-1 "SET_C and SET_S must not have no equations in common"
// ==========================================================================
// -Passed
//
// Condition-2 "All variables of interest must be involved in SET_C or SET_S"
// ==========================================================================
// -Passed 
//
// -SET_C has known variables:{1, 2} (2)
// ========================================
// 1: x6:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 2: x5:VARIABLE(uncertain=Uncertainty.refine)  type: Real
//
//
// -SET_S has known variables:{5, 6} (2)
// ========================================
// 1: x2:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 2: x1:VARIABLE(uncertain=Uncertainty.refine)  type: Real
//
// Condition-3 "SET_C equations must be strictly less than Variable of Interest"
// ==========================================================================
// -Passed
// -SET_C contains:2 equations < 4 known variables 
//
// Condition-4 "SET_S should contain all intermediate variables involved in SET_C"
// ==========================================================================
//
// -SET_C has intermediate variables:{3, 4} (2)
// ========================================
// 1: x4:VARIABLE()  type: Real
// 2: x3:VARIABLE()  type: Real
//
//
// -SET_S has intermediate variables involved in SET_C:{3, 4} (2)
// ========================================
// 1: x4:VARIABLE()  type: Real
// 2: x3:VARIABLE()  type: Real
//
// -Passed
//
// Condition-5 "SET_S should be square "
// ==========================================================================
// -Passed
//  Set_S has 2 equations and 2 variables
//
// true
// "Warning: Requested package Modelica of version 3.2.3, but this package was already loaded with version 3.2. There are no conversion annotations for this version but 3.2.3 is newer than 3.2. There is a possibility that 3.2 remains backwards compatible, but it is not loaded so OpenModelica cannot verify this.
// "
//
// ModelInfo: DataReconciliationTests.RedundancyTestCase2
// ==========================================================================
//
//
// orderedEquation (6, 6)
// ========================================
// 1/1 (1): x1 = 1.0   [binding |0|0|0|0|]
// 2/2 (1): x2 = 2.0   [binding |0|0|0|0|]
// 3/3 (1): x1 + (-x2) - x3 = 0.0   [dynamic |0|0|0|0|]
// 4/4 (1): x2 - x4 = 0.0   [dynamic |0|0|0|0|]
// 5/5 (1): x3 - x5 = 0.0   [dynamic |0|0|0|0|]
// 6/6 (1): x4 + x5 - x6 = 0.0   [dynamic |0|0|0|0|]
//
//
// orderedVariables (6)
// ========================================
// 1: x6:VARIABLE()  type: Real
// 2: x5:VARIABLE()  type: Real
// 3: x4:VARIABLE()  type: Real
// 4: x3:VARIABLE()  type: Real
// 5: x2:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 6: x1:VARIABLE(uncertain=Uncertainty.refine)  type: Real
//
// Matching
// ========================================
// 6 variables and equations
// var 1 is solved in eqn 6
// var 2 is solved in eqn 5
// var 3 is solved in eqn 4
// var 4 is solved in eqn 3
// var 5 is solved in eqn 2
// var 6 is solved in eqn 1
//
// BLT_BLOCKS:
// ==========================================================================
// {{2},{4},{1},{3},{5},{6}}
//
// Targets of blocks without predecessors
// =====================================
// target({2}) : {({2}, 1)} => Blue_Block_Ranks in target {1} => Blue Block Equations : {2}
// target({1}) : {({1}, 3)} => Blue_Block_Ranks in target {3} => Blue Block Equations : {1}
//
// Loop-1
// ========
//
// ExtractEquationsfromNoPredecessorBlocks :{2} => {2} => known blocks:{2}
//
// ExtractEquationsfromNoPredecessorBlocks :{1} => {1} => known blocks:{1}
//
// Final Extraction After Loop-1:
// ===================================
// SET_C : {}
// SET_S : {}
//
// Loop-2
// ===========
//
// Final Extraction After Loop 2:
// =============================
// SET_C : {}
// SET_S: {}
// false
// "Warning: Requested package Modelica of version 3.2.3, but this package was already loaded with version 3.2. There are no conversion annotations for this version but 3.2.3 is newer than 3.2. There is a possibility that 3.2 remains backwards compatible, but it is not loaded so OpenModelica cannot verify this.
// Error: Internal error  Set-C is Empty! : Problem is ill posed because there are two few variables of interest
// Error: pre-optimization module dataReconciliation (simulation) failed.
// "
//
// ModelInfo: DataReconciliationTests.RedundancyTestCase3
// ==========================================================================
//
//
// orderedEquation (6, 6)
// ========================================
// 1/1 (1): x1 = 1.0   [binding |0|0|0|0|]
// 2/2 (1): x2 = 2.0   [binding |0|0|0|0|]
// 3/3 (1): x1 + (-x2) - x3 = 0.0   [dynamic |0|0|0|0|]
// 4/4 (1): x2 - x4 = 0.0   [dynamic |0|0|0|0|]
// 5/5 (1): x3 - x5 = 0.0   [dynamic |0|0|0|0|]
// 6/6 (1): x4 + x5 - x6 = 0.0   [dynamic |0|0|0|0|]
//
//
// orderedVariables (6)
// ========================================
// 1: x6:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 2: x5:VARIABLE()  type: Real
// 3: x4:VARIABLE()  type: Real
// 4: x3:VARIABLE()  type: Real
// 5: x2:VARIABLE()  type: Real
// 6: x1:VARIABLE(uncertain=Uncertainty.refine)  type: Real
//
// Matching
// ========================================
// 6 variables and equations
// var 1 is solved in eqn 6
// var 2 is solved in eqn 5
// var 3 is solved in eqn 4
// var 4 is solved in eqn 3
// var 5 is solved in eqn 2
// var 6 is solved in eqn 1
//
// BLT_BLOCKS:
// ==========================================================================
// {{2},{4},{1},{3},{5},{6}}
//
// Targets of blocks without predecessors
// =====================================
// target({2}) : {({2}, 1), ({4}, 2), ({3}, 4), ({5}, 5), ({6}, 6)} => Blue_Block_Ranks in target {6} => Blue Block Equations : {6}
// target({1}) : {({1}, 3), ({3}, 4), ({5}, 5), ({6}, 6)} => Blue_Block_Ranks in target {3, 6} => Blue Block Equations : {1, 6}
//
// Loop-1
// ========
//
// ExtractEquationsfromNoPredecessorBlocks :{2} => {6} => known blocks:{6}
//
// Afterinsertion :{6}=> SET_S :{6}
//
// ExtractEquationsfromNoPredecessorBlocks :{1} => {1} => known blocks:{1}
//
// Final Extraction After Loop-1:
// ===================================
// SET_C : {}
// SET_S : {}
//
// Loop-2
// ===========
//
// Final Extraction After Loop 2:
// =============================
// SET_C : {6}
// SET_S: {4, 3, 5}
//
// FINAL SET OF EQUATIONS After Reconciliation 
// ==========================================================================
// SET_C: {6}
// SET_S: {4, 3, 5}
//
//
// SET_C (1)
// ========================================
// 1/1 (1): x4 + x5 - x6 = 0.0   [dynamic |0|0|0|0|]
//
//
// SET_S (3)
// ========================================
// 1/1 (1): x2 - x4 = 0.0   [dynamic |0|0|0|0|]
// 2/2 (1): x1 + (-x2) - x3 = 0.0   [dynamic |0|0|0|0|]
// 3/3 (1): x3 - x5 = 0.0   [dynamic |0|0|0|0|]
//
//
// Unknown variables in SET_S  (4)
// ========================================
// 1: x5:VARIABLE()  type: Real
// 2: x3:VARIABLE()  type: Real
// 3: x4:VARIABLE()  type: Real
// 4: x2:VARIABLE()  type: Real
//
//
//
// Automatic Verification Steps of DataReconciliation Algorithm
// ==========================================================================
//
// knownVariables:{6, 1} (2)
// ========================================
// 1: x1:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 2: x6:VARIABLE(uncertain=Uncertainty.refine)  type: Real
//
// -SET_C:{6}
// -SET_S:{4, 3, 5}
//
// Condition-1 "SET_C and SET_S must not have no equations in common"
// ==========================================================================
// -Passed
//
// Condition-2 "All variables of interest must be involved in SET_C or SET_S"
// ==========================================================================
// -Passed 
//
// -SET_C has known variables:{1} (1)
// ========================================
// 1: x6:VARIABLE(uncertain=Uncertainty.refine)  type: Real
//
//
// -SET_S has known variables:{6} (1)
// ========================================
// 1: x1:VARIABLE(uncertain=Uncertainty.refine)  type: Real
//
// Condition-3 "SET_C equations must be strictly less than Variable of Interest"
// ==========================================================================
// -Passed
// -SET_C contains:1 equations < 2 known variables 
//
// Condition-4 "SET_S should contain all intermediate variables involved in SET_C"
// ==========================================================================
//
// -SET_C has intermediate variables:{2, 3} (2)
// ========================================
// 1: x5:VARIABLE()  type: Real
// 2: x4:VARIABLE()  type: Real
//
//
// -SET_S has intermediate variables involved in SET_C:{2, 3} (2)
// ========================================
// 1: x5:VARIABLE()  type: Real
// 2: x4:VARIABLE()  type: Real
//
// -Passed
//
// Condition-5 "SET_S should be square "
// ==========================================================================
// -Failed
//  Set_S has 3 equations and 4 variables
//
// false
// "Warning: Requested package Modelica of version 3.2.3, but this package was already loaded with version 3.2. There are no conversion annotations for this version but 3.2.3 is newer than 3.2. There is a possibility that 3.2 remains backwards compatible, but it is not loaded so OpenModelica cannot verify this.
// Error: Internal error : Condition 5-Failed Set_S is not square: The system is ill-posed.
// Error: pre-optimization module dataReconciliation (simulation) failed.
// "
//
// ModelInfo: DataReconciliationTests.Splitter1
// ==========================================================================
//
//
// orderedEquation (25, 25)
// ========================================
// 1/1 (1): P01 = 3.0   [dynamic |0|0|0|0|]
// 2/2 (1): P02 = 1.0   [dynamic |0|0|0|0|]
// 3/3 (1): P03 = 1.0   [dynamic |0|0|0|0|]
// 4/4 (1): T1_P1 = P01   [dynamic |0|0|0|0|]
// 5/5 (1): T2_P2 = P02   [dynamic |0|0|0|0|]
// 6/6 (1): T3_P2 = P03   [dynamic |0|0|0|0|]
// 7/7 (1): T1_P1 - T1_P2 = Q1 ^ 2.0   [dynamic |0|0|0|0|]
// 8/8 (1): T2_P1 - T2_P2 = Q2 ^ 2.0   [dynamic |0|0|0|0|]
// 9/9 (1): T3_P1 - T3_P2 = Q3 ^ 2.0   [dynamic |0|0|0|0|]
// 10/10 (1): V_Q1 = V_Q2 + V_Q3   [dynamic |0|0|0|0|]
// 11/11 (1): V_Q1 = T1_Q2   [dynamic |0|0|0|0|]
// 12/12 (1): T1_Q2 = Q1   [dynamic |0|0|0|0|]
// 13/13 (1): V_Q2 = T2_Q1   [dynamic |0|0|0|0|]
// 14/14 (1): T2_Q1 = Q2   [dynamic |0|0|0|0|]
// 15/15 (1): V_Q3 = T3_Q1   [dynamic |0|0|0|0|]
// 16/16 (1): T3_Q1 = Q3   [dynamic |0|0|0|0|]
// 17/17 (1): T1_P2 = V_P1   [dynamic |0|0|0|0|]
// 18/18 (1): V_P1 = P   [dynamic |0|0|0|0|]
// 19/19 (1): T2_P1 = V_P2   [dynamic |0|0|0|0|]
// 20/20 (1): V_P2 = P   [dynamic |0|0|0|0|]
// 21/21 (1): T3_P1 = V_P3   [dynamic |0|0|0|0|]
// 22/22 (1): V_P3 = P   [dynamic |0|0|0|0|]
// 23/23 (1): T1_Q1 = Q1   [dynamic |0|0|0|0|]
// 24/24 (1): T2_Q2 = Q2   [dynamic |0|0|0|0|]
// 25/25 (1): T3_Q2 = Q3   [dynamic |0|0|0|0|]
//
//
// orderedVariables (25)
// ========================================
// 1: T3_Q2:VARIABLE()  type: Real
// 2: T2_Q2:VARIABLE()  type: Real
// 3: T1_Q1:VARIABLE()  type: Real
// 4: V_P3:VARIABLE()  type: Real
// 5: V_P2:VARIABLE()  type: Real
// 6: P:VARIABLE()  type: Real
// 7: V_P1:VARIABLE()  type: Real
// 8: T3_Q1:VARIABLE()  type: Real
// 9: T2_Q1:VARIABLE()  type: Real
// 10: T1_Q2:VARIABLE()  type: Real
// 11: V_Q3:VARIABLE()  type: Real
// 12: V_Q2:VARIABLE()  type: Real
// 13: V_Q1:VARIABLE()  type: Real
// 14: T3_P1:VARIABLE()  type: Real
// 15: T2_P1:VARIABLE()  type: Real
// 16: T1_P2:VARIABLE()  type: Real
// 17: T3_P2:VARIABLE()  type: Real
// 18: T2_P2:VARIABLE()  type: Real
// 19: T1_P1:VARIABLE()  type: Real
// 20: P03:VARIABLE()  type: Real
// 21: P02:VARIABLE()  type: Real
// 22: P01:VARIABLE()  type: Real
// 23: Q3:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 24: Q2:VARIABLE(uncertain=Uncertainty.refine)  type: Real
// 25: Q1:VARIABLE(uncertain=Uncertainty.refine)  type: Real
//
// Matching
// ========================================
// 25 variables and equations
// var 1 is solved in eqn 25
// var 2 is solved in eqn 24
// var 3 is solved in eqn 23
// var 4 is solved in eqn 22
// var 5 is solved in eqn 20
// var 6 is solved in eqn 18
// var 7 is solved in eqn 17
// var 8 is solved in eqn 16
// var 9 is solved in eqn 14
// var 10 is solved in eqn 11
// var 11 is solved in eqn 15
// var 12 is solved in eqn 13
// var 13 is solved in eqn 10
// var 14 is solved in eqn 21
// var 15 is solved in eqn 19
// var 16 is solved in eqn 7
// var 17 is solved in eqn 6
// var 18 is solved in eqn 5
// var 19 is solved in eqn 4
// var 20 is solved in eqn 3
// var 21 is solved in eqn 2
// var 22 is solved in eqn 1
// var 23 is solved in eqn 9
// var 24 is solved in eqn 8
// var 25 is solved in eqn 12
//
// BLT_BLOCKS:
// ==========================================================================
// {{3},{6},{2},{5},{1},{4},{16, 15, 20, 19, 8, 14, 13, 10, 11, 12, 7, 17, 18, 22, 21, 9},{25},{24},{23}}
//
// Targets of blocks without predecessors
// =====================================
// target({3}) : {({3}, 1), ({6}, 2), ({16, 15, 20, 19, 8, 14, 13, 10, 11, 12, 7, 17, 18, 22, 21, 9}, 7)} => Blue_Block_Ranks in target {7} => Blue Block Equations : {8, 12, 9}
// target({2}) : {({2}, 3), ({5}, 4), ({16, 15, 20, 19, 8, 14, 13, 10, 11, 12, 7, 17, 18, 22, 21, 9}, 7)} => Blue_Block_Ranks in target {7} => Blue Block Equations : {8, 12, 9}
// target({1}) : {({1}, 5), ({4}, 6), ({16, 15, 20, 19, 8, 14, 13, 10, 11, 12, 7, 17, 18, 22, 21, 9}, 7)} => Blue_Block_Ranks in target {7} => Blue Block Equations : {8, 12, 9}
//
// Loop-1
// ========
//
// ExtractEquationsfromNoPredecessorBlocks :{3} => {16, 15, 20, 19, 8, 14, 13, 10, 11, 12, 7, 17, 18, 22, 21, 9} => known blocks:{8, 12, 9}
//
// Afterinsertion :{8, 12, 9}=> SET_S :{8}
//
// ExtractEquationsfromNoPredecessorBlocks :{2} => {16, 15, 20, 19, 8, 14, 13, 10, 11, 12, 7, 17, 18, 22, 21, 9} => known blocks:{12, 9}
//
// Afterinsertion :{12, 9}=> SET_S :{12, 8}
//
// ExtractEquationsfromNoPredecessorBlocks :{1} => {16, 15, 20, 19, 8, 14, 13, 10, 11, 12, 7, 17, 18, 22, 21, 9} => known blocks:{9}
//
// Afterinsertion :{9}=> SET_S :{9, 12, 8}
//
// Final Extraction After Loop-1:
// ===================================
// SET_C : {}
// SET_S : {9, 12, 8}
//
// Loop-2
// ===========
//
// Final Extraction After Loop 2:
// =============================
// SET_C : {}
// SET_S: {12, 6, 21, 22, 18, 17, 11, 10, 13, 14, 19, 20, 15, 16, 5, 4}
// record SimulationResult
//     resultFile = "",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'DataReconciliationTests.Splitter1', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = '-reconcile -sx=./Splitter1_Sx.csv -eps=0.0023'",
//     messages = "Failed to build model: DataReconciliationTests.Splitter1"
// end SimulationResult;
// "Warning: Requested package Modelica of version 3.2.3, but this package was already loaded with version 3.2. There are no conversion annotations for this version but 3.2.3 is newer than 3.2. There is a possibility that 3.2 remains backwards compatible, but it is not loaded so OpenModelica cannot verify this.
// Error: Internal error  Set-C is Empty! : Problem is ill posed because there are two few variables of interest
// Error: pre-optimization module dataReconciliation (simulation) failed.
// "
// endResult
