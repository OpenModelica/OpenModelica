// name:     Modelica.Electrical.QuasiStationary.SinglePhase.Examples.ParallelResonance
// teardown_command: rm -f Modelica.Electrical.QuasiStationary.SinglePhase.Examples.ParallelResonance_*.mat
// keywords: simulation MSL Examples
// status: correct
// cflags: 	 +simCodeTarget=Cpp -d=-newInst
//
// Simulation Results 
// Modelica Standard Library
//

loadModel(Modelica,{"3.2.1"});

simulate(Modelica.Electrical.QuasiStationary.SinglePhase.Examples.ParallelResonance, outputFormat="mat");
getErrorString();

res := OpenModelica.Scripting.compareSimulationResults("Modelica.Electrical.QuasiStationary.SinglePhase.Examples.ParallelResonance_res.mat",
  getEnvironmentVar("REFERENCEFILES")+"/msl32/Modelica.Electrical.QuasiStationary.SinglePhase.Examples.ParallelResonance.mat",
  "Modelica.Electrical.QuasiStationary.SinglePhase.Examples.ParallelResonance_diff.csv",0.02,0.001,
  {"capacitor.i.im",
   "capacitor.pin_n.reference.gamma",
   "inductor.pin_p.reference.gamma",
   "resistor.pin_p.reference.gamma",
   "voltageSensor.pin_n.reference.gamma",
   "capacitor.pin_n.reference.gamma",
   "ground.pin.reference.gamma"});

// Result:
// true
// record SimulationResult
//     resultFile = "Modelica.Electrical.QuasiStationary.SinglePhase.Examples.ParallelResonance_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 1000, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'Modelica.Electrical.QuasiStationary.SinglePhase.Examples.ParallelResonance', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = ""
// end SimulationResult;
// ""
// {"Files Equal!"}
// endResult
