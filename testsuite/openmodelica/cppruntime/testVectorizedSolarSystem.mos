// name:     testVectorizedSolarSystem
// keywords: vectorized components, array equations, for loops
// status: correct
// teardown_command: rm -f *VectorizedSolarSystemTest*
// cflags: -d=-nfScalarize

setCommandLineOptions("-d=-nfScalarize"); getErrorString();
setCommandLineOptions("--preOptModules+=dumpDAE"); getErrorString();
setCommandLineOptions("--postOptModules+=dumpDAE"); getErrorString();
setCommandLineOptions("--simCodeTarget=Cpp"); getErrorString();

loadFile("VectorizedSolarSystem.mo"); getErrorString();

simulate(VectorizedSolarSystemTest); getErrorString();

val(grid.P_grid, 0.0);

// Result:
// true
// ""
// true
// ""
// true
// ""
// true
// ""
// true
// "Notification: Automatically loaded package Modelica 4.0.0 due to uses annotation from Vectorized.
// Notification: Automatically loaded package Complex 4.0.0 due to uses annotation from Modelica.
// Notification: Automatically loaded package ModelicaServices 4.0.0 due to uses annotation from Modelica.
// "
//
// ########################################
// dumpDAE
// ########################################
//
//
// unspecified partition
// ========================================
//
// Variables (7)
// ========================================
// 1: grid.terms.i:VARIABLE(flow=true unit = "A" )  type: Real[1000] [1000]
// 2: grid.terms.v:VARIABLE(flow=false unit = "V" )  type: Real[1000] [1000]
// 3: grid.P_grid:VARIABLE(unit = "W" )  type: Real
// 4: plant.term.i:VARIABLE(flow=true unit = "A" )  type: Real[1000] [1000]
// 5: plant.term.v:VARIABLE(flow=false unit = "V" )  type: Real[1000] [1000]
// 6: plant.P_solar:VARIABLE(unit = "W" )  "Solar power" type: Real[1000] [1000]
// 7: plant.on:VARIABLE()  "Plant status" type: Boolean[1000] [1000]
//
//
// Equations (7, 7)
// ========================================
// 1/1 (1000): plant.term.v = grid.terms.v   [dynamic |0|0|0|0|]
// 2/1001 (1000): for $i1 in 1 : 1000 loop
//     plant[$i1].term.i + grid.terms[$i1].i = 0.0; end for;    [dynamic |0|0|0|0|]
// 3/2001 (1000): for $i0 in 1 : 1000 loop
//     plant[$i0].term.v * plant[$i0].term.i = if plant[$i0].on then plant[$i0].eta * plant[$i0].P_solar else 0.0; end for;    [dynamic |0|0|0|0|]
// 4/3001 (1000): for i in 1 : 1000 loop
//     grid.terms[i].v = grid.V; end for;    [dynamic |0|0|0|0|]
// 5/4001 (1): 0.0 = grid.P_grid + grid.terms.v * grid.terms.i   [dynamic |0|0|0|0|]
// 6/4002 (1000): plant.on = true   [binding |0|0|0|0|]
// 7/5002 (1000): plant.P_solar = 100.0:100.0:1e5   [binding |0|0|0|0|]
//
//
// no matching
//
//
//
// BackendDAEType: simulation
//
//
// Known variables only depending on parameters and constants - globalKnownVars (4)
// ========================================
// 1: n:PARAM(final = true )  = 1000  type: Integer
// 2: plant.eta:PARAM()  = 0.9  "Efficiency" type: Real[1000] [1000]
// 3: grid.n:PARAM(final = true )  = 1000  type: Integer
// 4: grid.V:PARAM(unit = "V" )  = 1000.0  type: Real
//
//
//
// ########################################
// dumpDAE
// ########################################
//
//
// unspecified partition
// ========================================
//
// Variables (7)
// ========================================
// 1: grid.terms.i:VARIABLE(flow=true unit = "A" )  type: Real[1000] [1000]
// 2: grid.terms.v:VARIABLE(flow=false unit = "V" )  type: Real[1000] [1000]
// 3: grid.P_grid:VARIABLE(unit = "W" )  type: Real
// 4: plant.term.i:VARIABLE(flow=true unit = "A" )  type: Real[1000] [1000]
// 5: plant.term.v:VARIABLE(flow=false unit = "V" )  type: Real[1000] [1000]
// 6: plant.P_solar:VARIABLE(unit = "W" )  "Solar power" type: Real[1000] [1000]
// 7: plant.on:VARIABLE()  "Plant status" type: Boolean[1000] [1000]
//
//
// Equations (7, 7)
// ========================================
// 1/1 (1000): plant.term.v = grid.terms.v   [dynamic |0|0|0|0|]
// 2/1001 (1000): for $i1 in 1 : 1000 loop
//     plant[$i1].term.i + grid.terms[$i1].i = 0.0; end for;    [dynamic |0|0|0|0|]
// 3/2001 (1000): for $i0 in 1 : 1000 loop
//     plant[$i0].term.v * plant[$i0].term.i = if plant[$i0].on then plant[$i0].eta * plant[$i0].P_solar else 0.0; end for;    [dynamic |0|0|0|0|]
// 4/3001 (1000): for i in 1 : 1000 loop
//     grid.terms[i].v = grid.V; end for;    [dynamic |0|0|0|0|]
// 5/4001 (1): grid.P_grid = -grid.terms.v * grid.terms.i   [dynamic |0|0|0|0|]
// 6/4002 (1000): plant.on = true   [binding |0|0|0|0|]
// 7/5002 (1000): plant.P_solar = 100.0:100.0:1e5   [binding |0|0|0|0|]
//
//
// Matching
// ========================================
// 7 variables and equations
// var 1 is solved in eqn 2
// var 2 is solved in eqn 4
// var 3 is solved in eqn 5
// var 4 is solved in eqn 3
// var 5 is solved in eqn 1
// var 6 is solved in eqn 7
// var 7 is solved in eqn 6
//
//
// StrongComponents
// ========================================
// Array  {{7:6}}
// Array  {{6:7}}
// {4:2}
// Array  {{1:5}}
// {3:4}
// {2:1}
// {5:3}
//
//
//
// BackendDAEType: simulation
//
//
// Known variables only depending on parameters and constants - globalKnownVars (4)
// ========================================
// 1: grid.V:PARAM(unit = "V" )  = 1000.0  type: Real
// 2: grid.n:PARAM(final = true )  = 1000  type: Integer
// 3: plant.eta:PARAM()  = 0.9  "Efficiency" type: Real[1000] [1000]
// 4: n:PARAM(final = true )  = 1000  type: Integer
//
//
// record SimulationResult
//     resultFile = "VectorizedSolarSystemTest_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-6, method = 'dassl', fileNamePrefix = 'VectorizedSolarSystemTest', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = ""
// end SimulationResult;
// ""
// 4.5045e7
// endResult
