// name: clockedEventRotationalTest
// keywords: synchronous clocked equations event
// status: correct
// teardown_command: rm -f *EventRotationalClock*
// cflags:

setCommandLineOptions("+simCodeTarget=Cpp");

loadString("
model EventRotationalClock \"Motivated by Modelica.Clocked.Examples.Elementary.ClockSignals.RotationalSample\"
  Real f = cos(5 * 3.1416 * time);
  Real deltaGt(start = 0.1);
  Real deltaLt(start = 0);
equation
  when Clock(f > 0) then
    deltaGt = interval();
  end when;
  when Clock(f < 0, 0.1) then
    deltaLt = interval();
  end when;
  annotation(experiment(StopTime = 1));
end EventRotationalClock;
");
getErrorString();

simulate(EventRotationalClock);
getErrorString();

val(deltaGt, 0.0);
val(deltaGt, 0.3);
val(deltaGt, 0.7);
val(deltaLt, 0.0);
val(deltaLt, 0.1);
val(deltaLt, 0.5);
val(deltaLt, 0.9);

// Result:
// true
// true
// ""
// record SimulationResult
//     resultFile = "EventRotationalClock_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'EventRotationalClock', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = ""
// end SimulationResult;
// ""
// 0.1
// 0.0
// 0.4000000000000004
// 0.0
// 0.1
// 0.4000000000000004
// 0.4000000000000004
// endResult
