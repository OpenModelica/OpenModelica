// name: UtilTest
// status: correct
// teardown_command: rm -f Util_* UtilTest_*
// cflags: -d=-newInst

setCommandLineOptions("-g=MetaModelica -n=1");
echo(false);
prefixPath := "../../../OMCompiler/Compiler/Util/";
echo(true);
loadFiles({
  prefixPath + "DoubleEnded.mo",
  prefixPath + "Print.mo",
  prefixPath + "ErrorExt.mo",
  prefixPath + "Error.mo",
  prefixPath + "Util.mo",
  prefixPath + "List.mo",
  prefixPath + "Mutable.mo",
  prefixPath + "System.mo",
  prefixPath + "StringUtil.mo",
  "UtilTest.mo"
});
getErrorString();
setCommandLineOptions("-d=rml,noevalfunc,gen");
listLength(List.intRange2(1, 22000));
setCommandLineOptions("-d=evalfunc");
getErrorString();
List.intRange2(1, 10);
getErrorString();
List.intRange2(10, 1);
getErrorString();
List.intRange2(1, 1);
getErrorString();
UtilTest.listRangeString(1, 22);
getErrorString();
UtilTest.listMapGetOption({SOME(1),SOME(2)});
getErrorString();
UtilTest.listMapGetOption({SOME(1),SOME(2),NONE()});
getErrorString();
UtilTest.listMap1r({"abc","123"}, "Myprefix: ");
getErrorString();
List.unzip({(1,2),(3,4),(5,6)});
getErrorString();
UtilTest.listSplitOnTrue({SOME(1),SOME(2),NONE(),NONE(),SOME(3),NONE()});
getErrorString();
UtilTest.listMapTuple21({("abc",123),("def",456)});
getErrorString();
"UtilTest.listListMap({{1,2},{3,4,5}})";
UtilTest.listListMap({{1,2},{3,4,5}});
getErrorString();
List.split({1,2,3,4,5}, 3);
getErrorString();
UtilTest.listMapMap({1,2,3,4,5});
getErrorString();
List.position(1,{1,2,3,4,5});
getErrorString();
List.deleteMember({1,2,3,4,5},1);
getErrorString();
List.setDifference({1,2,3,4,5},{1});
getErrorString();
List.setDifference({1,2,3,4,5},{3});
getErrorString();
List.partition({1,2,3,4},2);
getErrorString();
List.union({1, 3, 4, 5, 6, 6}, {3, 5, 1});
getErrorString();
List.replaceAtWithList({"A", "B"}, 1, {"a", "b", "c"});
getErrorString();
UtilTest.splitOnFirstMatch({1, 2, 3, 4, 5});
getErrorString();
List.replaceAt("A", 2, {"a", "b", "c"});
getErrorString();
List.replaceAtIndexFirst(2, "A", {"a", "b", "c"});
getErrorString();
StringUtil.wordWrap("this is a somewhat long string with new\nlines", 20, "\n  ");
getErrorString();

// Result:
// true
// true
// true
// ""
// true
// 22000
// true
// ""
// {1,2,3,4,5,6,7,8,9,10}
// ""
// {10,9,8,7,6,5,4,3,2,1}
// ""
// {1}
// ""
// (759,{"3","6","9","12","15","18","21","24","27","30","33","36","39","42","45","48","51","54","57","60","63","66"})
// ""
// ({1,2},{1,2})
// ""
// fail()
// ""
// {"Myprefix: abc","Myprefix: 123"}
// ""
// ({1,3,5},{2,4,6})
// ""
// ({SOME(1),SOME(2),SOME(3)},{NONE(),NONE(),NONE()})
// ""
// {"abc","def"}
// ""
// "UtilTest.listListMap({{1,2},{3,4,5}})"
// {{"1","2"},{"3","4","5"}}
// ""
// ({1,2,3},{4,5})
// ""
// {"1.0","2.0","3.0","4.0","5.0"}
// ""
// 1
// ""
// {2,3,4,5}
// ""
// {2,3,4,5}
// ""
// {1,2,4,5}
// ""
// {{1,2},{3,4}}
// ""
// {1,3,4,5,6}
// ""
// {"a","A","B","c"}
// ""
// ({1,2},{3,4,5})
// ""
// {"a","A","c"}
// ""
// {"a","A","c"}
// ""
// {"this is a somewhat","
//   long string with","
//   new","
//   lines"}
// ""
// endResult
