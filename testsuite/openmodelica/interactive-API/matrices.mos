// name:     Matrices
// keywords: Matrix operations, cat, transpose, multiplication, etc
// status:   correct
// cflags: -d=-newInst
// 
//  Tests all matrix and vector operations in table in section 3.4.3 and 3.4.4.4
// 
A:=[1,2;3,4];
B:=[5,6;7,8];
C:=[5,6;7,8;9,10];
cat(1,A,B);
cat(2,A,B);
cat(1,A,C);
transpose(A);
A*{5,6};
{5,6}*A;
2.5*B;
A-B;
A+B;
sin(A);
"dims and sizes";
ndims(A); // fixed by Stefan Vorkoetter <svorkoetter@maplesoft.com>
size(A,1);
size(A,2);
size(A);
//scalar({1});
vector(1);			
vector({1});
vector({{1},{2}});
vector({{1,2,3}});
//matrix(A);
//outerProduct({1,2},{3,4})
identity(3);
diagonal({1,2});
zeros(2,2);
ones(3,3);
fill(1,2,2);
fill(0,3,3,3);
//linspace(1.0,5.0,2);
min(A);
min(1,4);
//min(i+j for i in 1:5, j in 1:5);
max(A);
max(3,6);
//max(i+j for i in 1:5, j in 1:5);
// sum(A);				// used in Media, Math, Electrical
//product(A)				// used in Math
//product(i+j for i in 1:5, j in 1:5); 
//symmetric([1,2;3,4]);    // not used in MSL
"cross";
cross({1,2,3},{4,5,6});  // used in Multibody
cross({5,6,7},{7,8,9}); 
//skew({1,2,3})		  //used in Multibody

// Examples in section 3.4.4.4

v1:=array(1,2,3);
v2:={4,5,6};
m1:=[v1,v2];
typeOf(m1);
m2:=[v1,[4;5;6]]; // m1 = m2
typeOf(m2);
m3:=[1,2,3;4,5,6];
typeOf(m3);
m4:=[1,2,3];
typeOf(m4);
m5:=[1;2;3];
typeOf(m5);

// bug with cat operator.
"cat";
cat(2,{{1},{2},{3}},{{4},{5},{6}});
cat(1,{{1},{2},{3}},{{4},{5},{6}});

// test ndims implementation
loadFile("TestNDims.mo");
instantiateModel(TestNDims);
// Result:
// {{1,2},{3,4}}
// {{5,6},{7,8}}
// {{5,6},{7,8},{9,10}}
// {{1,2},{3,4},{5,6},{7,8}}
// {{1,2,5,6},{3,4,7,8}}
// {{1,2},{3,4},{5,6},{7,8},{9,10}}
// {{1,3},{2,4}}
// {17,39}
// {23,34}
// {{12.5,15.0},{17.5,20.0}}
// {{-4,-4},{-4,-4}}
// {{6,8},{10,12}}
// {{0.841470984807897,0.909297426825682},{0.141120008059867,-0.756802495307928}}
// "dims and sizes"
// 2
// 2
// 2
// {2,2}
// {1}
// {1}
// {1,2}
// {1,2,3}
// {{1,0,0},{0,1,0},{0,0,1}}
// {{1,0.0},{0,2}}
// {{0,0},{0,0}}
// {{1,1,1},{1,1,1},{1,1,1}}
// {{1,1},{1,1}}
// {{{0,0,0},{0,0,0},{0,0,0}},{{0,0,0},{0,0,0},{0,0,0}},{{0,0,0},{0,0,0},{0,0,0}}}
// 1
// 1
// 4
// 6
// "cross"
// {-3,6,-3}
// {-2,4,-2}
// {1,2,3}
// {4,5,6}
// {{1,4},{2,5},{3,6}}
// "Integer[3, 2]"
// {{1,4},{2,5},{3,6}}
// "Integer[3, 2]"
// {{1,2,3},{4,5,6}}
// "Integer[2, 3]"
// {{1,2,3}}
// "Integer[1, 3]"
// {{1},{2},{3}}
// "Integer[3, 1]"
// "cat"
// {{1,4},{2,5},{3,6}}
// {{1},{2},{3},{4},{5},{6}}
// true
// "class TestNDims
//   Real a[1,1];
//   Real a[1,2];
//   Real a[1,3];
//   Real a[2,1];
//   Real a[2,2];
//   Real a[2,3];
//   Real a[3,1];
//   Real a[3,2];
//   Real a[3,3];
//   Real b[1];
//   Real b[2];
// end TestNDims;
// "
// endResult
