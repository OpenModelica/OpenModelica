// name: Obfuscation2
// keywords:
// status: correct
// cflags: -d=newInst
//

setCommandLineOptions("--obfuscate=protected");
loadModel(Modelica, {"3.2.3"}); getErrorString();
instantiateModel(Modelica.Fluid.Examples.BranchingDynamicPipes); getErrorString();

// Result:
// true
// true
// ""
// "function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.T_phX \"Return temperature as a function of pressure p, specific enthalpy h and composition X\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0) \"Specific enthalpy\";
//   input Real[:] X(quantity = fill(\"MassFraction\", size(X, 1)), unit = fill(\"kg/kg\", size(X, 1)), min = fill(0.0, size(X, 1)), max = fill(1.0, size(X, 1)), nominal = fill(0.1, size(X, 1))) \"Mass fractions of composition\";
//   output Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) \"Temperature\";
// algorithm
//   T := Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.T_phX.Internal.solve(h, 190.0, 647.0, p, X[1:1], Modelica.Media.IdealGases.Common.DataRecord(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), 1e-13);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.T_phX;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.T_phX.Internal.f_nonlinear
//   input Real x \"Independent variable of function\";
//   input Real p = 0.0 \"Disregarded variables (here always used for pressure)\";
//   input Real[:] X = {} \"Disregarded variables (her always used for composition)\";
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.T_phX.Internal.f_nonlinear_Data f_nonlinear_data \"Additional data for the function\";
//   output Real y \"= f_nonlinear(x)\";
// algorithm
//   y := Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.h_pTX(p, x, X);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.T_phX.Internal.f_nonlinear;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.T_phX.Internal.f_nonlinear_Data \"Automatically generated record constructor for Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.T_phX.Internal.f_nonlinear_Data\"
//   input String name;
//   input Real MM;
//   input Real Hf;
//   input Real H0;
//   input Real Tlimit;
//   input Real[7] alow;
//   input Real[2] blow;
//   input Real[7] ahigh;
//   input Real[2] bhigh;
//   input Real R;
//   output f_nonlinear_Data res;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.T_phX.Internal.f_nonlinear_Data;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.T_phX.Internal.solve
//   input Real y_zero \"Determine x_zero, such that f_nonlinear(x_zero) = y_zero\";
//   input Real x_min \"Minimum value of x\";
//   input Real x_max \"Maximum value of x\";
//   input Real pressure = 0.0 \"Disregarded variables (here always used for pressure)\";
//   input Real[:] X = {} \"Disregarded variables (here always used for composition)\";
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.T_phX.Internal.f_nonlinear_Data f_nonlinear_data \"Additional data for function f_nonlinear\";
//   input Real x_tol = 1e-13 \"Relative tolerance of the result\";
//   output Real x_zero \"f_nonlinear(x_zero) = y_zero\";
//   protected constant Real eps = 1e-15 \"Machine epsilon\";
//   protected constant Real x_eps = 1e-10 \"Slight modification of x_min, x_max, since x_min, x_max are usually exactly at the borders T_min/h_min and then small numeric noise may make the interval invalid\";
//   protected Real c \"Intermediate point a <= c <= b\";
//   protected Real d;
//   protected Real e \"b - a\";
//   protected Real m;
//   protected Real s;
//   protected Real p;
//   protected Real q;
//   protected Real r;
//   protected Real tol;
//   protected Real fa \"= f_nonlinear(a) - y_zero\";
//   protected Real fb \"= f_nonlinear(b) - y_zero\";
//   protected Real fc;
//   protected Boolean found = false;
//   protected Real x_min2 = x_min - x_eps;
//   protected Real x_max2 = x_max + x_eps;
//   protected Real a = x_min2 \"Current best minimum interval value\";
//   protected Real b = x_max2 \"Current best maximum interval value\";
// algorithm
//   fa := Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.T_phX.Internal.f_nonlinear(x_min2, pressure, X, f_nonlinear_data) - y_zero;
//   fb := Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.T_phX.Internal.f_nonlinear(x_max2, pressure, X, f_nonlinear_data) - y_zero;
//   fc := fb;
//   if fa > 0.0 and fb > 0.0 or fa < 0.0 and fb < 0.0 then
//     Modelica.Utilities.Streams.error(\"The arguments x_min and x_max to OneNonLinearEquation.solve(..)
//     do not bracket the root of the single non-linear equation:
//       x_min  = \" + String(x_min2, 6, 0, true) + \"
//     \" + \"  x_max  = \" + String(x_max2, 6, 0, true) + \"
//     \" + \"  y_zero = \" + String(y_zero, 6, 0, true) + \"
//     \" + \"  fa = f(x_min) - y_zero = \" + String(fa, 6, 0, true) + \"
//     \" + \"  fb = f(x_max) - y_zero = \" + String(fb, 6, 0, true) + \"
//     \" + \"fa and fb must have opposite sign which is not the case\");
//   end if;
//   c := a;
//   fc := fa;
//   e := b - a;
//   d := e;
//   while not found loop
//     if abs(fc) < abs(fb) then
//       a := b;
//       b := c;
//       c := a;
//       fa := fb;
//       fb := fc;
//       fc := fa;
//     end if;
//     tol := 2.0 * eps * abs(b) + x_tol;
//     m := (c - b) / 2.0;
//     if abs(m) <= tol or fb == 0.0 then
//       found := true;
//       x_zero := b;
//     else
//       if abs(e) < tol or abs(fa) <= abs(fb) then
//         e := m;
//         d := e;
//       else
//         s := fb / fa;
//         if a == c then
//           p := 2.0 * m * s;
//           q := 1.0 - s;
//         else
//           q := fa / fc;
//           r := fb / fc;
//           p := s * (2.0 * m * q * (q - r) - (b - a) * (r - 1.0));
//           q := (q - 1.0) * (r - 1.0) * (s - 1.0);
//         end if;
//         if p > 0.0 then
//           q := -q;
//         else
//           p := -p;
//         end if;
//         s := e;
//         e := d;
//         if 2.0 * p < 3.0 * m * q - abs(tol * q) and p < abs(0.5 * s * q) then
//           d := p / q;
//         else
//           e := m;
//           d := e;
//         end if;
//       end if;
//       a := b;
//       fa := fb;
//       b := b + (if abs(d) > tol then d else if m > 0.0 then tol else -tol);
//       fb := Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.T_phX.Internal.f_nonlinear(b, pressure, X, f_nonlinear_data) - y_zero;
//       if fb > 0.0 and fc > 0.0 or fb < 0.0 and fc < 0.0 then
//         c := a;
//         fc := fa;
//         e := b - a;
//         d := e;
//       end if;
//     end if;
//   end while;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.T_phX.Internal.solve;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.ThermodynamicState \"Automatically generated record constructor for Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.ThermodynamicState\"
//   input Real p;
//   input Real T;
//   input Real[2] X;
//   output ThermodynamicState res;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.ThermodynamicState;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.Utilities.smoothMax
//   input Real x1 \"First argument of smooth max operator\";
//   input Real x2 \"Second argument of smooth max operator\";
//   input Real dx \"Approximate difference between x1 and x2, below which regularization starts\";
//   output Real y \"Result of smooth max operator\";
// algorithm
//   y := max(x1, x2) + log(exp(4.0 / dx * (x1 - max(x1, x2))) + exp(4.0 / dx * (x2 - max(x1, x2)))) / (4.0 / dx);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.Utilities.smoothMax;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.Utilities.smoothMax_der
//   input Real x1 \"First argument of smooth max operator\";
//   input Real x2 \"Second argument of smooth max operator\";
//   input Real dx \"Approximate difference between x1 and x2, below which regularization starts\";
//   input Real dx1;
//   input Real dx2;
//   input Real ddx;
//   output Real dy \"Derivative of smooth max operator\";
// algorithm
//   dy := (if x1 > x2 then dx1 else dx2) + 0.25 * (((4.0 * (dx1 - (if x1 > x2 then dx1 else dx2)) / dx - 4.0 * (x1 - max(x1, x2)) * ddx / dx ^ 2.0) * exp(4.0 * (x1 - max(x1, x2)) / dx) + (4.0 * (dx2 - (if x1 > x2 then dx1 else dx2)) / dx - 4.0 * (x2 - max(x1, x2)) * ddx / dx ^ 2.0) * exp(4.0 * (x2 - max(x1, x2)) / dx)) * dx / (exp(4.0 * (x1 - max(x1, x2)) / dx) + exp(4.0 * (x2 - max(x1, x2)) / dx)) + log(exp(4.0 * (x1 - max(x1, x2)) / dx) + exp(4.0 * (x2 - max(x1, x2)) / dx)) * ddx);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.Utilities.smoothMax_der;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.Utilities.spliceFunction \"Spline interpolation of two functions\"
//   input Real pos \"Returned value for x-deltax >= 0\";
//   input Real neg \"Returned value for x+deltax <= 0\";
//   input Real x \"Function argument\";
//   input Real deltax = 1.0 \"Region around x with spline interpolation\";
//   output Real out;
//   protected Real scaledX;
//   protected Real scaledX1;
//   protected Real y;
// algorithm
//   scaledX1 := x / deltax;
//   scaledX := scaledX1 * 1.570796326794897;
//   if scaledX1 <= -0.999999999 then
//     y := 0.0;
//   elseif scaledX1 >= 0.999999999 then
//     y := 1.0;
//   else
//     y := (tanh(tan(scaledX)) + 1.0) / 2.0;
//   end if;
//   out := pos * y + (1.0 - y) * neg;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.Utilities.spliceFunction;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.Utilities.spliceFunction_der \"Derivative of spliceFunction\"
//   input Real pos;
//   input Real neg;
//   input Real x;
//   input Real deltax = 1.0;
//   input Real dpos;
//   input Real dneg;
//   input Real dx;
//   input Real ddeltax = 0.0;
//   output Real out;
//   protected Real scaledX;
//   protected Real scaledX1;
//   protected Real dscaledX1;
//   protected Real y;
// algorithm
//   scaledX1 := x / deltax;
//   scaledX := scaledX1 * 1.570796326794897;
//   dscaledX1 := (dx - scaledX1 * ddeltax) / deltax;
//   if scaledX1 <= -0.99999999999 then
//     y := 0.0;
//   elseif scaledX1 >= 0.9999999999 then
//     y := 1.0;
//   else
//     y := (tanh(tan(scaledX)) + 1.0) / 2.0;
//   end if;
//   out := dpos * y + (1.0 - y) * dneg;
//   if abs(scaledX1) < 1.0 then
//     out := out + (pos - neg) * dscaledX1 * 1.570796326794897 / 2.0 / (cosh(tan(scaledX)) * cos(scaledX)) ^ 2.0;
//   end if;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.Utilities.spliceFunction_der;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.enthalpyOfWater \"Computes specific enthalpy of water (solid/liquid) near atmospheric pressure from temperature T\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Temperature\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy of water\";
// algorithm
//   h := Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.Utilities.spliceFunction(4200.0 * (T - 273.15), 2050.0 * (T - 273.15) - 333000.0, T - 273.16, 0.1);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.enthalpyOfWater;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.enthalpyOfWater_der \"Derivative function of enthalpyOfWater\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Temperature\";
//   input Real dT(unit = \"K/s\") \"Time derivative of temperature\";
//   output Real dh(unit = \"J/(kg.s)\") \"Time derivative of specific enthalpy\";
// algorithm
//   dh := Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.Utilities.spliceFunction_der(4200.0 * (T - 273.15), 2050.0 * (T - 273.15) - 333000.0, T - 273.16, 0.1, 4200.0 * dT, 2050.0 * dT, dT, 0.0);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.enthalpyOfWater_der;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.h_pTX \"Return specific enthalpy of moist air as a function of pressure p, temperature T and composition X\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Temperature\";
//   input Real[:] X(quantity = fill(\"MassFraction\", size(X, 1)), unit = fill(\"1\", size(X, 1)), min = fill(0.0, size(X, 1)), max = fill(1.0, size(X, 1))) \"Mass fractions of moist air\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy at p, T, X\";
//   protected Real p_steam_sat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) \"partial saturation pressure of steam\";
//   protected Real X_sat(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Absolute humidity per unit mass of moist air\";
//   protected Real X_liquid(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Mass fraction of liquid water\";
//   protected Real X_steam(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Mass fraction of steam water\";
//   protected Real X_air(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Mass fraction of air\";
// algorithm
//   p_steam_sat := Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.saturationPressure(T);
//   X_sat := min(p_steam_sat * 0.6219647130774989 / max(1e-13, p - p_steam_sat) * (1.0 - X[1]), 1.0);
//   X_liquid := max(X[1] - X_sat, 0.0);
//   X_steam := X[1] - X_liquid;
//   X_air := 1.0 - X[1];
//   h := Modelica.Media.IdealGases.Common.Functions.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.UserDefined, 2547494.319) * X_steam + Modelica.Media.IdealGases.Common.Functions.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"Air\", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.UserDefined, 25104.684) * X_air + Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.enthalpyOfWater(T) * X_liquid;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.h_pTX;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.h_pTX_der \"Derivative function of h_pTX\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Temperature\";
//   input Real[:] X(quantity = fill(\"MassFraction\", size(X, 1)), unit = fill(\"1\", size(X, 1)), min = fill(0.0, size(X, 1)), max = fill(1.0, size(X, 1))) \"Mass fractions of moist air\";
//   input Real dp(unit = \"Pa/s\") \"Pressure derivative\";
//   input Real dT(unit = \"K/s\") \"Temperature derivative\";
//   input Real[:] dX(unit = \"1/s\") \"Composition derivative\";
//   output Real h_der(unit = \"J/(kg.s)\") \"Time derivative of specific enthalpy\";
//   protected Real p_steam_sat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) \"partial saturation pressure of steam\";
//   protected Real X_sat(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Absolute humidity per unit mass of moist air\";
//   protected Real X_liquid(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Mass fraction of liquid water\";
//   protected Real X_steam(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Mass fraction of steam water\";
//   protected Real X_air(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Mass fraction of air\";
//   protected Real x_sat(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Absolute humidity per unit mass of dry air at saturation\";
//   protected Real dX_steam(unit = \"1/s\") \"Time derivative of steam mass fraction\";
//   protected Real dX_air(unit = \"1/s\") \"Time derivative of dry air mass fraction\";
//   protected Real dX_liq(unit = \"1/s\") \"Time derivative of liquid/solid water mass fraction\";
//   protected Real dps(unit = \"Pa/s\") \"Time derivative of saturation pressure\";
//   protected Real dx_sat(unit = \"1/s\") \"Time derivative of absolute humidity per unit mass of dry air\";
// algorithm
//   p_steam_sat := Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.saturationPressure(T);
//   x_sat := p_steam_sat * 0.6219647130774989 / max(1e-13, p - p_steam_sat);
//   X_sat := min(x_sat * (1.0 - X[1]), 1.0);
//   X_liquid := Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.Utilities.smoothMax(X[1] - X_sat, 0.0, 1e-05);
//   X_steam := X[1] - X_liquid;
//   X_air := 1.0 - X[1];
//   dX_air := -dX[1];
//   dps := Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.saturationPressure_der(T, dT);
//   dx_sat := 0.6219647130774989 * (dps * (p - p_steam_sat) - p_steam_sat * (dp - dps)) / (p - p_steam_sat) / (p - p_steam_sat);
//   dX_liq := Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.Utilities.smoothMax_der(X[1] - X_sat, 0.0, 1e-05, (1.0 + x_sat) * dX[1] - (1.0 - X[1]) * dx_sat, 0.0, 0.0);
//   dX_steam := dX[1] - dX_liq;
//   h_der := X_steam * Modelica.Media.IdealGases.Common.Functions.h_Tlow_der(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.UserDefined, 2547494.319, dT) + dX_steam * Modelica.Media.IdealGases.Common.Functions.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.UserDefined, 2547494.319) + X_air * Modelica.Media.IdealGases.Common.Functions.h_Tlow_der(Modelica.Media.IdealGases.Common.DataRecord(\"Air\", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.UserDefined, 25104.684, dT) + dX_air * Modelica.Media.IdealGases.Common.Functions.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"Air\", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.UserDefined, 25104.684) + X_liquid * Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.enthalpyOfWater_der(T, dT) + dX_liq * Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.enthalpyOfWater(T);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.h_pTX_der;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.saturationPressure \"Return saturation pressure of water as a function of temperature T between 190 and 647.096 K\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) \"Saturation temperature\";
//   output Real psat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Saturation pressure\";
// algorithm
//   psat := Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.Utilities.spliceFunction(Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.saturationPressureLiquid(Tsat), Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.sublimationPressureIce(Tsat), Tsat - 273.16, 1.0);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.saturationPressure;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.saturationPressureLiquid \"Return saturation pressure of water as a function of temperature T in the range of 273.16 to 647.096 K\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Saturation temperature\";
//   output Real psat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) \"Saturation pressure\";
//   protected Real Tcritical(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 647.096 \"Critical temperature\";
//   protected Real pcritical(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 22064000.0 \"Critical pressure\";
//   protected Real[:] a = {-7.85951783, 1.84408259, -11.7866497, 22.6807411, -15.9618719, 1.80122502} \"Coefficients a[:]\";
//   protected Real[:] n = {1.0, 1.5, 3.0, 3.5, 4.0, 7.5} \"Coefficients n[:]\";
//   protected Real r1 = 1.0 - Tsat / Tcritical \"Common subexpression\";
// algorithm
//   psat := exp((a[1] * r1 ^ n[1] + a[2] * r1 ^ n[2] + a[3] * r1 ^ n[3] + a[4] * r1 ^ n[4] + a[5] * r1 ^ n[5] + a[6] * r1 ^ n[6]) * Tcritical / Tsat) * pcritical;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.saturationPressureLiquid;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.saturationPressureLiquid_der \"Derivative function for 'saturationPressureLiquid'\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Saturation temperature\";
//   input Real dTsat(unit = \"K/s\") \"Saturation temperature derivative\";
//   output Real psat_der(unit = \"Pa/s\") \"Saturation pressure derivative\";
//   protected Real Tcritical(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 647.096 \"Critical temperature\";
//   protected Real pcritical(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 22064000.0 \"Critical pressure\";
//   protected Real[:] a = {-7.85951783, 1.84408259, -11.7866497, 22.6807411, -15.9618719, 1.80122502} \"Coefficients a[:]\";
//   protected Real[:] n = {1.0, 1.5, 3.0, 3.5, 4.0, 7.5} \"Coefficients n[:]\";
//   protected Real r1 = 1.0 - Tsat / Tcritical \"Common subexpression 1\";
//   protected Real r1_der = -1.0 / Tcritical * dTsat \"Derivative of common subexpression 1\";
//   protected Real r2 = a[1] * r1 ^ n[1] + a[2] * r1 ^ n[2] + a[3] * r1 ^ n[3] + a[4] * r1 ^ n[4] + a[5] * r1 ^ n[5] + a[6] * r1 ^ n[6] \"Common subexpression 2\";
// algorithm
//   psat_der := exp(r2 * Tcritical / Tsat) * pcritical * ((a[1] * r1 ^ (n[1] - 1.0) * n[1] * r1_der + a[2] * r1 ^ (n[2] - 1.0) * n[2] * r1_der + a[3] * r1 ^ (n[3] - 1.0) * n[3] * r1_der + a[4] * r1 ^ (n[4] - 1.0) * n[4] * r1_der + a[5] * r1 ^ (n[5] - 1.0) * n[5] * r1_der + a[6] * r1 ^ (n[6] - 1.0) * n[6] * r1_der) * Tcritical / Tsat - r2 * Tcritical * dTsat / Tsat ^ 2.0);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.saturationPressureLiquid_der;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.saturationPressure_der \"Derivative function for 'saturationPressure'\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) \"Saturation temperature\";
//   input Real dTsat(unit = \"K/s\") \"Time derivative of saturation temperature\";
//   output Real psat_der(unit = \"Pa/s\") \"Saturation pressure\";
// algorithm
//   psat_der := Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.Utilities.spliceFunction_der(Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.saturationPressureLiquid(Tsat), Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.sublimationPressureIce(Tsat), Tsat - 273.16, 1.0, Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.saturationPressureLiquid_der(Tsat, dTsat), Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.sublimationPressureIce_der(Tsat, dTsat), dTsat, 0.0);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.saturationPressure_der;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.setState_pTX \"Return thermodynamic state as function of pressure p, temperature T and composition X\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) \"Temperature\";
//   input Real[:] X(quantity = fill(\"MassFraction\", size(X, 1)), unit = fill(\"kg/kg\", size(X, 1)), min = fill(0.0, size(X, 1)), max = fill(1.0, size(X, 1)), nominal = fill(0.1, size(X, 1))) = {0.01, 0.99} \"Mass fractions\";
//   output Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.ThermodynamicState state \"Thermodynamic state\";
// algorithm
//   state := if size(X, 1) == 2 then Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.ThermodynamicState(p, T, X) else Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.ThermodynamicState(p, T, cat(1, X, {1.0 - sum(X)}));
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.setState_pTX;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.setState_phX \"Return thermodynamic state as function of pressure p, specific enthalpy h and composition X\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0) \"Specific enthalpy\";
//   input Real[:] X(quantity = fill(\"MassFraction\", size(X, 1)), unit = fill(\"kg/kg\", size(X, 1)), min = fill(0.0, size(X, 1)), max = fill(1.0, size(X, 1)), nominal = fill(0.1, size(X, 1))) = {0.01, 0.99} \"Mass fractions\";
//   output Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.ThermodynamicState state \"Thermodynamic state\";
// algorithm
//   state := if size(X, 1) == 2 then Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.ThermodynamicState(p, Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.T_phX(p, h, X), X) else Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.ThermodynamicState(p, Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.T_phX(p, h, X), cat(1, X, {1.0 - sum(X)}));
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.setState_phX;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.specificEnthalpy \"Return specific enthalpy of moist air as a function of the thermodynamic state record\"
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.ThermodynamicState state \"Thermodynamic state record\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.h_pTX(state.p, state.T, state.X);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.specificEnthalpy;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.specificEnthalpy_pTX \"Return specific enthalpy from p, T, and X or Xi\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) \"Temperature\";
//   input Real[:] X(quantity = fill(\"MassFraction\", size(X, 1)), unit = fill(\"kg/kg\", size(X, 1)), min = fill(0.0, size(X, 1)), max = fill(1.0, size(X, 1)), nominal = fill(0.1, size(X, 1))) = {0.01, 0.99} \"Mass fractions\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.specificEnthalpy(Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.setState_pTX(p, T, X));
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.specificEnthalpy_pTX;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.sublimationPressureIce \"Return sublimation pressure of water as a function of temperature T between 190 and 273.16 K\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Sublimation temperature\";
//   output Real psat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) \"Sublimation pressure\";
//   protected Real Ttriple(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 273.16 \"Triple point temperature\";
//   protected Real ptriple(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 611.657 \"Triple point pressure\";
//   protected Real[:] a = {-13.928169, 34.7078238} \"Coefficients a[:]\";
//   protected Real[:] n = {-1.5, -1.25} \"Coefficients n[:]\";
//   protected Real r1 = Tsat / Ttriple \"Common subexpression\";
// algorithm
//   psat := exp(a[1] - a[1] * r1 ^ n[1] + a[2] - a[2] * r1 ^ n[2]) * ptriple;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.sublimationPressureIce;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.sublimationPressureIce_der \"Derivative function for 'sublimationPressureIce'\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Sublimation temperature\";
//   input Real dTsat(unit = \"K/s\") \"Sublimation temperature derivative\";
//   output Real psat_der(unit = \"Pa/s\") \"Sublimation pressure derivative\";
//   protected Real Ttriple(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 273.16 \"Triple point temperature\";
//   protected Real ptriple(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 611.657 \"Triple point pressure\";
//   protected Real[:] a = {-13.928169, 34.7078238} \"Coefficients a[:]\";
//   protected Real[:] n = {-1.5, -1.25} \"Coefficients n[:]\";
//   protected Real r1 = Tsat / Ttriple \"Common subexpression 1\";
//   protected Real r1_der = dTsat / Ttriple \"Derivative of common subexpression 1\";
// algorithm
//   psat_der := exp(a[1] - a[1] * r1 ^ n[1] + a[2] - a[2] * r1 ^ n[2]) * ptriple * ((-a[1] * r1 ^ (n[1] - 1.0) * n[1] * r1_der) - a[2] * r1 ^ (n[2] - 1.0) * n[2] * r1_der);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.sublimationPressureIce_der;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.temperature \"Return temperature of ideal gas as a function of the thermodynamic state record\"
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.ThermodynamicState state \"Thermodynamic state record\";
//   output Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) \"Temperature\";
// algorithm
//   T := state.T;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.temperature;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.temperature_phX \"Return temperature from p, h, and X or Xi\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0) \"Specific enthalpy\";
//   input Real[:] X(quantity = fill(\"MassFraction\", size(X, 1)), unit = fill(\"kg/kg\", size(X, 1)), min = fill(0.0, size(X, 1)), max = fill(1.0, size(X, 1)), nominal = fill(0.1, size(X, 1))) = {0.01, 0.99} \"Mass fractions\";
//   output Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) \"Temperature\";
// algorithm
//   T := Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.temperature(Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.setState_phX(p, h, X));
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.temperature_phX;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.T_phX \"Return temperature as a function of pressure p, specific enthalpy h and composition X\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0) \"Specific enthalpy\";
//   input Real[:] X(quantity = fill(\"MassFraction\", size(X, 1)), unit = fill(\"kg/kg\", size(X, 1)), min = fill(0.0, size(X, 1)), max = fill(1.0, size(X, 1)), nominal = fill(0.1, size(X, 1))) \"Mass fractions of composition\";
//   output Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) \"Temperature\";
// algorithm
//   T := Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.T_phX.Internal.solve(h, 190.0, 647.0, p, X[1:1], Modelica.Media.IdealGases.Common.DataRecord(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), 1e-13);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.T_phX;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.T_phX.Internal.f_nonlinear
//   input Real x \"Independent variable of function\";
//   input Real p = 0.0 \"Disregarded variables (here always used for pressure)\";
//   input Real[:] X = {} \"Disregarded variables (her always used for composition)\";
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.T_phX.Internal.f_nonlinear_Data f_nonlinear_data \"Additional data for the function\";
//   output Real y \"= f_nonlinear(x)\";
// algorithm
//   y := Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.h_pTX(p, x, X);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.T_phX.Internal.f_nonlinear;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.T_phX.Internal.f_nonlinear_Data \"Automatically generated record constructor for Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.T_phX.Internal.f_nonlinear_Data\"
//   input String name;
//   input Real MM;
//   input Real Hf;
//   input Real H0;
//   input Real Tlimit;
//   input Real[7] alow;
//   input Real[2] blow;
//   input Real[7] ahigh;
//   input Real[2] bhigh;
//   input Real R;
//   output f_nonlinear_Data res;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.T_phX.Internal.f_nonlinear_Data;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.T_phX.Internal.solve
//   input Real y_zero \"Determine x_zero, such that f_nonlinear(x_zero) = y_zero\";
//   input Real x_min \"Minimum value of x\";
//   input Real x_max \"Maximum value of x\";
//   input Real pressure = 0.0 \"Disregarded variables (here always used for pressure)\";
//   input Real[:] X = {} \"Disregarded variables (here always used for composition)\";
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.T_phX.Internal.f_nonlinear_Data f_nonlinear_data \"Additional data for function f_nonlinear\";
//   input Real x_tol = 1e-13 \"Relative tolerance of the result\";
//   output Real x_zero \"f_nonlinear(x_zero) = y_zero\";
//   protected constant Real eps = 1e-15 \"Machine epsilon\";
//   protected constant Real x_eps = 1e-10 \"Slight modification of x_min, x_max, since x_min, x_max are usually exactly at the borders T_min/h_min and then small numeric noise may make the interval invalid\";
//   protected Real c \"Intermediate point a <= c <= b\";
//   protected Real d;
//   protected Real e \"b - a\";
//   protected Real m;
//   protected Real s;
//   protected Real p;
//   protected Real q;
//   protected Real r;
//   protected Real tol;
//   protected Real fa \"= f_nonlinear(a) - y_zero\";
//   protected Real fb \"= f_nonlinear(b) - y_zero\";
//   protected Real fc;
//   protected Boolean found = false;
//   protected Real x_min2 = x_min - x_eps;
//   protected Real x_max2 = x_max + x_eps;
//   protected Real a = x_min2 \"Current best minimum interval value\";
//   protected Real b = x_max2 \"Current best maximum interval value\";
// algorithm
//   fa := Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.T_phX.Internal.f_nonlinear(x_min2, pressure, X, f_nonlinear_data) - y_zero;
//   fb := Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.T_phX.Internal.f_nonlinear(x_max2, pressure, X, f_nonlinear_data) - y_zero;
//   fc := fb;
//   if fa > 0.0 and fb > 0.0 or fa < 0.0 and fb < 0.0 then
//     Modelica.Utilities.Streams.error(\"The arguments x_min and x_max to OneNonLinearEquation.solve(..)
//     do not bracket the root of the single non-linear equation:
//       x_min  = \" + String(x_min2, 6, 0, true) + \"
//     \" + \"  x_max  = \" + String(x_max2, 6, 0, true) + \"
//     \" + \"  y_zero = \" + String(y_zero, 6, 0, true) + \"
//     \" + \"  fa = f(x_min) - y_zero = \" + String(fa, 6, 0, true) + \"
//     \" + \"  fb = f(x_max) - y_zero = \" + String(fb, 6, 0, true) + \"
//     \" + \"fa and fb must have opposite sign which is not the case\");
//   end if;
//   c := a;
//   fc := fa;
//   e := b - a;
//   d := e;
//   while not found loop
//     if abs(fc) < abs(fb) then
//       a := b;
//       b := c;
//       c := a;
//       fa := fb;
//       fb := fc;
//       fc := fa;
//     end if;
//     tol := 2.0 * eps * abs(b) + x_tol;
//     m := (c - b) / 2.0;
//     if abs(m) <= tol or fb == 0.0 then
//       found := true;
//       x_zero := b;
//     else
//       if abs(e) < tol or abs(fa) <= abs(fb) then
//         e := m;
//         d := e;
//       else
//         s := fb / fa;
//         if a == c then
//           p := 2.0 * m * s;
//           q := 1.0 - s;
//         else
//           q := fa / fc;
//           r := fb / fc;
//           p := s * (2.0 * m * q * (q - r) - (b - a) * (r - 1.0));
//           q := (q - 1.0) * (r - 1.0) * (s - 1.0);
//         end if;
//         if p > 0.0 then
//           q := -q;
//         else
//           p := -p;
//         end if;
//         s := e;
//         e := d;
//         if 2.0 * p < 3.0 * m * q - abs(tol * q) and p < abs(0.5 * s * q) then
//           d := p / q;
//         else
//           e := m;
//           d := e;
//         end if;
//       end if;
//       a := b;
//       fa := fb;
//       b := b + (if abs(d) > tol then d else if m > 0.0 then tol else -tol);
//       fb := Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.T_phX.Internal.f_nonlinear(b, pressure, X, f_nonlinear_data) - y_zero;
//       if fb > 0.0 and fc > 0.0 or fb < 0.0 and fc < 0.0 then
//         c := a;
//         fc := fa;
//         e := b - a;
//         d := e;
//       end if;
//     end if;
//   end while;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.T_phX.Internal.solve;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.ThermodynamicState \"Automatically generated record constructor for Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.ThermodynamicState\"
//   input Real p;
//   input Real T;
//   input Real[2] X;
//   output ThermodynamicState res;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.ThermodynamicState;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.Utilities.smoothMax
//   input Real x1 \"First argument of smooth max operator\";
//   input Real x2 \"Second argument of smooth max operator\";
//   input Real dx \"Approximate difference between x1 and x2, below which regularization starts\";
//   output Real y \"Result of smooth max operator\";
// algorithm
//   y := max(x1, x2) + log(exp(4.0 / dx * (x1 - max(x1, x2))) + exp(4.0 / dx * (x2 - max(x1, x2)))) / (4.0 / dx);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.Utilities.smoothMax;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.Utilities.smoothMax_der
//   input Real x1 \"First argument of smooth max operator\";
//   input Real x2 \"Second argument of smooth max operator\";
//   input Real dx \"Approximate difference between x1 and x2, below which regularization starts\";
//   input Real dx1;
//   input Real dx2;
//   input Real ddx;
//   output Real dy \"Derivative of smooth max operator\";
// algorithm
//   dy := (if x1 > x2 then dx1 else dx2) + 0.25 * (((4.0 * (dx1 - (if x1 > x2 then dx1 else dx2)) / dx - 4.0 * (x1 - max(x1, x2)) * ddx / dx ^ 2.0) * exp(4.0 * (x1 - max(x1, x2)) / dx) + (4.0 * (dx2 - (if x1 > x2 then dx1 else dx2)) / dx - 4.0 * (x2 - max(x1, x2)) * ddx / dx ^ 2.0) * exp(4.0 * (x2 - max(x1, x2)) / dx)) * dx / (exp(4.0 * (x1 - max(x1, x2)) / dx) + exp(4.0 * (x2 - max(x1, x2)) / dx)) + log(exp(4.0 * (x1 - max(x1, x2)) / dx) + exp(4.0 * (x2 - max(x1, x2)) / dx)) * ddx);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.Utilities.smoothMax_der;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.Utilities.spliceFunction \"Spline interpolation of two functions\"
//   input Real pos \"Returned value for x-deltax >= 0\";
//   input Real neg \"Returned value for x+deltax <= 0\";
//   input Real x \"Function argument\";
//   input Real deltax = 1.0 \"Region around x with spline interpolation\";
//   output Real out;
//   protected Real scaledX;
//   protected Real scaledX1;
//   protected Real y;
// algorithm
//   scaledX1 := x / deltax;
//   scaledX := scaledX1 * 1.570796326794897;
//   if scaledX1 <= -0.999999999 then
//     y := 0.0;
//   elseif scaledX1 >= 0.999999999 then
//     y := 1.0;
//   else
//     y := (tanh(tan(scaledX)) + 1.0) / 2.0;
//   end if;
//   out := pos * y + (1.0 - y) * neg;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.Utilities.spliceFunction;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.Utilities.spliceFunction_der \"Derivative of spliceFunction\"
//   input Real pos;
//   input Real neg;
//   input Real x;
//   input Real deltax = 1.0;
//   input Real dpos;
//   input Real dneg;
//   input Real dx;
//   input Real ddeltax = 0.0;
//   output Real out;
//   protected Real scaledX;
//   protected Real scaledX1;
//   protected Real dscaledX1;
//   protected Real y;
// algorithm
//   scaledX1 := x / deltax;
//   scaledX := scaledX1 * 1.570796326794897;
//   dscaledX1 := (dx - scaledX1 * ddeltax) / deltax;
//   if scaledX1 <= -0.99999999999 then
//     y := 0.0;
//   elseif scaledX1 >= 0.9999999999 then
//     y := 1.0;
//   else
//     y := (tanh(tan(scaledX)) + 1.0) / 2.0;
//   end if;
//   out := dpos * y + (1.0 - y) * dneg;
//   if abs(scaledX1) < 1.0 then
//     out := out + (pos - neg) * dscaledX1 * 1.570796326794897 / 2.0 / (cosh(tan(scaledX)) * cos(scaledX)) ^ 2.0;
//   end if;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.Utilities.spliceFunction_der;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.enthalpyOfWater \"Computes specific enthalpy of water (solid/liquid) near atmospheric pressure from temperature T\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Temperature\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy of water\";
// algorithm
//   h := Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.Utilities.spliceFunction(4200.0 * (T - 273.15), 2050.0 * (T - 273.15) - 333000.0, T - 273.16, 0.1);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.enthalpyOfWater;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.enthalpyOfWater_der \"Derivative function of enthalpyOfWater\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Temperature\";
//   input Real dT(unit = \"K/s\") \"Time derivative of temperature\";
//   output Real dh(unit = \"J/(kg.s)\") \"Time derivative of specific enthalpy\";
// algorithm
//   dh := Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.Utilities.spliceFunction_der(4200.0 * (T - 273.15), 2050.0 * (T - 273.15) - 333000.0, T - 273.16, 0.1, 4200.0 * dT, 2050.0 * dT, dT, 0.0);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.enthalpyOfWater_der;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.h_pTX \"Return specific enthalpy of moist air as a function of pressure p, temperature T and composition X\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Temperature\";
//   input Real[:] X(quantity = fill(\"MassFraction\", size(X, 1)), unit = fill(\"1\", size(X, 1)), min = fill(0.0, size(X, 1)), max = fill(1.0, size(X, 1))) \"Mass fractions of moist air\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy at p, T, X\";
//   protected Real p_steam_sat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) \"partial saturation pressure of steam\";
//   protected Real X_sat(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Absolute humidity per unit mass of moist air\";
//   protected Real X_liquid(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Mass fraction of liquid water\";
//   protected Real X_steam(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Mass fraction of steam water\";
//   protected Real X_air(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Mass fraction of air\";
// algorithm
//   p_steam_sat := Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.saturationPressure(T);
//   X_sat := min(p_steam_sat * 0.6219647130774989 / max(1e-13, p - p_steam_sat) * (1.0 - X[1]), 1.0);
//   X_liquid := max(X[1] - X_sat, 0.0);
//   X_steam := X[1] - X_liquid;
//   X_air := 1.0 - X[1];
//   h := Modelica.Media.IdealGases.Common.Functions.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.UserDefined, 2547494.319) * X_steam + Modelica.Media.IdealGases.Common.Functions.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"Air\", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.UserDefined, 25104.684) * X_air + Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.enthalpyOfWater(T) * X_liquid;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.h_pTX;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.h_pTX_der \"Derivative function of h_pTX\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Temperature\";
//   input Real[:] X(quantity = fill(\"MassFraction\", size(X, 1)), unit = fill(\"1\", size(X, 1)), min = fill(0.0, size(X, 1)), max = fill(1.0, size(X, 1))) \"Mass fractions of moist air\";
//   input Real dp(unit = \"Pa/s\") \"Pressure derivative\";
//   input Real dT(unit = \"K/s\") \"Temperature derivative\";
//   input Real[:] dX(unit = \"1/s\") \"Composition derivative\";
//   output Real h_der(unit = \"J/(kg.s)\") \"Time derivative of specific enthalpy\";
//   protected Real p_steam_sat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) \"partial saturation pressure of steam\";
//   protected Real X_sat(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Absolute humidity per unit mass of moist air\";
//   protected Real X_liquid(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Mass fraction of liquid water\";
//   protected Real X_steam(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Mass fraction of steam water\";
//   protected Real X_air(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Mass fraction of air\";
//   protected Real x_sat(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Absolute humidity per unit mass of dry air at saturation\";
//   protected Real dX_steam(unit = \"1/s\") \"Time derivative of steam mass fraction\";
//   protected Real dX_air(unit = \"1/s\") \"Time derivative of dry air mass fraction\";
//   protected Real dX_liq(unit = \"1/s\") \"Time derivative of liquid/solid water mass fraction\";
//   protected Real dps(unit = \"Pa/s\") \"Time derivative of saturation pressure\";
//   protected Real dx_sat(unit = \"1/s\") \"Time derivative of absolute humidity per unit mass of dry air\";
// algorithm
//   p_steam_sat := Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.saturationPressure(T);
//   x_sat := p_steam_sat * 0.6219647130774989 / max(1e-13, p - p_steam_sat);
//   X_sat := min(x_sat * (1.0 - X[1]), 1.0);
//   X_liquid := Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.Utilities.smoothMax(X[1] - X_sat, 0.0, 1e-05);
//   X_steam := X[1] - X_liquid;
//   X_air := 1.0 - X[1];
//   dX_air := -dX[1];
//   dps := Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.saturationPressure_der(T, dT);
//   dx_sat := 0.6219647130774989 * (dps * (p - p_steam_sat) - p_steam_sat * (dp - dps)) / (p - p_steam_sat) / (p - p_steam_sat);
//   dX_liq := Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.Utilities.smoothMax_der(X[1] - X_sat, 0.0, 1e-05, (1.0 + x_sat) * dX[1] - (1.0 - X[1]) * dx_sat, 0.0, 0.0);
//   dX_steam := dX[1] - dX_liq;
//   h_der := X_steam * Modelica.Media.IdealGases.Common.Functions.h_Tlow_der(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.UserDefined, 2547494.319, dT) + dX_steam * Modelica.Media.IdealGases.Common.Functions.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.UserDefined, 2547494.319) + X_air * Modelica.Media.IdealGases.Common.Functions.h_Tlow_der(Modelica.Media.IdealGases.Common.DataRecord(\"Air\", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.UserDefined, 25104.684, dT) + dX_air * Modelica.Media.IdealGases.Common.Functions.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"Air\", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.UserDefined, 25104.684) + X_liquid * Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.enthalpyOfWater_der(T, dT) + dX_liq * Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.enthalpyOfWater(T);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.h_pTX_der;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.saturationPressure \"Return saturation pressure of water as a function of temperature T between 190 and 647.096 K\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) \"Saturation temperature\";
//   output Real psat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Saturation pressure\";
// algorithm
//   psat := Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.Utilities.spliceFunction(Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.saturationPressureLiquid(Tsat), Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.sublimationPressureIce(Tsat), Tsat - 273.16, 1.0);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.saturationPressure;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.saturationPressureLiquid \"Return saturation pressure of water as a function of temperature T in the range of 273.16 to 647.096 K\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Saturation temperature\";
//   output Real psat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) \"Saturation pressure\";
//   protected Real Tcritical(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 647.096 \"Critical temperature\";
//   protected Real pcritical(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 22064000.0 \"Critical pressure\";
//   protected Real[:] a = {-7.85951783, 1.84408259, -11.7866497, 22.6807411, -15.9618719, 1.80122502} \"Coefficients a[:]\";
//   protected Real[:] n = {1.0, 1.5, 3.0, 3.5, 4.0, 7.5} \"Coefficients n[:]\";
//   protected Real r1 = 1.0 - Tsat / Tcritical \"Common subexpression\";
// algorithm
//   psat := exp((a[1] * r1 ^ n[1] + a[2] * r1 ^ n[2] + a[3] * r1 ^ n[3] + a[4] * r1 ^ n[4] + a[5] * r1 ^ n[5] + a[6] * r1 ^ n[6]) * Tcritical / Tsat) * pcritical;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.saturationPressureLiquid;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.saturationPressureLiquid_der \"Derivative function for 'saturationPressureLiquid'\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Saturation temperature\";
//   input Real dTsat(unit = \"K/s\") \"Saturation temperature derivative\";
//   output Real psat_der(unit = \"Pa/s\") \"Saturation pressure derivative\";
//   protected Real Tcritical(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 647.096 \"Critical temperature\";
//   protected Real pcritical(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 22064000.0 \"Critical pressure\";
//   protected Real[:] a = {-7.85951783, 1.84408259, -11.7866497, 22.6807411, -15.9618719, 1.80122502} \"Coefficients a[:]\";
//   protected Real[:] n = {1.0, 1.5, 3.0, 3.5, 4.0, 7.5} \"Coefficients n[:]\";
//   protected Real r1 = 1.0 - Tsat / Tcritical \"Common subexpression 1\";
//   protected Real r1_der = -1.0 / Tcritical * dTsat \"Derivative of common subexpression 1\";
//   protected Real r2 = a[1] * r1 ^ n[1] + a[2] * r1 ^ n[2] + a[3] * r1 ^ n[3] + a[4] * r1 ^ n[4] + a[5] * r1 ^ n[5] + a[6] * r1 ^ n[6] \"Common subexpression 2\";
// algorithm
//   psat_der := exp(r2 * Tcritical / Tsat) * pcritical * ((a[1] * r1 ^ (n[1] - 1.0) * n[1] * r1_der + a[2] * r1 ^ (n[2] - 1.0) * n[2] * r1_der + a[3] * r1 ^ (n[3] - 1.0) * n[3] * r1_der + a[4] * r1 ^ (n[4] - 1.0) * n[4] * r1_der + a[5] * r1 ^ (n[5] - 1.0) * n[5] * r1_der + a[6] * r1 ^ (n[6] - 1.0) * n[6] * r1_der) * Tcritical / Tsat - r2 * Tcritical * dTsat / Tsat ^ 2.0);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.saturationPressureLiquid_der;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.saturationPressure_der \"Derivative function for 'saturationPressure'\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) \"Saturation temperature\";
//   input Real dTsat(unit = \"K/s\") \"Time derivative of saturation temperature\";
//   output Real psat_der(unit = \"Pa/s\") \"Saturation pressure\";
// algorithm
//   psat_der := Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.Utilities.spliceFunction_der(Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.saturationPressureLiquid(Tsat), Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.sublimationPressureIce(Tsat), Tsat - 273.16, 1.0, Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.saturationPressureLiquid_der(Tsat, dTsat), Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.sublimationPressureIce_der(Tsat, dTsat), dTsat, 0.0);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.saturationPressure_der;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.setState_pTX \"Return thermodynamic state as function of pressure p, temperature T and composition X\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) \"Temperature\";
//   input Real[:] X(quantity = fill(\"MassFraction\", size(X, 1)), unit = fill(\"kg/kg\", size(X, 1)), min = fill(0.0, size(X, 1)), max = fill(1.0, size(X, 1)), nominal = fill(0.1, size(X, 1))) = {0.01, 0.99} \"Mass fractions\";
//   output Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.ThermodynamicState state \"Thermodynamic state\";
// algorithm
//   state := if size(X, 1) == 2 then Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.ThermodynamicState(p, T, X) else Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.ThermodynamicState(p, T, cat(1, X, {1.0 - sum(X)}));
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.setState_pTX;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.setState_phX \"Return thermodynamic state as function of pressure p, specific enthalpy h and composition X\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0) \"Specific enthalpy\";
//   input Real[:] X(quantity = fill(\"MassFraction\", size(X, 1)), unit = fill(\"kg/kg\", size(X, 1)), min = fill(0.0, size(X, 1)), max = fill(1.0, size(X, 1)), nominal = fill(0.1, size(X, 1))) = {0.01, 0.99} \"Mass fractions\";
//   output Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.ThermodynamicState state \"Thermodynamic state\";
// algorithm
//   state := if size(X, 1) == 2 then Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.ThermodynamicState(p, Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.T_phX(p, h, X), X) else Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.ThermodynamicState(p, Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.T_phX(p, h, X), cat(1, X, {1.0 - sum(X)}));
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.setState_phX;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.specificEnthalpy \"Return specific enthalpy of moist air as a function of the thermodynamic state record\"
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.ThermodynamicState state \"Thermodynamic state record\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.h_pTX(state.p, state.T, state.X);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.specificEnthalpy;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.specificEnthalpy_pTX \"Return specific enthalpy from p, T, and X or Xi\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) \"Temperature\";
//   input Real[:] X(quantity = fill(\"MassFraction\", size(X, 1)), unit = fill(\"kg/kg\", size(X, 1)), min = fill(0.0, size(X, 1)), max = fill(1.0, size(X, 1)), nominal = fill(0.1, size(X, 1))) = {0.01, 0.99} \"Mass fractions\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.specificEnthalpy(Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.setState_pTX(p, T, X));
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.specificEnthalpy_pTX;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.sublimationPressureIce \"Return sublimation pressure of water as a function of temperature T between 190 and 273.16 K\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Sublimation temperature\";
//   output Real psat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) \"Sublimation pressure\";
//   protected Real Ttriple(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 273.16 \"Triple point temperature\";
//   protected Real ptriple(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 611.657 \"Triple point pressure\";
//   protected Real[:] a = {-13.928169, 34.7078238} \"Coefficients a[:]\";
//   protected Real[:] n = {-1.5, -1.25} \"Coefficients n[:]\";
//   protected Real r1 = Tsat / Ttriple \"Common subexpression\";
// algorithm
//   psat := exp(a[1] - a[1] * r1 ^ n[1] + a[2] - a[2] * r1 ^ n[2]) * ptriple;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.sublimationPressureIce;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.sublimationPressureIce_der \"Derivative function for 'sublimationPressureIce'\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Sublimation temperature\";
//   input Real dTsat(unit = \"K/s\") \"Sublimation temperature derivative\";
//   output Real psat_der(unit = \"Pa/s\") \"Sublimation pressure derivative\";
//   protected Real Ttriple(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 273.16 \"Triple point temperature\";
//   protected Real ptriple(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 611.657 \"Triple point pressure\";
//   protected Real[:] a = {-13.928169, 34.7078238} \"Coefficients a[:]\";
//   protected Real[:] n = {-1.5, -1.25} \"Coefficients n[:]\";
//   protected Real r1 = Tsat / Ttriple \"Common subexpression 1\";
//   protected Real r1_der = dTsat / Ttriple \"Derivative of common subexpression 1\";
// algorithm
//   psat_der := exp(a[1] - a[1] * r1 ^ n[1] + a[2] - a[2] * r1 ^ n[2]) * ptriple * ((-a[1] * r1 ^ (n[1] - 1.0) * n[1] * r1_der) - a[2] * r1 ^ (n[2] - 1.0) * n[2] * r1_der);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.sublimationPressureIce_der;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.temperature \"Return temperature of ideal gas as a function of the thermodynamic state record\"
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.ThermodynamicState state \"Thermodynamic state record\";
//   output Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) \"Temperature\";
// algorithm
//   T := state.T;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.temperature;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.temperature_phX \"Return temperature from p, h, and X or Xi\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0) \"Specific enthalpy\";
//   input Real[:] X(quantity = fill(\"MassFraction\", size(X, 1)), unit = fill(\"kg/kg\", size(X, 1)), min = fill(0.0, size(X, 1)), max = fill(1.0, size(X, 1)), nominal = fill(0.1, size(X, 1))) = {0.01, 0.99} \"Mass fractions\";
//   output Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) \"Temperature\";
// algorithm
//   T := Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.temperature(Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.setState_phX(p, h, X));
// end Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.temperature_phX;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.T_phX \"Return temperature as a function of pressure p, specific enthalpy h and composition X\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0) \"Specific enthalpy\";
//   input Real[:] X(quantity = fill(\"MassFraction\", size(X, 1)), unit = fill(\"kg/kg\", size(X, 1)), min = fill(0.0, size(X, 1)), max = fill(1.0, size(X, 1)), nominal = fill(0.1, size(X, 1))) \"Mass fractions of composition\";
//   output Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) \"Temperature\";
// algorithm
//   T := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.T_phX.Internal.solve(h, 190.0, 647.0, p, X[1:1], Modelica.Media.IdealGases.Common.DataRecord(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), 1e-13);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.T_phX;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.T_phX.Internal.f_nonlinear
//   input Real x \"Independent variable of function\";
//   input Real p = 0.0 \"Disregarded variables (here always used for pressure)\";
//   input Real[:] X = {} \"Disregarded variables (her always used for composition)\";
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.T_phX.Internal.f_nonlinear_Data f_nonlinear_data \"Additional data for the function\";
//   output Real y \"= f_nonlinear(x)\";
// algorithm
//   y := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.h_pTX(p, x, X);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.T_phX.Internal.f_nonlinear;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.T_phX.Internal.f_nonlinear_Data \"Automatically generated record constructor for Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.T_phX.Internal.f_nonlinear_Data\"
//   input String name;
//   input Real MM;
//   input Real Hf;
//   input Real H0;
//   input Real Tlimit;
//   input Real[7] alow;
//   input Real[2] blow;
//   input Real[7] ahigh;
//   input Real[2] bhigh;
//   input Real R;
//   output f_nonlinear_Data res;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.T_phX.Internal.f_nonlinear_Data;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.T_phX.Internal.solve
//   input Real y_zero \"Determine x_zero, such that f_nonlinear(x_zero) = y_zero\";
//   input Real x_min \"Minimum value of x\";
//   input Real x_max \"Maximum value of x\";
//   input Real pressure = 0.0 \"Disregarded variables (here always used for pressure)\";
//   input Real[:] X = {} \"Disregarded variables (here always used for composition)\";
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.T_phX.Internal.f_nonlinear_Data f_nonlinear_data \"Additional data for function f_nonlinear\";
//   input Real x_tol = 1e-13 \"Relative tolerance of the result\";
//   output Real x_zero \"f_nonlinear(x_zero) = y_zero\";
//   protected constant Real eps = 1e-15 \"Machine epsilon\";
//   protected constant Real x_eps = 1e-10 \"Slight modification of x_min, x_max, since x_min, x_max are usually exactly at the borders T_min/h_min and then small numeric noise may make the interval invalid\";
//   protected Real c \"Intermediate point a <= c <= b\";
//   protected Real d;
//   protected Real e \"b - a\";
//   protected Real m;
//   protected Real s;
//   protected Real p;
//   protected Real q;
//   protected Real r;
//   protected Real tol;
//   protected Real fa \"= f_nonlinear(a) - y_zero\";
//   protected Real fb \"= f_nonlinear(b) - y_zero\";
//   protected Real fc;
//   protected Boolean found = false;
//   protected Real x_min2 = x_min - x_eps;
//   protected Real x_max2 = x_max + x_eps;
//   protected Real a = x_min2 \"Current best minimum interval value\";
//   protected Real b = x_max2 \"Current best maximum interval value\";
// algorithm
//   fa := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.T_phX.Internal.f_nonlinear(x_min2, pressure, X, f_nonlinear_data) - y_zero;
//   fb := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.T_phX.Internal.f_nonlinear(x_max2, pressure, X, f_nonlinear_data) - y_zero;
//   fc := fb;
//   if fa > 0.0 and fb > 0.0 or fa < 0.0 and fb < 0.0 then
//     Modelica.Utilities.Streams.error(\"The arguments x_min and x_max to OneNonLinearEquation.solve(..)
//     do not bracket the root of the single non-linear equation:
//       x_min  = \" + String(x_min2, 6, 0, true) + \"
//     \" + \"  x_max  = \" + String(x_max2, 6, 0, true) + \"
//     \" + \"  y_zero = \" + String(y_zero, 6, 0, true) + \"
//     \" + \"  fa = f(x_min) - y_zero = \" + String(fa, 6, 0, true) + \"
//     \" + \"  fb = f(x_max) - y_zero = \" + String(fb, 6, 0, true) + \"
//     \" + \"fa and fb must have opposite sign which is not the case\");
//   end if;
//   c := a;
//   fc := fa;
//   e := b - a;
//   d := e;
//   while not found loop
//     if abs(fc) < abs(fb) then
//       a := b;
//       b := c;
//       c := a;
//       fa := fb;
//       fb := fc;
//       fc := fa;
//     end if;
//     tol := 2.0 * eps * abs(b) + x_tol;
//     m := (c - b) / 2.0;
//     if abs(m) <= tol or fb == 0.0 then
//       found := true;
//       x_zero := b;
//     else
//       if abs(e) < tol or abs(fa) <= abs(fb) then
//         e := m;
//         d := e;
//       else
//         s := fb / fa;
//         if a == c then
//           p := 2.0 * m * s;
//           q := 1.0 - s;
//         else
//           q := fa / fc;
//           r := fb / fc;
//           p := s * (2.0 * m * q * (q - r) - (b - a) * (r - 1.0));
//           q := (q - 1.0) * (r - 1.0) * (s - 1.0);
//         end if;
//         if p > 0.0 then
//           q := -q;
//         else
//           p := -p;
//         end if;
//         s := e;
//         e := d;
//         if 2.0 * p < 3.0 * m * q - abs(tol * q) and p < abs(0.5 * s * q) then
//           d := p / q;
//         else
//           e := m;
//           d := e;
//         end if;
//       end if;
//       a := b;
//       fa := fb;
//       b := b + (if abs(d) > tol then d else if m > 0.0 then tol else -tol);
//       fb := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.T_phX.Internal.f_nonlinear(b, pressure, X, f_nonlinear_data) - y_zero;
//       if fb > 0.0 and fc > 0.0 or fb < 0.0 and fc < 0.0 then
//         c := a;
//         fc := fa;
//         e := b - a;
//         d := e;
//       end if;
//     end if;
//   end while;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.T_phX.Internal.solve;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.ThermodynamicState \"Automatically generated record constructor for Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.ThermodynamicState\"
//   input Real p;
//   input Real T;
//   input Real[2] X;
//   output ThermodynamicState res;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.ThermodynamicState;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.Utilities.smoothMax
//   input Real x1 \"First argument of smooth max operator\";
//   input Real x2 \"Second argument of smooth max operator\";
//   input Real dx \"Approximate difference between x1 and x2, below which regularization starts\";
//   output Real y \"Result of smooth max operator\";
// algorithm
//   y := max(x1, x2) + log(exp(4.0 / dx * (x1 - max(x1, x2))) + exp(4.0 / dx * (x2 - max(x1, x2)))) / (4.0 / dx);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.Utilities.smoothMax;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.Utilities.smoothMax_der
//   input Real x1 \"First argument of smooth max operator\";
//   input Real x2 \"Second argument of smooth max operator\";
//   input Real dx \"Approximate difference between x1 and x2, below which regularization starts\";
//   input Real dx1;
//   input Real dx2;
//   input Real ddx;
//   output Real dy \"Derivative of smooth max operator\";
// algorithm
//   dy := (if x1 > x2 then dx1 else dx2) + 0.25 * (((4.0 * (dx1 - (if x1 > x2 then dx1 else dx2)) / dx - 4.0 * (x1 - max(x1, x2)) * ddx / dx ^ 2.0) * exp(4.0 * (x1 - max(x1, x2)) / dx) + (4.0 * (dx2 - (if x1 > x2 then dx1 else dx2)) / dx - 4.0 * (x2 - max(x1, x2)) * ddx / dx ^ 2.0) * exp(4.0 * (x2 - max(x1, x2)) / dx)) * dx / (exp(4.0 * (x1 - max(x1, x2)) / dx) + exp(4.0 * (x2 - max(x1, x2)) / dx)) + log(exp(4.0 * (x1 - max(x1, x2)) / dx) + exp(4.0 * (x2 - max(x1, x2)) / dx)) * ddx);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.Utilities.smoothMax_der;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.Utilities.spliceFunction \"Spline interpolation of two functions\"
//   input Real pos \"Returned value for x-deltax >= 0\";
//   input Real neg \"Returned value for x+deltax <= 0\";
//   input Real x \"Function argument\";
//   input Real deltax = 1.0 \"Region around x with spline interpolation\";
//   output Real out;
//   protected Real scaledX;
//   protected Real scaledX1;
//   protected Real y;
// algorithm
//   scaledX1 := x / deltax;
//   scaledX := scaledX1 * 1.570796326794897;
//   if scaledX1 <= -0.999999999 then
//     y := 0.0;
//   elseif scaledX1 >= 0.999999999 then
//     y := 1.0;
//   else
//     y := (tanh(tan(scaledX)) + 1.0) / 2.0;
//   end if;
//   out := pos * y + (1.0 - y) * neg;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.Utilities.spliceFunction;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.Utilities.spliceFunction_der \"Derivative of spliceFunction\"
//   input Real pos;
//   input Real neg;
//   input Real x;
//   input Real deltax = 1.0;
//   input Real dpos;
//   input Real dneg;
//   input Real dx;
//   input Real ddeltax = 0.0;
//   output Real out;
//   protected Real scaledX;
//   protected Real scaledX1;
//   protected Real dscaledX1;
//   protected Real y;
// algorithm
//   scaledX1 := x / deltax;
//   scaledX := scaledX1 * 1.570796326794897;
//   dscaledX1 := (dx - scaledX1 * ddeltax) / deltax;
//   if scaledX1 <= -0.99999999999 then
//     y := 0.0;
//   elseif scaledX1 >= 0.9999999999 then
//     y := 1.0;
//   else
//     y := (tanh(tan(scaledX)) + 1.0) / 2.0;
//   end if;
//   out := dpos * y + (1.0 - y) * dneg;
//   if abs(scaledX1) < 1.0 then
//     out := out + (pos - neg) * dscaledX1 * 1.570796326794897 / 2.0 / (cosh(tan(scaledX)) * cos(scaledX)) ^ 2.0;
//   end if;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.Utilities.spliceFunction_der;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.density \"Returns density of ideal gas as a function of the thermodynamic state record\"
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.ThermodynamicState state \"Thermodynamic state record\";
//   output Real d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0) \"Density\";
// algorithm
//   d := state.p / (Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.gasConstant(state) * state.T);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.density;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.enthalpyOfWater \"Computes specific enthalpy of water (solid/liquid) near atmospheric pressure from temperature T\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Temperature\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy of water\";
// algorithm
//   h := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.Utilities.spliceFunction(4200.0 * (T - 273.15), 2050.0 * (T - 273.15) - 333000.0, T - 273.16, 0.1);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.enthalpyOfWater;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.enthalpyOfWater_der \"Derivative function of enthalpyOfWater\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Temperature\";
//   input Real dT(unit = \"K/s\") \"Time derivative of temperature\";
//   output Real dh(unit = \"J/(kg.s)\") \"Time derivative of specific enthalpy\";
// algorithm
//   dh := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.Utilities.spliceFunction_der(4200.0 * (T - 273.15), 2050.0 * (T - 273.15) - 333000.0, T - 273.16, 0.1, 4200.0 * dT, 2050.0 * dT, dT, 0.0);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.enthalpyOfWater_der;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.gasConstant \"Return ideal gas constant as a function from thermodynamic state, only valid for phi<1\"
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.ThermodynamicState state \"Thermodynamic state\";
//   output Real R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") \"Mixture gas constant\";
// algorithm
//   R := 287.0512249529787 * (1.0 - state.X[1]) + 461.5233290850878 * state.X[1];
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.gasConstant;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.h_pTX \"Return specific enthalpy of moist air as a function of pressure p, temperature T and composition X\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Temperature\";
//   input Real[:] X(quantity = fill(\"MassFraction\", size(X, 1)), unit = fill(\"1\", size(X, 1)), min = fill(0.0, size(X, 1)), max = fill(1.0, size(X, 1))) \"Mass fractions of moist air\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy at p, T, X\";
//   protected Real p_steam_sat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) \"partial saturation pressure of steam\";
//   protected Real X_sat(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Absolute humidity per unit mass of moist air\";
//   protected Real X_liquid(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Mass fraction of liquid water\";
//   protected Real X_steam(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Mass fraction of steam water\";
//   protected Real X_air(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Mass fraction of air\";
// algorithm
//   p_steam_sat := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.saturationPressure(T);
//   X_sat := min(p_steam_sat * 0.6219647130774989 / max(1e-13, p - p_steam_sat) * (1.0 - X[1]), 1.0);
//   X_liquid := max(X[1] - X_sat, 0.0);
//   X_steam := X[1] - X_liquid;
//   X_air := 1.0 - X[1];
//   h := Modelica.Media.IdealGases.Common.Functions.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.UserDefined, 2547494.319) * X_steam + Modelica.Media.IdealGases.Common.Functions.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"Air\", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.UserDefined, 25104.684) * X_air + Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.enthalpyOfWater(T) * X_liquid;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.h_pTX;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.h_pTX_der \"Derivative function of h_pTX\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Temperature\";
//   input Real[:] X(quantity = fill(\"MassFraction\", size(X, 1)), unit = fill(\"1\", size(X, 1)), min = fill(0.0, size(X, 1)), max = fill(1.0, size(X, 1))) \"Mass fractions of moist air\";
//   input Real dp(unit = \"Pa/s\") \"Pressure derivative\";
//   input Real dT(unit = \"K/s\") \"Temperature derivative\";
//   input Real[:] dX(unit = \"1/s\") \"Composition derivative\";
//   output Real h_der(unit = \"J/(kg.s)\") \"Time derivative of specific enthalpy\";
//   protected Real p_steam_sat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) \"partial saturation pressure of steam\";
//   protected Real X_sat(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Absolute humidity per unit mass of moist air\";
//   protected Real X_liquid(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Mass fraction of liquid water\";
//   protected Real X_steam(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Mass fraction of steam water\";
//   protected Real X_air(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Mass fraction of air\";
//   protected Real x_sat(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Absolute humidity per unit mass of dry air at saturation\";
//   protected Real dX_steam(unit = \"1/s\") \"Time derivative of steam mass fraction\";
//   protected Real dX_air(unit = \"1/s\") \"Time derivative of dry air mass fraction\";
//   protected Real dX_liq(unit = \"1/s\") \"Time derivative of liquid/solid water mass fraction\";
//   protected Real dps(unit = \"Pa/s\") \"Time derivative of saturation pressure\";
//   protected Real dx_sat(unit = \"1/s\") \"Time derivative of absolute humidity per unit mass of dry air\";
// algorithm
//   p_steam_sat := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.saturationPressure(T);
//   x_sat := p_steam_sat * 0.6219647130774989 / max(1e-13, p - p_steam_sat);
//   X_sat := min(x_sat * (1.0 - X[1]), 1.0);
//   X_liquid := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.Utilities.smoothMax(X[1] - X_sat, 0.0, 1e-05);
//   X_steam := X[1] - X_liquid;
//   X_air := 1.0 - X[1];
//   dX_air := -dX[1];
//   dps := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.saturationPressure_der(T, dT);
//   dx_sat := 0.6219647130774989 * (dps * (p - p_steam_sat) - p_steam_sat * (dp - dps)) / (p - p_steam_sat) / (p - p_steam_sat);
//   dX_liq := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.Utilities.smoothMax_der(X[1] - X_sat, 0.0, 1e-05, (1.0 + x_sat) * dX[1] - (1.0 - X[1]) * dx_sat, 0.0, 0.0);
//   dX_steam := dX[1] - dX_liq;
//   h_der := X_steam * Modelica.Media.IdealGases.Common.Functions.h_Tlow_der(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.UserDefined, 2547494.319, dT) + dX_steam * Modelica.Media.IdealGases.Common.Functions.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.UserDefined, 2547494.319) + X_air * Modelica.Media.IdealGases.Common.Functions.h_Tlow_der(Modelica.Media.IdealGases.Common.DataRecord(\"Air\", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.UserDefined, 25104.684, dT) + dX_air * Modelica.Media.IdealGases.Common.Functions.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"Air\", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.UserDefined, 25104.684) + X_liquid * Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.enthalpyOfWater_der(T, dT) + dX_liq * Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.enthalpyOfWater(T);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.h_pTX_der;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.saturationPressure \"Return saturation pressure of water as a function of temperature T between 190 and 647.096 K\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) \"Saturation temperature\";
//   output Real psat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Saturation pressure\";
// algorithm
//   psat := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.Utilities.spliceFunction(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.saturationPressureLiquid(Tsat), Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.sublimationPressureIce(Tsat), Tsat - 273.16, 1.0);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.saturationPressure;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.saturationPressureLiquid \"Return saturation pressure of water as a function of temperature T in the range of 273.16 to 647.096 K\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Saturation temperature\";
//   output Real psat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) \"Saturation pressure\";
//   protected Real Tcritical(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 647.096 \"Critical temperature\";
//   protected Real pcritical(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 22064000.0 \"Critical pressure\";
//   protected Real[:] a = {-7.85951783, 1.84408259, -11.7866497, 22.6807411, -15.9618719, 1.80122502} \"Coefficients a[:]\";
//   protected Real[:] n = {1.0, 1.5, 3.0, 3.5, 4.0, 7.5} \"Coefficients n[:]\";
//   protected Real r1 = 1.0 - Tsat / Tcritical \"Common subexpression\";
// algorithm
//   psat := exp((a[1] * r1 ^ n[1] + a[2] * r1 ^ n[2] + a[3] * r1 ^ n[3] + a[4] * r1 ^ n[4] + a[5] * r1 ^ n[5] + a[6] * r1 ^ n[6]) * Tcritical / Tsat) * pcritical;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.saturationPressureLiquid;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.saturationPressureLiquid_der \"Derivative function for 'saturationPressureLiquid'\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Saturation temperature\";
//   input Real dTsat(unit = \"K/s\") \"Saturation temperature derivative\";
//   output Real psat_der(unit = \"Pa/s\") \"Saturation pressure derivative\";
//   protected Real Tcritical(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 647.096 \"Critical temperature\";
//   protected Real pcritical(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 22064000.0 \"Critical pressure\";
//   protected Real[:] a = {-7.85951783, 1.84408259, -11.7866497, 22.6807411, -15.9618719, 1.80122502} \"Coefficients a[:]\";
//   protected Real[:] n = {1.0, 1.5, 3.0, 3.5, 4.0, 7.5} \"Coefficients n[:]\";
//   protected Real r1 = 1.0 - Tsat / Tcritical \"Common subexpression 1\";
//   protected Real r1_der = -1.0 / Tcritical * dTsat \"Derivative of common subexpression 1\";
//   protected Real r2 = a[1] * r1 ^ n[1] + a[2] * r1 ^ n[2] + a[3] * r1 ^ n[3] + a[4] * r1 ^ n[4] + a[5] * r1 ^ n[5] + a[6] * r1 ^ n[6] \"Common subexpression 2\";
// algorithm
//   psat_der := exp(r2 * Tcritical / Tsat) * pcritical * ((a[1] * r1 ^ (n[1] - 1.0) * n[1] * r1_der + a[2] * r1 ^ (n[2] - 1.0) * n[2] * r1_der + a[3] * r1 ^ (n[3] - 1.0) * n[3] * r1_der + a[4] * r1 ^ (n[4] - 1.0) * n[4] * r1_der + a[5] * r1 ^ (n[5] - 1.0) * n[5] * r1_der + a[6] * r1 ^ (n[6] - 1.0) * n[6] * r1_der) * Tcritical / Tsat - r2 * Tcritical * dTsat / Tsat ^ 2.0);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.saturationPressureLiquid_der;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.saturationPressure_der \"Derivative function for 'saturationPressure'\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) \"Saturation temperature\";
//   input Real dTsat(unit = \"K/s\") \"Time derivative of saturation temperature\";
//   output Real psat_der(unit = \"Pa/s\") \"Saturation pressure\";
// algorithm
//   psat_der := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.Utilities.spliceFunction_der(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.saturationPressureLiquid(Tsat), Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.sublimationPressureIce(Tsat), Tsat - 273.16, 1.0, Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.saturationPressureLiquid_der(Tsat, dTsat), Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.sublimationPressureIce_der(Tsat, dTsat), dTsat, 0.0);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.saturationPressure_der;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.setState_pTX \"Return thermodynamic state as function of pressure p, temperature T and composition X\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) \"Temperature\";
//   input Real[:] X(quantity = fill(\"MassFraction\", size(X, 1)), unit = fill(\"kg/kg\", size(X, 1)), min = fill(0.0, size(X, 1)), max = fill(1.0, size(X, 1)), nominal = fill(0.1, size(X, 1))) = {0.01, 0.99} \"Mass fractions\";
//   output Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.ThermodynamicState state \"Thermodynamic state\";
// algorithm
//   state := if size(X, 1) == 2 then Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.ThermodynamicState(p, T, X) else Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.ThermodynamicState(p, T, cat(1, X, {1.0 - sum(X)}));
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.setState_pTX;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.setState_phX \"Return thermodynamic state as function of pressure p, specific enthalpy h and composition X\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0) \"Specific enthalpy\";
//   input Real[:] X(quantity = fill(\"MassFraction\", size(X, 1)), unit = fill(\"kg/kg\", size(X, 1)), min = fill(0.0, size(X, 1)), max = fill(1.0, size(X, 1)), nominal = fill(0.1, size(X, 1))) = {0.01, 0.99} \"Mass fractions\";
//   output Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.ThermodynamicState state \"Thermodynamic state\";
// algorithm
//   state := if size(X, 1) == 2 then Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.ThermodynamicState(p, Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.T_phX(p, h, X), X) else Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.ThermodynamicState(p, Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.T_phX(p, h, X), cat(1, X, {1.0 - sum(X)}));
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.setState_phX;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.specificEnthalpy \"Return specific enthalpy of moist air as a function of the thermodynamic state record\"
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.ThermodynamicState state \"Thermodynamic state record\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.h_pTX(state.p, state.T, state.X);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.specificEnthalpy;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.specificEnthalpy_pTX \"Return specific enthalpy from p, T, and X or Xi\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) \"Temperature\";
//   input Real[:] X(quantity = fill(\"MassFraction\", size(X, 1)), unit = fill(\"kg/kg\", size(X, 1)), min = fill(0.0, size(X, 1)), max = fill(1.0, size(X, 1)), nominal = fill(0.1, size(X, 1))) = {0.01, 0.99} \"Mass fractions\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.specificEnthalpy(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.setState_pTX(p, T, X));
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.specificEnthalpy_pTX;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.sublimationPressureIce \"Return sublimation pressure of water as a function of temperature T between 190 and 273.16 K\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Sublimation temperature\";
//   output Real psat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) \"Sublimation pressure\";
//   protected Real Ttriple(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 273.16 \"Triple point temperature\";
//   protected Real ptriple(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 611.657 \"Triple point pressure\";
//   protected Real[:] a = {-13.928169, 34.7078238} \"Coefficients a[:]\";
//   protected Real[:] n = {-1.5, -1.25} \"Coefficients n[:]\";
//   protected Real r1 = Tsat / Ttriple \"Common subexpression\";
// algorithm
//   psat := exp(a[1] - a[1] * r1 ^ n[1] + a[2] - a[2] * r1 ^ n[2]) * ptriple;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.sublimationPressureIce;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.sublimationPressureIce_der \"Derivative function for 'sublimationPressureIce'\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Sublimation temperature\";
//   input Real dTsat(unit = \"K/s\") \"Sublimation temperature derivative\";
//   output Real psat_der(unit = \"Pa/s\") \"Sublimation pressure derivative\";
//   protected Real Ttriple(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 273.16 \"Triple point temperature\";
//   protected Real ptriple(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 611.657 \"Triple point pressure\";
//   protected Real[:] a = {-13.928169, 34.7078238} \"Coefficients a[:]\";
//   protected Real[:] n = {-1.5, -1.25} \"Coefficients n[:]\";
//   protected Real r1 = Tsat / Ttriple \"Common subexpression 1\";
//   protected Real r1_der = dTsat / Ttriple \"Derivative of common subexpression 1\";
// algorithm
//   psat_der := exp(a[1] - a[1] * r1 ^ n[1] + a[2] - a[2] * r1 ^ n[2]) * ptriple * ((-a[1] * r1 ^ (n[1] - 1.0) * n[1] * r1_der) - a[2] * r1 ^ (n[2] - 1.0) * n[2] * r1_der);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.sublimationPressureIce_der;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.temperature \"Return temperature of ideal gas as a function of the thermodynamic state record\"
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.ThermodynamicState state \"Thermodynamic state record\";
//   output Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) \"Temperature\";
// algorithm
//   T := state.T;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.temperature;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.temperature_phX \"Return temperature from p, h, and X or Xi\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0) \"Specific enthalpy\";
//   input Real[:] X(quantity = fill(\"MassFraction\", size(X, 1)), unit = fill(\"kg/kg\", size(X, 1)), min = fill(0.0, size(X, 1)), max = fill(1.0, size(X, 1)), nominal = fill(0.1, size(X, 1))) = {0.01, 0.99} \"Mass fractions\";
//   output Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) \"Temperature\";
// algorithm
//   T := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.temperature(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.setState_phX(p, h, X));
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.temperature_phX;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.flowModel.Medium.ThermodynamicState \"Automatically generated record constructor for Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.flowModel.Medium.ThermodynamicState\"
//   input Real p;
//   input Real T;
//   input Real[2] X;
//   output ThermodynamicState res;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.flowModel.Medium.ThermodynamicState;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.flowModel.Medium.density \"Returns density of ideal gas as a function of the thermodynamic state record\"
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.flowModel.Medium.ThermodynamicState state \"Thermodynamic state record\";
//   output Real d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0) \"Density\";
// algorithm
//   d := state.p / (Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.flowModel.Medium.gasConstant(state) * state.T);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.flowModel.Medium.density;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.flowModel.Medium.dynamicViscosity \"Return dynamic viscosity as a function of the thermodynamic state record, valid from 123.15 K to 1273.15 K\"
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.flowModel.Medium.ThermodynamicState state \"Thermodynamic state record\";
//   output Real eta(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001) \"Dynamic viscosity\";
// algorithm
//   eta := 1e-06 * Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluateWithRange({9.739110288630587e-15, -3.135372487033391e-11, 4.300487659564222e-08, -3.822801629175824e-05, 0.05042787436718076, 17.23926013924253}, -150.0, 1000.0, Modelica.SIunits.Conversions.to_degC(state.T));
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.flowModel.Medium.dynamicViscosity;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.flowModel.Medium.gasConstant \"Return ideal gas constant as a function from thermodynamic state, only valid for phi<1\"
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.flowModel.Medium.ThermodynamicState state \"Thermodynamic state\";
//   output Real R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") \"Mixture gas constant\";
// algorithm
//   R := 287.0512249529787 * (1.0 - state.X[1]) + 461.5233290850878 * state.X[1];
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.flowModel.Medium.gasConstant;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.flowModel.Medium.pressure \"Returns pressure of ideal gas as a function of the thermodynamic state record\"
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.flowModel.Medium.ThermodynamicState state \"Thermodynamic state record\";
//   output Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
// algorithm
//   p := state.p;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.flowModel.Medium.pressure;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.flowModel.WallFriction.Internal.m_flow_of_dp_fric \"Calculate mass flow rate as function of pressure drop due to friction\"
//   input Real dp_fric(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure loss due to friction (dp = port_a.p - port_b.p)\";
//   input Real rho_a(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"Density at port_a\";
//   input Real rho_b(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"Density at port_b\";
//   input Real mu_a(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0) \"Dynamic viscosity at port_a (dummy if use_mu = false)\";
//   input Real mu_b(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0) \"Dynamic viscosity at port_b (dummy if use_mu = false)\";
//   input Real length(quantity = \"Length\", unit = \"m\") \"Length of pipe\";
//   input Real diameter(quantity = \"Length\", unit = \"m\", min = 0.0) \"Inner (hydraulic) diameter of pipe\";
//   input Real crossArea(quantity = \"Area\", unit = \"m2\") \"Inner cross section area\";
//   input Real Re1(quantity = \"ReynoldsNumber\", unit = \"1\") \"Boundary between laminar regime and transition\";
//   input Real Re2(quantity = \"ReynoldsNumber\", unit = \"1\") \"Boundary between transition and turbulent regime\";
//   input Real Delta(min = 0.0) \"Relative roughness\";
//   output Real m_flow(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow rate from port_a to port_b\";
//   output Real dm_flow_ddp_fric \"Derivative of mass flow rate with dp_fric\";
//   protected Real mu(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0) \"Upstream viscosity\";
//   protected Real rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"Upstream density\";
//   protected Real lambda2 \"Modified friction coefficient (= lambda*Re^2)\";
//   protected Real Re(quantity = \"ReynoldsNumber\", unit = \"1\") \"Reynolds number\";
//   protected Real dRe_ddp \"dRe/ddp\";
//   protected Real aux1;
//   protected Real aux2;
// algorithm
//   if dp_fric >= 0.0 then
//     rho := rho_a;
//     mu := mu_a;
//   else
//     rho := rho_b;
//     mu := mu_b;
//   end if;
//   lambda2 := abs(dp_fric) * 2.0 * diameter ^ 3.0 * rho / (length * mu * mu) \"Known as lambda2=f(dp)\";
//   aux1 := 2.0 * diameter ^ 3.0 * rho / (length * mu ^ 2.0);
//   Re := lambda2 / 64.0 \"Hagen-Poiseuille\";
//   dRe_ddp := aux1 / 64.0 \"Hagen-Poiseuille\";
//   if Re > Re1 then
//     Re := -2.0 * sqrt(lambda2) * log10(2.51 / sqrt(lambda2) + 0.27 * Delta) \"Colebrook-White\";
//     aux2 := sqrt(aux1 * abs(dp_fric));
//     dRe_ddp := 0.4342944819032518 * ((-2.0 * log(2.51 / aux2 + 0.27 * Delta) * aux1 / (2.0 * aux2)) + 5.02 / (2.0 * abs(dp_fric) * (2.51 / aux2 + 0.27 * Delta)));
//     if Re < Re2 then
//       (Re, dRe_ddp) := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.flowModel.WallFriction.Internal.m_flow_of_dp_fric.interpolateInRegion2_withDerivative(lambda2, Re1, Re2, Delta, dp_fric);
//     end if;
//   end if;
//   m_flow := crossArea / diameter * mu * (if dp_fric >= 0.0 then Re else -Re);
//   dm_flow_ddp_fric := crossArea / diameter * mu * dRe_ddp;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.flowModel.WallFriction.Internal.m_flow_of_dp_fric;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.flowModel.WallFriction.Internal.m_flow_of_dp_fric.interpolateInRegion2_withDerivative \"Interpolation in log-log space using a cubic Hermite polynomial, where x=log10(lambda2), y=log10(Re)\"
//   input Real lambda2 \"Known independent variable\";
//   input Real Re1(quantity = \"ReynoldsNumber\", unit = \"1\") \"Boundary between laminar regime and transition\";
//   input Real Re2(quantity = \"ReynoldsNumber\", unit = \"1\") \"Boundary between transition and turbulent regime\";
//   input Real Delta(min = 0.0) \"Relative roughness\";
//   input Real dp_fric(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure loss due to friction (dp = port_a.p - port_b.p)\";
//   output Real Re(quantity = \"ReynoldsNumber\", unit = \"1\") \"Unknown return variable\";
//   output Real dRe_ddp \"Derivative of return value\";
//   protected Real x1 = log10(64.0 * Re1);
//   protected Real y1 = log10(Re1);
//   protected Real y1d = 1.0;
//   protected Real aux2 = Delta / 3.7 + 5.74 / Re2 ^ 0.9;
//   protected Real x = log10(lambda2);
//   protected Real y;
//   protected Real dy_dx \"Derivative in transformed space\";
//   protected Real aux3 = log10(aux2);
//   protected Real L2 = 0.25 * (Re2 / aux3) ^ 2.0;
//   protected Real aux4 = 2.51 / sqrt(L2) + 0.27 * Delta;
//   protected Real x2 = log10(L2);
//   protected Real aux5 = -2.0 * sqrt(L2) * log10(aux4);
//   protected Real y2 = log10(aux5);
//   protected Real y2d = 0.5 + 1.090079149577162 / (aux5 * aux4);
// algorithm
//   (y, dy_dx) := Modelica.Fluid.Utilities.cubicHermite_withDerivative(x, x1, x2, y1, y2, y1d, y2d);
//   Re := 10.0 ^ y;
//   dRe_ddp := Re / abs(dp_fric) * dy_dx;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.flowModel.WallFriction.Internal.m_flow_of_dp_fric.interpolateInRegion2_withDerivative;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.flowModel.WallFriction.massFlowRate_dp_staticHead \"Return mass flow rate m_flow as function of pressure loss dp, i.e., m_flow = f(dp), due to wall friction and static head\"
//   input Real dp(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure loss (dp = port_a.p - port_b.p)\";
//   input Real rho_a(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"Density at port_a\";
//   input Real rho_b(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"Density at port_b\";
//   input Real mu_a(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0) \"Dynamic viscosity at port_a (dummy if use_mu = false)\";
//   input Real mu_b(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0) \"Dynamic viscosity at port_b (dummy if use_mu = false)\";
//   input Real length(quantity = \"Length\", unit = \"m\") \"Length of pipe\";
//   input Real diameter(quantity = \"Length\", unit = \"m\", min = 0.0) \"Inner (hydraulic) diameter of pipe\";
//   input Real g_times_height_ab(unit = \"m2/s2\") \"Gravity times (Height(port_b) - Height(port_a))\";
//   input Real crossArea(quantity = \"Area\", unit = \"m2\") = 3.141592653589793 * diameter ^ 2.0 / 4.0 \"Inner cross section area\";
//   input Real roughness(quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = 2.5e-05 \"Absolute roughness of pipe, with a default for a smooth steel pipe (dummy if use_roughness = false)\";
//   input Real dp_small(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 1.0 \"Regularization of zero flow if |dp| < dp_small (dummy if use_dp_small = false)\";
//   input Real Re_turbulent(quantity = \"ReynoldsNumber\", unit = \"1\") = 4000.0 \"Turbulent flow if Re >= Re_turbulent (dummy if use_Re_turbulent = false)\";
//   output Real m_flow(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow rate from port_a to port_b\";
//   protected Real Delta(min = 0.0) = roughness / diameter \"Relative roughness\";
//   protected Real Re(quantity = \"ReynoldsNumber\", unit = \"1\") \"Reynolds number\";
//   protected Real Re2(quantity = \"ReynoldsNumber\", unit = \"1\") = Re_turbulent \"Boundary between transition and turbulent regime\";
//   protected Real dp_a(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Upper end of regularization domain of the m_flow(dp) relation\";
//   protected Real dp_b(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Lower end of regularization domain of the m_flow(dp) relation\";
//   protected Real m_flow_a(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Value at upper end of regularization domain\";
//   protected Real m_flow_b(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Value at lower end of regularization domain\";
//   protected Real dm_flow_ddp_fric_a(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Derivative at upper end of regularization domain\";
//   protected Real dm_flow_ddp_fric_b(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Derivative at lower end of regularization domain\";
//   protected Real dp_grav_a(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = g_times_height_ab * rho_a \"Static head if mass flows in design direction (a to b)\";
//   protected Real dp_grav_b(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = g_times_height_ab * rho_b \"Static head if mass flows against design direction (b to a)\";
//   protected Real m_flow_zero(quantity = \"MassFlowRate\", unit = \"kg/s\") = 0.0;
//   protected Real dm_flow_ddp_fric_zero;
//   protected Real Re1(quantity = \"ReynoldsNumber\", unit = \"1\") = min((745.0 * exp(if Delta <= 0.0065 then 1.0 else 0.0065 / Delta)) ^ 0.97, Re_turbulent) \"Boundary between laminar regime and transition\";
//   protected Real dp_zero(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = (dp_grav_a + dp_grav_b) / 2.0;
// algorithm
//   dp_a := max(dp_grav_a, dp_grav_b) + dp_small;
//   dp_b := min(dp_grav_a, dp_grav_b) - dp_small;
//   if dp >= dp_a then
//     m_flow := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.flowModel.WallFriction.Internal.m_flow_of_dp_fric(dp - dp_grav_a, rho_a, rho_b, mu_a, mu_b, length, diameter, crossArea, Re1, Re2, Delta)[1];
//   elseif dp <= dp_b then
//     m_flow := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.flowModel.WallFriction.Internal.m_flow_of_dp_fric(dp - dp_grav_b, rho_a, rho_b, mu_a, mu_b, length, diameter, crossArea, Re1, Re2, Delta)[1];
//   else
//     (m_flow_a, dm_flow_ddp_fric_a) := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.flowModel.WallFriction.Internal.m_flow_of_dp_fric(dp_a - dp_grav_a, rho_a, rho_b, mu_a, mu_b, length, diameter, crossArea, Re1, Re2, Delta);
//     (m_flow_b, dm_flow_ddp_fric_b) := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.flowModel.WallFriction.Internal.m_flow_of_dp_fric(dp_b - dp_grav_b, rho_a, rho_b, mu_a, mu_b, length, diameter, crossArea, Re1, Re2, Delta);
//     (m_flow, dm_flow_ddp_fric_zero) := Modelica.Fluid.Utilities.regFun3(dp_zero, dp_b, dp_a, m_flow_b, m_flow_a, dm_flow_ddp_fric_b, dm_flow_ddp_fric_a);
//     if dp > dp_zero then
//       m_flow := Modelica.Fluid.Utilities.regFun3(dp, dp_zero, dp_a, m_flow_zero, m_flow_a, dm_flow_ddp_fric_zero, dm_flow_ddp_fric_a)[1];
//     else
//       m_flow := Modelica.Fluid.Utilities.regFun3(dp, dp_b, dp_zero, m_flow_b, m_flow_zero, dm_flow_ddp_fric_b, dm_flow_ddp_fric_zero)[1];
//     end if;
//   end if;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.flowModel.WallFriction.massFlowRate_dp_staticHead;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.flowModel.WallFriction.pressureLoss_m_flow \"Return pressure loss dp as function of mass flow rate m_flow, i.e., dp = f(m_flow), due to wall friction\"
//   input Real m_flow(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow rate from port_a to port_b\";
//   input Real rho_a(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"Density at port_a\";
//   input Real rho_b(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"Density at port_b\";
//   input Real mu_a(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0) \"Dynamic viscosity at port_a (dummy if use_mu = false)\";
//   input Real mu_b(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0) \"Dynamic viscosity at port_b (dummy if use_mu = false)\";
//   input Real length(quantity = \"Length\", unit = \"m\") \"Length of pipe\";
//   input Real diameter(quantity = \"Length\", unit = \"m\", min = 0.0) \"Inner (hydraulic) diameter of pipe\";
//   input Real crossArea(quantity = \"Area\", unit = \"m2\") = 3.141592653589793 * diameter ^ 2.0 / 4.0 \"Inner cross section area\";
//   input Real roughness(quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = 2.5e-05 \"Absolute roughness of pipe, with a default for a smooth steel pipe (dummy if use_roughness = false)\";
//   input Real m_flow_small(quantity = \"MassFlowRate\", unit = \"kg/s\") = 0.01 \"Regularization of zero flow if |m_flow| < m_flow_small (dummy if use_m_flow_small = false)\";
//   input Real Re_turbulent(quantity = \"ReynoldsNumber\", unit = \"1\") = 4000.0 \"Turbulent flow if Re >= Re_turbulent (dummy if use_Re_turbulent = false)\";
//   output Real dp(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure loss (dp = port_a.p - port_b.p)\";
//   protected Real Delta(min = 0.0) = roughness / diameter \"Relative roughness\";
//   protected Real Re2(quantity = \"ReynoldsNumber\", unit = \"1\") = Re_turbulent \"Re entering turbulent curve\";
//   protected Real mu(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0) \"Upstream viscosity\";
//   protected Real rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"Upstream density\";
//   protected Real Re(quantity = \"ReynoldsNumber\", unit = \"1\") \"Reynolds number\";
//   protected Real lambda2 \"Modified friction coefficient (= lambda*Re^2)\";
//   protected Real Re1(quantity = \"ReynoldsNumber\", unit = \"1\") = min(745.0 * exp(if Delta <= 0.0065 then 1.0 else 0.0065 / Delta), Re_turbulent) \"Re leaving laminar curve\";
// algorithm
//   rho := if m_flow >= 0.0 then rho_a else rho_b;
//   mu := if m_flow >= 0.0 then mu_a else mu_b;
//   Re := diameter * abs(m_flow) / (crossArea * mu);
//   lambda2 := if Re <= Re1 then 64.0 * Re else if Re >= Re2 then 0.25 * (Re / log10(Delta / 3.7 + 5.74 / Re ^ 0.9)) ^ 2.0 else Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.flowModel.WallFriction.pressureLoss_m_flow.interpolateInRegion2(Re, Re1, Re2, Delta);
//   dp := length * mu * mu / (2.0 * rho * diameter * diameter * diameter) * (if m_flow >= 0.0 then lambda2 else -lambda2);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.flowModel.WallFriction.pressureLoss_m_flow;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.flowModel.WallFriction.pressureLoss_m_flow.interpolateInRegion2
//   input Real Re(quantity = \"ReynoldsNumber\", unit = \"1\");
//   input Real Re1(quantity = \"ReynoldsNumber\", unit = \"1\");
//   input Real Re2(quantity = \"ReynoldsNumber\", unit = \"1\");
//   input Real Delta;
//   output Real lambda2;
//   protected Real x1 = log10(Re1);
//   protected Real y1 = log10(64.0 * Re1);
//   protected Real yd1 = 1.0;
//   protected Real aux1 = 1.121782646756099;
//   protected Real aux2 = Delta / 3.7 + 5.74 / Re2 ^ 0.9;
//   protected Real x2 = log10(Re2);
//   protected Real dx;
//   protected Real aux3 = log10(aux2);
//   protected Real diff_x = x2 - x1;
//   protected Real L2 = 0.25 * (Re2 / aux3) ^ 2.0;
//   protected Real yd2 = 2.0 + 4.0 * aux1 / (aux2 * aux3 * Re2 ^ 0.9);
//   protected Real aux4 = 2.51 / sqrt(L2) + 0.27 * Delta;
//   protected Real y2 = log10(L2);
//   protected Real aux5 = -2.0 * sqrt(L2) * log10(aux4);
//   protected Real m = (y2 - y1) / diff_x;
//   protected Real c2 = (3.0 * m - 2.0 * yd1 - yd2) / diff_x;
//   protected Real c3 = (yd1 + yd2 - 2.0 * m) / (diff_x * diff_x);
// algorithm
//   dx := log10(Re / Re1);
//   lambda2 := 64.0 * Re1 * (Re / Re1) ^ (1.0 + dx * (c2 + dx * c3));
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.flowModel.WallFriction.pressureLoss_m_flow.interpolateInRegion2;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.heatTransfer.Medium.ThermodynamicState \"Automatically generated record constructor for Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.heatTransfer.Medium.ThermodynamicState\"
//   input Real p;
//   input Real T;
//   input Real[2] X;
//   output ThermodynamicState res;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.heatTransfer.Medium.ThermodynamicState;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.heatTransfer.Medium.temperature \"Return temperature of ideal gas as a function of the thermodynamic state record\"
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.heatTransfer.Medium.ThermodynamicState state \"Thermodynamic state record\";
//   output Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) \"Temperature\";
// algorithm
//   T := state.T;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.heatTransfer.Medium.temperature;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.T_phX \"Return temperature as a function of pressure p, specific enthalpy h and composition X\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0) \"Specific enthalpy\";
//   input Real[:] X(quantity = fill(\"MassFraction\", size(X, 1)), unit = fill(\"kg/kg\", size(X, 1)), min = fill(0.0, size(X, 1)), max = fill(1.0, size(X, 1)), nominal = fill(0.1, size(X, 1))) \"Mass fractions of composition\";
//   output Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) \"Temperature\";
// algorithm
//   T := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.T_phX.Internal.solve(h, 190.0, 647.0, p, X[1:1], Modelica.Media.IdealGases.Common.DataRecord(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), 1e-13);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.T_phX;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.T_phX.Internal.f_nonlinear
//   input Real x \"Independent variable of function\";
//   input Real p = 0.0 \"Disregarded variables (here always used for pressure)\";
//   input Real[:] X = {} \"Disregarded variables (her always used for composition)\";
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.T_phX.Internal.f_nonlinear_Data f_nonlinear_data \"Additional data for the function\";
//   output Real y \"= f_nonlinear(x)\";
// algorithm
//   y := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.h_pTX(p, x, X);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.T_phX.Internal.f_nonlinear;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.T_phX.Internal.f_nonlinear_Data \"Automatically generated record constructor for Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.T_phX.Internal.f_nonlinear_Data\"
//   input String name;
//   input Real MM;
//   input Real Hf;
//   input Real H0;
//   input Real Tlimit;
//   input Real[7] alow;
//   input Real[2] blow;
//   input Real[7] ahigh;
//   input Real[2] bhigh;
//   input Real R;
//   output f_nonlinear_Data res;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.T_phX.Internal.f_nonlinear_Data;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.T_phX.Internal.solve
//   input Real y_zero \"Determine x_zero, such that f_nonlinear(x_zero) = y_zero\";
//   input Real x_min \"Minimum value of x\";
//   input Real x_max \"Maximum value of x\";
//   input Real pressure = 0.0 \"Disregarded variables (here always used for pressure)\";
//   input Real[:] X = {} \"Disregarded variables (here always used for composition)\";
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.T_phX.Internal.f_nonlinear_Data f_nonlinear_data \"Additional data for function f_nonlinear\";
//   input Real x_tol = 1e-13 \"Relative tolerance of the result\";
//   output Real x_zero \"f_nonlinear(x_zero) = y_zero\";
//   protected constant Real eps = 1e-15 \"Machine epsilon\";
//   protected constant Real x_eps = 1e-10 \"Slight modification of x_min, x_max, since x_min, x_max are usually exactly at the borders T_min/h_min and then small numeric noise may make the interval invalid\";
//   protected Real c \"Intermediate point a <= c <= b\";
//   protected Real d;
//   protected Real e \"b - a\";
//   protected Real m;
//   protected Real s;
//   protected Real p;
//   protected Real q;
//   protected Real r;
//   protected Real tol;
//   protected Real fa \"= f_nonlinear(a) - y_zero\";
//   protected Real fb \"= f_nonlinear(b) - y_zero\";
//   protected Real fc;
//   protected Boolean found = false;
//   protected Real x_min2 = x_min - x_eps;
//   protected Real x_max2 = x_max + x_eps;
//   protected Real a = x_min2 \"Current best minimum interval value\";
//   protected Real b = x_max2 \"Current best maximum interval value\";
// algorithm
//   fa := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.T_phX.Internal.f_nonlinear(x_min2, pressure, X, f_nonlinear_data) - y_zero;
//   fb := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.T_phX.Internal.f_nonlinear(x_max2, pressure, X, f_nonlinear_data) - y_zero;
//   fc := fb;
//   if fa > 0.0 and fb > 0.0 or fa < 0.0 and fb < 0.0 then
//     Modelica.Utilities.Streams.error(\"The arguments x_min and x_max to OneNonLinearEquation.solve(..)
//     do not bracket the root of the single non-linear equation:
//       x_min  = \" + String(x_min2, 6, 0, true) + \"
//     \" + \"  x_max  = \" + String(x_max2, 6, 0, true) + \"
//     \" + \"  y_zero = \" + String(y_zero, 6, 0, true) + \"
//     \" + \"  fa = f(x_min) - y_zero = \" + String(fa, 6, 0, true) + \"
//     \" + \"  fb = f(x_max) - y_zero = \" + String(fb, 6, 0, true) + \"
//     \" + \"fa and fb must have opposite sign which is not the case\");
//   end if;
//   c := a;
//   fc := fa;
//   e := b - a;
//   d := e;
//   while not found loop
//     if abs(fc) < abs(fb) then
//       a := b;
//       b := c;
//       c := a;
//       fa := fb;
//       fb := fc;
//       fc := fa;
//     end if;
//     tol := 2.0 * eps * abs(b) + x_tol;
//     m := (c - b) / 2.0;
//     if abs(m) <= tol or fb == 0.0 then
//       found := true;
//       x_zero := b;
//     else
//       if abs(e) < tol or abs(fa) <= abs(fb) then
//         e := m;
//         d := e;
//       else
//         s := fb / fa;
//         if a == c then
//           p := 2.0 * m * s;
//           q := 1.0 - s;
//         else
//           q := fa / fc;
//           r := fb / fc;
//           p := s * (2.0 * m * q * (q - r) - (b - a) * (r - 1.0));
//           q := (q - 1.0) * (r - 1.0) * (s - 1.0);
//         end if;
//         if p > 0.0 then
//           q := -q;
//         else
//           p := -p;
//         end if;
//         s := e;
//         e := d;
//         if 2.0 * p < 3.0 * m * q - abs(tol * q) and p < abs(0.5 * s * q) then
//           d := p / q;
//         else
//           e := m;
//           d := e;
//         end if;
//       end if;
//       a := b;
//       fa := fb;
//       b := b + (if abs(d) > tol then d else if m > 0.0 then tol else -tol);
//       fb := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.T_phX.Internal.f_nonlinear(b, pressure, X, f_nonlinear_data) - y_zero;
//       if fb > 0.0 and fc > 0.0 or fb < 0.0 and fc < 0.0 then
//         c := a;
//         fc := fa;
//         e := b - a;
//         d := e;
//       end if;
//     end if;
//   end while;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.T_phX.Internal.solve;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.ThermodynamicState \"Automatically generated record constructor for Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.ThermodynamicState\"
//   input Real p;
//   input Real T;
//   input Real[2] X;
//   output ThermodynamicState res;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.ThermodynamicState;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.Utilities.smoothMax
//   input Real x1 \"First argument of smooth max operator\";
//   input Real x2 \"Second argument of smooth max operator\";
//   input Real dx \"Approximate difference between x1 and x2, below which regularization starts\";
//   output Real y \"Result of smooth max operator\";
// algorithm
//   y := max(x1, x2) + log(exp(4.0 / dx * (x1 - max(x1, x2))) + exp(4.0 / dx * (x2 - max(x1, x2)))) / (4.0 / dx);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.Utilities.smoothMax;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.Utilities.smoothMax_der
//   input Real x1 \"First argument of smooth max operator\";
//   input Real x2 \"Second argument of smooth max operator\";
//   input Real dx \"Approximate difference between x1 and x2, below which regularization starts\";
//   input Real dx1;
//   input Real dx2;
//   input Real ddx;
//   output Real dy \"Derivative of smooth max operator\";
// algorithm
//   dy := (if x1 > x2 then dx1 else dx2) + 0.25 * (((4.0 * (dx1 - (if x1 > x2 then dx1 else dx2)) / dx - 4.0 * (x1 - max(x1, x2)) * ddx / dx ^ 2.0) * exp(4.0 * (x1 - max(x1, x2)) / dx) + (4.0 * (dx2 - (if x1 > x2 then dx1 else dx2)) / dx - 4.0 * (x2 - max(x1, x2)) * ddx / dx ^ 2.0) * exp(4.0 * (x2 - max(x1, x2)) / dx)) * dx / (exp(4.0 * (x1 - max(x1, x2)) / dx) + exp(4.0 * (x2 - max(x1, x2)) / dx)) + log(exp(4.0 * (x1 - max(x1, x2)) / dx) + exp(4.0 * (x2 - max(x1, x2)) / dx)) * ddx);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.Utilities.smoothMax_der;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.Utilities.spliceFunction \"Spline interpolation of two functions\"
//   input Real pos \"Returned value for x-deltax >= 0\";
//   input Real neg \"Returned value for x+deltax <= 0\";
//   input Real x \"Function argument\";
//   input Real deltax = 1.0 \"Region around x with spline interpolation\";
//   output Real out;
//   protected Real scaledX;
//   protected Real scaledX1;
//   protected Real y;
// algorithm
//   scaledX1 := x / deltax;
//   scaledX := scaledX1 * 1.570796326794897;
//   if scaledX1 <= -0.999999999 then
//     y := 0.0;
//   elseif scaledX1 >= 0.999999999 then
//     y := 1.0;
//   else
//     y := (tanh(tan(scaledX)) + 1.0) / 2.0;
//   end if;
//   out := pos * y + (1.0 - y) * neg;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.Utilities.spliceFunction;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.Utilities.spliceFunction_der \"Derivative of spliceFunction\"
//   input Real pos;
//   input Real neg;
//   input Real x;
//   input Real deltax = 1.0;
//   input Real dpos;
//   input Real dneg;
//   input Real dx;
//   input Real ddeltax = 0.0;
//   output Real out;
//   protected Real scaledX;
//   protected Real scaledX1;
//   protected Real dscaledX1;
//   protected Real y;
// algorithm
//   scaledX1 := x / deltax;
//   scaledX := scaledX1 * 1.570796326794897;
//   dscaledX1 := (dx - scaledX1 * ddeltax) / deltax;
//   if scaledX1 <= -0.99999999999 then
//     y := 0.0;
//   elseif scaledX1 >= 0.9999999999 then
//     y := 1.0;
//   else
//     y := (tanh(tan(scaledX)) + 1.0) / 2.0;
//   end if;
//   out := dpos * y + (1.0 - y) * dneg;
//   if abs(scaledX1) < 1.0 then
//     out := out + (pos - neg) * dscaledX1 * 1.570796326794897 / 2.0 / (cosh(tan(scaledX)) * cos(scaledX)) ^ 2.0;
//   end if;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.Utilities.spliceFunction_der;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.enthalpyOfWater \"Computes specific enthalpy of water (solid/liquid) near atmospheric pressure from temperature T\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Temperature\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy of water\";
// algorithm
//   h := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.Utilities.spliceFunction(4200.0 * (T - 273.15), 2050.0 * (T - 273.15) - 333000.0, T - 273.16, 0.1);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.enthalpyOfWater;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.enthalpyOfWater_der \"Derivative function of enthalpyOfWater\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Temperature\";
//   input Real dT(unit = \"K/s\") \"Time derivative of temperature\";
//   output Real dh(unit = \"J/(kg.s)\") \"Time derivative of specific enthalpy\";
// algorithm
//   dh := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.Utilities.spliceFunction_der(4200.0 * (T - 273.15), 2050.0 * (T - 273.15) - 333000.0, T - 273.16, 0.1, 4200.0 * dT, 2050.0 * dT, dT, 0.0);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.enthalpyOfWater_der;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.h_pTX \"Return specific enthalpy of moist air as a function of pressure p, temperature T and composition X\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Temperature\";
//   input Real[:] X(quantity = fill(\"MassFraction\", size(X, 1)), unit = fill(\"1\", size(X, 1)), min = fill(0.0, size(X, 1)), max = fill(1.0, size(X, 1))) \"Mass fractions of moist air\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy at p, T, X\";
//   protected Real p_steam_sat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) \"partial saturation pressure of steam\";
//   protected Real X_sat(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Absolute humidity per unit mass of moist air\";
//   protected Real X_liquid(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Mass fraction of liquid water\";
//   protected Real X_steam(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Mass fraction of steam water\";
//   protected Real X_air(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Mass fraction of air\";
// algorithm
//   p_steam_sat := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.saturationPressure(T);
//   X_sat := min(p_steam_sat * 0.6219647130774989 / max(1e-13, p - p_steam_sat) * (1.0 - X[1]), 1.0);
//   X_liquid := max(X[1] - X_sat, 0.0);
//   X_steam := X[1] - X_liquid;
//   X_air := 1.0 - X[1];
//   h := Modelica.Media.IdealGases.Common.Functions.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.UserDefined, 2547494.319) * X_steam + Modelica.Media.IdealGases.Common.Functions.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"Air\", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.UserDefined, 25104.684) * X_air + Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.enthalpyOfWater(T) * X_liquid;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.h_pTX;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.h_pTX_der \"Derivative function of h_pTX\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Temperature\";
//   input Real[:] X(quantity = fill(\"MassFraction\", size(X, 1)), unit = fill(\"1\", size(X, 1)), min = fill(0.0, size(X, 1)), max = fill(1.0, size(X, 1))) \"Mass fractions of moist air\";
//   input Real dp(unit = \"Pa/s\") \"Pressure derivative\";
//   input Real dT(unit = \"K/s\") \"Temperature derivative\";
//   input Real[:] dX(unit = \"1/s\") \"Composition derivative\";
//   output Real h_der(unit = \"J/(kg.s)\") \"Time derivative of specific enthalpy\";
//   protected Real p_steam_sat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) \"partial saturation pressure of steam\";
//   protected Real X_sat(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Absolute humidity per unit mass of moist air\";
//   protected Real X_liquid(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Mass fraction of liquid water\";
//   protected Real X_steam(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Mass fraction of steam water\";
//   protected Real X_air(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Mass fraction of air\";
//   protected Real x_sat(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Absolute humidity per unit mass of dry air at saturation\";
//   protected Real dX_steam(unit = \"1/s\") \"Time derivative of steam mass fraction\";
//   protected Real dX_air(unit = \"1/s\") \"Time derivative of dry air mass fraction\";
//   protected Real dX_liq(unit = \"1/s\") \"Time derivative of liquid/solid water mass fraction\";
//   protected Real dps(unit = \"Pa/s\") \"Time derivative of saturation pressure\";
//   protected Real dx_sat(unit = \"1/s\") \"Time derivative of absolute humidity per unit mass of dry air\";
// algorithm
//   p_steam_sat := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.saturationPressure(T);
//   x_sat := p_steam_sat * 0.6219647130774989 / max(1e-13, p - p_steam_sat);
//   X_sat := min(x_sat * (1.0 - X[1]), 1.0);
//   X_liquid := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.Utilities.smoothMax(X[1] - X_sat, 0.0, 1e-05);
//   X_steam := X[1] - X_liquid;
//   X_air := 1.0 - X[1];
//   dX_air := -dX[1];
//   dps := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.saturationPressure_der(T, dT);
//   dx_sat := 0.6219647130774989 * (dps * (p - p_steam_sat) - p_steam_sat * (dp - dps)) / (p - p_steam_sat) / (p - p_steam_sat);
//   dX_liq := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.Utilities.smoothMax_der(X[1] - X_sat, 0.0, 1e-05, (1.0 + x_sat) * dX[1] - (1.0 - X[1]) * dx_sat, 0.0, 0.0);
//   dX_steam := dX[1] - dX_liq;
//   h_der := X_steam * Modelica.Media.IdealGases.Common.Functions.h_Tlow_der(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.UserDefined, 2547494.319, dT) + dX_steam * Modelica.Media.IdealGases.Common.Functions.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.UserDefined, 2547494.319) + X_air * Modelica.Media.IdealGases.Common.Functions.h_Tlow_der(Modelica.Media.IdealGases.Common.DataRecord(\"Air\", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.UserDefined, 25104.684, dT) + dX_air * Modelica.Media.IdealGases.Common.Functions.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"Air\", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.UserDefined, 25104.684) + X_liquid * Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.enthalpyOfWater_der(T, dT) + dX_liq * Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.enthalpyOfWater(T);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.h_pTX_der;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.saturationPressure \"Return saturation pressure of water as a function of temperature T between 190 and 647.096 K\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) \"Saturation temperature\";
//   output Real psat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Saturation pressure\";
// algorithm
//   psat := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.Utilities.spliceFunction(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.saturationPressureLiquid(Tsat), Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.sublimationPressureIce(Tsat), Tsat - 273.16, 1.0);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.saturationPressure;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.saturationPressureLiquid \"Return saturation pressure of water as a function of temperature T in the range of 273.16 to 647.096 K\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Saturation temperature\";
//   output Real psat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) \"Saturation pressure\";
//   protected Real Tcritical(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 647.096 \"Critical temperature\";
//   protected Real pcritical(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 22064000.0 \"Critical pressure\";
//   protected Real[:] a = {-7.85951783, 1.84408259, -11.7866497, 22.6807411, -15.9618719, 1.80122502} \"Coefficients a[:]\";
//   protected Real[:] n = {1.0, 1.5, 3.0, 3.5, 4.0, 7.5} \"Coefficients n[:]\";
//   protected Real r1 = 1.0 - Tsat / Tcritical \"Common subexpression\";
// algorithm
//   psat := exp((a[1] * r1 ^ n[1] + a[2] * r1 ^ n[2] + a[3] * r1 ^ n[3] + a[4] * r1 ^ n[4] + a[5] * r1 ^ n[5] + a[6] * r1 ^ n[6]) * Tcritical / Tsat) * pcritical;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.saturationPressureLiquid;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.saturationPressureLiquid_der \"Derivative function for 'saturationPressureLiquid'\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Saturation temperature\";
//   input Real dTsat(unit = \"K/s\") \"Saturation temperature derivative\";
//   output Real psat_der(unit = \"Pa/s\") \"Saturation pressure derivative\";
//   protected Real Tcritical(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 647.096 \"Critical temperature\";
//   protected Real pcritical(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 22064000.0 \"Critical pressure\";
//   protected Real[:] a = {-7.85951783, 1.84408259, -11.7866497, 22.6807411, -15.9618719, 1.80122502} \"Coefficients a[:]\";
//   protected Real[:] n = {1.0, 1.5, 3.0, 3.5, 4.0, 7.5} \"Coefficients n[:]\";
//   protected Real r1 = 1.0 - Tsat / Tcritical \"Common subexpression 1\";
//   protected Real r1_der = -1.0 / Tcritical * dTsat \"Derivative of common subexpression 1\";
//   protected Real r2 = a[1] * r1 ^ n[1] + a[2] * r1 ^ n[2] + a[3] * r1 ^ n[3] + a[4] * r1 ^ n[4] + a[5] * r1 ^ n[5] + a[6] * r1 ^ n[6] \"Common subexpression 2\";
// algorithm
//   psat_der := exp(r2 * Tcritical / Tsat) * pcritical * ((a[1] * r1 ^ (n[1] - 1.0) * n[1] * r1_der + a[2] * r1 ^ (n[2] - 1.0) * n[2] * r1_der + a[3] * r1 ^ (n[3] - 1.0) * n[3] * r1_der + a[4] * r1 ^ (n[4] - 1.0) * n[4] * r1_der + a[5] * r1 ^ (n[5] - 1.0) * n[5] * r1_der + a[6] * r1 ^ (n[6] - 1.0) * n[6] * r1_der) * Tcritical / Tsat - r2 * Tcritical * dTsat / Tsat ^ 2.0);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.saturationPressureLiquid_der;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.saturationPressure_der \"Derivative function for 'saturationPressure'\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) \"Saturation temperature\";
//   input Real dTsat(unit = \"K/s\") \"Time derivative of saturation temperature\";
//   output Real psat_der(unit = \"Pa/s\") \"Saturation pressure\";
// algorithm
//   psat_der := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.Utilities.spliceFunction_der(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.saturationPressureLiquid(Tsat), Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.sublimationPressureIce(Tsat), Tsat - 273.16, 1.0, Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.saturationPressureLiquid_der(Tsat, dTsat), Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.sublimationPressureIce_der(Tsat, dTsat), dTsat, 0.0);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.saturationPressure_der;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.setState_pTX \"Return thermodynamic state as function of pressure p, temperature T and composition X\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) \"Temperature\";
//   input Real[:] X(quantity = fill(\"MassFraction\", size(X, 1)), unit = fill(\"kg/kg\", size(X, 1)), min = fill(0.0, size(X, 1)), max = fill(1.0, size(X, 1)), nominal = fill(0.1, size(X, 1))) = {0.01, 0.99} \"Mass fractions\";
//   output Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.ThermodynamicState state \"Thermodynamic state\";
// algorithm
//   state := if size(X, 1) == 2 then Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.ThermodynamicState(p, T, X) else Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.ThermodynamicState(p, T, cat(1, X, {1.0 - sum(X)}));
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.setState_pTX;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.setState_phX \"Return thermodynamic state as function of pressure p, specific enthalpy h and composition X\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0) \"Specific enthalpy\";
//   input Real[:] X(quantity = fill(\"MassFraction\", size(X, 1)), unit = fill(\"kg/kg\", size(X, 1)), min = fill(0.0, size(X, 1)), max = fill(1.0, size(X, 1)), nominal = fill(0.1, size(X, 1))) = {0.01, 0.99} \"Mass fractions\";
//   output Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.ThermodynamicState state \"Thermodynamic state\";
// algorithm
//   state := if size(X, 1) == 2 then Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.ThermodynamicState(p, Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.T_phX(p, h, X), X) else Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.ThermodynamicState(p, Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.T_phX(p, h, X), cat(1, X, {1.0 - sum(X)}));
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.setState_phX;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.specificEnthalpy \"Return specific enthalpy of moist air as a function of the thermodynamic state record\"
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.ThermodynamicState state \"Thermodynamic state record\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.h_pTX(state.p, state.T, state.X);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.specificEnthalpy;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.specificEnthalpy_pTX \"Return specific enthalpy from p, T, and X or Xi\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) \"Temperature\";
//   input Real[:] X(quantity = fill(\"MassFraction\", size(X, 1)), unit = fill(\"kg/kg\", size(X, 1)), min = fill(0.0, size(X, 1)), max = fill(1.0, size(X, 1)), nominal = fill(0.1, size(X, 1))) = {0.01, 0.99} \"Mass fractions\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.specificEnthalpy(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.setState_pTX(p, T, X));
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.specificEnthalpy_pTX;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.sublimationPressureIce \"Return sublimation pressure of water as a function of temperature T between 190 and 273.16 K\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Sublimation temperature\";
//   output Real psat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) \"Sublimation pressure\";
//   protected Real Ttriple(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 273.16 \"Triple point temperature\";
//   protected Real ptriple(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 611.657 \"Triple point pressure\";
//   protected Real[:] a = {-13.928169, 34.7078238} \"Coefficients a[:]\";
//   protected Real[:] n = {-1.5, -1.25} \"Coefficients n[:]\";
//   protected Real r1 = Tsat / Ttriple \"Common subexpression\";
// algorithm
//   psat := exp(a[1] - a[1] * r1 ^ n[1] + a[2] - a[2] * r1 ^ n[2]) * ptriple;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.sublimationPressureIce;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.sublimationPressureIce_der \"Derivative function for 'sublimationPressureIce'\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Sublimation temperature\";
//   input Real dTsat(unit = \"K/s\") \"Sublimation temperature derivative\";
//   output Real psat_der(unit = \"Pa/s\") \"Sublimation pressure derivative\";
//   protected Real Ttriple(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 273.16 \"Triple point temperature\";
//   protected Real ptriple(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 611.657 \"Triple point pressure\";
//   protected Real[:] a = {-13.928169, 34.7078238} \"Coefficients a[:]\";
//   protected Real[:] n = {-1.5, -1.25} \"Coefficients n[:]\";
//   protected Real r1 = Tsat / Ttriple \"Common subexpression 1\";
//   protected Real r1_der = dTsat / Ttriple \"Derivative of common subexpression 1\";
// algorithm
//   psat_der := exp(a[1] - a[1] * r1 ^ n[1] + a[2] - a[2] * r1 ^ n[2]) * ptriple * ((-a[1] * r1 ^ (n[1] - 1.0) * n[1] * r1_der) - a[2] * r1 ^ (n[2] - 1.0) * n[2] * r1_der);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.sublimationPressureIce_der;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.temperature \"Return temperature of ideal gas as a function of the thermodynamic state record\"
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.ThermodynamicState state \"Thermodynamic state record\";
//   output Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) \"Temperature\";
// algorithm
//   T := state.T;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.temperature;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.temperature_phX \"Return temperature from p, h, and X or Xi\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0) \"Specific enthalpy\";
//   input Real[:] X(quantity = fill(\"MassFraction\", size(X, 1)), unit = fill(\"kg/kg\", size(X, 1)), min = fill(0.0, size(X, 1)), max = fill(1.0, size(X, 1)), nominal = fill(0.1, size(X, 1))) = {0.01, 0.99} \"Mass fractions\";
//   output Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) \"Temperature\";
// algorithm
//   T := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.temperature(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.setState_phX(p, h, X));
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.temperature_phX;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.flowModel.Medium.ThermodynamicState \"Automatically generated record constructor for Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.flowModel.Medium.ThermodynamicState\"
//   input Real p;
//   input Real T;
//   input Real[2] X;
//   output ThermodynamicState res;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.flowModel.Medium.ThermodynamicState;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.flowModel.Medium.density \"Returns density of ideal gas as a function of the thermodynamic state record\"
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.flowModel.Medium.ThermodynamicState state \"Thermodynamic state record\";
//   output Real d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0) \"Density\";
// algorithm
//   d := state.p / (Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.flowModel.Medium.gasConstant(state) * state.T);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.flowModel.Medium.density;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.flowModel.Medium.dynamicViscosity \"Return dynamic viscosity as a function of the thermodynamic state record, valid from 123.15 K to 1273.15 K\"
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.flowModel.Medium.ThermodynamicState state \"Thermodynamic state record\";
//   output Real eta(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001) \"Dynamic viscosity\";
// algorithm
//   eta := 1e-06 * Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluateWithRange({9.739110288630587e-15, -3.135372487033391e-11, 4.300487659564222e-08, -3.822801629175824e-05, 0.05042787436718076, 17.23926013924253}, -150.0, 1000.0, Modelica.SIunits.Conversions.to_degC(state.T));
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.flowModel.Medium.dynamicViscosity;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.flowModel.Medium.gasConstant \"Return ideal gas constant as a function from thermodynamic state, only valid for phi<1\"
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.flowModel.Medium.ThermodynamicState state \"Thermodynamic state\";
//   output Real R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") \"Mixture gas constant\";
// algorithm
//   R := 287.0512249529787 * (1.0 - state.X[1]) + 461.5233290850878 * state.X[1];
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.flowModel.Medium.gasConstant;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.flowModel.Medium.pressure \"Returns pressure of ideal gas as a function of the thermodynamic state record\"
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.flowModel.Medium.ThermodynamicState state \"Thermodynamic state record\";
//   output Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
// algorithm
//   p := state.p;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.flowModel.Medium.pressure;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.flowModel.WallFriction.Internal.m_flow_of_dp_fric \"Calculate mass flow rate as function of pressure drop due to friction\"
//   input Real dp_fric(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure loss due to friction (dp = port_a.p - port_b.p)\";
//   input Real rho_a(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"Density at port_a\";
//   input Real rho_b(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"Density at port_b\";
//   input Real mu_a(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0) \"Dynamic viscosity at port_a (dummy if use_mu = false)\";
//   input Real mu_b(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0) \"Dynamic viscosity at port_b (dummy if use_mu = false)\";
//   input Real length(quantity = \"Length\", unit = \"m\") \"Length of pipe\";
//   input Real diameter(quantity = \"Length\", unit = \"m\", min = 0.0) \"Inner (hydraulic) diameter of pipe\";
//   input Real crossArea(quantity = \"Area\", unit = \"m2\") \"Inner cross section area\";
//   input Real Re1(quantity = \"ReynoldsNumber\", unit = \"1\") \"Boundary between laminar regime and transition\";
//   input Real Re2(quantity = \"ReynoldsNumber\", unit = \"1\") \"Boundary between transition and turbulent regime\";
//   input Real Delta(min = 0.0) \"Relative roughness\";
//   output Real m_flow(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow rate from port_a to port_b\";
//   output Real dm_flow_ddp_fric \"Derivative of mass flow rate with dp_fric\";
//   protected Real mu(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0) \"Upstream viscosity\";
//   protected Real rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"Upstream density\";
//   protected Real lambda2 \"Modified friction coefficient (= lambda*Re^2)\";
//   protected Real Re(quantity = \"ReynoldsNumber\", unit = \"1\") \"Reynolds number\";
//   protected Real dRe_ddp \"dRe/ddp\";
//   protected Real aux1;
//   protected Real aux2;
// algorithm
//   if dp_fric >= 0.0 then
//     rho := rho_a;
//     mu := mu_a;
//   else
//     rho := rho_b;
//     mu := mu_b;
//   end if;
//   lambda2 := abs(dp_fric) * 2.0 * diameter ^ 3.0 * rho / (length * mu * mu) \"Known as lambda2=f(dp)\";
//   aux1 := 2.0 * diameter ^ 3.0 * rho / (length * mu ^ 2.0);
//   Re := lambda2 / 64.0 \"Hagen-Poiseuille\";
//   dRe_ddp := aux1 / 64.0 \"Hagen-Poiseuille\";
//   if Re > Re1 then
//     Re := -2.0 * sqrt(lambda2) * log10(2.51 / sqrt(lambda2) + 0.27 * Delta) \"Colebrook-White\";
//     aux2 := sqrt(aux1 * abs(dp_fric));
//     dRe_ddp := 0.4342944819032518 * ((-2.0 * log(2.51 / aux2 + 0.27 * Delta) * aux1 / (2.0 * aux2)) + 5.02 / (2.0 * abs(dp_fric) * (2.51 / aux2 + 0.27 * Delta)));
//     if Re < Re2 then
//       (Re, dRe_ddp) := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.flowModel.WallFriction.Internal.m_flow_of_dp_fric.interpolateInRegion2_withDerivative(lambda2, Re1, Re2, Delta, dp_fric);
//     end if;
//   end if;
//   m_flow := crossArea / diameter * mu * (if dp_fric >= 0.0 then Re else -Re);
//   dm_flow_ddp_fric := crossArea / diameter * mu * dRe_ddp;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.flowModel.WallFriction.Internal.m_flow_of_dp_fric;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.flowModel.WallFriction.Internal.m_flow_of_dp_fric.interpolateInRegion2_withDerivative \"Interpolation in log-log space using a cubic Hermite polynomial, where x=log10(lambda2), y=log10(Re)\"
//   input Real lambda2 \"Known independent variable\";
//   input Real Re1(quantity = \"ReynoldsNumber\", unit = \"1\") \"Boundary between laminar regime and transition\";
//   input Real Re2(quantity = \"ReynoldsNumber\", unit = \"1\") \"Boundary between transition and turbulent regime\";
//   input Real Delta(min = 0.0) \"Relative roughness\";
//   input Real dp_fric(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure loss due to friction (dp = port_a.p - port_b.p)\";
//   output Real Re(quantity = \"ReynoldsNumber\", unit = \"1\") \"Unknown return variable\";
//   output Real dRe_ddp \"Derivative of return value\";
//   protected Real x1 = log10(64.0 * Re1);
//   protected Real y1 = log10(Re1);
//   protected Real y1d = 1.0;
//   protected Real aux2 = Delta / 3.7 + 5.74 / Re2 ^ 0.9;
//   protected Real x = log10(lambda2);
//   protected Real y;
//   protected Real dy_dx \"Derivative in transformed space\";
//   protected Real aux3 = log10(aux2);
//   protected Real L2 = 0.25 * (Re2 / aux3) ^ 2.0;
//   protected Real aux4 = 2.51 / sqrt(L2) + 0.27 * Delta;
//   protected Real x2 = log10(L2);
//   protected Real aux5 = -2.0 * sqrt(L2) * log10(aux4);
//   protected Real y2 = log10(aux5);
//   protected Real y2d = 0.5 + 1.090079149577162 / (aux5 * aux4);
// algorithm
//   (y, dy_dx) := Modelica.Fluid.Utilities.cubicHermite_withDerivative(x, x1, x2, y1, y2, y1d, y2d);
//   Re := 10.0 ^ y;
//   dRe_ddp := Re / abs(dp_fric) * dy_dx;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.flowModel.WallFriction.Internal.m_flow_of_dp_fric.interpolateInRegion2_withDerivative;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.flowModel.WallFriction.massFlowRate_dp_staticHead \"Return mass flow rate m_flow as function of pressure loss dp, i.e., m_flow = f(dp), due to wall friction and static head\"
//   input Real dp(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure loss (dp = port_a.p - port_b.p)\";
//   input Real rho_a(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"Density at port_a\";
//   input Real rho_b(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"Density at port_b\";
//   input Real mu_a(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0) \"Dynamic viscosity at port_a (dummy if use_mu = false)\";
//   input Real mu_b(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0) \"Dynamic viscosity at port_b (dummy if use_mu = false)\";
//   input Real length(quantity = \"Length\", unit = \"m\") \"Length of pipe\";
//   input Real diameter(quantity = \"Length\", unit = \"m\", min = 0.0) \"Inner (hydraulic) diameter of pipe\";
//   input Real g_times_height_ab(unit = \"m2/s2\") \"Gravity times (Height(port_b) - Height(port_a))\";
//   input Real crossArea(quantity = \"Area\", unit = \"m2\") = 3.141592653589793 * diameter ^ 2.0 / 4.0 \"Inner cross section area\";
//   input Real roughness(quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = 2.5e-05 \"Absolute roughness of pipe, with a default for a smooth steel pipe (dummy if use_roughness = false)\";
//   input Real dp_small(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 1.0 \"Regularization of zero flow if |dp| < dp_small (dummy if use_dp_small = false)\";
//   input Real Re_turbulent(quantity = \"ReynoldsNumber\", unit = \"1\") = 4000.0 \"Turbulent flow if Re >= Re_turbulent (dummy if use_Re_turbulent = false)\";
//   output Real m_flow(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow rate from port_a to port_b\";
//   protected Real Delta(min = 0.0) = roughness / diameter \"Relative roughness\";
//   protected Real Re(quantity = \"ReynoldsNumber\", unit = \"1\") \"Reynolds number\";
//   protected Real Re2(quantity = \"ReynoldsNumber\", unit = \"1\") = Re_turbulent \"Boundary between transition and turbulent regime\";
//   protected Real dp_a(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Upper end of regularization domain of the m_flow(dp) relation\";
//   protected Real dp_b(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Lower end of regularization domain of the m_flow(dp) relation\";
//   protected Real m_flow_a(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Value at upper end of regularization domain\";
//   protected Real m_flow_b(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Value at lower end of regularization domain\";
//   protected Real dm_flow_ddp_fric_a(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Derivative at upper end of regularization domain\";
//   protected Real dm_flow_ddp_fric_b(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Derivative at lower end of regularization domain\";
//   protected Real dp_grav_a(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = g_times_height_ab * rho_a \"Static head if mass flows in design direction (a to b)\";
//   protected Real dp_grav_b(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = g_times_height_ab * rho_b \"Static head if mass flows against design direction (b to a)\";
//   protected Real m_flow_zero(quantity = \"MassFlowRate\", unit = \"kg/s\") = 0.0;
//   protected Real dm_flow_ddp_fric_zero;
//   protected Real Re1(quantity = \"ReynoldsNumber\", unit = \"1\") = min((745.0 * exp(if Delta <= 0.0065 then 1.0 else 0.0065 / Delta)) ^ 0.97, Re_turbulent) \"Boundary between laminar regime and transition\";
//   protected Real dp_zero(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = (dp_grav_a + dp_grav_b) / 2.0;
// algorithm
//   dp_a := max(dp_grav_a, dp_grav_b) + dp_small;
//   dp_b := min(dp_grav_a, dp_grav_b) - dp_small;
//   if dp >= dp_a then
//     m_flow := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.flowModel.WallFriction.Internal.m_flow_of_dp_fric(dp - dp_grav_a, rho_a, rho_b, mu_a, mu_b, length, diameter, crossArea, Re1, Re2, Delta)[1];
//   elseif dp <= dp_b then
//     m_flow := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.flowModel.WallFriction.Internal.m_flow_of_dp_fric(dp - dp_grav_b, rho_a, rho_b, mu_a, mu_b, length, diameter, crossArea, Re1, Re2, Delta)[1];
//   else
//     (m_flow_a, dm_flow_ddp_fric_a) := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.flowModel.WallFriction.Internal.m_flow_of_dp_fric(dp_a - dp_grav_a, rho_a, rho_b, mu_a, mu_b, length, diameter, crossArea, Re1, Re2, Delta);
//     (m_flow_b, dm_flow_ddp_fric_b) := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.flowModel.WallFriction.Internal.m_flow_of_dp_fric(dp_b - dp_grav_b, rho_a, rho_b, mu_a, mu_b, length, diameter, crossArea, Re1, Re2, Delta);
//     (m_flow, dm_flow_ddp_fric_zero) := Modelica.Fluid.Utilities.regFun3(dp_zero, dp_b, dp_a, m_flow_b, m_flow_a, dm_flow_ddp_fric_b, dm_flow_ddp_fric_a);
//     if dp > dp_zero then
//       m_flow := Modelica.Fluid.Utilities.regFun3(dp, dp_zero, dp_a, m_flow_zero, m_flow_a, dm_flow_ddp_fric_zero, dm_flow_ddp_fric_a)[1];
//     else
//       m_flow := Modelica.Fluid.Utilities.regFun3(dp, dp_b, dp_zero, m_flow_b, m_flow_zero, dm_flow_ddp_fric_b, dm_flow_ddp_fric_zero)[1];
//     end if;
//   end if;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.flowModel.WallFriction.massFlowRate_dp_staticHead;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.flowModel.WallFriction.pressureLoss_m_flow \"Return pressure loss dp as function of mass flow rate m_flow, i.e., dp = f(m_flow), due to wall friction\"
//   input Real m_flow(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow rate from port_a to port_b\";
//   input Real rho_a(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"Density at port_a\";
//   input Real rho_b(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"Density at port_b\";
//   input Real mu_a(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0) \"Dynamic viscosity at port_a (dummy if use_mu = false)\";
//   input Real mu_b(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0) \"Dynamic viscosity at port_b (dummy if use_mu = false)\";
//   input Real length(quantity = \"Length\", unit = \"m\") \"Length of pipe\";
//   input Real diameter(quantity = \"Length\", unit = \"m\", min = 0.0) \"Inner (hydraulic) diameter of pipe\";
//   input Real crossArea(quantity = \"Area\", unit = \"m2\") = 3.141592653589793 * diameter ^ 2.0 / 4.0 \"Inner cross section area\";
//   input Real roughness(quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = 2.5e-05 \"Absolute roughness of pipe, with a default for a smooth steel pipe (dummy if use_roughness = false)\";
//   input Real m_flow_small(quantity = \"MassFlowRate\", unit = \"kg/s\") = 0.01 \"Regularization of zero flow if |m_flow| < m_flow_small (dummy if use_m_flow_small = false)\";
//   input Real Re_turbulent(quantity = \"ReynoldsNumber\", unit = \"1\") = 4000.0 \"Turbulent flow if Re >= Re_turbulent (dummy if use_Re_turbulent = false)\";
//   output Real dp(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure loss (dp = port_a.p - port_b.p)\";
//   protected Real Delta(min = 0.0) = roughness / diameter \"Relative roughness\";
//   protected Real Re2(quantity = \"ReynoldsNumber\", unit = \"1\") = Re_turbulent \"Re entering turbulent curve\";
//   protected Real mu(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0) \"Upstream viscosity\";
//   protected Real rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"Upstream density\";
//   protected Real Re(quantity = \"ReynoldsNumber\", unit = \"1\") \"Reynolds number\";
//   protected Real lambda2 \"Modified friction coefficient (= lambda*Re^2)\";
//   protected Real Re1(quantity = \"ReynoldsNumber\", unit = \"1\") = min(745.0 * exp(if Delta <= 0.0065 then 1.0 else 0.0065 / Delta), Re_turbulent) \"Re leaving laminar curve\";
// algorithm
//   rho := if m_flow >= 0.0 then rho_a else rho_b;
//   mu := if m_flow >= 0.0 then mu_a else mu_b;
//   Re := diameter * abs(m_flow) / (crossArea * mu);
//   lambda2 := if Re <= Re1 then 64.0 * Re else if Re >= Re2 then 0.25 * (Re / log10(Delta / 3.7 + 5.74 / Re ^ 0.9)) ^ 2.0 else Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.flowModel.WallFriction.pressureLoss_m_flow.interpolateInRegion2(Re, Re1, Re2, Delta);
//   dp := length * mu * mu / (2.0 * rho * diameter * diameter * diameter) * (if m_flow >= 0.0 then lambda2 else -lambda2);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.flowModel.WallFriction.pressureLoss_m_flow;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.flowModel.WallFriction.pressureLoss_m_flow.interpolateInRegion2
//   input Real Re(quantity = \"ReynoldsNumber\", unit = \"1\");
//   input Real Re1(quantity = \"ReynoldsNumber\", unit = \"1\");
//   input Real Re2(quantity = \"ReynoldsNumber\", unit = \"1\");
//   input Real Delta;
//   output Real lambda2;
//   protected Real x1 = log10(Re1);
//   protected Real y1 = log10(64.0 * Re1);
//   protected Real yd1 = 1.0;
//   protected Real aux1 = 1.121782646756099;
//   protected Real aux2 = Delta / 3.7 + 5.74 / Re2 ^ 0.9;
//   protected Real x2 = log10(Re2);
//   protected Real dx;
//   protected Real aux3 = log10(aux2);
//   protected Real diff_x = x2 - x1;
//   protected Real L2 = 0.25 * (Re2 / aux3) ^ 2.0;
//   protected Real yd2 = 2.0 + 4.0 * aux1 / (aux2 * aux3 * Re2 ^ 0.9);
//   protected Real aux4 = 2.51 / sqrt(L2) + 0.27 * Delta;
//   protected Real y2 = log10(L2);
//   protected Real aux5 = -2.0 * sqrt(L2) * log10(aux4);
//   protected Real m = (y2 - y1) / diff_x;
//   protected Real c2 = (3.0 * m - 2.0 * yd1 - yd2) / diff_x;
//   protected Real c3 = (yd1 + yd2 - 2.0 * m) / (diff_x * diff_x);
// algorithm
//   dx := log10(Re / Re1);
//   lambda2 := 64.0 * Re1 * (Re / Re1) ^ (1.0 + dx * (c2 + dx * c3));
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.flowModel.WallFriction.pressureLoss_m_flow.interpolateInRegion2;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.ThermodynamicState \"Automatically generated record constructor for Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.ThermodynamicState\"
//   input Real p;
//   input Real T;
//   input Real[2] X;
//   output ThermodynamicState res;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.ThermodynamicState;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.Utilities.smoothMax
//   input Real x1 \"First argument of smooth max operator\";
//   input Real x2 \"Second argument of smooth max operator\";
//   input Real dx \"Approximate difference between x1 and x2, below which regularization starts\";
//   output Real y \"Result of smooth max operator\";
// algorithm
//   y := max(x1, x2) + log(exp(4.0 / dx * (x1 - max(x1, x2))) + exp(4.0 / dx * (x2 - max(x1, x2)))) / (4.0 / dx);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.Utilities.smoothMax;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.Utilities.smoothMax_der
//   input Real x1 \"First argument of smooth max operator\";
//   input Real x2 \"Second argument of smooth max operator\";
//   input Real dx \"Approximate difference between x1 and x2, below which regularization starts\";
//   input Real dx1;
//   input Real dx2;
//   input Real ddx;
//   output Real dy \"Derivative of smooth max operator\";
// algorithm
//   dy := (if x1 > x2 then dx1 else dx2) + 0.25 * (((4.0 * (dx1 - (if x1 > x2 then dx1 else dx2)) / dx - 4.0 * (x1 - max(x1, x2)) * ddx / dx ^ 2.0) * exp(4.0 * (x1 - max(x1, x2)) / dx) + (4.0 * (dx2 - (if x1 > x2 then dx1 else dx2)) / dx - 4.0 * (x2 - max(x1, x2)) * ddx / dx ^ 2.0) * exp(4.0 * (x2 - max(x1, x2)) / dx)) * dx / (exp(4.0 * (x1 - max(x1, x2)) / dx) + exp(4.0 * (x2 - max(x1, x2)) / dx)) + log(exp(4.0 * (x1 - max(x1, x2)) / dx) + exp(4.0 * (x2 - max(x1, x2)) / dx)) * ddx);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.Utilities.smoothMax_der;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.Utilities.spliceFunction \"Spline interpolation of two functions\"
//   input Real pos \"Returned value for x-deltax >= 0\";
//   input Real neg \"Returned value for x+deltax <= 0\";
//   input Real x \"Function argument\";
//   input Real deltax = 1.0 \"Region around x with spline interpolation\";
//   output Real out;
//   protected Real scaledX;
//   protected Real scaledX1;
//   protected Real y;
// algorithm
//   scaledX1 := x / deltax;
//   scaledX := scaledX1 * 1.570796326794897;
//   if scaledX1 <= -0.999999999 then
//     y := 0.0;
//   elseif scaledX1 >= 0.999999999 then
//     y := 1.0;
//   else
//     y := (tanh(tan(scaledX)) + 1.0) / 2.0;
//   end if;
//   out := pos * y + (1.0 - y) * neg;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.Utilities.spliceFunction;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.Utilities.spliceFunction_der \"Derivative of spliceFunction\"
//   input Real pos;
//   input Real neg;
//   input Real x;
//   input Real deltax = 1.0;
//   input Real dpos;
//   input Real dneg;
//   input Real dx;
//   input Real ddeltax = 0.0;
//   output Real out;
//   protected Real scaledX;
//   protected Real scaledX1;
//   protected Real dscaledX1;
//   protected Real y;
// algorithm
//   scaledX1 := x / deltax;
//   scaledX := scaledX1 * 1.570796326794897;
//   dscaledX1 := (dx - scaledX1 * ddeltax) / deltax;
//   if scaledX1 <= -0.99999999999 then
//     y := 0.0;
//   elseif scaledX1 >= 0.9999999999 then
//     y := 1.0;
//   else
//     y := (tanh(tan(scaledX)) + 1.0) / 2.0;
//   end if;
//   out := dpos * y + (1.0 - y) * dneg;
//   if abs(scaledX1) < 1.0 then
//     out := out + (pos - neg) * dscaledX1 * 1.570796326794897 / 2.0 / (cosh(tan(scaledX)) * cos(scaledX)) ^ 2.0;
//   end if;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.Utilities.spliceFunction_der;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.density \"Returns density of ideal gas as a function of the thermodynamic state record\"
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.ThermodynamicState state \"Thermodynamic state record\";
//   output Real d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0) \"Density\";
// algorithm
//   d := state.p / (Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.gasConstant(state) * state.T);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.density;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.dynamicViscosity \"Return dynamic viscosity as a function of the thermodynamic state record, valid from 123.15 K to 1273.15 K\"
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.ThermodynamicState state \"Thermodynamic state record\";
//   output Real eta(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001) \"Dynamic viscosity\";
// algorithm
//   eta := 1e-06 * Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluateWithRange({9.739110288630587e-15, -3.135372487033391e-11, 4.300487659564222e-08, -3.822801629175824e-05, 0.05042787436718076, 17.23926013924253}, -150.0, 1000.0, Modelica.SIunits.Conversions.to_degC(state.T));
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.dynamicViscosity;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.enthalpyOfWater \"Computes specific enthalpy of water (solid/liquid) near atmospheric pressure from temperature T\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Temperature\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy of water\";
// algorithm
//   h := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.Utilities.spliceFunction(4200.0 * (T - 273.15), 2050.0 * (T - 273.15) - 333000.0, T - 273.16, 0.1);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.enthalpyOfWater;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.enthalpyOfWater_der \"Derivative function of enthalpyOfWater\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Temperature\";
//   input Real dT(unit = \"K/s\") \"Time derivative of temperature\";
//   output Real dh(unit = \"J/(kg.s)\") \"Time derivative of specific enthalpy\";
// algorithm
//   dh := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.Utilities.spliceFunction_der(4200.0 * (T - 273.15), 2050.0 * (T - 273.15) - 333000.0, T - 273.16, 0.1, 4200.0 * dT, 2050.0 * dT, dT, 0.0);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.enthalpyOfWater_der;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.gasConstant \"Return ideal gas constant as a function from thermodynamic state, only valid for phi<1\"
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.ThermodynamicState state \"Thermodynamic state\";
//   output Real R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") \"Mixture gas constant\";
// algorithm
//   R := 287.0512249529787 * (1.0 - state.X[1]) + 461.5233290850878 * state.X[1];
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.gasConstant;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.h_pTX_der \"Derivative function of h_pTX\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Temperature\";
//   input Real[:] X(quantity = fill(\"MassFraction\", size(X, 1)), unit = fill(\"1\", size(X, 1)), min = fill(0.0, size(X, 1)), max = fill(1.0, size(X, 1))) \"Mass fractions of moist air\";
//   input Real dp(unit = \"Pa/s\") \"Pressure derivative\";
//   input Real dT(unit = \"K/s\") \"Temperature derivative\";
//   input Real[:] dX(unit = \"1/s\") \"Composition derivative\";
//   output Real h_der(unit = \"J/(kg.s)\") \"Time derivative of specific enthalpy\";
//   protected Real p_steam_sat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) \"partial saturation pressure of steam\";
//   protected Real X_sat(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Absolute humidity per unit mass of moist air\";
//   protected Real X_liquid(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Mass fraction of liquid water\";
//   protected Real X_steam(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Mass fraction of steam water\";
//   protected Real X_air(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Mass fraction of air\";
//   protected Real x_sat(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Absolute humidity per unit mass of dry air at saturation\";
//   protected Real dX_steam(unit = \"1/s\") \"Time derivative of steam mass fraction\";
//   protected Real dX_air(unit = \"1/s\") \"Time derivative of dry air mass fraction\";
//   protected Real dX_liq(unit = \"1/s\") \"Time derivative of liquid/solid water mass fraction\";
//   protected Real dps(unit = \"Pa/s\") \"Time derivative of saturation pressure\";
//   protected Real dx_sat(unit = \"1/s\") \"Time derivative of absolute humidity per unit mass of dry air\";
// algorithm
//   p_steam_sat := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.saturationPressure(T);
//   x_sat := p_steam_sat * 0.6219647130774989 / max(1e-13, p - p_steam_sat);
//   X_sat := min(x_sat * (1.0 - X[1]), 1.0);
//   X_liquid := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.Utilities.smoothMax(X[1] - X_sat, 0.0, 1e-05);
//   X_steam := X[1] - X_liquid;
//   X_air := 1.0 - X[1];
//   dX_air := -dX[1];
//   dps := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.saturationPressure_der(T, dT);
//   dx_sat := 0.6219647130774989 * (dps * (p - p_steam_sat) - p_steam_sat * (dp - dps)) / (p - p_steam_sat) / (p - p_steam_sat);
//   dX_liq := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.Utilities.smoothMax_der(X[1] - X_sat, 0.0, 1e-05, (1.0 + x_sat) * dX[1] - (1.0 - X[1]) * dx_sat, 0.0, 0.0);
//   dX_steam := dX[1] - dX_liq;
//   h_der := X_steam * Modelica.Media.IdealGases.Common.Functions.h_Tlow_der(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.UserDefined, 2547494.319, dT) + dX_steam * Modelica.Media.IdealGases.Common.Functions.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.UserDefined, 2547494.319) + X_air * Modelica.Media.IdealGases.Common.Functions.h_Tlow_der(Modelica.Media.IdealGases.Common.DataRecord(\"Air\", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.UserDefined, 25104.684, dT) + dX_air * Modelica.Media.IdealGases.Common.Functions.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"Air\", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.UserDefined, 25104.684) + X_liquid * Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.enthalpyOfWater_der(T, dT) + dX_liq * Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.enthalpyOfWater(T);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.h_pTX_der;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.prandtlNumber \"Return the Prandtl number\"
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.ThermodynamicState state \"Thermodynamic state record\";
//   output Real Pr(quantity = \"PrandtlNumber\", unit = \"1\", min = 0.001, max = 100000.0, nominal = 1.0) \"Prandtl number\";
// algorithm
//   Pr := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.dynamicViscosity(state) * Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.specificHeatCapacityCp(state) / Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.thermalConductivity(state);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.prandtlNumber;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.saturationPressure \"Return saturation pressure of water as a function of temperature T between 190 and 647.096 K\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) \"Saturation temperature\";
//   output Real psat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Saturation pressure\";
// algorithm
//   psat := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.Utilities.spliceFunction(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.saturationPressureLiquid(Tsat), Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.sublimationPressureIce(Tsat), Tsat - 273.16, 1.0);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.saturationPressure;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.saturationPressureLiquid \"Return saturation pressure of water as a function of temperature T in the range of 273.16 to 647.096 K\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Saturation temperature\";
//   output Real psat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) \"Saturation pressure\";
//   protected Real Tcritical(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 647.096 \"Critical temperature\";
//   protected Real pcritical(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 22064000.0 \"Critical pressure\";
//   protected Real[:] a = {-7.85951783, 1.84408259, -11.7866497, 22.6807411, -15.9618719, 1.80122502} \"Coefficients a[:]\";
//   protected Real[:] n = {1.0, 1.5, 3.0, 3.5, 4.0, 7.5} \"Coefficients n[:]\";
//   protected Real r1 = 1.0 - Tsat / Tcritical \"Common subexpression\";
// algorithm
//   psat := exp((a[1] * r1 ^ n[1] + a[2] * r1 ^ n[2] + a[3] * r1 ^ n[3] + a[4] * r1 ^ n[4] + a[5] * r1 ^ n[5] + a[6] * r1 ^ n[6]) * Tcritical / Tsat) * pcritical;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.saturationPressureLiquid;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.saturationPressureLiquid_der \"Derivative function for 'saturationPressureLiquid'\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Saturation temperature\";
//   input Real dTsat(unit = \"K/s\") \"Saturation temperature derivative\";
//   output Real psat_der(unit = \"Pa/s\") \"Saturation pressure derivative\";
//   protected Real Tcritical(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 647.096 \"Critical temperature\";
//   protected Real pcritical(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 22064000.0 \"Critical pressure\";
//   protected Real[:] a = {-7.85951783, 1.84408259, -11.7866497, 22.6807411, -15.9618719, 1.80122502} \"Coefficients a[:]\";
//   protected Real[:] n = {1.0, 1.5, 3.0, 3.5, 4.0, 7.5} \"Coefficients n[:]\";
//   protected Real r1 = 1.0 - Tsat / Tcritical \"Common subexpression 1\";
//   protected Real r1_der = -1.0 / Tcritical * dTsat \"Derivative of common subexpression 1\";
//   protected Real r2 = a[1] * r1 ^ n[1] + a[2] * r1 ^ n[2] + a[3] * r1 ^ n[3] + a[4] * r1 ^ n[4] + a[5] * r1 ^ n[5] + a[6] * r1 ^ n[6] \"Common subexpression 2\";
// algorithm
//   psat_der := exp(r2 * Tcritical / Tsat) * pcritical * ((a[1] * r1 ^ (n[1] - 1.0) * n[1] * r1_der + a[2] * r1 ^ (n[2] - 1.0) * n[2] * r1_der + a[3] * r1 ^ (n[3] - 1.0) * n[3] * r1_der + a[4] * r1 ^ (n[4] - 1.0) * n[4] * r1_der + a[5] * r1 ^ (n[5] - 1.0) * n[5] * r1_der + a[6] * r1 ^ (n[6] - 1.0) * n[6] * r1_der) * Tcritical / Tsat - r2 * Tcritical * dTsat / Tsat ^ 2.0);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.saturationPressureLiquid_der;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.saturationPressure_der \"Derivative function for 'saturationPressure'\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) \"Saturation temperature\";
//   input Real dTsat(unit = \"K/s\") \"Time derivative of saturation temperature\";
//   output Real psat_der(unit = \"Pa/s\") \"Saturation pressure\";
// algorithm
//   psat_der := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.Utilities.spliceFunction_der(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.saturationPressureLiquid(Tsat), Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.sublimationPressureIce(Tsat), Tsat - 273.16, 1.0, Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.saturationPressureLiquid_der(Tsat, dTsat), Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.sublimationPressureIce_der(Tsat, dTsat), dTsat, 0.0);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.saturationPressure_der;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.specificHeatCapacityCp \"Return specific heat capacity at constant pressure as a function of the thermodynamic state record\"
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.ThermodynamicState state \"Thermodynamic state record\";
//   output Real cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0) \"Specific heat capacity at constant pressure\";
//   protected Real dT(unit = \"s/K\") = 1.0;
// algorithm
//   cp := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.h_pTX_der(state.p, state.T, state.X, 0.0, 1.0, {0.0, 0.0}) * dT \"Definition of cp: dh/dT @ constant p\";
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.specificHeatCapacityCp;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.sublimationPressureIce \"Return sublimation pressure of water as a function of temperature T between 190 and 273.16 K\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Sublimation temperature\";
//   output Real psat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) \"Sublimation pressure\";
//   protected Real Ttriple(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 273.16 \"Triple point temperature\";
//   protected Real ptriple(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 611.657 \"Triple point pressure\";
//   protected Real[:] a = {-13.928169, 34.7078238} \"Coefficients a[:]\";
//   protected Real[:] n = {-1.5, -1.25} \"Coefficients n[:]\";
//   protected Real r1 = Tsat / Ttriple \"Common subexpression\";
// algorithm
//   psat := exp(a[1] - a[1] * r1 ^ n[1] + a[2] - a[2] * r1 ^ n[2]) * ptriple;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.sublimationPressureIce;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.sublimationPressureIce_der \"Derivative function for 'sublimationPressureIce'\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Sublimation temperature\";
//   input Real dTsat(unit = \"K/s\") \"Sublimation temperature derivative\";
//   output Real psat_der(unit = \"Pa/s\") \"Sublimation pressure derivative\";
//   protected Real Ttriple(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 273.16 \"Triple point temperature\";
//   protected Real ptriple(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 611.657 \"Triple point pressure\";
//   protected Real[:] a = {-13.928169, 34.7078238} \"Coefficients a[:]\";
//   protected Real[:] n = {-1.5, -1.25} \"Coefficients n[:]\";
//   protected Real r1 = Tsat / Ttriple \"Common subexpression 1\";
//   protected Real r1_der = dTsat / Ttriple \"Derivative of common subexpression 1\";
// algorithm
//   psat_der := exp(a[1] - a[1] * r1 ^ n[1] + a[2] - a[2] * r1 ^ n[2]) * ptriple * ((-a[1] * r1 ^ (n[1] - 1.0) * n[1] * r1_der) - a[2] * r1 ^ (n[2] - 1.0) * n[2] * r1_der);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.sublimationPressureIce_der;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.temperature \"Return temperature of ideal gas as a function of the thermodynamic state record\"
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.ThermodynamicState state \"Thermodynamic state record\";
//   output Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) \"Temperature\";
// algorithm
//   T := state.T;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.temperature;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.thermalConductivity \"Return thermal conductivity as a function of the thermodynamic state record, valid from 123.15 K to 1273.15 K\"
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.ThermodynamicState state \"Thermodynamic state record\";
//   output Real lambda(quantity = \"ThermalConductivity\", unit = \"W/(m.K)\", min = 0.0, max = 500.0, start = 1.0, nominal = 1.0) \"Thermal conductivity\";
// algorithm
//   lambda := 0.001 * Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluateWithRange({6.569147081771781e-15, -3.402596192305051e-11, 5.327928484630316e-08, -4.534083928921947e-05, 0.07612967530903766, 24.16948108809705}, -150.0, 1000.0, Modelica.SIunits.Conversions.to_degC(state.T));
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.thermalConductivity;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.T_phX \"Return temperature as a function of pressure p, specific enthalpy h and composition X\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0) \"Specific enthalpy\";
//   input Real[:] X(quantity = fill(\"MassFraction\", size(X, 1)), unit = fill(\"kg/kg\", size(X, 1)), min = fill(0.0, size(X, 1)), max = fill(1.0, size(X, 1)), nominal = fill(0.1, size(X, 1))) \"Mass fractions of composition\";
//   output Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) \"Temperature\";
// algorithm
//   T := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.T_phX.Internal.solve(h, 190.0, 647.0, p, X[1:1], Modelica.Media.IdealGases.Common.DataRecord(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), 1e-13);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.T_phX;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.T_phX.Internal.f_nonlinear
//   input Real x \"Independent variable of function\";
//   input Real p = 0.0 \"Disregarded variables (here always used for pressure)\";
//   input Real[:] X = {} \"Disregarded variables (her always used for composition)\";
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.T_phX.Internal.f_nonlinear_Data f_nonlinear_data \"Additional data for the function\";
//   output Real y \"= f_nonlinear(x)\";
// algorithm
//   y := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.h_pTX(p, x, X);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.T_phX.Internal.f_nonlinear;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.T_phX.Internal.f_nonlinear_Data \"Automatically generated record constructor for Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.T_phX.Internal.f_nonlinear_Data\"
//   input String name;
//   input Real MM;
//   input Real Hf;
//   input Real H0;
//   input Real Tlimit;
//   input Real[7] alow;
//   input Real[2] blow;
//   input Real[7] ahigh;
//   input Real[2] bhigh;
//   input Real R;
//   output f_nonlinear_Data res;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.T_phX.Internal.f_nonlinear_Data;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.T_phX.Internal.solve
//   input Real y_zero \"Determine x_zero, such that f_nonlinear(x_zero) = y_zero\";
//   input Real x_min \"Minimum value of x\";
//   input Real x_max \"Maximum value of x\";
//   input Real pressure = 0.0 \"Disregarded variables (here always used for pressure)\";
//   input Real[:] X = {} \"Disregarded variables (here always used for composition)\";
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.T_phX.Internal.f_nonlinear_Data f_nonlinear_data \"Additional data for function f_nonlinear\";
//   input Real x_tol = 1e-13 \"Relative tolerance of the result\";
//   output Real x_zero \"f_nonlinear(x_zero) = y_zero\";
//   protected constant Real eps = 1e-15 \"Machine epsilon\";
//   protected constant Real x_eps = 1e-10 \"Slight modification of x_min, x_max, since x_min, x_max are usually exactly at the borders T_min/h_min and then small numeric noise may make the interval invalid\";
//   protected Real c \"Intermediate point a <= c <= b\";
//   protected Real d;
//   protected Real e \"b - a\";
//   protected Real m;
//   protected Real s;
//   protected Real p;
//   protected Real q;
//   protected Real r;
//   protected Real tol;
//   protected Real fa \"= f_nonlinear(a) - y_zero\";
//   protected Real fb \"= f_nonlinear(b) - y_zero\";
//   protected Real fc;
//   protected Boolean found = false;
//   protected Real x_min2 = x_min - x_eps;
//   protected Real x_max2 = x_max + x_eps;
//   protected Real a = x_min2 \"Current best minimum interval value\";
//   protected Real b = x_max2 \"Current best maximum interval value\";
// algorithm
//   fa := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.T_phX.Internal.f_nonlinear(x_min2, pressure, X, f_nonlinear_data) - y_zero;
//   fb := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.T_phX.Internal.f_nonlinear(x_max2, pressure, X, f_nonlinear_data) - y_zero;
//   fc := fb;
//   if fa > 0.0 and fb > 0.0 or fa < 0.0 and fb < 0.0 then
//     Modelica.Utilities.Streams.error(\"The arguments x_min and x_max to OneNonLinearEquation.solve(..)
//     do not bracket the root of the single non-linear equation:
//       x_min  = \" + String(x_min2, 6, 0, true) + \"
//     \" + \"  x_max  = \" + String(x_max2, 6, 0, true) + \"
//     \" + \"  y_zero = \" + String(y_zero, 6, 0, true) + \"
//     \" + \"  fa = f(x_min) - y_zero = \" + String(fa, 6, 0, true) + \"
//     \" + \"  fb = f(x_max) - y_zero = \" + String(fb, 6, 0, true) + \"
//     \" + \"fa and fb must have opposite sign which is not the case\");
//   end if;
//   c := a;
//   fc := fa;
//   e := b - a;
//   d := e;
//   while not found loop
//     if abs(fc) < abs(fb) then
//       a := b;
//       b := c;
//       c := a;
//       fa := fb;
//       fb := fc;
//       fc := fa;
//     end if;
//     tol := 2.0 * eps * abs(b) + x_tol;
//     m := (c - b) / 2.0;
//     if abs(m) <= tol or fb == 0.0 then
//       found := true;
//       x_zero := b;
//     else
//       if abs(e) < tol or abs(fa) <= abs(fb) then
//         e := m;
//         d := e;
//       else
//         s := fb / fa;
//         if a == c then
//           p := 2.0 * m * s;
//           q := 1.0 - s;
//         else
//           q := fa / fc;
//           r := fb / fc;
//           p := s * (2.0 * m * q * (q - r) - (b - a) * (r - 1.0));
//           q := (q - 1.0) * (r - 1.0) * (s - 1.0);
//         end if;
//         if p > 0.0 then
//           q := -q;
//         else
//           p := -p;
//         end if;
//         s := e;
//         e := d;
//         if 2.0 * p < 3.0 * m * q - abs(tol * q) and p < abs(0.5 * s * q) then
//           d := p / q;
//         else
//           e := m;
//           d := e;
//         end if;
//       end if;
//       a := b;
//       fa := fb;
//       b := b + (if abs(d) > tol then d else if m > 0.0 then tol else -tol);
//       fb := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.T_phX.Internal.f_nonlinear(b, pressure, X, f_nonlinear_data) - y_zero;
//       if fb > 0.0 and fc > 0.0 or fb < 0.0 and fc < 0.0 then
//         c := a;
//         fc := fa;
//         e := b - a;
//         d := e;
//       end if;
//     end if;
//   end while;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.T_phX.Internal.solve;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.ThermodynamicState \"Automatically generated record constructor for Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.ThermodynamicState\"
//   input Real p;
//   input Real T;
//   input Real[2] X;
//   output ThermodynamicState res;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.ThermodynamicState;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.Utilities.smoothMax
//   input Real x1 \"First argument of smooth max operator\";
//   input Real x2 \"Second argument of smooth max operator\";
//   input Real dx \"Approximate difference between x1 and x2, below which regularization starts\";
//   output Real y \"Result of smooth max operator\";
// algorithm
//   y := max(x1, x2) + log(exp(4.0 / dx * (x1 - max(x1, x2))) + exp(4.0 / dx * (x2 - max(x1, x2)))) / (4.0 / dx);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.Utilities.smoothMax;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.Utilities.smoothMax_der
//   input Real x1 \"First argument of smooth max operator\";
//   input Real x2 \"Second argument of smooth max operator\";
//   input Real dx \"Approximate difference between x1 and x2, below which regularization starts\";
//   input Real dx1;
//   input Real dx2;
//   input Real ddx;
//   output Real dy \"Derivative of smooth max operator\";
// algorithm
//   dy := (if x1 > x2 then dx1 else dx2) + 0.25 * (((4.0 * (dx1 - (if x1 > x2 then dx1 else dx2)) / dx - 4.0 * (x1 - max(x1, x2)) * ddx / dx ^ 2.0) * exp(4.0 * (x1 - max(x1, x2)) / dx) + (4.0 * (dx2 - (if x1 > x2 then dx1 else dx2)) / dx - 4.0 * (x2 - max(x1, x2)) * ddx / dx ^ 2.0) * exp(4.0 * (x2 - max(x1, x2)) / dx)) * dx / (exp(4.0 * (x1 - max(x1, x2)) / dx) + exp(4.0 * (x2 - max(x1, x2)) / dx)) + log(exp(4.0 * (x1 - max(x1, x2)) / dx) + exp(4.0 * (x2 - max(x1, x2)) / dx)) * ddx);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.Utilities.smoothMax_der;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.Utilities.spliceFunction \"Spline interpolation of two functions\"
//   input Real pos \"Returned value for x-deltax >= 0\";
//   input Real neg \"Returned value for x+deltax <= 0\";
//   input Real x \"Function argument\";
//   input Real deltax = 1.0 \"Region around x with spline interpolation\";
//   output Real out;
//   protected Real scaledX;
//   protected Real scaledX1;
//   protected Real y;
// algorithm
//   scaledX1 := x / deltax;
//   scaledX := scaledX1 * 1.570796326794897;
//   if scaledX1 <= -0.999999999 then
//     y := 0.0;
//   elseif scaledX1 >= 0.999999999 then
//     y := 1.0;
//   else
//     y := (tanh(tan(scaledX)) + 1.0) / 2.0;
//   end if;
//   out := pos * y + (1.0 - y) * neg;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.Utilities.spliceFunction;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.Utilities.spliceFunction_der \"Derivative of spliceFunction\"
//   input Real pos;
//   input Real neg;
//   input Real x;
//   input Real deltax = 1.0;
//   input Real dpos;
//   input Real dneg;
//   input Real dx;
//   input Real ddeltax = 0.0;
//   output Real out;
//   protected Real scaledX;
//   protected Real scaledX1;
//   protected Real dscaledX1;
//   protected Real y;
// algorithm
//   scaledX1 := x / deltax;
//   scaledX := scaledX1 * 1.570796326794897;
//   dscaledX1 := (dx - scaledX1 * ddeltax) / deltax;
//   if scaledX1 <= -0.99999999999 then
//     y := 0.0;
//   elseif scaledX1 >= 0.9999999999 then
//     y := 1.0;
//   else
//     y := (tanh(tan(scaledX)) + 1.0) / 2.0;
//   end if;
//   out := dpos * y + (1.0 - y) * dneg;
//   if abs(scaledX1) < 1.0 then
//     out := out + (pos - neg) * dscaledX1 * 1.570796326794897 / 2.0 / (cosh(tan(scaledX)) * cos(scaledX)) ^ 2.0;
//   end if;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.Utilities.spliceFunction_der;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.density \"Returns density of ideal gas as a function of the thermodynamic state record\"
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.ThermodynamicState state \"Thermodynamic state record\";
//   output Real d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0) \"Density\";
// algorithm
//   d := state.p / (Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.gasConstant(state) * state.T);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.density;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.enthalpyOfWater \"Computes specific enthalpy of water (solid/liquid) near atmospheric pressure from temperature T\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Temperature\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy of water\";
// algorithm
//   h := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.Utilities.spliceFunction(4200.0 * (T - 273.15), 2050.0 * (T - 273.15) - 333000.0, T - 273.16, 0.1);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.enthalpyOfWater;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.enthalpyOfWater_der \"Derivative function of enthalpyOfWater\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Temperature\";
//   input Real dT(unit = \"K/s\") \"Time derivative of temperature\";
//   output Real dh(unit = \"J/(kg.s)\") \"Time derivative of specific enthalpy\";
// algorithm
//   dh := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.Utilities.spliceFunction_der(4200.0 * (T - 273.15), 2050.0 * (T - 273.15) - 333000.0, T - 273.16, 0.1, 4200.0 * dT, 2050.0 * dT, dT, 0.0);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.enthalpyOfWater_der;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.gasConstant \"Return ideal gas constant as a function from thermodynamic state, only valid for phi<1\"
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.ThermodynamicState state \"Thermodynamic state\";
//   output Real R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") \"Mixture gas constant\";
// algorithm
//   R := 287.0512249529787 * (1.0 - state.X[1]) + 461.5233290850878 * state.X[1];
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.gasConstant;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.h_pTX \"Return specific enthalpy of moist air as a function of pressure p, temperature T and composition X\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Temperature\";
//   input Real[:] X(quantity = fill(\"MassFraction\", size(X, 1)), unit = fill(\"1\", size(X, 1)), min = fill(0.0, size(X, 1)), max = fill(1.0, size(X, 1))) \"Mass fractions of moist air\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy at p, T, X\";
//   protected Real p_steam_sat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) \"partial saturation pressure of steam\";
//   protected Real X_sat(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Absolute humidity per unit mass of moist air\";
//   protected Real X_liquid(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Mass fraction of liquid water\";
//   protected Real X_steam(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Mass fraction of steam water\";
//   protected Real X_air(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Mass fraction of air\";
// algorithm
//   p_steam_sat := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.saturationPressure(T);
//   X_sat := min(p_steam_sat * 0.6219647130774989 / max(1e-13, p - p_steam_sat) * (1.0 - X[1]), 1.0);
//   X_liquid := max(X[1] - X_sat, 0.0);
//   X_steam := X[1] - X_liquid;
//   X_air := 1.0 - X[1];
//   h := Modelica.Media.IdealGases.Common.Functions.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.UserDefined, 2547494.319) * X_steam + Modelica.Media.IdealGases.Common.Functions.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"Air\", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.UserDefined, 25104.684) * X_air + Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.enthalpyOfWater(T) * X_liquid;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.h_pTX;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.h_pTX_der \"Derivative function of h_pTX\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Temperature\";
//   input Real[:] X(quantity = fill(\"MassFraction\", size(X, 1)), unit = fill(\"1\", size(X, 1)), min = fill(0.0, size(X, 1)), max = fill(1.0, size(X, 1))) \"Mass fractions of moist air\";
//   input Real dp(unit = \"Pa/s\") \"Pressure derivative\";
//   input Real dT(unit = \"K/s\") \"Temperature derivative\";
//   input Real[:] dX(unit = \"1/s\") \"Composition derivative\";
//   output Real h_der(unit = \"J/(kg.s)\") \"Time derivative of specific enthalpy\";
//   protected Real p_steam_sat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) \"partial saturation pressure of steam\";
//   protected Real X_sat(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Absolute humidity per unit mass of moist air\";
//   protected Real X_liquid(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Mass fraction of liquid water\";
//   protected Real X_steam(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Mass fraction of steam water\";
//   protected Real X_air(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Mass fraction of air\";
//   protected Real x_sat(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Absolute humidity per unit mass of dry air at saturation\";
//   protected Real dX_steam(unit = \"1/s\") \"Time derivative of steam mass fraction\";
//   protected Real dX_air(unit = \"1/s\") \"Time derivative of dry air mass fraction\";
//   protected Real dX_liq(unit = \"1/s\") \"Time derivative of liquid/solid water mass fraction\";
//   protected Real dps(unit = \"Pa/s\") \"Time derivative of saturation pressure\";
//   protected Real dx_sat(unit = \"1/s\") \"Time derivative of absolute humidity per unit mass of dry air\";
// algorithm
//   p_steam_sat := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.saturationPressure(T);
//   x_sat := p_steam_sat * 0.6219647130774989 / max(1e-13, p - p_steam_sat);
//   X_sat := min(x_sat * (1.0 - X[1]), 1.0);
//   X_liquid := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.Utilities.smoothMax(X[1] - X_sat, 0.0, 1e-05);
//   X_steam := X[1] - X_liquid;
//   X_air := 1.0 - X[1];
//   dX_air := -dX[1];
//   dps := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.saturationPressure_der(T, dT);
//   dx_sat := 0.6219647130774989 * (dps * (p - p_steam_sat) - p_steam_sat * (dp - dps)) / (p - p_steam_sat) / (p - p_steam_sat);
//   dX_liq := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.Utilities.smoothMax_der(X[1] - X_sat, 0.0, 1e-05, (1.0 + x_sat) * dX[1] - (1.0 - X[1]) * dx_sat, 0.0, 0.0);
//   dX_steam := dX[1] - dX_liq;
//   h_der := X_steam * Modelica.Media.IdealGases.Common.Functions.h_Tlow_der(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.UserDefined, 2547494.319, dT) + dX_steam * Modelica.Media.IdealGases.Common.Functions.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.UserDefined, 2547494.319) + X_air * Modelica.Media.IdealGases.Common.Functions.h_Tlow_der(Modelica.Media.IdealGases.Common.DataRecord(\"Air\", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.UserDefined, 25104.684, dT) + dX_air * Modelica.Media.IdealGases.Common.Functions.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"Air\", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.UserDefined, 25104.684) + X_liquid * Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.enthalpyOfWater_der(T, dT) + dX_liq * Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.enthalpyOfWater(T);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.h_pTX_der;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.saturationPressure \"Return saturation pressure of water as a function of temperature T between 190 and 647.096 K\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) \"Saturation temperature\";
//   output Real psat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Saturation pressure\";
// algorithm
//   psat := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.Utilities.spliceFunction(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.saturationPressureLiquid(Tsat), Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.sublimationPressureIce(Tsat), Tsat - 273.16, 1.0);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.saturationPressure;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.saturationPressureLiquid \"Return saturation pressure of water as a function of temperature T in the range of 273.16 to 647.096 K\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Saturation temperature\";
//   output Real psat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) \"Saturation pressure\";
//   protected Real Tcritical(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 647.096 \"Critical temperature\";
//   protected Real pcritical(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 22064000.0 \"Critical pressure\";
//   protected Real[:] a = {-7.85951783, 1.84408259, -11.7866497, 22.6807411, -15.9618719, 1.80122502} \"Coefficients a[:]\";
//   protected Real[:] n = {1.0, 1.5, 3.0, 3.5, 4.0, 7.5} \"Coefficients n[:]\";
//   protected Real r1 = 1.0 - Tsat / Tcritical \"Common subexpression\";
// algorithm
//   psat := exp((a[1] * r1 ^ n[1] + a[2] * r1 ^ n[2] + a[3] * r1 ^ n[3] + a[4] * r1 ^ n[4] + a[5] * r1 ^ n[5] + a[6] * r1 ^ n[6]) * Tcritical / Tsat) * pcritical;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.saturationPressureLiquid;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.saturationPressureLiquid_der \"Derivative function for 'saturationPressureLiquid'\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Saturation temperature\";
//   input Real dTsat(unit = \"K/s\") \"Saturation temperature derivative\";
//   output Real psat_der(unit = \"Pa/s\") \"Saturation pressure derivative\";
//   protected Real Tcritical(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 647.096 \"Critical temperature\";
//   protected Real pcritical(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 22064000.0 \"Critical pressure\";
//   protected Real[:] a = {-7.85951783, 1.84408259, -11.7866497, 22.6807411, -15.9618719, 1.80122502} \"Coefficients a[:]\";
//   protected Real[:] n = {1.0, 1.5, 3.0, 3.5, 4.0, 7.5} \"Coefficients n[:]\";
//   protected Real r1 = 1.0 - Tsat / Tcritical \"Common subexpression 1\";
//   protected Real r1_der = -1.0 / Tcritical * dTsat \"Derivative of common subexpression 1\";
//   protected Real r2 = a[1] * r1 ^ n[1] + a[2] * r1 ^ n[2] + a[3] * r1 ^ n[3] + a[4] * r1 ^ n[4] + a[5] * r1 ^ n[5] + a[6] * r1 ^ n[6] \"Common subexpression 2\";
// algorithm
//   psat_der := exp(r2 * Tcritical / Tsat) * pcritical * ((a[1] * r1 ^ (n[1] - 1.0) * n[1] * r1_der + a[2] * r1 ^ (n[2] - 1.0) * n[2] * r1_der + a[3] * r1 ^ (n[3] - 1.0) * n[3] * r1_der + a[4] * r1 ^ (n[4] - 1.0) * n[4] * r1_der + a[5] * r1 ^ (n[5] - 1.0) * n[5] * r1_der + a[6] * r1 ^ (n[6] - 1.0) * n[6] * r1_der) * Tcritical / Tsat - r2 * Tcritical * dTsat / Tsat ^ 2.0);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.saturationPressureLiquid_der;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.saturationPressure_der \"Derivative function for 'saturationPressure'\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) \"Saturation temperature\";
//   input Real dTsat(unit = \"K/s\") \"Time derivative of saturation temperature\";
//   output Real psat_der(unit = \"Pa/s\") \"Saturation pressure\";
// algorithm
//   psat_der := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.Utilities.spliceFunction_der(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.saturationPressureLiquid(Tsat), Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.sublimationPressureIce(Tsat), Tsat - 273.16, 1.0, Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.saturationPressureLiquid_der(Tsat, dTsat), Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.sublimationPressureIce_der(Tsat, dTsat), dTsat, 0.0);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.saturationPressure_der;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.setState_pTX \"Return thermodynamic state as function of pressure p, temperature T and composition X\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) \"Temperature\";
//   input Real[:] X(quantity = fill(\"MassFraction\", size(X, 1)), unit = fill(\"kg/kg\", size(X, 1)), min = fill(0.0, size(X, 1)), max = fill(1.0, size(X, 1)), nominal = fill(0.1, size(X, 1))) = {0.01, 0.99} \"Mass fractions\";
//   output Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.ThermodynamicState state \"Thermodynamic state\";
// algorithm
//   state := if size(X, 1) == 2 then Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.ThermodynamicState(p, T, X) else Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.ThermodynamicState(p, T, cat(1, X, {1.0 - sum(X)}));
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.setState_pTX;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.setState_phX \"Return thermodynamic state as function of pressure p, specific enthalpy h and composition X\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0) \"Specific enthalpy\";
//   input Real[:] X(quantity = fill(\"MassFraction\", size(X, 1)), unit = fill(\"kg/kg\", size(X, 1)), min = fill(0.0, size(X, 1)), max = fill(1.0, size(X, 1)), nominal = fill(0.1, size(X, 1))) = {0.01, 0.99} \"Mass fractions\";
//   output Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.ThermodynamicState state \"Thermodynamic state\";
// algorithm
//   state := if size(X, 1) == 2 then Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.ThermodynamicState(p, Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.T_phX(p, h, X), X) else Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.ThermodynamicState(p, Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.T_phX(p, h, X), cat(1, X, {1.0 - sum(X)}));
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.setState_phX;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.specificEnthalpy \"Return specific enthalpy of moist air as a function of the thermodynamic state record\"
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.ThermodynamicState state \"Thermodynamic state record\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.h_pTX(state.p, state.T, state.X);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.specificEnthalpy;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.specificEnthalpy_pTX \"Return specific enthalpy from p, T, and X or Xi\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) \"Temperature\";
//   input Real[:] X(quantity = fill(\"MassFraction\", size(X, 1)), unit = fill(\"kg/kg\", size(X, 1)), min = fill(0.0, size(X, 1)), max = fill(1.0, size(X, 1)), nominal = fill(0.1, size(X, 1))) = {0.01, 0.99} \"Mass fractions\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.specificEnthalpy(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.setState_pTX(p, T, X));
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.specificEnthalpy_pTX;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.sublimationPressureIce \"Return sublimation pressure of water as a function of temperature T between 190 and 273.16 K\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Sublimation temperature\";
//   output Real psat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) \"Sublimation pressure\";
//   protected Real Ttriple(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 273.16 \"Triple point temperature\";
//   protected Real ptriple(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 611.657 \"Triple point pressure\";
//   protected Real[:] a = {-13.928169, 34.7078238} \"Coefficients a[:]\";
//   protected Real[:] n = {-1.5, -1.25} \"Coefficients n[:]\";
//   protected Real r1 = Tsat / Ttriple \"Common subexpression\";
// algorithm
//   psat := exp(a[1] - a[1] * r1 ^ n[1] + a[2] - a[2] * r1 ^ n[2]) * ptriple;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.sublimationPressureIce;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.sublimationPressureIce_der \"Derivative function for 'sublimationPressureIce'\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Sublimation temperature\";
//   input Real dTsat(unit = \"K/s\") \"Sublimation temperature derivative\";
//   output Real psat_der(unit = \"Pa/s\") \"Sublimation pressure derivative\";
//   protected Real Ttriple(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 273.16 \"Triple point temperature\";
//   protected Real ptriple(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 611.657 \"Triple point pressure\";
//   protected Real[:] a = {-13.928169, 34.7078238} \"Coefficients a[:]\";
//   protected Real[:] n = {-1.5, -1.25} \"Coefficients n[:]\";
//   protected Real r1 = Tsat / Ttriple \"Common subexpression 1\";
//   protected Real r1_der = dTsat / Ttriple \"Derivative of common subexpression 1\";
// algorithm
//   psat_der := exp(a[1] - a[1] * r1 ^ n[1] + a[2] - a[2] * r1 ^ n[2]) * ptriple * ((-a[1] * r1 ^ (n[1] - 1.0) * n[1] * r1_der) - a[2] * r1 ^ (n[2] - 1.0) * n[2] * r1_der);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.sublimationPressureIce_der;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.temperature \"Return temperature of ideal gas as a function of the thermodynamic state record\"
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.ThermodynamicState state \"Thermodynamic state record\";
//   output Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) \"Temperature\";
// algorithm
//   T := state.T;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.temperature;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.temperature_phX \"Return temperature from p, h, and X or Xi\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0) \"Specific enthalpy\";
//   input Real[:] X(quantity = fill(\"MassFraction\", size(X, 1)), unit = fill(\"kg/kg\", size(X, 1)), min = fill(0.0, size(X, 1)), max = fill(1.0, size(X, 1)), nominal = fill(0.1, size(X, 1))) = {0.01, 0.99} \"Mass fractions\";
//   output Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) \"Temperature\";
// algorithm
//   T := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.temperature(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.setState_phX(p, h, X));
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.temperature_phX;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.flowModel.Medium.ThermodynamicState \"Automatically generated record constructor for Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.flowModel.Medium.ThermodynamicState\"
//   input Real p;
//   input Real T;
//   input Real[2] X;
//   output ThermodynamicState res;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.flowModel.Medium.ThermodynamicState;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.flowModel.Medium.density \"Returns density of ideal gas as a function of the thermodynamic state record\"
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.flowModel.Medium.ThermodynamicState state \"Thermodynamic state record\";
//   output Real d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0) \"Density\";
// algorithm
//   d := state.p / (Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.flowModel.Medium.gasConstant(state) * state.T);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.flowModel.Medium.density;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.flowModel.Medium.dynamicViscosity \"Return dynamic viscosity as a function of the thermodynamic state record, valid from 123.15 K to 1273.15 K\"
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.flowModel.Medium.ThermodynamicState state \"Thermodynamic state record\";
//   output Real eta(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001) \"Dynamic viscosity\";
// algorithm
//   eta := 1e-06 * Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluateWithRange({9.739110288630587e-15, -3.135372487033391e-11, 4.300487659564222e-08, -3.822801629175824e-05, 0.05042787436718076, 17.23926013924253}, -150.0, 1000.0, Modelica.SIunits.Conversions.to_degC(state.T));
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.flowModel.Medium.dynamicViscosity;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.flowModel.Medium.gasConstant \"Return ideal gas constant as a function from thermodynamic state, only valid for phi<1\"
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.flowModel.Medium.ThermodynamicState state \"Thermodynamic state\";
//   output Real R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") \"Mixture gas constant\";
// algorithm
//   R := 287.0512249529787 * (1.0 - state.X[1]) + 461.5233290850878 * state.X[1];
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.flowModel.Medium.gasConstant;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.flowModel.Medium.pressure \"Returns pressure of ideal gas as a function of the thermodynamic state record\"
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.flowModel.Medium.ThermodynamicState state \"Thermodynamic state record\";
//   output Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
// algorithm
//   p := state.p;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.flowModel.Medium.pressure;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.flowModel.WallFriction.Internal.m_flow_of_dp_fric \"Calculate mass flow rate as function of pressure drop due to friction\"
//   input Real dp_fric(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure loss due to friction (dp = port_a.p - port_b.p)\";
//   input Real rho_a(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"Density at port_a\";
//   input Real rho_b(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"Density at port_b\";
//   input Real mu_a(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0) \"Dynamic viscosity at port_a (dummy if use_mu = false)\";
//   input Real mu_b(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0) \"Dynamic viscosity at port_b (dummy if use_mu = false)\";
//   input Real length(quantity = \"Length\", unit = \"m\") \"Length of pipe\";
//   input Real diameter(quantity = \"Length\", unit = \"m\", min = 0.0) \"Inner (hydraulic) diameter of pipe\";
//   input Real crossArea(quantity = \"Area\", unit = \"m2\") \"Inner cross section area\";
//   input Real Re1(quantity = \"ReynoldsNumber\", unit = \"1\") \"Boundary between laminar regime and transition\";
//   input Real Re2(quantity = \"ReynoldsNumber\", unit = \"1\") \"Boundary between transition and turbulent regime\";
//   input Real Delta(min = 0.0) \"Relative roughness\";
//   output Real m_flow(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow rate from port_a to port_b\";
//   output Real dm_flow_ddp_fric \"Derivative of mass flow rate with dp_fric\";
//   protected Real mu(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0) \"Upstream viscosity\";
//   protected Real rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"Upstream density\";
//   protected Real lambda2 \"Modified friction coefficient (= lambda*Re^2)\";
//   protected Real Re(quantity = \"ReynoldsNumber\", unit = \"1\") \"Reynolds number\";
//   protected Real dRe_ddp \"dRe/ddp\";
//   protected Real aux1;
//   protected Real aux2;
// algorithm
//   if dp_fric >= 0.0 then
//     rho := rho_a;
//     mu := mu_a;
//   else
//     rho := rho_b;
//     mu := mu_b;
//   end if;
//   lambda2 := abs(dp_fric) * 2.0 * diameter ^ 3.0 * rho / (length * mu * mu) \"Known as lambda2=f(dp)\";
//   aux1 := 2.0 * diameter ^ 3.0 * rho / (length * mu ^ 2.0);
//   Re := lambda2 / 64.0 \"Hagen-Poiseuille\";
//   dRe_ddp := aux1 / 64.0 \"Hagen-Poiseuille\";
//   if Re > Re1 then
//     Re := -2.0 * sqrt(lambda2) * log10(2.51 / sqrt(lambda2) + 0.27 * Delta) \"Colebrook-White\";
//     aux2 := sqrt(aux1 * abs(dp_fric));
//     dRe_ddp := 0.4342944819032518 * ((-2.0 * log(2.51 / aux2 + 0.27 * Delta) * aux1 / (2.0 * aux2)) + 5.02 / (2.0 * abs(dp_fric) * (2.51 / aux2 + 0.27 * Delta)));
//     if Re < Re2 then
//       (Re, dRe_ddp) := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.flowModel.WallFriction.Internal.m_flow_of_dp_fric.interpolateInRegion2_withDerivative(lambda2, Re1, Re2, Delta, dp_fric);
//     end if;
//   end if;
//   m_flow := crossArea / diameter * mu * (if dp_fric >= 0.0 then Re else -Re);
//   dm_flow_ddp_fric := crossArea / diameter * mu * dRe_ddp;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.flowModel.WallFriction.Internal.m_flow_of_dp_fric;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.flowModel.WallFriction.Internal.m_flow_of_dp_fric.interpolateInRegion2_withDerivative \"Interpolation in log-log space using a cubic Hermite polynomial, where x=log10(lambda2), y=log10(Re)\"
//   input Real lambda2 \"Known independent variable\";
//   input Real Re1(quantity = \"ReynoldsNumber\", unit = \"1\") \"Boundary between laminar regime and transition\";
//   input Real Re2(quantity = \"ReynoldsNumber\", unit = \"1\") \"Boundary between transition and turbulent regime\";
//   input Real Delta(min = 0.0) \"Relative roughness\";
//   input Real dp_fric(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure loss due to friction (dp = port_a.p - port_b.p)\";
//   output Real Re(quantity = \"ReynoldsNumber\", unit = \"1\") \"Unknown return variable\";
//   output Real dRe_ddp \"Derivative of return value\";
//   protected Real x1 = log10(64.0 * Re1);
//   protected Real y1 = log10(Re1);
//   protected Real y1d = 1.0;
//   protected Real aux2 = Delta / 3.7 + 5.74 / Re2 ^ 0.9;
//   protected Real x = log10(lambda2);
//   protected Real y;
//   protected Real dy_dx \"Derivative in transformed space\";
//   protected Real aux3 = log10(aux2);
//   protected Real L2 = 0.25 * (Re2 / aux3) ^ 2.0;
//   protected Real aux4 = 2.51 / sqrt(L2) + 0.27 * Delta;
//   protected Real x2 = log10(L2);
//   protected Real aux5 = -2.0 * sqrt(L2) * log10(aux4);
//   protected Real y2 = log10(aux5);
//   protected Real y2d = 0.5 + 1.090079149577162 / (aux5 * aux4);
// algorithm
//   (y, dy_dx) := Modelica.Fluid.Utilities.cubicHermite_withDerivative(x, x1, x2, y1, y2, y1d, y2d);
//   Re := 10.0 ^ y;
//   dRe_ddp := Re / abs(dp_fric) * dy_dx;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.flowModel.WallFriction.Internal.m_flow_of_dp_fric.interpolateInRegion2_withDerivative;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.flowModel.WallFriction.massFlowRate_dp_staticHead \"Return mass flow rate m_flow as function of pressure loss dp, i.e., m_flow = f(dp), due to wall friction and static head\"
//   input Real dp(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure loss (dp = port_a.p - port_b.p)\";
//   input Real rho_a(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"Density at port_a\";
//   input Real rho_b(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"Density at port_b\";
//   input Real mu_a(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0) \"Dynamic viscosity at port_a (dummy if use_mu = false)\";
//   input Real mu_b(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0) \"Dynamic viscosity at port_b (dummy if use_mu = false)\";
//   input Real length(quantity = \"Length\", unit = \"m\") \"Length of pipe\";
//   input Real diameter(quantity = \"Length\", unit = \"m\", min = 0.0) \"Inner (hydraulic) diameter of pipe\";
//   input Real g_times_height_ab(unit = \"m2/s2\") \"Gravity times (Height(port_b) - Height(port_a))\";
//   input Real crossArea(quantity = \"Area\", unit = \"m2\") = 3.141592653589793 * diameter ^ 2.0 / 4.0 \"Inner cross section area\";
//   input Real roughness(quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = 2.5e-05 \"Absolute roughness of pipe, with a default for a smooth steel pipe (dummy if use_roughness = false)\";
//   input Real dp_small(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 1.0 \"Regularization of zero flow if |dp| < dp_small (dummy if use_dp_small = false)\";
//   input Real Re_turbulent(quantity = \"ReynoldsNumber\", unit = \"1\") = 4000.0 \"Turbulent flow if Re >= Re_turbulent (dummy if use_Re_turbulent = false)\";
//   output Real m_flow(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow rate from port_a to port_b\";
//   protected Real Delta(min = 0.0) = roughness / diameter \"Relative roughness\";
//   protected Real Re(quantity = \"ReynoldsNumber\", unit = \"1\") \"Reynolds number\";
//   protected Real Re2(quantity = \"ReynoldsNumber\", unit = \"1\") = Re_turbulent \"Boundary between transition and turbulent regime\";
//   protected Real dp_a(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Upper end of regularization domain of the m_flow(dp) relation\";
//   protected Real dp_b(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Lower end of regularization domain of the m_flow(dp) relation\";
//   protected Real m_flow_a(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Value at upper end of regularization domain\";
//   protected Real m_flow_b(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Value at lower end of regularization domain\";
//   protected Real dm_flow_ddp_fric_a(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Derivative at upper end of regularization domain\";
//   protected Real dm_flow_ddp_fric_b(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Derivative at lower end of regularization domain\";
//   protected Real dp_grav_a(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = g_times_height_ab * rho_a \"Static head if mass flows in design direction (a to b)\";
//   protected Real dp_grav_b(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = g_times_height_ab * rho_b \"Static head if mass flows against design direction (b to a)\";
//   protected Real m_flow_zero(quantity = \"MassFlowRate\", unit = \"kg/s\") = 0.0;
//   protected Real dm_flow_ddp_fric_zero;
//   protected Real Re1(quantity = \"ReynoldsNumber\", unit = \"1\") = min((745.0 * exp(if Delta <= 0.0065 then 1.0 else 0.0065 / Delta)) ^ 0.97, Re_turbulent) \"Boundary between laminar regime and transition\";
//   protected Real dp_zero(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = (dp_grav_a + dp_grav_b) / 2.0;
// algorithm
//   dp_a := max(dp_grav_a, dp_grav_b) + dp_small;
//   dp_b := min(dp_grav_a, dp_grav_b) - dp_small;
//   if dp >= dp_a then
//     m_flow := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.flowModel.WallFriction.Internal.m_flow_of_dp_fric(dp - dp_grav_a, rho_a, rho_b, mu_a, mu_b, length, diameter, crossArea, Re1, Re2, Delta)[1];
//   elseif dp <= dp_b then
//     m_flow := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.flowModel.WallFriction.Internal.m_flow_of_dp_fric(dp - dp_grav_b, rho_a, rho_b, mu_a, mu_b, length, diameter, crossArea, Re1, Re2, Delta)[1];
//   else
//     (m_flow_a, dm_flow_ddp_fric_a) := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.flowModel.WallFriction.Internal.m_flow_of_dp_fric(dp_a - dp_grav_a, rho_a, rho_b, mu_a, mu_b, length, diameter, crossArea, Re1, Re2, Delta);
//     (m_flow_b, dm_flow_ddp_fric_b) := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.flowModel.WallFriction.Internal.m_flow_of_dp_fric(dp_b - dp_grav_b, rho_a, rho_b, mu_a, mu_b, length, diameter, crossArea, Re1, Re2, Delta);
//     (m_flow, dm_flow_ddp_fric_zero) := Modelica.Fluid.Utilities.regFun3(dp_zero, dp_b, dp_a, m_flow_b, m_flow_a, dm_flow_ddp_fric_b, dm_flow_ddp_fric_a);
//     if dp > dp_zero then
//       m_flow := Modelica.Fluid.Utilities.regFun3(dp, dp_zero, dp_a, m_flow_zero, m_flow_a, dm_flow_ddp_fric_zero, dm_flow_ddp_fric_a)[1];
//     else
//       m_flow := Modelica.Fluid.Utilities.regFun3(dp, dp_b, dp_zero, m_flow_b, m_flow_zero, dm_flow_ddp_fric_b, dm_flow_ddp_fric_zero)[1];
//     end if;
//   end if;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.flowModel.WallFriction.massFlowRate_dp_staticHead;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.flowModel.WallFriction.pressureLoss_m_flow \"Return pressure loss dp as function of mass flow rate m_flow, i.e., dp = f(m_flow), due to wall friction\"
//   input Real m_flow(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow rate from port_a to port_b\";
//   input Real rho_a(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"Density at port_a\";
//   input Real rho_b(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"Density at port_b\";
//   input Real mu_a(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0) \"Dynamic viscosity at port_a (dummy if use_mu = false)\";
//   input Real mu_b(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0) \"Dynamic viscosity at port_b (dummy if use_mu = false)\";
//   input Real length(quantity = \"Length\", unit = \"m\") \"Length of pipe\";
//   input Real diameter(quantity = \"Length\", unit = \"m\", min = 0.0) \"Inner (hydraulic) diameter of pipe\";
//   input Real crossArea(quantity = \"Area\", unit = \"m2\") = 3.141592653589793 * diameter ^ 2.0 / 4.0 \"Inner cross section area\";
//   input Real roughness(quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = 2.5e-05 \"Absolute roughness of pipe, with a default for a smooth steel pipe (dummy if use_roughness = false)\";
//   input Real m_flow_small(quantity = \"MassFlowRate\", unit = \"kg/s\") = 0.01 \"Regularization of zero flow if |m_flow| < m_flow_small (dummy if use_m_flow_small = false)\";
//   input Real Re_turbulent(quantity = \"ReynoldsNumber\", unit = \"1\") = 4000.0 \"Turbulent flow if Re >= Re_turbulent (dummy if use_Re_turbulent = false)\";
//   output Real dp(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure loss (dp = port_a.p - port_b.p)\";
//   protected Real Delta(min = 0.0) = roughness / diameter \"Relative roughness\";
//   protected Real Re2(quantity = \"ReynoldsNumber\", unit = \"1\") = Re_turbulent \"Re entering turbulent curve\";
//   protected Real mu(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0) \"Upstream viscosity\";
//   protected Real rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"Upstream density\";
//   protected Real Re(quantity = \"ReynoldsNumber\", unit = \"1\") \"Reynolds number\";
//   protected Real lambda2 \"Modified friction coefficient (= lambda*Re^2)\";
//   protected Real Re1(quantity = \"ReynoldsNumber\", unit = \"1\") = min(745.0 * exp(if Delta <= 0.0065 then 1.0 else 0.0065 / Delta), Re_turbulent) \"Re leaving laminar curve\";
// algorithm
//   rho := if m_flow >= 0.0 then rho_a else rho_b;
//   mu := if m_flow >= 0.0 then mu_a else mu_b;
//   Re := diameter * abs(m_flow) / (crossArea * mu);
//   lambda2 := if Re <= Re1 then 64.0 * Re else if Re >= Re2 then 0.25 * (Re / log10(Delta / 3.7 + 5.74 / Re ^ 0.9)) ^ 2.0 else Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.flowModel.WallFriction.pressureLoss_m_flow.interpolateInRegion2(Re, Re1, Re2, Delta);
//   dp := length * mu * mu / (2.0 * rho * diameter * diameter * diameter) * (if m_flow >= 0.0 then lambda2 else -lambda2);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.flowModel.WallFriction.pressureLoss_m_flow;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.flowModel.WallFriction.pressureLoss_m_flow.interpolateInRegion2
//   input Real Re(quantity = \"ReynoldsNumber\", unit = \"1\");
//   input Real Re1(quantity = \"ReynoldsNumber\", unit = \"1\");
//   input Real Re2(quantity = \"ReynoldsNumber\", unit = \"1\");
//   input Real Delta;
//   output Real lambda2;
//   protected Real x1 = log10(Re1);
//   protected Real y1 = log10(64.0 * Re1);
//   protected Real yd1 = 1.0;
//   protected Real aux1 = 1.121782646756099;
//   protected Real aux2 = Delta / 3.7 + 5.74 / Re2 ^ 0.9;
//   protected Real x2 = log10(Re2);
//   protected Real dx;
//   protected Real aux3 = log10(aux2);
//   protected Real diff_x = x2 - x1;
//   protected Real L2 = 0.25 * (Re2 / aux3) ^ 2.0;
//   protected Real yd2 = 2.0 + 4.0 * aux1 / (aux2 * aux3 * Re2 ^ 0.9);
//   protected Real aux4 = 2.51 / sqrt(L2) + 0.27 * Delta;
//   protected Real y2 = log10(L2);
//   protected Real aux5 = -2.0 * sqrt(L2) * log10(aux4);
//   protected Real m = (y2 - y1) / diff_x;
//   protected Real c2 = (3.0 * m - 2.0 * yd1 - yd2) / diff_x;
//   protected Real c3 = (yd1 + yd2 - 2.0 * m) / (diff_x * diff_x);
// algorithm
//   dx := log10(Re / Re1);
//   lambda2 := 64.0 * Re1 * (Re / Re1) ^ (1.0 + dx * (c2 + dx * c3));
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.flowModel.WallFriction.pressureLoss_m_flow.interpolateInRegion2;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.heatTransfer.Medium.ThermodynamicState \"Automatically generated record constructor for Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.heatTransfer.Medium.ThermodynamicState\"
//   input Real p;
//   input Real T;
//   input Real[2] X;
//   output ThermodynamicState res;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.heatTransfer.Medium.ThermodynamicState;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.heatTransfer.Medium.temperature \"Return temperature of ideal gas as a function of the thermodynamic state record\"
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.heatTransfer.Medium.ThermodynamicState state \"Thermodynamic state record\";
//   output Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) \"Temperature\";
// algorithm
//   T := state.T;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.heatTransfer.Medium.temperature;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.T_phX \"Return temperature as a function of pressure p, specific enthalpy h and composition X\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0) \"Specific enthalpy\";
//   input Real[:] X(quantity = fill(\"MassFraction\", size(X, 1)), unit = fill(\"kg/kg\", size(X, 1)), min = fill(0.0, size(X, 1)), max = fill(1.0, size(X, 1)), nominal = fill(0.1, size(X, 1))) \"Mass fractions of composition\";
//   output Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) \"Temperature\";
// algorithm
//   T := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.T_phX.Internal.solve(h, 190.0, 647.0, p, X[1:1], Modelica.Media.IdealGases.Common.DataRecord(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), 1e-13);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.T_phX;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.T_phX.Internal.f_nonlinear
//   input Real x \"Independent variable of function\";
//   input Real p = 0.0 \"Disregarded variables (here always used for pressure)\";
//   input Real[:] X = {} \"Disregarded variables (her always used for composition)\";
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.T_phX.Internal.f_nonlinear_Data f_nonlinear_data \"Additional data for the function\";
//   output Real y \"= f_nonlinear(x)\";
// algorithm
//   y := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.h_pTX(p, x, X);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.T_phX.Internal.f_nonlinear;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.T_phX.Internal.f_nonlinear_Data \"Automatically generated record constructor for Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.T_phX.Internal.f_nonlinear_Data\"
//   input String name;
//   input Real MM;
//   input Real Hf;
//   input Real H0;
//   input Real Tlimit;
//   input Real[7] alow;
//   input Real[2] blow;
//   input Real[7] ahigh;
//   input Real[2] bhigh;
//   input Real R;
//   output f_nonlinear_Data res;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.T_phX.Internal.f_nonlinear_Data;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.T_phX.Internal.solve
//   input Real y_zero \"Determine x_zero, such that f_nonlinear(x_zero) = y_zero\";
//   input Real x_min \"Minimum value of x\";
//   input Real x_max \"Maximum value of x\";
//   input Real pressure = 0.0 \"Disregarded variables (here always used for pressure)\";
//   input Real[:] X = {} \"Disregarded variables (here always used for composition)\";
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.T_phX.Internal.f_nonlinear_Data f_nonlinear_data \"Additional data for function f_nonlinear\";
//   input Real x_tol = 1e-13 \"Relative tolerance of the result\";
//   output Real x_zero \"f_nonlinear(x_zero) = y_zero\";
//   protected constant Real eps = 1e-15 \"Machine epsilon\";
//   protected constant Real x_eps = 1e-10 \"Slight modification of x_min, x_max, since x_min, x_max are usually exactly at the borders T_min/h_min and then small numeric noise may make the interval invalid\";
//   protected Real c \"Intermediate point a <= c <= b\";
//   protected Real d;
//   protected Real e \"b - a\";
//   protected Real m;
//   protected Real s;
//   protected Real p;
//   protected Real q;
//   protected Real r;
//   protected Real tol;
//   protected Real fa \"= f_nonlinear(a) - y_zero\";
//   protected Real fb \"= f_nonlinear(b) - y_zero\";
//   protected Real fc;
//   protected Boolean found = false;
//   protected Real x_min2 = x_min - x_eps;
//   protected Real x_max2 = x_max + x_eps;
//   protected Real a = x_min2 \"Current best minimum interval value\";
//   protected Real b = x_max2 \"Current best maximum interval value\";
// algorithm
//   fa := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.T_phX.Internal.f_nonlinear(x_min2, pressure, X, f_nonlinear_data) - y_zero;
//   fb := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.T_phX.Internal.f_nonlinear(x_max2, pressure, X, f_nonlinear_data) - y_zero;
//   fc := fb;
//   if fa > 0.0 and fb > 0.0 or fa < 0.0 and fb < 0.0 then
//     Modelica.Utilities.Streams.error(\"The arguments x_min and x_max to OneNonLinearEquation.solve(..)
//     do not bracket the root of the single non-linear equation:
//       x_min  = \" + String(x_min2, 6, 0, true) + \"
//     \" + \"  x_max  = \" + String(x_max2, 6, 0, true) + \"
//     \" + \"  y_zero = \" + String(y_zero, 6, 0, true) + \"
//     \" + \"  fa = f(x_min) - y_zero = \" + String(fa, 6, 0, true) + \"
//     \" + \"  fb = f(x_max) - y_zero = \" + String(fb, 6, 0, true) + \"
//     \" + \"fa and fb must have opposite sign which is not the case\");
//   end if;
//   c := a;
//   fc := fa;
//   e := b - a;
//   d := e;
//   while not found loop
//     if abs(fc) < abs(fb) then
//       a := b;
//       b := c;
//       c := a;
//       fa := fb;
//       fb := fc;
//       fc := fa;
//     end if;
//     tol := 2.0 * eps * abs(b) + x_tol;
//     m := (c - b) / 2.0;
//     if abs(m) <= tol or fb == 0.0 then
//       found := true;
//       x_zero := b;
//     else
//       if abs(e) < tol or abs(fa) <= abs(fb) then
//         e := m;
//         d := e;
//       else
//         s := fb / fa;
//         if a == c then
//           p := 2.0 * m * s;
//           q := 1.0 - s;
//         else
//           q := fa / fc;
//           r := fb / fc;
//           p := s * (2.0 * m * q * (q - r) - (b - a) * (r - 1.0));
//           q := (q - 1.0) * (r - 1.0) * (s - 1.0);
//         end if;
//         if p > 0.0 then
//           q := -q;
//         else
//           p := -p;
//         end if;
//         s := e;
//         e := d;
//         if 2.0 * p < 3.0 * m * q - abs(tol * q) and p < abs(0.5 * s * q) then
//           d := p / q;
//         else
//           e := m;
//           d := e;
//         end if;
//       end if;
//       a := b;
//       fa := fb;
//       b := b + (if abs(d) > tol then d else if m > 0.0 then tol else -tol);
//       fb := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.T_phX.Internal.f_nonlinear(b, pressure, X, f_nonlinear_data) - y_zero;
//       if fb > 0.0 and fc > 0.0 or fb < 0.0 and fc < 0.0 then
//         c := a;
//         fc := fa;
//         e := b - a;
//         d := e;
//       end if;
//     end if;
//   end while;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.T_phX.Internal.solve;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.ThermodynamicState \"Automatically generated record constructor for Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.ThermodynamicState\"
//   input Real p;
//   input Real T;
//   input Real[2] X;
//   output ThermodynamicState res;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.ThermodynamicState;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.Utilities.smoothMax
//   input Real x1 \"First argument of smooth max operator\";
//   input Real x2 \"Second argument of smooth max operator\";
//   input Real dx \"Approximate difference between x1 and x2, below which regularization starts\";
//   output Real y \"Result of smooth max operator\";
// algorithm
//   y := max(x1, x2) + log(exp(4.0 / dx * (x1 - max(x1, x2))) + exp(4.0 / dx * (x2 - max(x1, x2)))) / (4.0 / dx);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.Utilities.smoothMax;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.Utilities.smoothMax_der
//   input Real x1 \"First argument of smooth max operator\";
//   input Real x2 \"Second argument of smooth max operator\";
//   input Real dx \"Approximate difference between x1 and x2, below which regularization starts\";
//   input Real dx1;
//   input Real dx2;
//   input Real ddx;
//   output Real dy \"Derivative of smooth max operator\";
// algorithm
//   dy := (if x1 > x2 then dx1 else dx2) + 0.25 * (((4.0 * (dx1 - (if x1 > x2 then dx1 else dx2)) / dx - 4.0 * (x1 - max(x1, x2)) * ddx / dx ^ 2.0) * exp(4.0 * (x1 - max(x1, x2)) / dx) + (4.0 * (dx2 - (if x1 > x2 then dx1 else dx2)) / dx - 4.0 * (x2 - max(x1, x2)) * ddx / dx ^ 2.0) * exp(4.0 * (x2 - max(x1, x2)) / dx)) * dx / (exp(4.0 * (x1 - max(x1, x2)) / dx) + exp(4.0 * (x2 - max(x1, x2)) / dx)) + log(exp(4.0 * (x1 - max(x1, x2)) / dx) + exp(4.0 * (x2 - max(x1, x2)) / dx)) * ddx);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.Utilities.smoothMax_der;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.Utilities.spliceFunction \"Spline interpolation of two functions\"
//   input Real pos \"Returned value for x-deltax >= 0\";
//   input Real neg \"Returned value for x+deltax <= 0\";
//   input Real x \"Function argument\";
//   input Real deltax = 1.0 \"Region around x with spline interpolation\";
//   output Real out;
//   protected Real scaledX;
//   protected Real scaledX1;
//   protected Real y;
// algorithm
//   scaledX1 := x / deltax;
//   scaledX := scaledX1 * 1.570796326794897;
//   if scaledX1 <= -0.999999999 then
//     y := 0.0;
//   elseif scaledX1 >= 0.999999999 then
//     y := 1.0;
//   else
//     y := (tanh(tan(scaledX)) + 1.0) / 2.0;
//   end if;
//   out := pos * y + (1.0 - y) * neg;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.Utilities.spliceFunction;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.Utilities.spliceFunction_der \"Derivative of spliceFunction\"
//   input Real pos;
//   input Real neg;
//   input Real x;
//   input Real deltax = 1.0;
//   input Real dpos;
//   input Real dneg;
//   input Real dx;
//   input Real ddeltax = 0.0;
//   output Real out;
//   protected Real scaledX;
//   protected Real scaledX1;
//   protected Real dscaledX1;
//   protected Real y;
// algorithm
//   scaledX1 := x / deltax;
//   scaledX := scaledX1 * 1.570796326794897;
//   dscaledX1 := (dx - scaledX1 * ddeltax) / deltax;
//   if scaledX1 <= -0.99999999999 then
//     y := 0.0;
//   elseif scaledX1 >= 0.9999999999 then
//     y := 1.0;
//   else
//     y := (tanh(tan(scaledX)) + 1.0) / 2.0;
//   end if;
//   out := dpos * y + (1.0 - y) * dneg;
//   if abs(scaledX1) < 1.0 then
//     out := out + (pos - neg) * dscaledX1 * 1.570796326794897 / 2.0 / (cosh(tan(scaledX)) * cos(scaledX)) ^ 2.0;
//   end if;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.Utilities.spliceFunction_der;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.density \"Returns density of ideal gas as a function of the thermodynamic state record\"
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.ThermodynamicState state \"Thermodynamic state record\";
//   output Real d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0) \"Density\";
// algorithm
//   d := state.p / (Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.gasConstant(state) * state.T);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.density;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.enthalpyOfWater \"Computes specific enthalpy of water (solid/liquid) near atmospheric pressure from temperature T\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Temperature\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy of water\";
// algorithm
//   h := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.Utilities.spliceFunction(4200.0 * (T - 273.15), 2050.0 * (T - 273.15) - 333000.0, T - 273.16, 0.1);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.enthalpyOfWater;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.enthalpyOfWater_der \"Derivative function of enthalpyOfWater\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Temperature\";
//   input Real dT(unit = \"K/s\") \"Time derivative of temperature\";
//   output Real dh(unit = \"J/(kg.s)\") \"Time derivative of specific enthalpy\";
// algorithm
//   dh := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.Utilities.spliceFunction_der(4200.0 * (T - 273.15), 2050.0 * (T - 273.15) - 333000.0, T - 273.16, 0.1, 4200.0 * dT, 2050.0 * dT, dT, 0.0);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.enthalpyOfWater_der;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.gasConstant \"Return ideal gas constant as a function from thermodynamic state, only valid for phi<1\"
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.ThermodynamicState state \"Thermodynamic state\";
//   output Real R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") \"Mixture gas constant\";
// algorithm
//   R := 287.0512249529787 * (1.0 - state.X[1]) + 461.5233290850878 * state.X[1];
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.gasConstant;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.h_pTX \"Return specific enthalpy of moist air as a function of pressure p, temperature T and composition X\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Temperature\";
//   input Real[:] X(quantity = fill(\"MassFraction\", size(X, 1)), unit = fill(\"1\", size(X, 1)), min = fill(0.0, size(X, 1)), max = fill(1.0, size(X, 1))) \"Mass fractions of moist air\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy at p, T, X\";
//   protected Real p_steam_sat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) \"partial saturation pressure of steam\";
//   protected Real X_sat(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Absolute humidity per unit mass of moist air\";
//   protected Real X_liquid(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Mass fraction of liquid water\";
//   protected Real X_steam(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Mass fraction of steam water\";
//   protected Real X_air(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Mass fraction of air\";
// algorithm
//   p_steam_sat := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.saturationPressure(T);
//   X_sat := min(p_steam_sat * 0.6219647130774989 / max(1e-13, p - p_steam_sat) * (1.0 - X[1]), 1.0);
//   X_liquid := max(X[1] - X_sat, 0.0);
//   X_steam := X[1] - X_liquid;
//   X_air := 1.0 - X[1];
//   h := Modelica.Media.IdealGases.Common.Functions.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.UserDefined, 2547494.319) * X_steam + Modelica.Media.IdealGases.Common.Functions.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"Air\", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.UserDefined, 25104.684) * X_air + Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.enthalpyOfWater(T) * X_liquid;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.h_pTX;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.h_pTX_der \"Derivative function of h_pTX\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Temperature\";
//   input Real[:] X(quantity = fill(\"MassFraction\", size(X, 1)), unit = fill(\"1\", size(X, 1)), min = fill(0.0, size(X, 1)), max = fill(1.0, size(X, 1))) \"Mass fractions of moist air\";
//   input Real dp(unit = \"Pa/s\") \"Pressure derivative\";
//   input Real dT(unit = \"K/s\") \"Temperature derivative\";
//   input Real[:] dX(unit = \"1/s\") \"Composition derivative\";
//   output Real h_der(unit = \"J/(kg.s)\") \"Time derivative of specific enthalpy\";
//   protected Real p_steam_sat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) \"partial saturation pressure of steam\";
//   protected Real X_sat(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Absolute humidity per unit mass of moist air\";
//   protected Real X_liquid(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Mass fraction of liquid water\";
//   protected Real X_steam(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Mass fraction of steam water\";
//   protected Real X_air(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Mass fraction of air\";
//   protected Real x_sat(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) \"Absolute humidity per unit mass of dry air at saturation\";
//   protected Real dX_steam(unit = \"1/s\") \"Time derivative of steam mass fraction\";
//   protected Real dX_air(unit = \"1/s\") \"Time derivative of dry air mass fraction\";
//   protected Real dX_liq(unit = \"1/s\") \"Time derivative of liquid/solid water mass fraction\";
//   protected Real dps(unit = \"Pa/s\") \"Time derivative of saturation pressure\";
//   protected Real dx_sat(unit = \"1/s\") \"Time derivative of absolute humidity per unit mass of dry air\";
// algorithm
//   p_steam_sat := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.saturationPressure(T);
//   x_sat := p_steam_sat * 0.6219647130774989 / max(1e-13, p - p_steam_sat);
//   X_sat := min(x_sat * (1.0 - X[1]), 1.0);
//   X_liquid := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.Utilities.smoothMax(X[1] - X_sat, 0.0, 1e-05);
//   X_steam := X[1] - X_liquid;
//   X_air := 1.0 - X[1];
//   dX_air := -dX[1];
//   dps := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.saturationPressure_der(T, dT);
//   dx_sat := 0.6219647130774989 * (dps * (p - p_steam_sat) - p_steam_sat * (dp - dps)) / (p - p_steam_sat) / (p - p_steam_sat);
//   dX_liq := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.Utilities.smoothMax_der(X[1] - X_sat, 0.0, 1e-05, (1.0 + x_sat) * dX[1] - (1.0 - X[1]) * dx_sat, 0.0, 0.0);
//   dX_steam := dX[1] - dX_liq;
//   h_der := X_steam * Modelica.Media.IdealGases.Common.Functions.h_Tlow_der(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.UserDefined, 2547494.319, dT) + dX_steam * Modelica.Media.IdealGases.Common.Functions.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.UserDefined, 2547494.319) + X_air * Modelica.Media.IdealGases.Common.Functions.h_Tlow_der(Modelica.Media.IdealGases.Common.DataRecord(\"Air\", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.UserDefined, 25104.684, dT) + dX_air * Modelica.Media.IdealGases.Common.Functions.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"Air\", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.UserDefined, 25104.684) + X_liquid * Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.enthalpyOfWater_der(T, dT) + dX_liq * Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.enthalpyOfWater(T);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.h_pTX_der;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.saturationPressure \"Return saturation pressure of water as a function of temperature T between 190 and 647.096 K\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) \"Saturation temperature\";
//   output Real psat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Saturation pressure\";
// algorithm
//   psat := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.Utilities.spliceFunction(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.saturationPressureLiquid(Tsat), Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.sublimationPressureIce(Tsat), Tsat - 273.16, 1.0);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.saturationPressure;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.saturationPressureLiquid \"Return saturation pressure of water as a function of temperature T in the range of 273.16 to 647.096 K\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Saturation temperature\";
//   output Real psat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) \"Saturation pressure\";
//   protected Real Tcritical(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 647.096 \"Critical temperature\";
//   protected Real pcritical(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 22064000.0 \"Critical pressure\";
//   protected Real[:] a = {-7.85951783, 1.84408259, -11.7866497, 22.6807411, -15.9618719, 1.80122502} \"Coefficients a[:]\";
//   protected Real[:] n = {1.0, 1.5, 3.0, 3.5, 4.0, 7.5} \"Coefficients n[:]\";
//   protected Real r1 = 1.0 - Tsat / Tcritical \"Common subexpression\";
// algorithm
//   psat := exp((a[1] * r1 ^ n[1] + a[2] * r1 ^ n[2] + a[3] * r1 ^ n[3] + a[4] * r1 ^ n[4] + a[5] * r1 ^ n[5] + a[6] * r1 ^ n[6]) * Tcritical / Tsat) * pcritical;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.saturationPressureLiquid;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.saturationPressureLiquid_der \"Derivative function for 'saturationPressureLiquid'\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Saturation temperature\";
//   input Real dTsat(unit = \"K/s\") \"Saturation temperature derivative\";
//   output Real psat_der(unit = \"Pa/s\") \"Saturation pressure derivative\";
//   protected Real Tcritical(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 647.096 \"Critical temperature\";
//   protected Real pcritical(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 22064000.0 \"Critical pressure\";
//   protected Real[:] a = {-7.85951783, 1.84408259, -11.7866497, 22.6807411, -15.9618719, 1.80122502} \"Coefficients a[:]\";
//   protected Real[:] n = {1.0, 1.5, 3.0, 3.5, 4.0, 7.5} \"Coefficients n[:]\";
//   protected Real r1 = 1.0 - Tsat / Tcritical \"Common subexpression 1\";
//   protected Real r1_der = -1.0 / Tcritical * dTsat \"Derivative of common subexpression 1\";
//   protected Real r2 = a[1] * r1 ^ n[1] + a[2] * r1 ^ n[2] + a[3] * r1 ^ n[3] + a[4] * r1 ^ n[4] + a[5] * r1 ^ n[5] + a[6] * r1 ^ n[6] \"Common subexpression 2\";
// algorithm
//   psat_der := exp(r2 * Tcritical / Tsat) * pcritical * ((a[1] * r1 ^ (n[1] - 1.0) * n[1] * r1_der + a[2] * r1 ^ (n[2] - 1.0) * n[2] * r1_der + a[3] * r1 ^ (n[3] - 1.0) * n[3] * r1_der + a[4] * r1 ^ (n[4] - 1.0) * n[4] * r1_der + a[5] * r1 ^ (n[5] - 1.0) * n[5] * r1_der + a[6] * r1 ^ (n[6] - 1.0) * n[6] * r1_der) * Tcritical / Tsat - r2 * Tcritical * dTsat / Tsat ^ 2.0);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.saturationPressureLiquid_der;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.saturationPressure_der \"Derivative function for 'saturationPressure'\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) \"Saturation temperature\";
//   input Real dTsat(unit = \"K/s\") \"Time derivative of saturation temperature\";
//   output Real psat_der(unit = \"Pa/s\") \"Saturation pressure\";
// algorithm
//   psat_der := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.Utilities.spliceFunction_der(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.saturationPressureLiquid(Tsat), Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.sublimationPressureIce(Tsat), Tsat - 273.16, 1.0, Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.saturationPressureLiquid_der(Tsat, dTsat), Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.sublimationPressureIce_der(Tsat, dTsat), dTsat, 0.0);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.saturationPressure_der;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.setState_pTX \"Return thermodynamic state as function of pressure p, temperature T and composition X\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) \"Temperature\";
//   input Real[:] X(quantity = fill(\"MassFraction\", size(X, 1)), unit = fill(\"kg/kg\", size(X, 1)), min = fill(0.0, size(X, 1)), max = fill(1.0, size(X, 1)), nominal = fill(0.1, size(X, 1))) = {0.01, 0.99} \"Mass fractions\";
//   output Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.ThermodynamicState state \"Thermodynamic state\";
// algorithm
//   state := if size(X, 1) == 2 then Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.ThermodynamicState(p, T, X) else Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.ThermodynamicState(p, T, cat(1, X, {1.0 - sum(X)}));
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.setState_pTX;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.setState_phX \"Return thermodynamic state as function of pressure p, specific enthalpy h and composition X\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0) \"Specific enthalpy\";
//   input Real[:] X(quantity = fill(\"MassFraction\", size(X, 1)), unit = fill(\"kg/kg\", size(X, 1)), min = fill(0.0, size(X, 1)), max = fill(1.0, size(X, 1)), nominal = fill(0.1, size(X, 1))) = {0.01, 0.99} \"Mass fractions\";
//   output Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.ThermodynamicState state \"Thermodynamic state\";
// algorithm
//   state := if size(X, 1) == 2 then Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.ThermodynamicState(p, Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.T_phX(p, h, X), X) else Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.ThermodynamicState(p, Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.T_phX(p, h, X), cat(1, X, {1.0 - sum(X)}));
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.setState_phX;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.specificEnthalpy \"Return specific enthalpy of moist air as a function of the thermodynamic state record\"
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.ThermodynamicState state \"Thermodynamic state record\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.h_pTX(state.p, state.T, state.X);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.specificEnthalpy;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.specificEnthalpy_pTX \"Return specific enthalpy from p, T, and X or Xi\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) \"Temperature\";
//   input Real[:] X(quantity = fill(\"MassFraction\", size(X, 1)), unit = fill(\"kg/kg\", size(X, 1)), min = fill(0.0, size(X, 1)), max = fill(1.0, size(X, 1)), nominal = fill(0.1, size(X, 1))) = {0.01, 0.99} \"Mass fractions\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.specificEnthalpy(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.setState_pTX(p, T, X));
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.specificEnthalpy_pTX;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.sublimationPressureIce \"Return sublimation pressure of water as a function of temperature T between 190 and 273.16 K\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Sublimation temperature\";
//   output Real psat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) \"Sublimation pressure\";
//   protected Real Ttriple(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 273.16 \"Triple point temperature\";
//   protected Real ptriple(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 611.657 \"Triple point pressure\";
//   protected Real[:] a = {-13.928169, 34.7078238} \"Coefficients a[:]\";
//   protected Real[:] n = {-1.5, -1.25} \"Coefficients n[:]\";
//   protected Real r1 = Tsat / Ttriple \"Common subexpression\";
// algorithm
//   psat := exp(a[1] - a[1] * r1 ^ n[1] + a[2] - a[2] * r1 ^ n[2]) * ptriple;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.sublimationPressureIce;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.sublimationPressureIce_der \"Derivative function for 'sublimationPressureIce'\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Sublimation temperature\";
//   input Real dTsat(unit = \"K/s\") \"Sublimation temperature derivative\";
//   output Real psat_der(unit = \"Pa/s\") \"Sublimation pressure derivative\";
//   protected Real Ttriple(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 273.16 \"Triple point temperature\";
//   protected Real ptriple(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 611.657 \"Triple point pressure\";
//   protected Real[:] a = {-13.928169, 34.7078238} \"Coefficients a[:]\";
//   protected Real[:] n = {-1.5, -1.25} \"Coefficients n[:]\";
//   protected Real r1 = Tsat / Ttriple \"Common subexpression 1\";
//   protected Real r1_der = dTsat / Ttriple \"Derivative of common subexpression 1\";
// algorithm
//   psat_der := exp(a[1] - a[1] * r1 ^ n[1] + a[2] - a[2] * r1 ^ n[2]) * ptriple * ((-a[1] * r1 ^ (n[1] - 1.0) * n[1] * r1_der) - a[2] * r1 ^ (n[2] - 1.0) * n[2] * r1_der);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.sublimationPressureIce_der;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.temperature \"Return temperature of ideal gas as a function of the thermodynamic state record\"
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.ThermodynamicState state \"Thermodynamic state record\";
//   output Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) \"Temperature\";
// algorithm
//   T := state.T;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.temperature;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.temperature_phX \"Return temperature from p, h, and X or Xi\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0) \"Specific enthalpy\";
//   input Real[:] X(quantity = fill(\"MassFraction\", size(X, 1)), unit = fill(\"kg/kg\", size(X, 1)), min = fill(0.0, size(X, 1)), max = fill(1.0, size(X, 1)), nominal = fill(0.1, size(X, 1))) = {0.01, 0.99} \"Mass fractions\";
//   output Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) \"Temperature\";
// algorithm
//   T := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.temperature(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.setState_phX(p, h, X));
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.temperature_phX;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.flowModel.Medium.ThermodynamicState \"Automatically generated record constructor for Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.flowModel.Medium.ThermodynamicState\"
//   input Real p;
//   input Real T;
//   input Real[2] X;
//   output ThermodynamicState res;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.flowModel.Medium.ThermodynamicState;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.flowModel.Medium.density \"Returns density of ideal gas as a function of the thermodynamic state record\"
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.flowModel.Medium.ThermodynamicState state \"Thermodynamic state record\";
//   output Real d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0) \"Density\";
// algorithm
//   d := state.p / (Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.flowModel.Medium.gasConstant(state) * state.T);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.flowModel.Medium.density;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.flowModel.Medium.dynamicViscosity \"Return dynamic viscosity as a function of the thermodynamic state record, valid from 123.15 K to 1273.15 K\"
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.flowModel.Medium.ThermodynamicState state \"Thermodynamic state record\";
//   output Real eta(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001) \"Dynamic viscosity\";
// algorithm
//   eta := 1e-06 * Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluateWithRange({9.739110288630587e-15, -3.135372487033391e-11, 4.300487659564222e-08, -3.822801629175824e-05, 0.05042787436718076, 17.23926013924253}, -150.0, 1000.0, Modelica.SIunits.Conversions.to_degC(state.T));
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.flowModel.Medium.dynamicViscosity;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.flowModel.Medium.gasConstant \"Return ideal gas constant as a function from thermodynamic state, only valid for phi<1\"
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.flowModel.Medium.ThermodynamicState state \"Thermodynamic state\";
//   output Real R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") \"Mixture gas constant\";
// algorithm
//   R := 287.0512249529787 * (1.0 - state.X[1]) + 461.5233290850878 * state.X[1];
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.flowModel.Medium.gasConstant;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.flowModel.Medium.pressure \"Returns pressure of ideal gas as a function of the thermodynamic state record\"
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.flowModel.Medium.ThermodynamicState state \"Thermodynamic state record\";
//   output Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
// algorithm
//   p := state.p;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.flowModel.Medium.pressure;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.flowModel.WallFriction.Internal.m_flow_of_dp_fric \"Calculate mass flow rate as function of pressure drop due to friction\"
//   input Real dp_fric(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure loss due to friction (dp = port_a.p - port_b.p)\";
//   input Real rho_a(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"Density at port_a\";
//   input Real rho_b(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"Density at port_b\";
//   input Real mu_a(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0) \"Dynamic viscosity at port_a (dummy if use_mu = false)\";
//   input Real mu_b(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0) \"Dynamic viscosity at port_b (dummy if use_mu = false)\";
//   input Real length(quantity = \"Length\", unit = \"m\") \"Length of pipe\";
//   input Real diameter(quantity = \"Length\", unit = \"m\", min = 0.0) \"Inner (hydraulic) diameter of pipe\";
//   input Real crossArea(quantity = \"Area\", unit = \"m2\") \"Inner cross section area\";
//   input Real Re1(quantity = \"ReynoldsNumber\", unit = \"1\") \"Boundary between laminar regime and transition\";
//   input Real Re2(quantity = \"ReynoldsNumber\", unit = \"1\") \"Boundary between transition and turbulent regime\";
//   input Real Delta(min = 0.0) \"Relative roughness\";
//   output Real m_flow(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow rate from port_a to port_b\";
//   output Real dm_flow_ddp_fric \"Derivative of mass flow rate with dp_fric\";
//   protected Real mu(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0) \"Upstream viscosity\";
//   protected Real rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"Upstream density\";
//   protected Real lambda2 \"Modified friction coefficient (= lambda*Re^2)\";
//   protected Real Re(quantity = \"ReynoldsNumber\", unit = \"1\") \"Reynolds number\";
//   protected Real dRe_ddp \"dRe/ddp\";
//   protected Real aux1;
//   protected Real aux2;
// algorithm
//   if dp_fric >= 0.0 then
//     rho := rho_a;
//     mu := mu_a;
//   else
//     rho := rho_b;
//     mu := mu_b;
//   end if;
//   lambda2 := abs(dp_fric) * 2.0 * diameter ^ 3.0 * rho / (length * mu * mu) \"Known as lambda2=f(dp)\";
//   aux1 := 2.0 * diameter ^ 3.0 * rho / (length * mu ^ 2.0);
//   Re := lambda2 / 64.0 \"Hagen-Poiseuille\";
//   dRe_ddp := aux1 / 64.0 \"Hagen-Poiseuille\";
//   if Re > Re1 then
//     Re := -2.0 * sqrt(lambda2) * log10(2.51 / sqrt(lambda2) + 0.27 * Delta) \"Colebrook-White\";
//     aux2 := sqrt(aux1 * abs(dp_fric));
//     dRe_ddp := 0.4342944819032518 * ((-2.0 * log(2.51 / aux2 + 0.27 * Delta) * aux1 / (2.0 * aux2)) + 5.02 / (2.0 * abs(dp_fric) * (2.51 / aux2 + 0.27 * Delta)));
//     if Re < Re2 then
//       (Re, dRe_ddp) := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.flowModel.WallFriction.Internal.m_flow_of_dp_fric.interpolateInRegion2_withDerivative(lambda2, Re1, Re2, Delta, dp_fric);
//     end if;
//   end if;
//   m_flow := crossArea / diameter * mu * (if dp_fric >= 0.0 then Re else -Re);
//   dm_flow_ddp_fric := crossArea / diameter * mu * dRe_ddp;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.flowModel.WallFriction.Internal.m_flow_of_dp_fric;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.flowModel.WallFriction.Internal.m_flow_of_dp_fric.interpolateInRegion2_withDerivative \"Interpolation in log-log space using a cubic Hermite polynomial, where x=log10(lambda2), y=log10(Re)\"
//   input Real lambda2 \"Known independent variable\";
//   input Real Re1(quantity = \"ReynoldsNumber\", unit = \"1\") \"Boundary between laminar regime and transition\";
//   input Real Re2(quantity = \"ReynoldsNumber\", unit = \"1\") \"Boundary between transition and turbulent regime\";
//   input Real Delta(min = 0.0) \"Relative roughness\";
//   input Real dp_fric(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure loss due to friction (dp = port_a.p - port_b.p)\";
//   output Real Re(quantity = \"ReynoldsNumber\", unit = \"1\") \"Unknown return variable\";
//   output Real dRe_ddp \"Derivative of return value\";
//   protected Real x1 = log10(64.0 * Re1);
//   protected Real y1 = log10(Re1);
//   protected Real y1d = 1.0;
//   protected Real aux2 = Delta / 3.7 + 5.74 / Re2 ^ 0.9;
//   protected Real x = log10(lambda2);
//   protected Real y;
//   protected Real dy_dx \"Derivative in transformed space\";
//   protected Real aux3 = log10(aux2);
//   protected Real L2 = 0.25 * (Re2 / aux3) ^ 2.0;
//   protected Real aux4 = 2.51 / sqrt(L2) + 0.27 * Delta;
//   protected Real x2 = log10(L2);
//   protected Real aux5 = -2.0 * sqrt(L2) * log10(aux4);
//   protected Real y2 = log10(aux5);
//   protected Real y2d = 0.5 + 1.090079149577162 / (aux5 * aux4);
// algorithm
//   (y, dy_dx) := Modelica.Fluid.Utilities.cubicHermite_withDerivative(x, x1, x2, y1, y2, y1d, y2d);
//   Re := 10.0 ^ y;
//   dRe_ddp := Re / abs(dp_fric) * dy_dx;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.flowModel.WallFriction.Internal.m_flow_of_dp_fric.interpolateInRegion2_withDerivative;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.flowModel.WallFriction.massFlowRate_dp_staticHead \"Return mass flow rate m_flow as function of pressure loss dp, i.e., m_flow = f(dp), due to wall friction and static head\"
//   input Real dp(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure loss (dp = port_a.p - port_b.p)\";
//   input Real rho_a(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"Density at port_a\";
//   input Real rho_b(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"Density at port_b\";
//   input Real mu_a(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0) \"Dynamic viscosity at port_a (dummy if use_mu = false)\";
//   input Real mu_b(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0) \"Dynamic viscosity at port_b (dummy if use_mu = false)\";
//   input Real length(quantity = \"Length\", unit = \"m\") \"Length of pipe\";
//   input Real diameter(quantity = \"Length\", unit = \"m\", min = 0.0) \"Inner (hydraulic) diameter of pipe\";
//   input Real g_times_height_ab(unit = \"m2/s2\") \"Gravity times (Height(port_b) - Height(port_a))\";
//   input Real crossArea(quantity = \"Area\", unit = \"m2\") = 3.141592653589793 * diameter ^ 2.0 / 4.0 \"Inner cross section area\";
//   input Real roughness(quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = 2.5e-05 \"Absolute roughness of pipe, with a default for a smooth steel pipe (dummy if use_roughness = false)\";
//   input Real dp_small(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 1.0 \"Regularization of zero flow if |dp| < dp_small (dummy if use_dp_small = false)\";
//   input Real Re_turbulent(quantity = \"ReynoldsNumber\", unit = \"1\") = 4000.0 \"Turbulent flow if Re >= Re_turbulent (dummy if use_Re_turbulent = false)\";
//   output Real m_flow(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow rate from port_a to port_b\";
//   protected Real Delta(min = 0.0) = roughness / diameter \"Relative roughness\";
//   protected Real Re(quantity = \"ReynoldsNumber\", unit = \"1\") \"Reynolds number\";
//   protected Real Re2(quantity = \"ReynoldsNumber\", unit = \"1\") = Re_turbulent \"Boundary between transition and turbulent regime\";
//   protected Real dp_a(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Upper end of regularization domain of the m_flow(dp) relation\";
//   protected Real dp_b(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Lower end of regularization domain of the m_flow(dp) relation\";
//   protected Real m_flow_a(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Value at upper end of regularization domain\";
//   protected Real m_flow_b(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Value at lower end of regularization domain\";
//   protected Real dm_flow_ddp_fric_a(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Derivative at upper end of regularization domain\";
//   protected Real dm_flow_ddp_fric_b(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Derivative at lower end of regularization domain\";
//   protected Real dp_grav_a(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = g_times_height_ab * rho_a \"Static head if mass flows in design direction (a to b)\";
//   protected Real dp_grav_b(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = g_times_height_ab * rho_b \"Static head if mass flows against design direction (b to a)\";
//   protected Real m_flow_zero(quantity = \"MassFlowRate\", unit = \"kg/s\") = 0.0;
//   protected Real dm_flow_ddp_fric_zero;
//   protected Real Re1(quantity = \"ReynoldsNumber\", unit = \"1\") = min((745.0 * exp(if Delta <= 0.0065 then 1.0 else 0.0065 / Delta)) ^ 0.97, Re_turbulent) \"Boundary between laminar regime and transition\";
//   protected Real dp_zero(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = (dp_grav_a + dp_grav_b) / 2.0;
// algorithm
//   dp_a := max(dp_grav_a, dp_grav_b) + dp_small;
//   dp_b := min(dp_grav_a, dp_grav_b) - dp_small;
//   if dp >= dp_a then
//     m_flow := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.flowModel.WallFriction.Internal.m_flow_of_dp_fric(dp - dp_grav_a, rho_a, rho_b, mu_a, mu_b, length, diameter, crossArea, Re1, Re2, Delta)[1];
//   elseif dp <= dp_b then
//     m_flow := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.flowModel.WallFriction.Internal.m_flow_of_dp_fric(dp - dp_grav_b, rho_a, rho_b, mu_a, mu_b, length, diameter, crossArea, Re1, Re2, Delta)[1];
//   else
//     (m_flow_a, dm_flow_ddp_fric_a) := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.flowModel.WallFriction.Internal.m_flow_of_dp_fric(dp_a - dp_grav_a, rho_a, rho_b, mu_a, mu_b, length, diameter, crossArea, Re1, Re2, Delta);
//     (m_flow_b, dm_flow_ddp_fric_b) := Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.flowModel.WallFriction.Internal.m_flow_of_dp_fric(dp_b - dp_grav_b, rho_a, rho_b, mu_a, mu_b, length, diameter, crossArea, Re1, Re2, Delta);
//     (m_flow, dm_flow_ddp_fric_zero) := Modelica.Fluid.Utilities.regFun3(dp_zero, dp_b, dp_a, m_flow_b, m_flow_a, dm_flow_ddp_fric_b, dm_flow_ddp_fric_a);
//     if dp > dp_zero then
//       m_flow := Modelica.Fluid.Utilities.regFun3(dp, dp_zero, dp_a, m_flow_zero, m_flow_a, dm_flow_ddp_fric_zero, dm_flow_ddp_fric_a)[1];
//     else
//       m_flow := Modelica.Fluid.Utilities.regFun3(dp, dp_b, dp_zero, m_flow_b, m_flow_zero, dm_flow_ddp_fric_b, dm_flow_ddp_fric_zero)[1];
//     end if;
//   end if;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.flowModel.WallFriction.massFlowRate_dp_staticHead;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.flowModel.WallFriction.pressureLoss_m_flow \"Return pressure loss dp as function of mass flow rate m_flow, i.e., dp = f(m_flow), due to wall friction\"
//   input Real m_flow(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow rate from port_a to port_b\";
//   input Real rho_a(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"Density at port_a\";
//   input Real rho_b(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"Density at port_b\";
//   input Real mu_a(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0) \"Dynamic viscosity at port_a (dummy if use_mu = false)\";
//   input Real mu_b(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0) \"Dynamic viscosity at port_b (dummy if use_mu = false)\";
//   input Real length(quantity = \"Length\", unit = \"m\") \"Length of pipe\";
//   input Real diameter(quantity = \"Length\", unit = \"m\", min = 0.0) \"Inner (hydraulic) diameter of pipe\";
//   input Real crossArea(quantity = \"Area\", unit = \"m2\") = 3.141592653589793 * diameter ^ 2.0 / 4.0 \"Inner cross section area\";
//   input Real roughness(quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = 2.5e-05 \"Absolute roughness of pipe, with a default for a smooth steel pipe (dummy if use_roughness = false)\";
//   input Real m_flow_small(quantity = \"MassFlowRate\", unit = \"kg/s\") = 0.01 \"Regularization of zero flow if |m_flow| < m_flow_small (dummy if use_m_flow_small = false)\";
//   input Real Re_turbulent(quantity = \"ReynoldsNumber\", unit = \"1\") = 4000.0 \"Turbulent flow if Re >= Re_turbulent (dummy if use_Re_turbulent = false)\";
//   output Real dp(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure loss (dp = port_a.p - port_b.p)\";
//   protected Real Delta(min = 0.0) = roughness / diameter \"Relative roughness\";
//   protected Real Re2(quantity = \"ReynoldsNumber\", unit = \"1\") = Re_turbulent \"Re entering turbulent curve\";
//   protected Real mu(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0) \"Upstream viscosity\";
//   protected Real rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"Upstream density\";
//   protected Real Re(quantity = \"ReynoldsNumber\", unit = \"1\") \"Reynolds number\";
//   protected Real lambda2 \"Modified friction coefficient (= lambda*Re^2)\";
//   protected Real Re1(quantity = \"ReynoldsNumber\", unit = \"1\") = min(745.0 * exp(if Delta <= 0.0065 then 1.0 else 0.0065 / Delta), Re_turbulent) \"Re leaving laminar curve\";
// algorithm
//   rho := if m_flow >= 0.0 then rho_a else rho_b;
//   mu := if m_flow >= 0.0 then mu_a else mu_b;
//   Re := diameter * abs(m_flow) / (crossArea * mu);
//   lambda2 := if Re <= Re1 then 64.0 * Re else if Re >= Re2 then 0.25 * (Re / log10(Delta / 3.7 + 5.74 / Re ^ 0.9)) ^ 2.0 else Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.flowModel.WallFriction.pressureLoss_m_flow.interpolateInRegion2(Re, Re1, Re2, Delta);
//   dp := length * mu * mu / (2.0 * rho * diameter * diameter * diameter) * (if m_flow >= 0.0 then lambda2 else -lambda2);
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.flowModel.WallFriction.pressureLoss_m_flow;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.flowModel.WallFriction.pressureLoss_m_flow.interpolateInRegion2
//   input Real Re(quantity = \"ReynoldsNumber\", unit = \"1\");
//   input Real Re1(quantity = \"ReynoldsNumber\", unit = \"1\");
//   input Real Re2(quantity = \"ReynoldsNumber\", unit = \"1\");
//   input Real Delta;
//   output Real lambda2;
//   protected Real x1 = log10(Re1);
//   protected Real y1 = log10(64.0 * Re1);
//   protected Real yd1 = 1.0;
//   protected Real aux1 = 1.121782646756099;
//   protected Real aux2 = Delta / 3.7 + 5.74 / Re2 ^ 0.9;
//   protected Real x2 = log10(Re2);
//   protected Real dx;
//   protected Real aux3 = log10(aux2);
//   protected Real diff_x = x2 - x1;
//   protected Real L2 = 0.25 * (Re2 / aux3) ^ 2.0;
//   protected Real yd2 = 2.0 + 4.0 * aux1 / (aux2 * aux3 * Re2 ^ 0.9);
//   protected Real aux4 = 2.51 / sqrt(L2) + 0.27 * Delta;
//   protected Real y2 = log10(L2);
//   protected Real aux5 = -2.0 * sqrt(L2) * log10(aux4);
//   protected Real m = (y2 - y1) / diff_x;
//   protected Real c2 = (3.0 * m - 2.0 * yd1 - yd2) / diff_x;
//   protected Real c3 = (yd1 + yd2 - 2.0 * m) / (diff_x * diff_x);
// algorithm
//   dx := log10(Re / Re1);
//   lambda2 := 64.0 * Re1 * (Re / Re1) ^ (1.0 + dx * (c2 + dx * c3));
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.flowModel.WallFriction.pressureLoss_m_flow.interpolateInRegion2;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.heatTransfer.Medium.ThermodynamicState \"Automatically generated record constructor for Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.heatTransfer.Medium.ThermodynamicState\"
//   input Real p;
//   input Real T;
//   input Real[2] X;
//   output ThermodynamicState res;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.heatTransfer.Medium.ThermodynamicState;
//
// function Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.heatTransfer.Medium.temperature \"Return temperature of ideal gas as a function of the thermodynamic state record\"
//   input Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.heatTransfer.Medium.ThermodynamicState state \"Thermodynamic state record\";
//   output Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) \"Temperature\";
// algorithm
//   T := state.T;
// end Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.heatTransfer.Medium.temperature;
//
// function Modelica.Fluid.Pipes.BaseClasses.CharacteristicNumbers.NusseltNumber \"Return Nusselt number\"
//   input Real alpha(quantity = \"CoefficientOfHeatTransfer\", unit = \"W/(m2.K)\") \"Coefficient of heat transfer\";
//   input Real D(quantity = \"Length\", unit = \"m\") \"Characteristic dimension\";
//   input Real lambda(quantity = \"ThermalConductivity\", unit = \"W/(m.K)\") \"Thermal conductivity\";
//   output Real Nu(quantity = \"NusseltNumber\", unit = \"1\") \"Nusselt number\";
// algorithm
//   Nu := alpha * D / lambda;
// end Modelica.Fluid.Pipes.BaseClasses.CharacteristicNumbers.NusseltNumber;
//
// function Modelica.Fluid.Pipes.BaseClasses.CharacteristicNumbers.ReynoldsNumber \"Return Reynolds number from v, rho, mu, D\"
//   input Real v(quantity = \"Velocity\", unit = \"m/s\") \"Mean velocity of fluid flow\";
//   input Real rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"Fluid density\";
//   input Real mu(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0) \"Dynamic (absolute) viscosity\";
//   input Real D(quantity = \"Length\", unit = \"m\") \"Characteristic dimension (hydraulic diameter of pipes)\";
//   output Real Re(quantity = \"ReynoldsNumber\", unit = \"1\") \"Reynolds number\";
// algorithm
//   Re := abs(v) * rho * D / mu;
// end Modelica.Fluid.Pipes.BaseClasses.CharacteristicNumbers.ReynoldsNumber;
//
// function Modelica.Fluid.Utilities.checkBoundary \"Check whether boundary definition is correct\"
//   input String mediumName;
//   input String[:] substanceNames \"Names of substances\";
//   input Boolean singleState;
//   input Boolean define_p;
//   input Real[:] X_boundary;
//   input String modelName = \"??? boundary ???\";
//   protected Integer nX = size(X_boundary, 1);
//   protected String X_str;
// algorithm
//   assert(not singleState or singleState and define_p, \"
//   Wrong value of parameter define_p (= false) in model \\\"\" + modelName + \"\\\":
//   The selected medium \\\"\" + mediumName + \"\\\" has Medium.singleState=true.
//   Therefore, an boundary density cannot be defined and
//   define_p = true is required.
//   \");
//   for i in 1:nX loop
//     assert(X_boundary[i] >= 0.0, \"
//     Wrong boundary mass fractions in medium \\\"\" + mediumName + \"\\\" in model \\\"\" + modelName + \"\\\":
//     The boundary value X_boundary(\" + String(i, 0, true) + \") = \" + String(X_boundary[i], 6, 0, true) + \"
//     is negative. It must be positive.
//     \");
//   end for;
//   if nX > 0 and abs(sum(X_boundary) - 1.0) > 1e-10 then
//     X_str := \"\";
//     for i in 1:nX loop
//       X_str := X_str + \"   X_boundary[\" + String(i, 0, true) + \"] = \" + String(X_boundary[i], 6, 0, true) + \" \\\"\" + substanceNames[i] + \"\\\"
//       \";
//     end for;
//     Modelica.Utilities.Streams.error(\"The boundary mass fractions in medium \\\"\" + mediumName + \"\\\" in model \\\"\" + modelName + \"\\\"
//     \" + \"do not sum up to 1. Instead, sum(X_boundary) = \" + String(sum(X_boundary), 6, 0, true) + \":
//     \" + X_str);
//   end if;
// end Modelica.Fluid.Utilities.checkBoundary;
//
// function Modelica.Fluid.Utilities.cubicHermite_withDerivative \"Evaluate a cubic Hermite spline, return value and derivative\"
//   input Real x \"Abscissa value\";
//   input Real x1 \"Lower abscissa value\";
//   input Real x2 \"Upper abscissa value\";
//   input Real y1 \"Lower ordinate value\";
//   input Real y2 \"Upper ordinate value\";
//   input Real y1d \"Lower gradient\";
//   input Real y2d \"Upper gradient\";
//   output Real y \"Interpolated ordinate value\";
//   output Real dy_dx \"Derivative dy/dx at abscissa value x\";
//   protected Real h \"Distance between x1 and x2\";
//   protected Real t \"abscissa scaled with h, i.e., t=[0..1] within x=[x1..x2]\";
//   protected Real h00 \"Basis function 00 of cubic Hermite spline\";
//   protected Real h10 \"Basis function 10 of cubic Hermite spline\";
//   protected Real h01 \"Basis function 01 of cubic Hermite spline\";
//   protected Real h11 \"Basis function 11 of cubic Hermite spline\";
//   protected Real h00d \"d/dt h00\";
//   protected Real h10d \"d/dt h10\";
//   protected Real h01d \"d/dt h01\";
//   protected Real h11d \"d/dt h11\";
//   protected Real aux3 \"t cube\";
//   protected Real aux2 \"t square\";
// algorithm
//   h := x2 - x1;
//   if abs(h) > 0.0 then
//     t := (x - x1) / h;
//     aux3 := t ^ 3.0;
//     aux2 := t ^ 2.0;
//     h00 := 2.0 * aux3 - 3.0 * aux2 + 1.0;
//     h10 := aux3 - 2.0 * aux2 + t;
//     h01 := (-2.0 * aux3) + 3.0 * aux2;
//     h11 := aux3 - aux2;
//     h00d := 6.0 * (aux2 - t);
//     h10d := 3.0 * aux2 - 4.0 * t + 1.0;
//     h01d := 6.0 * (t - aux2);
//     h11d := 3.0 * aux2 - 2.0 * t;
//     y := y1 * h00 + h * y1d * h10 + y2 * h01 + h * y2d * h11;
//     dy_dx := y1 * h00d / h + y1d * h10d + y2 * h01d / h + y2d * h11d;
//   else
//     y := (y1 + y2) / 2.0;
//     dy_dx := /*Real*/(sign(y2 - y1)) * 9.999999999999999e+59;
//   end if;
// end Modelica.Fluid.Utilities.cubicHermite_withDerivative;
//
// function Modelica.Fluid.Utilities.regFun3 \"Co-monotonic and C1 smooth regularization function\"
//   input Real x \"Abscissa value\";
//   input Real x0 \"Lower abscissa value\";
//   input Real x1 \"Upper abscissa value\";
//   input Real y0 \"Ordinate value at lower abscissa value\";
//   input Real y1 \"Ordinate value at upper abscissa value\";
//   input Real y0d \"Derivative at lower abscissa value\";
//   input Real y1d \"Derivative at upper abscissa value\";
//   output Real y \"Ordinate value\";
//   output Real c \"Slope of linear section between two cubic polynomials or dummy linear section slope if single cubic is used\";
//   protected Real h0 \"Width of interval i=0\";
//   protected Real Delta0 \"Slope of secant on interval i=0\";
//   protected Real xstar \"Inflection point of cubic polynomial S0\";
//   protected Real mu \"Distance of inflection point and left limit x0\";
//   protected Real eta \"Distance of right limit x1 and inflection point\";
//   protected Real omega \"Slope of cubic polynomial S0 at inflection point\";
//   protected Real rho \"Weighting factor of eta and eta_tilde, mu and mu_tilde\";
//   protected Real theta0 \"Slope metric\";
//   protected Real mu_tilde \"Distance of start of linear section and left limit x0\";
//   protected Real eta_tilde \"Distance of right limit x1 and end of linear section\";
//   protected Real xi1 \"Start of linear section\";
//   protected Real xi2 \"End of linear section\";
//   protected Real a1 \"Leading coefficient of cubic on the left\";
//   protected Real a2 \"Leading coefficient of cubic on the right\";
//   protected Real const12 \"Integration constant of left cubic, linear section\";
//   protected Real const3 \"Integration constant of right cubic\";
//   protected Real aux01;
//   protected Real aux02;
//   protected Boolean useSingleCubicPolynomial = false \"Indicate to override further logic and use single cubic\";
// algorithm
//   assert(x0 < x1, \"regFun3(): Data points not sorted appropriately (x0 = \" + String(x0, 6, 0, true) + \" > x1 = \" + String(x1, 6, 0, true) + \"). Please flip arguments.\");
//   if y0d * y1d >= 0.0 then
//   else
//     assert(abs(y0d) < 1e-15 or abs(y1d) < 1e-15, \"regFun3(): Derivatives at data points do not allow co-monotone interpolation, as both are non-zero, of opposite sign and have an absolute value larger than machine eps (y0d = \" + String(y0d, 6, 0, true) + \", y1d = \" + String(y1d, 6, 0, true) + \"). Please correct arguments.\");
//   end if;
//   h0 := x1 - x0;
//   Delta0 := (y1 - y0) / h0;
//   if abs(Delta0) <= 0.0 then
//     y := y0 + Delta0 * (x - x0);
//     c := 0.0;
//   elseif abs(y1d + y0d - 2.0 * Delta0) < 1e-13 then
//     y := y0 + (x - x0) * (y0d + (x - x0) / h0 * ((-2.0 * y0d) - y1d + 3.0 * Delta0 + (x - x0) * (y0d + y1d - 2.0 * Delta0) / h0));
//     aux01 := (x0 + x1) / 2.0;
//     c := 3.0 * (y0d + y1d - 2.0 * Delta0) * (aux01 - x0) ^ 2.0 / h0 ^ 2.0 + 2.0 * ((-2.0 * y0d) - y1d + 3.0 * Delta0) * (aux01 - x0) / h0 + y0d;
//   else
//     xstar := 0.3333333333333333 * ((-3.0 * x0 * y0d) - 3.0 * x0 * y1d + 6.0 * x0 * Delta0 - 2.0 * h0 * y0d - h0 * y1d + 3.0 * h0 * Delta0) / ((-y0d) - y1d + 2.0 * Delta0);
//     mu := xstar - x0;
//     eta := x1 - xstar;
//     omega := 3.0 * (y0d + y1d - 2.0 * Delta0) * (xstar - x0) ^ 2.0 / h0 ^ 2.0 + 2.0 * ((-2.0 * y0d) - y1d + 3.0 * Delta0) * (xstar - x0) / h0 + y0d;
//     aux01 := 0.25 * /*Real*/(sign(Delta0)) * min(abs(omega), abs(Delta0)) \"Slope c if not using plain cubic S0\";
//     if abs(y0d - y1d) <= 1e-13 then
//       aux02 := y0d;
//       if y1 > y0 + y0d * (x1 - x0) then
//         useSingleCubicPolynomial := true;
//       end if;
//     elseif abs(y1d + y0d - 2.0 * Delta0) < 1e-13 then
//       aux02 := (6.0 * Delta0 * (y1d + y0d - 1.5 * Delta0) - y1d * y0d - y1d ^ 2.0 - y0d ^ 2.0) * (if y1d + y0d - 2.0 * Delta0 >= 0.0 then 1.0 else -1.0) * 9.999999999999999e+59;
//     else
//       aux02 := (6.0 * Delta0 * (y1d + y0d - 1.5 * Delta0) - y1d * y0d - y1d ^ 2.0 - y0d ^ 2.0) / (3.0 * (y1d + y0d - 2.0 * Delta0));
//     end if;
//     if (mu > 0.0 and eta < h0 and Delta0 * omega <= 0.0 or abs(aux01) < abs(aux02) and aux02 * Delta0 >= 0.0 or abs(aux01) < abs(0.1 * Delta0)) and not useSingleCubicPolynomial then
//       c := aux01;
//       if abs(c) < abs(aux02) and aux02 * Delta0 >= 0.0 then
//         c := aux02;
//       end if;
//       if abs(c) < abs(0.1 * Delta0) then
//         c := 0.1 * Delta0;
//       end if;
//       theta0 := (y0d * mu + y1d * eta) / h0;
//       if abs(theta0 - c) < 1e-06 then
//         c := 0.999999 * theta0;
//       end if;
//       rho := 3.0 * (Delta0 - c) / (theta0 - c);
//       mu_tilde := rho * mu;
//       eta_tilde := rho * eta;
//       xi1 := x0 + mu_tilde;
//       xi2 := x1 - eta_tilde;
//       a1 := (y0d - c) / max(mu_tilde ^ 2.0, 1e-13);
//       a2 := (y1d - c) / max(eta_tilde ^ 2.0, 1e-13);
//       const12 := y0 - a1 / 3.0 * (x0 - xi1) ^ 3.0 - c * x0;
//       const3 := y1 - a2 / 3.0 * (x1 - xi2) ^ 3.0 - c * x1;
//       if x < xi1 then
//         y := a1 / 3.0 * (x - xi1) ^ 3.0 + c * x + const12;
//       elseif x < xi2 then
//         y := c * x + const12;
//       else
//         y := a2 / 3.0 * (x - xi2) ^ 3.0 + c * x + const3;
//       end if;
//     else
//       y := y0 + (x - x0) * (y0d + (x - x0) / h0 * ((-2.0 * y0d) - y1d + 3.0 * Delta0 + (x - x0) * (y0d + y1d - 2.0 * Delta0) / h0));
//       aux01 := (x0 + x1) / 2.0;
//       c := 3.0 * (y0d + y1d - 2.0 * Delta0) * (aux01 - x0) ^ 2.0 / h0 ^ 2.0 + 2.0 * ((-2.0 * y0d) - y1d + 3.0 * Delta0) * (aux01 - x0) / h0 + y0d;
//     end if;
//   end if;
// end Modelica.Fluid.Utilities.regFun3;
//
// function Modelica.Media.Air.MoistAir.Utilities.spliceFunction \"Spline interpolation of two functions\"
//   input Real pos \"Returned value for x-deltax >= 0\";
//   input Real neg \"Returned value for x+deltax <= 0\";
//   input Real x \"Function argument\";
//   input Real deltax = 1.0 \"Region around x with spline interpolation\";
//   output Real out;
//   protected Real scaledX;
//   protected Real scaledX1;
//   protected Real y;
// algorithm
//   scaledX1 := x / deltax;
//   scaledX := scaledX1 * 1.570796326794897;
//   if scaledX1 <= -0.999999999 then
//     y := 0.0;
//   elseif scaledX1 >= 0.999999999 then
//     y := 1.0;
//   else
//     y := (tanh(tan(scaledX)) + 1.0) / 2.0;
//   end if;
//   out := pos * y + (1.0 - y) * neg;
// end Modelica.Media.Air.MoistAir.Utilities.spliceFunction;
//
// function Modelica.Media.Air.MoistAir.Utilities.spliceFunction_der \"Derivative of spliceFunction\"
//   input Real pos;
//   input Real neg;
//   input Real x;
//   input Real deltax = 1.0;
//   input Real dpos;
//   input Real dneg;
//   input Real dx;
//   input Real ddeltax = 0.0;
//   output Real out;
//   protected Real scaledX;
//   protected Real scaledX1;
//   protected Real dscaledX1;
//   protected Real y;
// algorithm
//   scaledX1 := x / deltax;
//   scaledX := scaledX1 * 1.570796326794897;
//   dscaledX1 := (dx - scaledX1 * ddeltax) / deltax;
//   if scaledX1 <= -0.99999999999 then
//     y := 0.0;
//   elseif scaledX1 >= 0.9999999999 then
//     y := 1.0;
//   else
//     y := (tanh(tan(scaledX)) + 1.0) / 2.0;
//   end if;
//   out := dpos * y + (1.0 - y) * dneg;
//   if abs(scaledX1) < 1.0 then
//     out := out + (pos - neg) * dscaledX1 * 1.570796326794897 / 2.0 / (cosh(tan(scaledX)) * cos(scaledX)) ^ 2.0;
//   end if;
// end Modelica.Media.Air.MoistAir.Utilities.spliceFunction_der;
//
// function Modelica.Media.IdealGases.Common.DataRecord \"Automatically generated record constructor for Modelica.Media.IdealGases.Common.DataRecord\"
//   input String name;
//   input Real MM;
//   input Real Hf;
//   input Real H0;
//   input Real Tlimit;
//   input Real[7] alow;
//   input Real[2] blow;
//   input Real[7] ahigh;
//   input Real[2] bhigh;
//   input Real R;
//   output DataRecord res;
// end Modelica.Media.IdealGases.Common.DataRecord;
//
// function Modelica.Media.IdealGases.Common.Functions.cp_Tlow \"Compute specific heat capacity at constant pressure, low T region\"
//   input Modelica.Media.IdealGases.Common.DataRecord data \"Ideal gas data\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Temperature\";
//   output Real cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") \"Specific heat capacity at temperature T\";
// algorithm
//   cp := data.R * 1.0 / (T * T) * (data.alow[1] + T * (data.alow[2] + T * (data.alow[3] + T * (data.alow[4] + T * (data.alow[5] + T * (data.alow[6] + data.alow[7] * T))))));
// end Modelica.Media.IdealGases.Common.Functions.cp_Tlow;
//
// function Modelica.Media.IdealGases.Common.Functions.cp_Tlow_der \"Compute specific heat capacity at constant pressure, low T region\"
//   input Modelica.Media.IdealGases.Common.DataRecord data \"Ideal gas data\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Temperature\";
//   input Real dT \"Temperature derivative\";
//   output Real cp_der \"Derivative of specific heat capacity\";
// algorithm
//   cp_der := dT * data.R / (T * T * T) * ((-2.0 * data.alow[1]) + T * ((-data.alow[2]) + T * T * (data.alow[4] + T * (2.0 * data.alow[5] + T * (3.0 * data.alow[6] + 4.0 * data.alow[7] * T)))));
// end Modelica.Media.IdealGases.Common.Functions.cp_Tlow_der;
//
// function Modelica.Media.IdealGases.Common.Functions.h_Tlow \"Compute specific enthalpy, low T region; reference is decided by the
//     refChoice input, or by the referenceChoice package constant by default\"
//   input Modelica.Media.IdealGases.Common.DataRecord data \"Ideal gas data\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Temperature\";
//   input Boolean exclEnthForm = true \"If true, enthalpy of formation Hf is not included in specific enthalpy h\";
//   input enumeration(ZeroAt0K, ZeroAt25C, UserDefined) refChoice = Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K \"Choice of reference enthalpy\";
//   input Real h_off(quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0 \"User defined offset for reference enthalpy, if referenceChoice = UserDefined\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy at temperature T\";
// algorithm
//   h := data.R * ((-data.alow[1]) + T * (data.blow[1] + data.alow[2] * log(T) + T * (data.alow[3] + T * (0.5 * data.alow[4] + T * (0.3333333333333333 * data.alow[5] + T * (0.25 * data.alow[6] + 0.2 * data.alow[7] * T)))))) / T + (if exclEnthForm then -data.Hf else 0.0) + (if refChoice == Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K then data.H0 else 0.0) + (if refChoice == Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.UserDefined then h_off else 0.0);
// end Modelica.Media.IdealGases.Common.Functions.h_Tlow;
//
// function Modelica.Media.IdealGases.Common.Functions.h_Tlow_der \"Compute specific enthalpy, low T region; reference is decided by the
//     refChoice input, or by the referenceChoice package constant by default\"
//   input Modelica.Media.IdealGases.Common.DataRecord data \"Ideal gas data\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Temperature\";
//   input Boolean exclEnthForm = true \"If true, enthalpy of formation Hf is not included in specific enthalpy h\";
//   input enumeration(ZeroAt0K, ZeroAt25C, UserDefined) refChoice = Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K \"Choice of reference enthalpy\";
//   input Real h_off(quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0 \"User defined offset for reference enthalpy, if referenceChoice = UserDefined\";
//   input Real dT(unit = \"K/s\") \"Temperature derivative\";
//   output Real h_der(unit = \"J/(kg.s)\") \"Derivative of specific enthalpy at temperature T\";
// algorithm
//   h_der := dT * Modelica.Media.IdealGases.Common.Functions.cp_Tlow(data, T);
// end Modelica.Media.IdealGases.Common.Functions.h_Tlow_der;
//
// function Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluate \"Evaluate polynomial at a given abscissa value\"
//   input Real[:] p \"Polynomial coefficients (p[1] is coefficient of highest power)\";
//   input Real u \"Abscissa value\";
//   output Real y \"Value of polynomial at u\";
// algorithm
//   y := p[1];
//   for j in 2:size(p, 1) loop
//     y := p[j] + u * y;
//   end for;
// end Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluate;
//
// function Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluateWithRange \"Evaluate polynomial at a given abscissa value with linear extrapolation outside of the defined range\"
//   input Real[:] p \"Polynomial coefficients (p[1] is coefficient of highest power)\";
//   input Real uMin \"Polynomial valid in the range uMin .. uMax\";
//   input Real uMax \"Polynomial valid in the range uMin .. uMax\";
//   input Real u \"Abscissa value\";
//   output Real y \"Value of polynomial at u. Outside of uMin,uMax, linear extrapolation is used\";
// algorithm
//   if u < uMin then
//     y := Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluate(p, uMin) - Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluate_der(p, uMin, uMin - u);
//   elseif u > uMax then
//     y := Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluate(p, uMax) + Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluate_der(p, uMax, u - uMax);
//   else
//     y := Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluate(p, u);
//   end if;
// end Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluateWithRange;
//
// function Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluateWithRange_der \"Evaluate derivative of polynomial at a given abscissa value with extrapolation outside of the defined range\"
//   input Real[:] p \"Polynomial coefficients (p[1] is coefficient of highest power)\";
//   input Real uMin \"Polynomial valid in the range uMin .. uMax\";
//   input Real uMax \"Polynomial valid in the range uMin .. uMax\";
//   input Real u \"Abscissa value\";
//   input Real du \"Delta of abscissa value\";
//   output Real dy \"Value of derivative of polynomial at u\";
// algorithm
//   if u < uMin then
//     dy := Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluate_der(p, uMin, du);
//   elseif u > uMax then
//     dy := Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluate_der(p, uMax, du);
//   else
//     dy := Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluate_der(p, u, du);
//   end if;
// end Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluateWithRange_der;
//
// function Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluate_der \"Evaluate derivative of polynomial at a given abscissa value\"
//   input Real[:] p \"Polynomial coefficients (p[1] is coefficient of highest power)\";
//   input Real u \"Abscissa value\";
//   input Real du \"Delta of abscissa value\";
//   output Real dy \"Value of derivative of polynomial at u\";
//   protected Integer n = size(p, 1);
// algorithm
//   dy := p[1] * /*Real*/(n - 1);
//   for j in 2:size(p, 1) - 1 loop
//     dy := p[j] * /*Real*/(n - j) + u * dy;
//   end for;
//   dy := dy * du;
// end Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluate_der;
//
// function Modelica.SIunits.Conversions.to_bar \"Convert from Pascal to bar\"
//   input Real Pa(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pascal value\";
//   output Real bar(quantity = \"Pressure\", unit = \"bar\") \"bar value\";
// algorithm
//   bar := Pa / 100000.0;
// end Modelica.SIunits.Conversions.to_bar;
//
// function Modelica.SIunits.Conversions.to_degC \"Convert from Kelvin to degCelsius\"
//   input Real Kelvin(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) \"Kelvin value\";
//   output Real Celsius(quantity = \"ThermodynamicTemperature\", unit = \"degC\") \"Celsius value\";
// algorithm
//   Celsius := Kelvin - 273.15;
// end Modelica.SIunits.Conversions.to_degC;
//
// function Modelica.Utilities.Streams.error \"Print error message and cancel all actions - in case of an unrecoverable error\"
//   input String string \"String to be printed to error message window\";
//
//   external \"C\" ModelicaError(string);
// end Modelica.Utilities.Streams.error;
//
// class Modelica.Fluid.Examples.BranchingDynamicPipes \"Multi-way connections of pipes with dynamic momentum balance, pressure wave and flow reversal\"
//   parameter Real system.p_ambient(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 101325.0;
//   parameter Real system.T_ambient(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 293.15;
//   parameter Real system.g(quantity = \"Acceleration\", unit = \"m/s2\") = 9.806649999999999;
//   final parameter Boolean system.allowFlowReversal = true;
//   final parameter enumeration(DynamicFreeInitial, FixedInitial, SteadyStateInitial, SteadyState) system.energyDynamics = Modelica.Fluid.Types.Dynamics.SteadyStateInitial;
//   final parameter enumeration(DynamicFreeInitial, FixedInitial, SteadyStateInitial, SteadyState) system.massDynamics = Modelica.Fluid.Types.Dynamics.SteadyStateInitial;
//   final parameter enumeration(DynamicFreeInitial, FixedInitial, SteadyStateInitial, SteadyState) system.substanceDynamics = Modelica.Fluid.Types.Dynamics.SteadyStateInitial;
//   final parameter enumeration(DynamicFreeInitial, FixedInitial, SteadyStateInitial, SteadyState) system.traceDynamics = Modelica.Fluid.Types.Dynamics.SteadyStateInitial;
//   final parameter enumeration(DynamicFreeInitial, FixedInitial, SteadyStateInitial, SteadyState) system.momentumDynamics = Modelica.Fluid.Types.Dynamics.SteadyStateInitial;
//   parameter Real system.m_flow_start(quantity = \"MassFlowRate\", unit = \"kg/s\") = 0.0;
//   parameter Real system.p_start(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = system.p_ambient;
//   parameter Real system.T_start(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = system.T_ambient;
//   final parameter Boolean system.use_eps_Re = false;
//   parameter Real system.m_flow_nominal(quantity = \"MassFlowRate\", unit = \"kg/s\") = 100.0 * system.m_flow_small;
//   parameter Real system.eps_m_flow(min = 0.0) = 0.0001;
//   parameter Real system.dp_small(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 1.0;
//   parameter Real system.m_flow_small(quantity = \"MassFlowRate\", unit = \"kg/s\", min = 0.0) = 0.01;
//   final parameter Integer boundary1.nPorts = 1;
//   Real boundary1.medium.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0, stateSelect = StateSelect.default);
//   Real boundary1.medium.Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = 0.01, stateSelect = StateSelect.default);
//   Real boundary1.medium.h(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   Real boundary1.medium.d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real boundary1.medium.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0, stateSelect = StateSelect.default);
//   Real boundary1.medium.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real boundary1.medium.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real boundary1.medium.u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real boundary1.medium.R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real boundary1.medium.MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real boundary1.medium.state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real boundary1.medium.state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real boundary1.medium.state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real boundary1.medium.state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean boundary1.medium.preferredMediumStates = false;
//   final parameter Boolean boundary1.medium.standardOrderComponents = true;
//   Real boundary1.medium.T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = Modelica.SIunits.Conversions.to_degC(boundary1.medium.T);
//   Real boundary1.medium.p_bar(quantity = \"Pressure\", unit = \"bar\") = Modelica.SIunits.Conversions.to_bar(boundary1.medium.p);
//   Real boundary1.medium.x_water(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real boundary1.medium.phi;
//   protected Real boundary1.medium.n1(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real boundary1.medium.n2(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real boundary1.medium.n3(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real boundary1.medium.n4(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real boundary1.medium.n5(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real boundary1.medium.n6(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real boundary1.ports[1].m_flow(quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 9.999999999999999e+59);
//   Real boundary1.ports[1].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real boundary1.ports[1].h_outflow(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
//   Real boundary1.ports[1].Xi_outflow[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected final parameter enumeration(Entering, Leaving, Bidirectional) boundary1.n7 = Modelica.Fluid.Types.PortFlowDirection.Bidirectional;
//   final parameter Boolean boundary1.use_p_in = false;
//   final parameter Boolean boundary1.use_T_in = false;
//   final parameter Boolean boundary1.use_X_in = false;
//   final parameter Boolean boundary1.use_C_in = false;
//   parameter Real boundary1.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = 150000.0;
//   parameter Real boundary1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = 293.15;
//   parameter Real boundary1.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = 0.01;
//   parameter Real boundary1.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = 0.99;
//   protected Real boundary1.n8;
//   protected Real boundary1.n9;
//   protected Real boundary1.n10[1];
//   protected Real boundary1.n10[2];
//   final parameter Boolean pipe1.allowFlowReversal = true;
//   Real pipe1.port_a.m_flow(quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0);
//   Real pipe1.port_a.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe1.port_a.h_outflow(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
//   Real pipe1.port_a.Xi_outflow[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real pipe1.port_b.m_flow(quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 9.999999999999999e+59);
//   Real pipe1.port_b.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe1.port_b.h_outflow(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
//   Real pipe1.port_b.Xi_outflow[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected final parameter Boolean pipe1.n11 = false;
//   protected final parameter Boolean pipe1.n12 = false;
//   protected parameter Boolean pipe1.n13 = true;
//   parameter Real pipe1.nParallel(min = 1.0) = 1.0;
//   final parameter Real pipe1.length(quantity = \"Length\", unit = \"m\") = 50.0;
//   parameter Boolean pipe1.isCircular = true;
//   parameter Real pipe1.diameter(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0254;
//   parameter Real pipe1.crossArea(quantity = \"Area\", unit = \"m2\") = 3.141592653589793 * pipe1.diameter * pipe1.diameter / 4.0;
//   parameter Real pipe1.perimeter(quantity = \"Length\", unit = \"m\", min = 0.0) = 3.141592653589793 * pipe1.diameter;
//   parameter Real pipe1.roughness(quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = 2.5e-05;
//   final parameter Real pipe1.V(quantity = \"Volume\", unit = \"m3\") = pipe1.crossArea * 50.0 * pipe1.nParallel;
//   final parameter Real pipe1.height_ab(quantity = \"Length\", unit = \"m\") = 50.0;
//   final parameter Integer pipe1.n = 5;
//   final Real pipe1.fluidVolumes[1](quantity = \"Volume\", unit = \"m3\");
//   final Real pipe1.fluidVolumes[2](quantity = \"Volume\", unit = \"m3\");
//   final Real pipe1.fluidVolumes[3](quantity = \"Volume\", unit = \"m3\");
//   final Real pipe1.fluidVolumes[4](quantity = \"Volume\", unit = \"m3\");
//   final Real pipe1.fluidVolumes[5](quantity = \"Volume\", unit = \"m3\");
//   final parameter enumeration(DynamicFreeInitial, FixedInitial, SteadyStateInitial, SteadyState) pipe1.energyDynamics = Modelica.Fluid.Types.Dynamics.SteadyStateInitial;
//   final parameter enumeration(DynamicFreeInitial, FixedInitial, SteadyStateInitial, SteadyState) pipe1.massDynamics = Modelica.Fluid.Types.Dynamics.SteadyStateInitial;
//   final parameter enumeration(DynamicFreeInitial, FixedInitial, SteadyStateInitial, SteadyState) pipe1.substanceDynamics = Modelica.Fluid.Types.Dynamics.SteadyStateInitial;
//   final parameter enumeration(DynamicFreeInitial, FixedInitial, SteadyStateInitial, SteadyState) pipe1.traceDynamics = Modelica.Fluid.Types.Dynamics.SteadyStateInitial;
//   parameter Real pipe1.p_a_start(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = 150000.0;
//   parameter Real pipe1.p_b_start(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = 130000.0;
//   final parameter Real pipe1.ps_start[1](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe1.p_a_start;
//   final parameter Real pipe1.ps_start[2](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe1.p_a_start + (pipe1.p_b_start - pipe1.p_a_start) / 4.0;
//   final parameter Real pipe1.ps_start[3](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe1.p_a_start + (pipe1.p_b_start - pipe1.p_a_start) * 2.0 / 4.0;
//   final parameter Real pipe1.ps_start[4](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe1.p_a_start + (pipe1.p_b_start - pipe1.p_a_start) * 3.0 / 4.0;
//   final parameter Real pipe1.ps_start[5](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe1.p_a_start + (pipe1.p_b_start - pipe1.p_a_start) * 4.0 / 4.0;
//   final parameter Boolean pipe1.use_T_start = true;
//   parameter Real pipe1.T_start(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = system.T_start;
//   parameter Real pipe1.h_start(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0) = Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.specificEnthalpy_pTX((pipe1.p_a_start + pipe1.p_b_start) / 2.0, pipe1.T_start, pipe1.X_start);
//   parameter Real pipe1.X_start[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = 0.01;
//   parameter Real pipe1.X_start[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = 0.99;
//   Real pipe1.Us[1](quantity = \"Energy\", unit = \"J\");
//   Real pipe1.Us[2](quantity = \"Energy\", unit = \"J\");
//   Real pipe1.Us[3](quantity = \"Energy\", unit = \"J\");
//   Real pipe1.Us[4](quantity = \"Energy\", unit = \"J\");
//   Real pipe1.Us[5](quantity = \"Energy\", unit = \"J\");
//   Real pipe1.ms[1](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe1.ms[2](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe1.ms[3](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe1.ms[4](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe1.ms[5](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe1.mXis[1,1](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe1.mXis[2,1](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe1.mXis[3,1](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe1.mXis[4,1](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe1.mXis[5,1](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe1.mediums[1].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = pipe1.ps_start[1], nominal = 100000.0, stateSelect = StateSelect.prefer);
//   Real pipe1.mediums[1].Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = pipe1.X_start[1], stateSelect = StateSelect.prefer);
//   Real pipe1.mediums[1].h(quantity = \"SpecificEnergy\", unit = \"J/kg\", start = pipe1.h_start);
//   Real pipe1.mediums[1].d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe1.mediums[1].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = pipe1.T_start, nominal = 300.0, stateSelect = StateSelect.prefer);
//   Real pipe1.mediums[1].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe1.mediums[1].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe1.mediums[1].u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real pipe1.mediums[1].R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real pipe1.mediums[1].MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real pipe1.mediums[1].state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe1.mediums[1].state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe1.mediums[1].state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe1.mediums[1].state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean pipe1.mediums[1].preferredMediumStates = true;
//   final parameter Boolean pipe1.mediums[1].standardOrderComponents = true;
//   Real pipe1.mediums[1].T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = Modelica.SIunits.Conversions.to_degC(pipe1.mediums[1].T);
//   Real pipe1.mediums[1].p_bar(quantity = \"Pressure\", unit = \"bar\") = Modelica.SIunits.Conversions.to_bar(pipe1.mediums[1].p);
//   Real pipe1.mediums[1].x_water(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real pipe1.mediums[1].phi;
//   protected Real pipe1.mediums[1].n14(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe1.mediums[1].n15(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe1.mediums[1].n16(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe1.mediums[1].n17(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe1.mediums[1].n18(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe1.mediums[1].n19(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe1.mediums[2].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = pipe1.ps_start[2], nominal = 100000.0, stateSelect = StateSelect.prefer);
//   Real pipe1.mediums[2].Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = pipe1.X_start[1], stateSelect = StateSelect.prefer);
//   Real pipe1.mediums[2].h(quantity = \"SpecificEnergy\", unit = \"J/kg\", start = pipe1.h_start);
//   Real pipe1.mediums[2].d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe1.mediums[2].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = pipe1.T_start, nominal = 300.0, stateSelect = StateSelect.prefer);
//   Real pipe1.mediums[2].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe1.mediums[2].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe1.mediums[2].u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real pipe1.mediums[2].R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real pipe1.mediums[2].MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real pipe1.mediums[2].state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe1.mediums[2].state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe1.mediums[2].state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe1.mediums[2].state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean pipe1.mediums[2].preferredMediumStates = true;
//   final parameter Boolean pipe1.mediums[2].standardOrderComponents = true;
//   Real pipe1.mediums[2].T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = Modelica.SIunits.Conversions.to_degC(pipe1.mediums[2].T);
//   Real pipe1.mediums[2].p_bar(quantity = \"Pressure\", unit = \"bar\") = Modelica.SIunits.Conversions.to_bar(pipe1.mediums[2].p);
//   Real pipe1.mediums[2].x_water(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real pipe1.mediums[2].phi;
//   protected Real pipe1.mediums[2].n14(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe1.mediums[2].n15(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe1.mediums[2].n16(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe1.mediums[2].n17(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe1.mediums[2].n18(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe1.mediums[2].n19(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe1.mediums[3].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = pipe1.ps_start[3], nominal = 100000.0, stateSelect = StateSelect.prefer);
//   Real pipe1.mediums[3].Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = pipe1.X_start[1], stateSelect = StateSelect.prefer);
//   Real pipe1.mediums[3].h(quantity = \"SpecificEnergy\", unit = \"J/kg\", start = pipe1.h_start);
//   Real pipe1.mediums[3].d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe1.mediums[3].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = pipe1.T_start, nominal = 300.0, stateSelect = StateSelect.prefer);
//   Real pipe1.mediums[3].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe1.mediums[3].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe1.mediums[3].u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real pipe1.mediums[3].R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real pipe1.mediums[3].MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real pipe1.mediums[3].state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe1.mediums[3].state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe1.mediums[3].state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe1.mediums[3].state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean pipe1.mediums[3].preferredMediumStates = true;
//   final parameter Boolean pipe1.mediums[3].standardOrderComponents = true;
//   Real pipe1.mediums[3].T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = Modelica.SIunits.Conversions.to_degC(pipe1.mediums[3].T);
//   Real pipe1.mediums[3].p_bar(quantity = \"Pressure\", unit = \"bar\") = Modelica.SIunits.Conversions.to_bar(pipe1.mediums[3].p);
//   Real pipe1.mediums[3].x_water(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real pipe1.mediums[3].phi;
//   protected Real pipe1.mediums[3].n14(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe1.mediums[3].n15(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe1.mediums[3].n16(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe1.mediums[3].n17(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe1.mediums[3].n18(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe1.mediums[3].n19(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe1.mediums[4].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = pipe1.ps_start[4], nominal = 100000.0, stateSelect = StateSelect.prefer);
//   Real pipe1.mediums[4].Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = pipe1.X_start[1], stateSelect = StateSelect.prefer);
//   Real pipe1.mediums[4].h(quantity = \"SpecificEnergy\", unit = \"J/kg\", start = pipe1.h_start);
//   Real pipe1.mediums[4].d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe1.mediums[4].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = pipe1.T_start, nominal = 300.0, stateSelect = StateSelect.prefer);
//   Real pipe1.mediums[4].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe1.mediums[4].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe1.mediums[4].u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real pipe1.mediums[4].R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real pipe1.mediums[4].MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real pipe1.mediums[4].state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe1.mediums[4].state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe1.mediums[4].state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe1.mediums[4].state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean pipe1.mediums[4].preferredMediumStates = true;
//   final parameter Boolean pipe1.mediums[4].standardOrderComponents = true;
//   Real pipe1.mediums[4].T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = Modelica.SIunits.Conversions.to_degC(pipe1.mediums[4].T);
//   Real pipe1.mediums[4].p_bar(quantity = \"Pressure\", unit = \"bar\") = Modelica.SIunits.Conversions.to_bar(pipe1.mediums[4].p);
//   Real pipe1.mediums[4].x_water(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real pipe1.mediums[4].phi;
//   protected Real pipe1.mediums[4].n14(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe1.mediums[4].n15(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe1.mediums[4].n16(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe1.mediums[4].n17(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe1.mediums[4].n18(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe1.mediums[4].n19(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe1.mediums[5].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = pipe1.ps_start[5], nominal = 100000.0, stateSelect = StateSelect.prefer);
//   Real pipe1.mediums[5].Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = pipe1.X_start[1], stateSelect = StateSelect.prefer);
//   Real pipe1.mediums[5].h(quantity = \"SpecificEnergy\", unit = \"J/kg\", start = pipe1.h_start);
//   Real pipe1.mediums[5].d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe1.mediums[5].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = pipe1.T_start, nominal = 300.0, stateSelect = StateSelect.prefer);
//   Real pipe1.mediums[5].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe1.mediums[5].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe1.mediums[5].u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real pipe1.mediums[5].R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real pipe1.mediums[5].MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real pipe1.mediums[5].state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe1.mediums[5].state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe1.mediums[5].state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe1.mediums[5].state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean pipe1.mediums[5].preferredMediumStates = true;
//   final parameter Boolean pipe1.mediums[5].standardOrderComponents = true;
//   Real pipe1.mediums[5].T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = Modelica.SIunits.Conversions.to_degC(pipe1.mediums[5].T);
//   Real pipe1.mediums[5].p_bar(quantity = \"Pressure\", unit = \"bar\") = Modelica.SIunits.Conversions.to_bar(pipe1.mediums[5].p);
//   Real pipe1.mediums[5].x_water(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real pipe1.mediums[5].phi;
//   protected Real pipe1.mediums[5].n14(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe1.mediums[5].n15(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe1.mediums[5].n16(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe1.mediums[5].n17(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe1.mediums[5].n18(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe1.mediums[5].n19(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe1.mb_flows[1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe1.mb_flows[2](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe1.mb_flows[3](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe1.mb_flows[4](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe1.mb_flows[5](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe1.mbXi_flows[1,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe1.mbXi_flows[2,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe1.mbXi_flows[3,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe1.mbXi_flows[4,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe1.mbXi_flows[5,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe1.Hb_flows[1](quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   Real pipe1.Hb_flows[2](quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   Real pipe1.Hb_flows[3](quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   Real pipe1.Hb_flows[4](quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   Real pipe1.Hb_flows[5](quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   Real pipe1.Qb_flows[1](quantity = \"Power\", unit = \"W\");
//   Real pipe1.Qb_flows[2](quantity = \"Power\", unit = \"W\");
//   Real pipe1.Qb_flows[3](quantity = \"Power\", unit = \"W\");
//   Real pipe1.Qb_flows[4](quantity = \"Power\", unit = \"W\");
//   Real pipe1.Qb_flows[5](quantity = \"Power\", unit = \"W\");
//   Real pipe1.Wb_flows[1](quantity = \"Power\", unit = \"W\");
//   Real pipe1.Wb_flows[2](quantity = \"Power\", unit = \"W\");
//   Real pipe1.Wb_flows[3](quantity = \"Power\", unit = \"W\");
//   Real pipe1.Wb_flows[4](quantity = \"Power\", unit = \"W\");
//   Real pipe1.Wb_flows[5](quantity = \"Power\", unit = \"W\");
//   protected final parameter Boolean pipe1.n20 = true;
//   final parameter Real pipe1.lengths[1](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter Real pipe1.lengths[2](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter Real pipe1.lengths[3](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter Real pipe1.lengths[4](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter Real pipe1.lengths[5](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter Real pipe1.crossAreas[1](quantity = \"Area\", unit = \"m2\") = pipe1.crossArea;
//   final parameter Real pipe1.crossAreas[2](quantity = \"Area\", unit = \"m2\") = pipe1.crossArea;
//   final parameter Real pipe1.crossAreas[3](quantity = \"Area\", unit = \"m2\") = pipe1.crossArea;
//   final parameter Real pipe1.crossAreas[4](quantity = \"Area\", unit = \"m2\") = pipe1.crossArea;
//   final parameter Real pipe1.crossAreas[5](quantity = \"Area\", unit = \"m2\") = pipe1.crossArea;
//   final parameter Real pipe1.dimensions[1](quantity = \"Length\", unit = \"m\") = 4.0 * pipe1.crossArea / pipe1.perimeter;
//   final parameter Real pipe1.dimensions[2](quantity = \"Length\", unit = \"m\") = 4.0 * pipe1.crossArea / pipe1.perimeter;
//   final parameter Real pipe1.dimensions[3](quantity = \"Length\", unit = \"m\") = 4.0 * pipe1.crossArea / pipe1.perimeter;
//   final parameter Real pipe1.dimensions[4](quantity = \"Length\", unit = \"m\") = 4.0 * pipe1.crossArea / pipe1.perimeter;
//   final parameter Real pipe1.dimensions[5](quantity = \"Length\", unit = \"m\") = 4.0 * pipe1.crossArea / pipe1.perimeter;
//   final parameter Real pipe1.roughnesses[1](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = pipe1.roughness;
//   final parameter Real pipe1.roughnesses[2](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = pipe1.roughness;
//   final parameter Real pipe1.roughnesses[3](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = pipe1.roughness;
//   final parameter Real pipe1.roughnesses[4](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = pipe1.roughness;
//   final parameter Real pipe1.roughnesses[5](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = pipe1.roughness;
//   final parameter Real pipe1.dheights[1](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter Real pipe1.dheights[2](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter Real pipe1.dheights[3](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter Real pipe1.dheights[4](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter Real pipe1.dheights[5](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter enumeration(DynamicFreeInitial, FixedInitial, SteadyStateInitial, SteadyState) pipe1.momentumDynamics = Modelica.Fluid.Types.Dynamics.SteadyStateInitial;
//   final parameter Real pipe1.m_flow_start(quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0) = 0.02;
//   final parameter Integer pipe1.nNodes(min = 1) = 5;
//   final parameter enumeration(av_vb, a_v_b, av_b, a_vb) pipe1.modelStructure = Modelica.Fluid.Types.ModelStructure.a_v_b;
//   final parameter Boolean pipe1.useLumpedPressure = false;
//   final parameter Integer pipe1.nFM = 6;
//   final parameter Integer pipe1.nFMDistributed = 6;
//   final parameter Integer pipe1.nFMLumped = 2;
//   final parameter Integer pipe1.iLumped = 3;
//   final parameter Boolean pipe1.useInnerPortProperties = false;
//   Real pipe1.state_a.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe1.state_a.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe1.state_a.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe1.state_a.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe1.state_b.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe1.state_b.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe1.state_b.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe1.state_b.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe1.statesFM[1].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe1.statesFM[1].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe1.statesFM[1].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe1.statesFM[1].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe1.statesFM[2].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe1.statesFM[2].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe1.statesFM[2].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe1.statesFM[2].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe1.statesFM[3].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe1.statesFM[3].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe1.statesFM[3].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe1.statesFM[3].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe1.statesFM[4].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe1.statesFM[4].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe1.statesFM[4].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe1.statesFM[4].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe1.statesFM[5].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe1.statesFM[5].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe1.statesFM[5].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe1.statesFM[5].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe1.statesFM[6].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe1.statesFM[6].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe1.statesFM[6].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe1.statesFM[6].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe1.statesFM[7].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe1.statesFM[7].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe1.statesFM[7].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe1.statesFM[7].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean pipe1.flowModel.from_dp = true;
//   final parameter Integer pipe1.flowModel.n = 7;
//   final Real pipe1.flowModel.states[1].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe1.statesFM[1].p;
//   final Real pipe1.flowModel.states[1].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe1.statesFM[1].T;
//   final Real pipe1.flowModel.states[1].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe1.flowModel.states[1].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe1.flowModel.states[2].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe1.statesFM[2].p;
//   final Real pipe1.flowModel.states[2].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe1.statesFM[2].T;
//   final Real pipe1.flowModel.states[2].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe1.flowModel.states[2].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe1.flowModel.states[3].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe1.statesFM[3].p;
//   final Real pipe1.flowModel.states[3].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe1.statesFM[3].T;
//   final Real pipe1.flowModel.states[3].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe1.flowModel.states[3].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe1.flowModel.states[4].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe1.statesFM[4].p;
//   final Real pipe1.flowModel.states[4].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe1.statesFM[4].T;
//   final Real pipe1.flowModel.states[4].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe1.flowModel.states[4].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe1.flowModel.states[5].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe1.statesFM[5].p;
//   final Real pipe1.flowModel.states[5].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe1.statesFM[5].T;
//   final Real pipe1.flowModel.states[5].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe1.flowModel.states[5].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe1.flowModel.states[6].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe1.statesFM[6].p;
//   final Real pipe1.flowModel.states[6].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe1.statesFM[6].T;
//   final Real pipe1.flowModel.states[6].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe1.flowModel.states[6].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe1.flowModel.states[7].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe1.statesFM[7].p;
//   final Real pipe1.flowModel.states[7].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe1.statesFM[7].T;
//   final Real pipe1.flowModel.states[7].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe1.flowModel.states[7].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe1.flowModel.vs[1](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe1.flowModel.vs[2](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe1.flowModel.vs[3](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe1.flowModel.vs[4](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe1.flowModel.vs[5](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe1.flowModel.vs[6](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe1.flowModel.vs[7](quantity = \"Velocity\", unit = \"m/s\");
//   final parameter Real pipe1.flowModel.nParallel = pipe1.nParallel;
//   final Real pipe1.flowModel.crossAreas[1](quantity = \"Area\", unit = \"m2\");
//   final Real pipe1.flowModel.crossAreas[2](quantity = \"Area\", unit = \"m2\");
//   final Real pipe1.flowModel.crossAreas[3](quantity = \"Area\", unit = \"m2\");
//   final Real pipe1.flowModel.crossAreas[4](quantity = \"Area\", unit = \"m2\");
//   final Real pipe1.flowModel.crossAreas[5](quantity = \"Area\", unit = \"m2\");
//   final Real pipe1.flowModel.crossAreas[6](quantity = \"Area\", unit = \"m2\");
//   final Real pipe1.flowModel.crossAreas[7](quantity = \"Area\", unit = \"m2\");
//   final Real pipe1.flowModel.dimensions[1](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.flowModel.dimensions[2](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.flowModel.dimensions[3](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.flowModel.dimensions[4](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.flowModel.dimensions[5](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.flowModel.dimensions[6](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.flowModel.dimensions[7](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.flowModel.roughnesses[1](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe1.flowModel.roughnesses[2](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe1.flowModel.roughnesses[3](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe1.flowModel.roughnesses[4](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe1.flowModel.roughnesses[5](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe1.flowModel.roughnesses[6](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe1.flowModel.roughnesses[7](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe1.flowModel.dheights[1](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.flowModel.dheights[2](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.flowModel.dheights[3](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.flowModel.dheights[4](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.flowModel.dheights[5](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.flowModel.dheights[6](quantity = \"Length\", unit = \"m\");
//   final parameter Real pipe1.flowModel.g(quantity = \"Acceleration\", unit = \"m/s2\") = system.g;
//   final parameter Boolean pipe1.flowModel.allowFlowReversal = true;
//   final parameter enumeration(DynamicFreeInitial, FixedInitial, SteadyStateInitial, SteadyState) pipe1.flowModel.momentumDynamics = Modelica.Fluid.Types.Dynamics.SteadyStateInitial;
//   final parameter Real pipe1.flowModel.m_flow_start(quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0) = 0.02;
//   final parameter Real pipe1.flowModel.p_a_start(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe1.p_a_start;
//   final parameter Real pipe1.flowModel.p_b_start(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe1.p_b_start;
//   final parameter Integer pipe1.flowModel.m = 6;
//   final Real pipe1.flowModel.pathLengths[1](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.flowModel.pathLengths[2](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.flowModel.pathLengths[3](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.flowModel.pathLengths[4](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.flowModel.pathLengths[5](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.flowModel.pathLengths[6](quantity = \"Length\", unit = \"m\");
//   Real pipe1.flowModel.m_flows[1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.02, stateSelect = StateSelect.prefer);
//   Real pipe1.flowModel.m_flows[2](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.02, stateSelect = StateSelect.prefer);
//   Real pipe1.flowModel.m_flows[3](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.02, stateSelect = StateSelect.prefer);
//   Real pipe1.flowModel.m_flows[4](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.02, stateSelect = StateSelect.prefer);
//   Real pipe1.flowModel.m_flows[5](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.02, stateSelect = StateSelect.prefer);
//   Real pipe1.flowModel.m_flows[6](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.02, stateSelect = StateSelect.prefer);
//   Real pipe1.flowModel.Is[1](quantity = \"Momentum\", unit = \"kg.m/s\");
//   Real pipe1.flowModel.Is[2](quantity = \"Momentum\", unit = \"kg.m/s\");
//   Real pipe1.flowModel.Is[3](quantity = \"Momentum\", unit = \"kg.m/s\");
//   Real pipe1.flowModel.Is[4](quantity = \"Momentum\", unit = \"kg.m/s\");
//   Real pipe1.flowModel.Is[5](quantity = \"Momentum\", unit = \"kg.m/s\");
//   Real pipe1.flowModel.Is[6](quantity = \"Momentum\", unit = \"kg.m/s\");
//   Real pipe1.flowModel.Ib_flows[1](quantity = \"Force\", unit = \"N\");
//   Real pipe1.flowModel.Ib_flows[2](quantity = \"Force\", unit = \"N\");
//   Real pipe1.flowModel.Ib_flows[3](quantity = \"Force\", unit = \"N\");
//   Real pipe1.flowModel.Ib_flows[4](quantity = \"Force\", unit = \"N\");
//   Real pipe1.flowModel.Ib_flows[5](quantity = \"Force\", unit = \"N\");
//   Real pipe1.flowModel.Ib_flows[6](quantity = \"Force\", unit = \"N\");
//   Real pipe1.flowModel.Fs_p[1](quantity = \"Force\", unit = \"N\");
//   Real pipe1.flowModel.Fs_p[2](quantity = \"Force\", unit = \"N\");
//   Real pipe1.flowModel.Fs_p[3](quantity = \"Force\", unit = \"N\");
//   Real pipe1.flowModel.Fs_p[4](quantity = \"Force\", unit = \"N\");
//   Real pipe1.flowModel.Fs_p[5](quantity = \"Force\", unit = \"N\");
//   Real pipe1.flowModel.Fs_p[6](quantity = \"Force\", unit = \"N\");
//   Real pipe1.flowModel.Fs_fg[1](quantity = \"Force\", unit = \"N\");
//   Real pipe1.flowModel.Fs_fg[2](quantity = \"Force\", unit = \"N\");
//   Real pipe1.flowModel.Fs_fg[3](quantity = \"Force\", unit = \"N\");
//   Real pipe1.flowModel.Fs_fg[4](quantity = \"Force\", unit = \"N\");
//   Real pipe1.flowModel.Fs_fg[5](quantity = \"Force\", unit = \"N\");
//   Real pipe1.flowModel.Fs_fg[6](quantity = \"Force\", unit = \"N\");
//   final parameter Boolean pipe1.flowModel.useUpstreamScheme = true;
//   final parameter Boolean pipe1.flowModel.use_Ib_flows = true;
//   Real pipe1.flowModel.rhos[1](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe1.flowModel.rhos[2](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe1.flowModel.rhos[3](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe1.flowModel.rhos[4](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe1.flowModel.rhos[5](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe1.flowModel.rhos[6](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe1.flowModel.rhos[7](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe1.flowModel.rhos_act[1](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe1.flowModel.rhos_act[2](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe1.flowModel.rhos_act[3](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe1.flowModel.rhos_act[4](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe1.flowModel.rhos_act[5](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe1.flowModel.rhos_act[6](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe1.flowModel.mus[1](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe1.flowModel.mus[2](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe1.flowModel.mus[3](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe1.flowModel.mus[4](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe1.flowModel.mus[5](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe1.flowModel.mus[6](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe1.flowModel.mus[7](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe1.flowModel.mus_act[1](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe1.flowModel.mus_act[2](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe1.flowModel.mus_act[3](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe1.flowModel.mus_act[4](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe1.flowModel.mus_act[5](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe1.flowModel.mus_act[6](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe1.flowModel.dps_fg[1](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", start = (pipe1.flowModel.p_a_start - pipe1.flowModel.p_b_start) / 6.0);
//   Real pipe1.flowModel.dps_fg[2](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", start = (pipe1.flowModel.p_a_start - pipe1.flowModel.p_b_start) / 6.0);
//   Real pipe1.flowModel.dps_fg[3](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", start = (pipe1.flowModel.p_a_start - pipe1.flowModel.p_b_start) / 6.0);
//   Real pipe1.flowModel.dps_fg[4](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", start = (pipe1.flowModel.p_a_start - pipe1.flowModel.p_b_start) / 6.0);
//   Real pipe1.flowModel.dps_fg[5](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", start = (pipe1.flowModel.p_a_start - pipe1.flowModel.p_b_start) / 6.0);
//   Real pipe1.flowModel.dps_fg[6](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", start = (pipe1.flowModel.p_a_start - pipe1.flowModel.p_b_start) / 6.0);
//   final parameter Real pipe1.flowModel.Re_turbulent(quantity = \"ReynoldsNumber\", unit = \"1\") = 4000.0;
//   final parameter Boolean pipe1.flowModel.show_Res = false;
//   protected final parameter Boolean pipe1.flowModel.n21 = false;
//   protected parameter Real pipe1.flowModel.n22(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 1.196838693581092;
//   protected final parameter Boolean pipe1.flowModel.n23 = false;
//   protected parameter Real pipe1.flowModel.n24(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0) = 1.823286547365138e-05;
//   Real pipe1.flowModel.pathLengths_internal[1](quantity = \"Length\", unit = \"m\");
//   Real pipe1.flowModel.pathLengths_internal[2](quantity = \"Length\", unit = \"m\");
//   Real pipe1.flowModel.pathLengths_internal[3](quantity = \"Length\", unit = \"m\");
//   Real pipe1.flowModel.pathLengths_internal[4](quantity = \"Length\", unit = \"m\");
//   Real pipe1.flowModel.pathLengths_internal[5](quantity = \"Length\", unit = \"m\");
//   Real pipe1.flowModel.pathLengths_internal[6](quantity = \"Length\", unit = \"m\");
//   Real pipe1.flowModel.Res_turbulent_internal[1](quantity = \"ReynoldsNumber\", unit = \"1\");
//   Real pipe1.flowModel.Res_turbulent_internal[2](quantity = \"ReynoldsNumber\", unit = \"1\");
//   Real pipe1.flowModel.Res_turbulent_internal[3](quantity = \"ReynoldsNumber\", unit = \"1\");
//   Real pipe1.flowModel.Res_turbulent_internal[4](quantity = \"ReynoldsNumber\", unit = \"1\");
//   Real pipe1.flowModel.Res_turbulent_internal[5](quantity = \"ReynoldsNumber\", unit = \"1\");
//   Real pipe1.flowModel.Res_turbulent_internal[6](quantity = \"ReynoldsNumber\", unit = \"1\");
//   parameter Real pipe1.flowModel.dp_nominal(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = 1.0, fixed = false, nominal = 100000.0);
//   parameter Real pipe1.flowModel.m_flow_nominal(quantity = \"MassFlowRate\", unit = \"kg/s\") = 100.0 * pipe1.flowModel.m_flow_small;
//   parameter Real pipe1.flowModel.m_flow_small(quantity = \"MassFlowRate\", unit = \"kg/s\") = system.m_flow_small;
//   protected parameter Real pipe1.flowModel.n25(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = 1.0, fixed = false, nominal = 100000.0);
//   protected final parameter Boolean pipe1.flowModel.n26 = false;
//   protected final parameter Boolean pipe1.flowModel.n27 = false;
//   protected Real pipe1.flowModel.n28[1](quantity = \"Length\", unit = \"m\");
//   protected Real pipe1.flowModel.n28[2](quantity = \"Length\", unit = \"m\");
//   protected Real pipe1.flowModel.n28[3](quantity = \"Length\", unit = \"m\");
//   protected Real pipe1.flowModel.n28[4](quantity = \"Length\", unit = \"m\");
//   protected Real pipe1.flowModel.n28[5](quantity = \"Length\", unit = \"m\");
//   protected Real pipe1.flowModel.n28[6](quantity = \"Length\", unit = \"m\");
//   protected Real pipe1.flowModel.n29(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.flowModel.WallFriction.pressureLoss_m_flow(pipe1.flowModel.m_flow_nominal / pipe1.flowModel.nParallel, pipe1.flowModel.n22, pipe1.flowModel.n22, pipe1.flowModel.n24, pipe1.flowModel.n24, pipe1.flowModel.pathLengths_internal[1], pipe1.flowModel.n28[1], (pipe1.flowModel.crossAreas[1] + pipe1.flowModel.crossAreas[2]) / 2.0, (pipe1.flowModel.roughnesses[1] + pipe1.flowModel.roughnesses[2]) / 2.0, pipe1.flowModel.m_flow_small / pipe1.flowModel.nParallel, pipe1.flowModel.Res_turbulent_internal[1]) + Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.flowModel.WallFriction.pressureLoss_m_flow(pipe1.flowModel.m_flow_nominal / pipe1.flowModel.nParallel, pipe1.flowModel.n22, pipe1.flowModel.n22, pipe1.flowModel.n24, pipe1.flowModel.n24, pipe1.flowModel.pathLengths_internal[2], pipe1.flowModel.n28[2], (pipe1.flowModel.crossAreas[2] + pipe1.flowModel.crossAreas[3]) / 2.0, (pipe1.flowModel.roughnesses[2] + pipe1.flowModel.roughnesses[3]) / 2.0, pipe1.flowModel.m_flow_small / pipe1.flowModel.nParallel, pipe1.flowModel.Res_turbulent_internal[2]) + Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.flowModel.WallFriction.pressureLoss_m_flow(pipe1.flowModel.m_flow_nominal / pipe1.flowModel.nParallel, pipe1.flowModel.n22, pipe1.flowModel.n22, pipe1.flowModel.n24, pipe1.flowModel.n24, pipe1.flowModel.pathLengths_internal[3], pipe1.flowModel.n28[3], (pipe1.flowModel.crossAreas[3] + pipe1.flowModel.crossAreas[4]) / 2.0, (pipe1.flowModel.roughnesses[3] + pipe1.flowModel.roughnesses[4]) / 2.0, pipe1.flowModel.m_flow_small / pipe1.flowModel.nParallel, pipe1.flowModel.Res_turbulent_internal[3]) + Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.flowModel.WallFriction.pressureLoss_m_flow(pipe1.flowModel.m_flow_nominal / pipe1.flowModel.nParallel, pipe1.flowModel.n22, pipe1.flowModel.n22, pipe1.flowModel.n24, pipe1.flowModel.n24, pipe1.flowModel.pathLengths_internal[4], pipe1.flowModel.n28[4], (pipe1.flowModel.crossAreas[4] + pipe1.flowModel.crossAreas[5]) / 2.0, (pipe1.flowModel.roughnesses[4] + pipe1.flowModel.roughnesses[5]) / 2.0, pipe1.flowModel.m_flow_small / pipe1.flowModel.nParallel, pipe1.flowModel.Res_turbulent_internal[4]) + Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.flowModel.WallFriction.pressureLoss_m_flow(pipe1.flowModel.m_flow_nominal / pipe1.flowModel.nParallel, pipe1.flowModel.n22, pipe1.flowModel.n22, pipe1.flowModel.n24, pipe1.flowModel.n24, pipe1.flowModel.pathLengths_internal[5], pipe1.flowModel.n28[5], (pipe1.flowModel.crossAreas[5] + pipe1.flowModel.crossAreas[6]) / 2.0, (pipe1.flowModel.roughnesses[5] + pipe1.flowModel.roughnesses[6]) / 2.0, pipe1.flowModel.m_flow_small / pipe1.flowModel.nParallel, pipe1.flowModel.Res_turbulent_internal[5]) + Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.flowModel.WallFriction.pressureLoss_m_flow(pipe1.flowModel.m_flow_nominal / pipe1.flowModel.nParallel, pipe1.flowModel.n22, pipe1.flowModel.n22, pipe1.flowModel.n24, pipe1.flowModel.n24, pipe1.flowModel.pathLengths_internal[6], pipe1.flowModel.n28[6], (pipe1.flowModel.crossAreas[6] + pipe1.flowModel.crossAreas[7]) / 2.0, (pipe1.flowModel.roughnesses[6] + pipe1.flowModel.roughnesses[7]) / 2.0, pipe1.flowModel.m_flow_small / pipe1.flowModel.nParallel, pipe1.flowModel.Res_turbulent_internal[6]);
//   Real pipe1.m_flows[1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.02);
//   Real pipe1.m_flows[2](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.02);
//   Real pipe1.m_flows[3](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.02);
//   Real pipe1.m_flows[4](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.02);
//   Real pipe1.m_flows[5](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.02);
//   Real pipe1.m_flows[6](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.02);
//   Real pipe1.mXi_flows[1,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe1.mXi_flows[2,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe1.mXi_flows[3,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe1.mXi_flows[4,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe1.mXi_flows[5,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe1.mXi_flows[6,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe1.H_flows[1](quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0);
//   Real pipe1.H_flows[2](quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0);
//   Real pipe1.H_flows[3](quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0);
//   Real pipe1.H_flows[4](quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0);
//   Real pipe1.H_flows[5](quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0);
//   Real pipe1.H_flows[6](quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0);
//   Real pipe1.vs[1](quantity = \"Velocity\", unit = \"m/s\");
//   Real pipe1.vs[2](quantity = \"Velocity\", unit = \"m/s\");
//   Real pipe1.vs[3](quantity = \"Velocity\", unit = \"m/s\");
//   Real pipe1.vs[4](quantity = \"Velocity\", unit = \"m/s\");
//   Real pipe1.vs[5](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real pipe1.n30[1](quantity = \"Length\", unit = \"m\");
//   protected Real pipe1.n30[2](quantity = \"Length\", unit = \"m\");
//   protected Real pipe1.n30[3](quantity = \"Length\", unit = \"m\");
//   protected Real pipe1.n30[4](quantity = \"Length\", unit = \"m\");
//   protected Real pipe1.n30[5](quantity = \"Length\", unit = \"m\");
//   protected Real pipe1.n30[6](quantity = \"Length\", unit = \"m\");
//   protected Real pipe1.n31[1](quantity = \"Length\", unit = \"m\");
//   protected Real pipe1.n31[2](quantity = \"Length\", unit = \"m\");
//   protected Real pipe1.n31[3](quantity = \"Length\", unit = \"m\");
//   protected Real pipe1.n31[4](quantity = \"Length\", unit = \"m\");
//   protected Real pipe1.n31[5](quantity = \"Length\", unit = \"m\");
//   protected Real pipe1.n31[6](quantity = \"Length\", unit = \"m\");
//   protected Real pipe1.n32[1](quantity = \"Area\", unit = \"m2\");
//   protected Real pipe1.n32[2](quantity = \"Area\", unit = \"m2\");
//   protected Real pipe1.n32[3](quantity = \"Area\", unit = \"m2\");
//   protected Real pipe1.n32[4](quantity = \"Area\", unit = \"m2\");
//   protected Real pipe1.n32[5](quantity = \"Area\", unit = \"m2\");
//   protected Real pipe1.n32[6](quantity = \"Area\", unit = \"m2\");
//   protected Real pipe1.n32[7](quantity = \"Area\", unit = \"m2\");
//   protected Real pipe1.n33[1](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real pipe1.n33[2](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real pipe1.n33[3](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real pipe1.n33[4](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real pipe1.n33[5](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real pipe1.n33[6](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real pipe1.n33[7](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real pipe1.n34[1](quantity = \"Length\", unit = \"m\");
//   protected Real pipe1.n34[2](quantity = \"Length\", unit = \"m\");
//   protected Real pipe1.n34[3](quantity = \"Length\", unit = \"m\");
//   protected Real pipe1.n34[4](quantity = \"Length\", unit = \"m\");
//   protected Real pipe1.n34[5](quantity = \"Length\", unit = \"m\");
//   protected Real pipe1.n34[6](quantity = \"Length\", unit = \"m\");
//   protected Real pipe1.n34[7](quantity = \"Length\", unit = \"m\");
//   protected Real pipe1.n35[1](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   protected Real pipe1.n35[2](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   protected Real pipe1.n35[3](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   protected Real pipe1.n35[4](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   protected Real pipe1.n35[5](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   protected Real pipe1.n35[6](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   protected Real pipe1.n35[7](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final parameter Boolean pipe1.use_HeatTransfer = false;
//   final parameter Integer pipe1.heatTransfer.n = 5;
//   final Real pipe1.heatTransfer.states[1].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe1.mediums[1].state.p;
//   final Real pipe1.heatTransfer.states[1].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe1.mediums[1].state.T;
//   final Real pipe1.heatTransfer.states[1].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe1.heatTransfer.states[1].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe1.heatTransfer.states[2].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe1.mediums[2].state.p;
//   final Real pipe1.heatTransfer.states[2].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe1.mediums[2].state.T;
//   final Real pipe1.heatTransfer.states[2].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe1.heatTransfer.states[2].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe1.heatTransfer.states[3].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe1.mediums[3].state.p;
//   final Real pipe1.heatTransfer.states[3].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe1.mediums[3].state.T;
//   final Real pipe1.heatTransfer.states[3].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe1.heatTransfer.states[3].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe1.heatTransfer.states[4].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe1.mediums[4].state.p;
//   final Real pipe1.heatTransfer.states[4].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe1.mediums[4].state.T;
//   final Real pipe1.heatTransfer.states[4].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe1.heatTransfer.states[4].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe1.heatTransfer.states[5].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe1.mediums[5].state.p;
//   final Real pipe1.heatTransfer.states[5].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe1.mediums[5].state.T;
//   final Real pipe1.heatTransfer.states[5].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe1.heatTransfer.states[5].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe1.heatTransfer.surfaceAreas[1](quantity = \"Area\", unit = \"m2\");
//   final Real pipe1.heatTransfer.surfaceAreas[2](quantity = \"Area\", unit = \"m2\");
//   final Real pipe1.heatTransfer.surfaceAreas[3](quantity = \"Area\", unit = \"m2\");
//   final Real pipe1.heatTransfer.surfaceAreas[4](quantity = \"Area\", unit = \"m2\");
//   final Real pipe1.heatTransfer.surfaceAreas[5](quantity = \"Area\", unit = \"m2\");
//   Real pipe1.heatTransfer.Q_flows[1](quantity = \"Power\", unit = \"W\");
//   Real pipe1.heatTransfer.Q_flows[2](quantity = \"Power\", unit = \"W\");
//   Real pipe1.heatTransfer.Q_flows[3](quantity = \"Power\", unit = \"W\");
//   Real pipe1.heatTransfer.Q_flows[4](quantity = \"Power\", unit = \"W\");
//   Real pipe1.heatTransfer.Q_flows[5](quantity = \"Power\", unit = \"W\");
//   final parameter Boolean pipe1.heatTransfer.use_k = false;
//   final parameter Real pipe1.heatTransfer.k(quantity = \"CoefficientOfHeatTransfer\", unit = \"W/(m2.K)\") = 0.0;
//   parameter Real pipe1.heatTransfer.T_ambient(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = system.T_ambient;
//   Real pipe1.heatTransfer.heatPorts[1].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe1.heatTransfer.heatPorts[1].Q_flow(quantity = \"Power\", unit = \"W\");
//   Real pipe1.heatTransfer.heatPorts[2].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe1.heatTransfer.heatPorts[2].Q_flow(quantity = \"Power\", unit = \"W\");
//   Real pipe1.heatTransfer.heatPorts[3].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe1.heatTransfer.heatPorts[3].Q_flow(quantity = \"Power\", unit = \"W\");
//   Real pipe1.heatTransfer.heatPorts[4].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe1.heatTransfer.heatPorts[4].Q_flow(quantity = \"Power\", unit = \"W\");
//   Real pipe1.heatTransfer.heatPorts[5].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe1.heatTransfer.heatPorts[5].Q_flow(quantity = \"Power\", unit = \"W\");
//   Real pipe1.heatTransfer.Ts[1](quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe1.heatTransfer.Ts[2](quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe1.heatTransfer.Ts[3](quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe1.heatTransfer.Ts[4](quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe1.heatTransfer.Ts[5](quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   final Real pipe1.heatTransfer.vs[1](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe1.heatTransfer.vs[2](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe1.heatTransfer.vs[3](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe1.heatTransfer.vs[4](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe1.heatTransfer.vs[5](quantity = \"Velocity\", unit = \"m/s\");
//   final parameter Real pipe1.heatTransfer.nParallel = pipe1.nParallel;
//   final Real pipe1.heatTransfer.lengths[1](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.heatTransfer.lengths[2](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.heatTransfer.lengths[3](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.heatTransfer.lengths[4](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.heatTransfer.lengths[5](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.heatTransfer.dimensions[1](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.heatTransfer.dimensions[2](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.heatTransfer.dimensions[3](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.heatTransfer.dimensions[4](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.heatTransfer.dimensions[5](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.heatTransfer.roughnesses[1](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe1.heatTransfer.roughnesses[2](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe1.heatTransfer.roughnesses[3](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe1.heatTransfer.roughnesses[4](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe1.heatTransfer.roughnesses[5](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final parameter Real pipe1.dxs[1] = 0.2;
//   final parameter Real pipe1.dxs[2] = 0.2;
//   final parameter Real pipe1.dxs[3] = 0.2;
//   final parameter Real pipe1.dxs[4] = 0.2;
//   final parameter Real pipe1.dxs[5] = 0.2;
//   final parameter Boolean pipe2.allowFlowReversal = true;
//   Real pipe2.port_a.m_flow(quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0);
//   Real pipe2.port_a.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe2.port_a.h_outflow(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
//   Real pipe2.port_a.Xi_outflow[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real pipe2.port_b.m_flow(quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 9.999999999999999e+59);
//   Real pipe2.port_b.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe2.port_b.h_outflow(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
//   Real pipe2.port_b.Xi_outflow[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected final parameter Boolean pipe2.n36 = true;
//   protected final parameter Boolean pipe2.n37 = true;
//   protected parameter Boolean pipe2.n38 = true;
//   parameter Real pipe2.nParallel(min = 1.0) = 1.0;
//   final parameter Real pipe2.length(quantity = \"Length\", unit = \"m\") = 50.0;
//   parameter Boolean pipe2.isCircular = true;
//   parameter Real pipe2.diameter(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0254;
//   parameter Real pipe2.crossArea(quantity = \"Area\", unit = \"m2\") = 3.141592653589793 * pipe2.diameter * pipe2.diameter / 4.0;
//   parameter Real pipe2.perimeter(quantity = \"Length\", unit = \"m\", min = 0.0) = 3.141592653589793 * pipe2.diameter;
//   parameter Real pipe2.roughness(quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = 2.5e-05;
//   final parameter Real pipe2.V(quantity = \"Volume\", unit = \"m3\") = pipe2.crossArea * 50.0 * pipe2.nParallel;
//   final parameter Real pipe2.height_ab(quantity = \"Length\", unit = \"m\") = 25.0;
//   final parameter Integer pipe2.n = 5;
//   final Real pipe2.fluidVolumes[1](quantity = \"Volume\", unit = \"m3\");
//   final Real pipe2.fluidVolumes[2](quantity = \"Volume\", unit = \"m3\");
//   final Real pipe2.fluidVolumes[3](quantity = \"Volume\", unit = \"m3\");
//   final Real pipe2.fluidVolumes[4](quantity = \"Volume\", unit = \"m3\");
//   final Real pipe2.fluidVolumes[5](quantity = \"Volume\", unit = \"m3\");
//   final parameter enumeration(DynamicFreeInitial, FixedInitial, SteadyStateInitial, SteadyState) pipe2.energyDynamics = Modelica.Fluid.Types.Dynamics.SteadyStateInitial;
//   final parameter enumeration(DynamicFreeInitial, FixedInitial, SteadyStateInitial, SteadyState) pipe2.massDynamics = Modelica.Fluid.Types.Dynamics.SteadyStateInitial;
//   final parameter enumeration(DynamicFreeInitial, FixedInitial, SteadyStateInitial, SteadyState) pipe2.substanceDynamics = Modelica.Fluid.Types.Dynamics.SteadyStateInitial;
//   final parameter enumeration(DynamicFreeInitial, FixedInitial, SteadyStateInitial, SteadyState) pipe2.traceDynamics = Modelica.Fluid.Types.Dynamics.SteadyStateInitial;
//   parameter Real pipe2.p_a_start(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = 130000.0;
//   parameter Real pipe2.p_b_start(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = 120000.0;
//   final parameter Real pipe2.ps_start[1](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe2.p_a_start;
//   final parameter Real pipe2.ps_start[2](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe2.p_a_start + (pipe2.p_b_start - pipe2.p_a_start) / 4.0;
//   final parameter Real pipe2.ps_start[3](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe2.p_a_start + (pipe2.p_b_start - pipe2.p_a_start) * 2.0 / 4.0;
//   final parameter Real pipe2.ps_start[4](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe2.p_a_start + (pipe2.p_b_start - pipe2.p_a_start) * 3.0 / 4.0;
//   final parameter Real pipe2.ps_start[5](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe2.p_a_start + (pipe2.p_b_start - pipe2.p_a_start) * 4.0 / 4.0;
//   final parameter Boolean pipe2.use_T_start = true;
//   parameter Real pipe2.T_start(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = system.T_start;
//   parameter Real pipe2.h_start(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0) = Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.specificEnthalpy_pTX((pipe2.p_a_start + pipe2.p_b_start) / 2.0, pipe2.T_start, pipe2.X_start);
//   parameter Real pipe2.X_start[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = 0.01;
//   parameter Real pipe2.X_start[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = 0.99;
//   Real pipe2.Us[1](quantity = \"Energy\", unit = \"J\");
//   Real pipe2.Us[2](quantity = \"Energy\", unit = \"J\");
//   Real pipe2.Us[3](quantity = \"Energy\", unit = \"J\");
//   Real pipe2.Us[4](quantity = \"Energy\", unit = \"J\");
//   Real pipe2.Us[5](quantity = \"Energy\", unit = \"J\");
//   Real pipe2.ms[1](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe2.ms[2](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe2.ms[3](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe2.ms[4](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe2.ms[5](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe2.mXis[1,1](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe2.mXis[2,1](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe2.mXis[3,1](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe2.mXis[4,1](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe2.mXis[5,1](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe2.mediums[1].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = pipe2.ps_start[1], nominal = 100000.0, stateSelect = StateSelect.prefer);
//   Real pipe2.mediums[1].Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = pipe2.X_start[1], stateSelect = StateSelect.prefer);
//   Real pipe2.mediums[1].h(quantity = \"SpecificEnergy\", unit = \"J/kg\", start = pipe2.h_start);
//   Real pipe2.mediums[1].d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe2.mediums[1].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = pipe2.T_start, nominal = 300.0, stateSelect = StateSelect.prefer);
//   Real pipe2.mediums[1].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe2.mediums[1].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe2.mediums[1].u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real pipe2.mediums[1].R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real pipe2.mediums[1].MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real pipe2.mediums[1].state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe2.mediums[1].state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe2.mediums[1].state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe2.mediums[1].state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean pipe2.mediums[1].preferredMediumStates = true;
//   final parameter Boolean pipe2.mediums[1].standardOrderComponents = true;
//   Real pipe2.mediums[1].T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = Modelica.SIunits.Conversions.to_degC(pipe2.mediums[1].T);
//   Real pipe2.mediums[1].p_bar(quantity = \"Pressure\", unit = \"bar\") = Modelica.SIunits.Conversions.to_bar(pipe2.mediums[1].p);
//   Real pipe2.mediums[1].x_water(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real pipe2.mediums[1].phi;
//   protected Real pipe2.mediums[1].n39(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe2.mediums[1].n40(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe2.mediums[1].n41(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe2.mediums[1].n42(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe2.mediums[1].n43(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe2.mediums[1].n44(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe2.mediums[2].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = pipe2.ps_start[2], nominal = 100000.0, stateSelect = StateSelect.prefer);
//   Real pipe2.mediums[2].Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = pipe2.X_start[1], stateSelect = StateSelect.prefer);
//   Real pipe2.mediums[2].h(quantity = \"SpecificEnergy\", unit = \"J/kg\", start = pipe2.h_start);
//   Real pipe2.mediums[2].d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe2.mediums[2].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = pipe2.T_start, nominal = 300.0, stateSelect = StateSelect.prefer);
//   Real pipe2.mediums[2].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe2.mediums[2].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe2.mediums[2].u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real pipe2.mediums[2].R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real pipe2.mediums[2].MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real pipe2.mediums[2].state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe2.mediums[2].state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe2.mediums[2].state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe2.mediums[2].state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean pipe2.mediums[2].preferredMediumStates = true;
//   final parameter Boolean pipe2.mediums[2].standardOrderComponents = true;
//   Real pipe2.mediums[2].T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = Modelica.SIunits.Conversions.to_degC(pipe2.mediums[2].T);
//   Real pipe2.mediums[2].p_bar(quantity = \"Pressure\", unit = \"bar\") = Modelica.SIunits.Conversions.to_bar(pipe2.mediums[2].p);
//   Real pipe2.mediums[2].x_water(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real pipe2.mediums[2].phi;
//   protected Real pipe2.mediums[2].n39(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe2.mediums[2].n40(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe2.mediums[2].n41(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe2.mediums[2].n42(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe2.mediums[2].n43(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe2.mediums[2].n44(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe2.mediums[3].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = pipe2.ps_start[3], nominal = 100000.0, stateSelect = StateSelect.prefer);
//   Real pipe2.mediums[3].Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = pipe2.X_start[1], stateSelect = StateSelect.prefer);
//   Real pipe2.mediums[3].h(quantity = \"SpecificEnergy\", unit = \"J/kg\", start = pipe2.h_start);
//   Real pipe2.mediums[3].d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe2.mediums[3].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = pipe2.T_start, nominal = 300.0, stateSelect = StateSelect.prefer);
//   Real pipe2.mediums[3].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe2.mediums[3].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe2.mediums[3].u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real pipe2.mediums[3].R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real pipe2.mediums[3].MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real pipe2.mediums[3].state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe2.mediums[3].state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe2.mediums[3].state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe2.mediums[3].state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean pipe2.mediums[3].preferredMediumStates = true;
//   final parameter Boolean pipe2.mediums[3].standardOrderComponents = true;
//   Real pipe2.mediums[3].T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = Modelica.SIunits.Conversions.to_degC(pipe2.mediums[3].T);
//   Real pipe2.mediums[3].p_bar(quantity = \"Pressure\", unit = \"bar\") = Modelica.SIunits.Conversions.to_bar(pipe2.mediums[3].p);
//   Real pipe2.mediums[3].x_water(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real pipe2.mediums[3].phi;
//   protected Real pipe2.mediums[3].n39(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe2.mediums[3].n40(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe2.mediums[3].n41(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe2.mediums[3].n42(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe2.mediums[3].n43(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe2.mediums[3].n44(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe2.mediums[4].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = pipe2.ps_start[4], nominal = 100000.0, stateSelect = StateSelect.prefer);
//   Real pipe2.mediums[4].Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = pipe2.X_start[1], stateSelect = StateSelect.prefer);
//   Real pipe2.mediums[4].h(quantity = \"SpecificEnergy\", unit = \"J/kg\", start = pipe2.h_start);
//   Real pipe2.mediums[4].d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe2.mediums[4].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = pipe2.T_start, nominal = 300.0, stateSelect = StateSelect.prefer);
//   Real pipe2.mediums[4].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe2.mediums[4].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe2.mediums[4].u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real pipe2.mediums[4].R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real pipe2.mediums[4].MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real pipe2.mediums[4].state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe2.mediums[4].state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe2.mediums[4].state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe2.mediums[4].state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean pipe2.mediums[4].preferredMediumStates = true;
//   final parameter Boolean pipe2.mediums[4].standardOrderComponents = true;
//   Real pipe2.mediums[4].T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = Modelica.SIunits.Conversions.to_degC(pipe2.mediums[4].T);
//   Real pipe2.mediums[4].p_bar(quantity = \"Pressure\", unit = \"bar\") = Modelica.SIunits.Conversions.to_bar(pipe2.mediums[4].p);
//   Real pipe2.mediums[4].x_water(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real pipe2.mediums[4].phi;
//   protected Real pipe2.mediums[4].n39(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe2.mediums[4].n40(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe2.mediums[4].n41(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe2.mediums[4].n42(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe2.mediums[4].n43(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe2.mediums[4].n44(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe2.mediums[5].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = pipe2.ps_start[5], nominal = 100000.0, stateSelect = StateSelect.prefer);
//   Real pipe2.mediums[5].Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = pipe2.X_start[1], stateSelect = StateSelect.prefer);
//   Real pipe2.mediums[5].h(quantity = \"SpecificEnergy\", unit = \"J/kg\", start = pipe2.h_start);
//   Real pipe2.mediums[5].d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe2.mediums[5].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = pipe2.T_start, nominal = 300.0, stateSelect = StateSelect.prefer);
//   Real pipe2.mediums[5].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe2.mediums[5].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe2.mediums[5].u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real pipe2.mediums[5].R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real pipe2.mediums[5].MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real pipe2.mediums[5].state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe2.mediums[5].state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe2.mediums[5].state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe2.mediums[5].state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean pipe2.mediums[5].preferredMediumStates = true;
//   final parameter Boolean pipe2.mediums[5].standardOrderComponents = true;
//   Real pipe2.mediums[5].T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = Modelica.SIunits.Conversions.to_degC(pipe2.mediums[5].T);
//   Real pipe2.mediums[5].p_bar(quantity = \"Pressure\", unit = \"bar\") = Modelica.SIunits.Conversions.to_bar(pipe2.mediums[5].p);
//   Real pipe2.mediums[5].x_water(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real pipe2.mediums[5].phi;
//   protected Real pipe2.mediums[5].n39(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe2.mediums[5].n40(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe2.mediums[5].n41(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe2.mediums[5].n42(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe2.mediums[5].n43(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe2.mediums[5].n44(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe2.mb_flows[1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe2.mb_flows[2](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe2.mb_flows[3](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe2.mb_flows[4](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe2.mb_flows[5](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe2.mbXi_flows[1,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe2.mbXi_flows[2,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe2.mbXi_flows[3,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe2.mbXi_flows[4,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe2.mbXi_flows[5,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe2.Hb_flows[1](quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   Real pipe2.Hb_flows[2](quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   Real pipe2.Hb_flows[3](quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   Real pipe2.Hb_flows[4](quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   Real pipe2.Hb_flows[5](quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   Real pipe2.Qb_flows[1](quantity = \"Power\", unit = \"W\");
//   Real pipe2.Qb_flows[2](quantity = \"Power\", unit = \"W\");
//   Real pipe2.Qb_flows[3](quantity = \"Power\", unit = \"W\");
//   Real pipe2.Qb_flows[4](quantity = \"Power\", unit = \"W\");
//   Real pipe2.Qb_flows[5](quantity = \"Power\", unit = \"W\");
//   Real pipe2.Wb_flows[1](quantity = \"Power\", unit = \"W\");
//   Real pipe2.Wb_flows[2](quantity = \"Power\", unit = \"W\");
//   Real pipe2.Wb_flows[3](quantity = \"Power\", unit = \"W\");
//   Real pipe2.Wb_flows[4](quantity = \"Power\", unit = \"W\");
//   Real pipe2.Wb_flows[5](quantity = \"Power\", unit = \"W\");
//   protected final parameter Boolean pipe2.n45 = true;
//   final parameter Real pipe2.lengths[1](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter Real pipe2.lengths[2](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter Real pipe2.lengths[3](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter Real pipe2.lengths[4](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter Real pipe2.lengths[5](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter Real pipe2.crossAreas[1](quantity = \"Area\", unit = \"m2\") = pipe2.crossArea;
//   final parameter Real pipe2.crossAreas[2](quantity = \"Area\", unit = \"m2\") = pipe2.crossArea;
//   final parameter Real pipe2.crossAreas[3](quantity = \"Area\", unit = \"m2\") = pipe2.crossArea;
//   final parameter Real pipe2.crossAreas[4](quantity = \"Area\", unit = \"m2\") = pipe2.crossArea;
//   final parameter Real pipe2.crossAreas[5](quantity = \"Area\", unit = \"m2\") = pipe2.crossArea;
//   final parameter Real pipe2.dimensions[1](quantity = \"Length\", unit = \"m\") = 4.0 * pipe2.crossArea / pipe2.perimeter;
//   final parameter Real pipe2.dimensions[2](quantity = \"Length\", unit = \"m\") = 4.0 * pipe2.crossArea / pipe2.perimeter;
//   final parameter Real pipe2.dimensions[3](quantity = \"Length\", unit = \"m\") = 4.0 * pipe2.crossArea / pipe2.perimeter;
//   final parameter Real pipe2.dimensions[4](quantity = \"Length\", unit = \"m\") = 4.0 * pipe2.crossArea / pipe2.perimeter;
//   final parameter Real pipe2.dimensions[5](quantity = \"Length\", unit = \"m\") = 4.0 * pipe2.crossArea / pipe2.perimeter;
//   final parameter Real pipe2.roughnesses[1](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = pipe2.roughness;
//   final parameter Real pipe2.roughnesses[2](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = pipe2.roughness;
//   final parameter Real pipe2.roughnesses[3](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = pipe2.roughness;
//   final parameter Real pipe2.roughnesses[4](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = pipe2.roughness;
//   final parameter Real pipe2.roughnesses[5](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = pipe2.roughness;
//   final parameter Real pipe2.dheights[1](quantity = \"Length\", unit = \"m\") = 5.0;
//   final parameter Real pipe2.dheights[2](quantity = \"Length\", unit = \"m\") = 5.0;
//   final parameter Real pipe2.dheights[3](quantity = \"Length\", unit = \"m\") = 5.0;
//   final parameter Real pipe2.dheights[4](quantity = \"Length\", unit = \"m\") = 5.0;
//   final parameter Real pipe2.dheights[5](quantity = \"Length\", unit = \"m\") = 5.0;
//   final parameter enumeration(DynamicFreeInitial, FixedInitial, SteadyStateInitial, SteadyState) pipe2.momentumDynamics = Modelica.Fluid.Types.Dynamics.SteadyStateInitial;
//   final parameter Real pipe2.m_flow_start(quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0) = 0.01;
//   final parameter Integer pipe2.nNodes(min = 1) = 5;
//   final parameter enumeration(av_vb, a_v_b, av_b, a_vb) pipe2.modelStructure = Modelica.Fluid.Types.ModelStructure.av_vb;
//   final parameter Boolean pipe2.useLumpedPressure = false;
//   final parameter Integer pipe2.nFM = 4;
//   final parameter Integer pipe2.nFMDistributed = 4;
//   final parameter Integer pipe2.nFMLumped = 1;
//   final parameter Integer pipe2.iLumped = 3;
//   final parameter Boolean pipe2.useInnerPortProperties = false;
//   Real pipe2.state_a.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe2.state_a.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe2.state_a.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe2.state_a.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe2.state_b.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe2.state_b.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe2.state_b.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe2.state_b.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe2.statesFM[1].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe2.statesFM[1].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe2.statesFM[1].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe2.statesFM[1].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe2.statesFM[2].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe2.statesFM[2].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe2.statesFM[2].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe2.statesFM[2].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe2.statesFM[3].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe2.statesFM[3].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe2.statesFM[3].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe2.statesFM[3].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe2.statesFM[4].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe2.statesFM[4].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe2.statesFM[4].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe2.statesFM[4].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe2.statesFM[5].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe2.statesFM[5].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe2.statesFM[5].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe2.statesFM[5].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean pipe2.flowModel.from_dp = true;
//   final parameter Integer pipe2.flowModel.n = 5;
//   final Real pipe2.flowModel.states[1].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe2.statesFM[1].p;
//   final Real pipe2.flowModel.states[1].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe2.statesFM[1].T;
//   final Real pipe2.flowModel.states[1].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe2.flowModel.states[1].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe2.flowModel.states[2].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe2.statesFM[2].p;
//   final Real pipe2.flowModel.states[2].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe2.statesFM[2].T;
//   final Real pipe2.flowModel.states[2].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe2.flowModel.states[2].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe2.flowModel.states[3].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe2.statesFM[3].p;
//   final Real pipe2.flowModel.states[3].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe2.statesFM[3].T;
//   final Real pipe2.flowModel.states[3].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe2.flowModel.states[3].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe2.flowModel.states[4].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe2.statesFM[4].p;
//   final Real pipe2.flowModel.states[4].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe2.statesFM[4].T;
//   final Real pipe2.flowModel.states[4].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe2.flowModel.states[4].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe2.flowModel.states[5].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe2.statesFM[5].p;
//   final Real pipe2.flowModel.states[5].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe2.statesFM[5].T;
//   final Real pipe2.flowModel.states[5].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe2.flowModel.states[5].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe2.flowModel.vs[1](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe2.flowModel.vs[2](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe2.flowModel.vs[3](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe2.flowModel.vs[4](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe2.flowModel.vs[5](quantity = \"Velocity\", unit = \"m/s\");
//   final parameter Real pipe2.flowModel.nParallel = pipe2.nParallel;
//   final Real pipe2.flowModel.crossAreas[1](quantity = \"Area\", unit = \"m2\");
//   final Real pipe2.flowModel.crossAreas[2](quantity = \"Area\", unit = \"m2\");
//   final Real pipe2.flowModel.crossAreas[3](quantity = \"Area\", unit = \"m2\");
//   final Real pipe2.flowModel.crossAreas[4](quantity = \"Area\", unit = \"m2\");
//   final Real pipe2.flowModel.crossAreas[5](quantity = \"Area\", unit = \"m2\");
//   final Real pipe2.flowModel.dimensions[1](quantity = \"Length\", unit = \"m\");
//   final Real pipe2.flowModel.dimensions[2](quantity = \"Length\", unit = \"m\");
//   final Real pipe2.flowModel.dimensions[3](quantity = \"Length\", unit = \"m\");
//   final Real pipe2.flowModel.dimensions[4](quantity = \"Length\", unit = \"m\");
//   final Real pipe2.flowModel.dimensions[5](quantity = \"Length\", unit = \"m\");
//   final Real pipe2.flowModel.roughnesses[1](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe2.flowModel.roughnesses[2](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe2.flowModel.roughnesses[3](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe2.flowModel.roughnesses[4](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe2.flowModel.roughnesses[5](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe2.flowModel.dheights[1](quantity = \"Length\", unit = \"m\");
//   final Real pipe2.flowModel.dheights[2](quantity = \"Length\", unit = \"m\");
//   final Real pipe2.flowModel.dheights[3](quantity = \"Length\", unit = \"m\");
//   final Real pipe2.flowModel.dheights[4](quantity = \"Length\", unit = \"m\");
//   final parameter Real pipe2.flowModel.g(quantity = \"Acceleration\", unit = \"m/s2\") = system.g;
//   final parameter Boolean pipe2.flowModel.allowFlowReversal = true;
//   final parameter enumeration(DynamicFreeInitial, FixedInitial, SteadyStateInitial, SteadyState) pipe2.flowModel.momentumDynamics = Modelica.Fluid.Types.Dynamics.SteadyStateInitial;
//   final parameter Real pipe2.flowModel.m_flow_start(quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0) = 0.01;
//   final parameter Real pipe2.flowModel.p_a_start(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe2.p_a_start;
//   final parameter Real pipe2.flowModel.p_b_start(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe2.p_b_start;
//   final parameter Integer pipe2.flowModel.m = 4;
//   final Real pipe2.flowModel.pathLengths[1](quantity = \"Length\", unit = \"m\");
//   final Real pipe2.flowModel.pathLengths[2](quantity = \"Length\", unit = \"m\");
//   final Real pipe2.flowModel.pathLengths[3](quantity = \"Length\", unit = \"m\");
//   final Real pipe2.flowModel.pathLengths[4](quantity = \"Length\", unit = \"m\");
//   Real pipe2.flowModel.m_flows[1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.01, stateSelect = StateSelect.prefer);
//   Real pipe2.flowModel.m_flows[2](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.01, stateSelect = StateSelect.prefer);
//   Real pipe2.flowModel.m_flows[3](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.01, stateSelect = StateSelect.prefer);
//   Real pipe2.flowModel.m_flows[4](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.01, stateSelect = StateSelect.prefer);
//   Real pipe2.flowModel.Is[1](quantity = \"Momentum\", unit = \"kg.m/s\");
//   Real pipe2.flowModel.Is[2](quantity = \"Momentum\", unit = \"kg.m/s\");
//   Real pipe2.flowModel.Is[3](quantity = \"Momentum\", unit = \"kg.m/s\");
//   Real pipe2.flowModel.Is[4](quantity = \"Momentum\", unit = \"kg.m/s\");
//   Real pipe2.flowModel.Ib_flows[1](quantity = \"Force\", unit = \"N\");
//   Real pipe2.flowModel.Ib_flows[2](quantity = \"Force\", unit = \"N\");
//   Real pipe2.flowModel.Ib_flows[3](quantity = \"Force\", unit = \"N\");
//   Real pipe2.flowModel.Ib_flows[4](quantity = \"Force\", unit = \"N\");
//   Real pipe2.flowModel.Fs_p[1](quantity = \"Force\", unit = \"N\");
//   Real pipe2.flowModel.Fs_p[2](quantity = \"Force\", unit = \"N\");
//   Real pipe2.flowModel.Fs_p[3](quantity = \"Force\", unit = \"N\");
//   Real pipe2.flowModel.Fs_p[4](quantity = \"Force\", unit = \"N\");
//   Real pipe2.flowModel.Fs_fg[1](quantity = \"Force\", unit = \"N\");
//   Real pipe2.flowModel.Fs_fg[2](quantity = \"Force\", unit = \"N\");
//   Real pipe2.flowModel.Fs_fg[3](quantity = \"Force\", unit = \"N\");
//   Real pipe2.flowModel.Fs_fg[4](quantity = \"Force\", unit = \"N\");
//   final parameter Boolean pipe2.flowModel.useUpstreamScheme = true;
//   final parameter Boolean pipe2.flowModel.use_Ib_flows = true;
//   Real pipe2.flowModel.rhos[1](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe2.flowModel.rhos[2](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe2.flowModel.rhos[3](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe2.flowModel.rhos[4](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe2.flowModel.rhos[5](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe2.flowModel.rhos_act[1](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe2.flowModel.rhos_act[2](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe2.flowModel.rhos_act[3](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe2.flowModel.rhos_act[4](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe2.flowModel.mus[1](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe2.flowModel.mus[2](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe2.flowModel.mus[3](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe2.flowModel.mus[4](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe2.flowModel.mus[5](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe2.flowModel.mus_act[1](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe2.flowModel.mus_act[2](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe2.flowModel.mus_act[3](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe2.flowModel.mus_act[4](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe2.flowModel.dps_fg[1](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", start = (pipe2.flowModel.p_a_start - pipe2.flowModel.p_b_start) / 4.0);
//   Real pipe2.flowModel.dps_fg[2](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", start = (pipe2.flowModel.p_a_start - pipe2.flowModel.p_b_start) / 4.0);
//   Real pipe2.flowModel.dps_fg[3](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", start = (pipe2.flowModel.p_a_start - pipe2.flowModel.p_b_start) / 4.0);
//   Real pipe2.flowModel.dps_fg[4](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", start = (pipe2.flowModel.p_a_start - pipe2.flowModel.p_b_start) / 4.0);
//   final parameter Real pipe2.flowModel.Re_turbulent(quantity = \"ReynoldsNumber\", unit = \"1\") = 4000.0;
//   final parameter Boolean pipe2.flowModel.show_Res = false;
//   protected final parameter Boolean pipe2.flowModel.n46 = false;
//   protected parameter Real pipe2.flowModel.n47(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 1.196838693581092;
//   protected final parameter Boolean pipe2.flowModel.n48 = false;
//   protected parameter Real pipe2.flowModel.n49(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0) = 1.823286547365138e-05;
//   Real pipe2.flowModel.pathLengths_internal[1](quantity = \"Length\", unit = \"m\");
//   Real pipe2.flowModel.pathLengths_internal[2](quantity = \"Length\", unit = \"m\");
//   Real pipe2.flowModel.pathLengths_internal[3](quantity = \"Length\", unit = \"m\");
//   Real pipe2.flowModel.pathLengths_internal[4](quantity = \"Length\", unit = \"m\");
//   Real pipe2.flowModel.Res_turbulent_internal[1](quantity = \"ReynoldsNumber\", unit = \"1\");
//   Real pipe2.flowModel.Res_turbulent_internal[2](quantity = \"ReynoldsNumber\", unit = \"1\");
//   Real pipe2.flowModel.Res_turbulent_internal[3](quantity = \"ReynoldsNumber\", unit = \"1\");
//   Real pipe2.flowModel.Res_turbulent_internal[4](quantity = \"ReynoldsNumber\", unit = \"1\");
//   parameter Real pipe2.flowModel.dp_nominal(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = 1.0, fixed = false, nominal = 100000.0);
//   parameter Real pipe2.flowModel.m_flow_nominal(quantity = \"MassFlowRate\", unit = \"kg/s\") = 100.0 * pipe2.flowModel.m_flow_small;
//   parameter Real pipe2.flowModel.m_flow_small(quantity = \"MassFlowRate\", unit = \"kg/s\") = system.m_flow_small;
//   protected parameter Real pipe2.flowModel.n50(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = 1.0, fixed = false, nominal = 100000.0);
//   protected final parameter Boolean pipe2.flowModel.n51 = false;
//   protected final parameter Boolean pipe2.flowModel.n52 = false;
//   protected Real pipe2.flowModel.n53[1](quantity = \"Length\", unit = \"m\");
//   protected Real pipe2.flowModel.n53[2](quantity = \"Length\", unit = \"m\");
//   protected Real pipe2.flowModel.n53[3](quantity = \"Length\", unit = \"m\");
//   protected Real pipe2.flowModel.n53[4](quantity = \"Length\", unit = \"m\");
//   protected Real pipe2.flowModel.n54(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.flowModel.WallFriction.pressureLoss_m_flow(pipe2.flowModel.m_flow_nominal / pipe2.flowModel.nParallel, pipe2.flowModel.n47, pipe2.flowModel.n47, pipe2.flowModel.n49, pipe2.flowModel.n49, pipe2.flowModel.pathLengths_internal[1], pipe2.flowModel.n53[1], (pipe2.flowModel.crossAreas[1] + pipe2.flowModel.crossAreas[2]) / 2.0, (pipe2.flowModel.roughnesses[1] + pipe2.flowModel.roughnesses[2]) / 2.0, pipe2.flowModel.m_flow_small / pipe2.flowModel.nParallel, pipe2.flowModel.Res_turbulent_internal[1]) + Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.flowModel.WallFriction.pressureLoss_m_flow(pipe2.flowModel.m_flow_nominal / pipe2.flowModel.nParallel, pipe2.flowModel.n47, pipe2.flowModel.n47, pipe2.flowModel.n49, pipe2.flowModel.n49, pipe2.flowModel.pathLengths_internal[2], pipe2.flowModel.n53[2], (pipe2.flowModel.crossAreas[2] + pipe2.flowModel.crossAreas[3]) / 2.0, (pipe2.flowModel.roughnesses[2] + pipe2.flowModel.roughnesses[3]) / 2.0, pipe2.flowModel.m_flow_small / pipe2.flowModel.nParallel, pipe2.flowModel.Res_turbulent_internal[2]) + Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.flowModel.WallFriction.pressureLoss_m_flow(pipe2.flowModel.m_flow_nominal / pipe2.flowModel.nParallel, pipe2.flowModel.n47, pipe2.flowModel.n47, pipe2.flowModel.n49, pipe2.flowModel.n49, pipe2.flowModel.pathLengths_internal[3], pipe2.flowModel.n53[3], (pipe2.flowModel.crossAreas[3] + pipe2.flowModel.crossAreas[4]) / 2.0, (pipe2.flowModel.roughnesses[3] + pipe2.flowModel.roughnesses[4]) / 2.0, pipe2.flowModel.m_flow_small / pipe2.flowModel.nParallel, pipe2.flowModel.Res_turbulent_internal[3]) + Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.flowModel.WallFriction.pressureLoss_m_flow(pipe2.flowModel.m_flow_nominal / pipe2.flowModel.nParallel, pipe2.flowModel.n47, pipe2.flowModel.n47, pipe2.flowModel.n49, pipe2.flowModel.n49, pipe2.flowModel.pathLengths_internal[4], pipe2.flowModel.n53[4], (pipe2.flowModel.crossAreas[4] + pipe2.flowModel.crossAreas[5]) / 2.0, (pipe2.flowModel.roughnesses[4] + pipe2.flowModel.roughnesses[5]) / 2.0, pipe2.flowModel.m_flow_small / pipe2.flowModel.nParallel, pipe2.flowModel.Res_turbulent_internal[4]);
//   Real pipe2.m_flows[1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.01);
//   Real pipe2.m_flows[2](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.01);
//   Real pipe2.m_flows[3](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.01);
//   Real pipe2.m_flows[4](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.01);
//   Real pipe2.m_flows[5](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.01);
//   Real pipe2.m_flows[6](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.01);
//   Real pipe2.mXi_flows[1,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe2.mXi_flows[2,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe2.mXi_flows[3,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe2.mXi_flows[4,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe2.mXi_flows[5,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe2.mXi_flows[6,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe2.H_flows[1](quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0);
//   Real pipe2.H_flows[2](quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0);
//   Real pipe2.H_flows[3](quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0);
//   Real pipe2.H_flows[4](quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0);
//   Real pipe2.H_flows[5](quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0);
//   Real pipe2.H_flows[6](quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0);
//   Real pipe2.vs[1](quantity = \"Velocity\", unit = \"m/s\");
//   Real pipe2.vs[2](quantity = \"Velocity\", unit = \"m/s\");
//   Real pipe2.vs[3](quantity = \"Velocity\", unit = \"m/s\");
//   Real pipe2.vs[4](quantity = \"Velocity\", unit = \"m/s\");
//   Real pipe2.vs[5](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real pipe2.n55[1](quantity = \"Length\", unit = \"m\");
//   protected Real pipe2.n55[2](quantity = \"Length\", unit = \"m\");
//   protected Real pipe2.n55[3](quantity = \"Length\", unit = \"m\");
//   protected Real pipe2.n55[4](quantity = \"Length\", unit = \"m\");
//   protected Real pipe2.n56[1](quantity = \"Length\", unit = \"m\");
//   protected Real pipe2.n56[2](quantity = \"Length\", unit = \"m\");
//   protected Real pipe2.n56[3](quantity = \"Length\", unit = \"m\");
//   protected Real pipe2.n56[4](quantity = \"Length\", unit = \"m\");
//   protected Real pipe2.n57[1](quantity = \"Area\", unit = \"m2\");
//   protected Real pipe2.n57[2](quantity = \"Area\", unit = \"m2\");
//   protected Real pipe2.n57[3](quantity = \"Area\", unit = \"m2\");
//   protected Real pipe2.n57[4](quantity = \"Area\", unit = \"m2\");
//   protected Real pipe2.n57[5](quantity = \"Area\", unit = \"m2\");
//   protected Real pipe2.n58[1](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real pipe2.n58[2](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real pipe2.n58[3](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real pipe2.n58[4](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real pipe2.n58[5](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real pipe2.n59[1](quantity = \"Length\", unit = \"m\");
//   protected Real pipe2.n59[2](quantity = \"Length\", unit = \"m\");
//   protected Real pipe2.n59[3](quantity = \"Length\", unit = \"m\");
//   protected Real pipe2.n59[4](quantity = \"Length\", unit = \"m\");
//   protected Real pipe2.n59[5](quantity = \"Length\", unit = \"m\");
//   protected Real pipe2.n60[1](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   protected Real pipe2.n60[2](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   protected Real pipe2.n60[3](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   protected Real pipe2.n60[4](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   protected Real pipe2.n60[5](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final parameter Boolean pipe2.use_HeatTransfer = true;
//   Real pipe2.heatPorts[1].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe2.heatPorts[1].Q_flow(quantity = \"Power\", unit = \"W\");
//   Real pipe2.heatPorts[2].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe2.heatPorts[2].Q_flow(quantity = \"Power\", unit = \"W\");
//   Real pipe2.heatPorts[3].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe2.heatPorts[3].Q_flow(quantity = \"Power\", unit = \"W\");
//   Real pipe2.heatPorts[4].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe2.heatPorts[4].Q_flow(quantity = \"Power\", unit = \"W\");
//   Real pipe2.heatPorts[5].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe2.heatPorts[5].Q_flow(quantity = \"Power\", unit = \"W\");
//   final parameter Integer pipe2.heatTransfer.n = 5;
//   final Real pipe2.heatTransfer.states[1].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe2.mediums[1].state.p;
//   final Real pipe2.heatTransfer.states[1].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe2.mediums[1].state.T;
//   final Real pipe2.heatTransfer.states[1].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe2.heatTransfer.states[1].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe2.heatTransfer.states[2].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe2.mediums[2].state.p;
//   final Real pipe2.heatTransfer.states[2].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe2.mediums[2].state.T;
//   final Real pipe2.heatTransfer.states[2].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe2.heatTransfer.states[2].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe2.heatTransfer.states[3].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe2.mediums[3].state.p;
//   final Real pipe2.heatTransfer.states[3].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe2.mediums[3].state.T;
//   final Real pipe2.heatTransfer.states[3].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe2.heatTransfer.states[3].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe2.heatTransfer.states[4].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe2.mediums[4].state.p;
//   final Real pipe2.heatTransfer.states[4].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe2.mediums[4].state.T;
//   final Real pipe2.heatTransfer.states[4].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe2.heatTransfer.states[4].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe2.heatTransfer.states[5].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe2.mediums[5].state.p;
//   final Real pipe2.heatTransfer.states[5].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe2.mediums[5].state.T;
//   final Real pipe2.heatTransfer.states[5].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe2.heatTransfer.states[5].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe2.heatTransfer.surfaceAreas[1](quantity = \"Area\", unit = \"m2\");
//   final Real pipe2.heatTransfer.surfaceAreas[2](quantity = \"Area\", unit = \"m2\");
//   final Real pipe2.heatTransfer.surfaceAreas[3](quantity = \"Area\", unit = \"m2\");
//   final Real pipe2.heatTransfer.surfaceAreas[4](quantity = \"Area\", unit = \"m2\");
//   final Real pipe2.heatTransfer.surfaceAreas[5](quantity = \"Area\", unit = \"m2\");
//   Real pipe2.heatTransfer.Q_flows[1](quantity = \"Power\", unit = \"W\");
//   Real pipe2.heatTransfer.Q_flows[2](quantity = \"Power\", unit = \"W\");
//   Real pipe2.heatTransfer.Q_flows[3](quantity = \"Power\", unit = \"W\");
//   Real pipe2.heatTransfer.Q_flows[4](quantity = \"Power\", unit = \"W\");
//   Real pipe2.heatTransfer.Q_flows[5](quantity = \"Power\", unit = \"W\");
//   final parameter Boolean pipe2.heatTransfer.use_k = true;
//   final parameter Real pipe2.heatTransfer.k(quantity = \"CoefficientOfHeatTransfer\", unit = \"W/(m2.K)\") = 0.0;
//   parameter Real pipe2.heatTransfer.T_ambient(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = system.T_ambient;
//   Real pipe2.heatTransfer.heatPorts[1].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe2.heatTransfer.heatPorts[1].Q_flow(quantity = \"Power\", unit = \"W\");
//   Real pipe2.heatTransfer.heatPorts[2].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe2.heatTransfer.heatPorts[2].Q_flow(quantity = \"Power\", unit = \"W\");
//   Real pipe2.heatTransfer.heatPorts[3].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe2.heatTransfer.heatPorts[3].Q_flow(quantity = \"Power\", unit = \"W\");
//   Real pipe2.heatTransfer.heatPorts[4].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe2.heatTransfer.heatPorts[4].Q_flow(quantity = \"Power\", unit = \"W\");
//   Real pipe2.heatTransfer.heatPorts[5].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe2.heatTransfer.heatPorts[5].Q_flow(quantity = \"Power\", unit = \"W\");
//   Real pipe2.heatTransfer.Ts[1](quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe2.heatTransfer.Ts[2](quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe2.heatTransfer.Ts[3](quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe2.heatTransfer.Ts[4](quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe2.heatTransfer.Ts[5](quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   final Real pipe2.heatTransfer.vs[1](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe2.heatTransfer.vs[2](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe2.heatTransfer.vs[3](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe2.heatTransfer.vs[4](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe2.heatTransfer.vs[5](quantity = \"Velocity\", unit = \"m/s\");
//   final parameter Real pipe2.heatTransfer.nParallel = pipe2.nParallel;
//   final Real pipe2.heatTransfer.lengths[1](quantity = \"Length\", unit = \"m\");
//   final Real pipe2.heatTransfer.lengths[2](quantity = \"Length\", unit = \"m\");
//   final Real pipe2.heatTransfer.lengths[3](quantity = \"Length\", unit = \"m\");
//   final Real pipe2.heatTransfer.lengths[4](quantity = \"Length\", unit = \"m\");
//   final Real pipe2.heatTransfer.lengths[5](quantity = \"Length\", unit = \"m\");
//   final Real pipe2.heatTransfer.dimensions[1](quantity = \"Length\", unit = \"m\");
//   final Real pipe2.heatTransfer.dimensions[2](quantity = \"Length\", unit = \"m\");
//   final Real pipe2.heatTransfer.dimensions[3](quantity = \"Length\", unit = \"m\");
//   final Real pipe2.heatTransfer.dimensions[4](quantity = \"Length\", unit = \"m\");
//   final Real pipe2.heatTransfer.dimensions[5](quantity = \"Length\", unit = \"m\");
//   final Real pipe2.heatTransfer.roughnesses[1](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe2.heatTransfer.roughnesses[2](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe2.heatTransfer.roughnesses[3](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe2.heatTransfer.roughnesses[4](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe2.heatTransfer.roughnesses[5](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   parameter Real pipe2.heatTransfer.alpha0(quantity = \"CoefficientOfHeatTransfer\", unit = \"W/(m2.K)\") = 100.0;
//   Real pipe2.heatTransfer.alphas[1](quantity = \"CoefficientOfHeatTransfer\", unit = \"W/(m2.K)\", start = pipe2.heatTransfer.alpha0);
//   Real pipe2.heatTransfer.alphas[2](quantity = \"CoefficientOfHeatTransfer\", unit = \"W/(m2.K)\", start = pipe2.heatTransfer.alpha0);
//   Real pipe2.heatTransfer.alphas[3](quantity = \"CoefficientOfHeatTransfer\", unit = \"W/(m2.K)\", start = pipe2.heatTransfer.alpha0);
//   Real pipe2.heatTransfer.alphas[4](quantity = \"CoefficientOfHeatTransfer\", unit = \"W/(m2.K)\", start = pipe2.heatTransfer.alpha0);
//   Real pipe2.heatTransfer.alphas[5](quantity = \"CoefficientOfHeatTransfer\", unit = \"W/(m2.K)\", start = pipe2.heatTransfer.alpha0);
//   Real pipe2.heatTransfer.Res[1];
//   Real pipe2.heatTransfer.Res[2];
//   Real pipe2.heatTransfer.Res[3];
//   Real pipe2.heatTransfer.Res[4];
//   Real pipe2.heatTransfer.Res[5];
//   Real pipe2.heatTransfer.Prs[1];
//   Real pipe2.heatTransfer.Prs[2];
//   Real pipe2.heatTransfer.Prs[3];
//   Real pipe2.heatTransfer.Prs[4];
//   Real pipe2.heatTransfer.Prs[5];
//   Real pipe2.heatTransfer.Nus[1];
//   Real pipe2.heatTransfer.Nus[2];
//   Real pipe2.heatTransfer.Nus[3];
//   Real pipe2.heatTransfer.Nus[4];
//   Real pipe2.heatTransfer.Nus[5];
//   Real pipe2.heatTransfer.ds[1](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe2.heatTransfer.ds[2](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe2.heatTransfer.ds[3](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe2.heatTransfer.ds[4](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe2.heatTransfer.ds[5](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe2.heatTransfer.mus[1](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe2.heatTransfer.mus[2](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe2.heatTransfer.mus[3](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe2.heatTransfer.mus[4](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe2.heatTransfer.mus[5](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe2.heatTransfer.lambdas[1](quantity = \"ThermalConductivity\", unit = \"W/(m.K)\", min = 0.0, max = 500.0, start = 1.0, nominal = 1.0);
//   Real pipe2.heatTransfer.lambdas[2](quantity = \"ThermalConductivity\", unit = \"W/(m.K)\", min = 0.0, max = 500.0, start = 1.0, nominal = 1.0);
//   Real pipe2.heatTransfer.lambdas[3](quantity = \"ThermalConductivity\", unit = \"W/(m.K)\", min = 0.0, max = 500.0, start = 1.0, nominal = 1.0);
//   Real pipe2.heatTransfer.lambdas[4](quantity = \"ThermalConductivity\", unit = \"W/(m.K)\", min = 0.0, max = 500.0, start = 1.0, nominal = 1.0);
//   Real pipe2.heatTransfer.lambdas[5](quantity = \"ThermalConductivity\", unit = \"W/(m.K)\", min = 0.0, max = 500.0, start = 1.0, nominal = 1.0);
//   Real pipe2.heatTransfer.diameters[1](quantity = \"Length\", unit = \"m\");
//   Real pipe2.heatTransfer.diameters[2](quantity = \"Length\", unit = \"m\");
//   Real pipe2.heatTransfer.diameters[3](quantity = \"Length\", unit = \"m\");
//   Real pipe2.heatTransfer.diameters[4](quantity = \"Length\", unit = \"m\");
//   Real pipe2.heatTransfer.diameters[5](quantity = \"Length\", unit = \"m\");
//   protected Real pipe2.heatTransfer.n61[1];
//   protected Real pipe2.heatTransfer.n61[2];
//   protected Real pipe2.heatTransfer.n61[3];
//   protected Real pipe2.heatTransfer.n61[4];
//   protected Real pipe2.heatTransfer.n61[5];
//   protected Real pipe2.heatTransfer.n62[1];
//   protected Real pipe2.heatTransfer.n62[2];
//   protected Real pipe2.heatTransfer.n62[3];
//   protected Real pipe2.heatTransfer.n62[4];
//   protected Real pipe2.heatTransfer.n62[5];
//   protected Real pipe2.heatTransfer.n63;
//   protected Real pipe2.heatTransfer.n64[1];
//   protected Real pipe2.heatTransfer.n64[2];
//   protected Real pipe2.heatTransfer.n64[3];
//   protected Real pipe2.heatTransfer.n64[4];
//   protected Real pipe2.heatTransfer.n64[5];
//   protected Real pipe2.heatTransfer.n65[1];
//   protected Real pipe2.heatTransfer.n65[2];
//   protected Real pipe2.heatTransfer.n65[3];
//   protected Real pipe2.heatTransfer.n65[4];
//   protected Real pipe2.heatTransfer.n65[5];
//   final parameter Real pipe2.dxs[1] = 0.2;
//   final parameter Real pipe2.dxs[2] = 0.2;
//   final parameter Real pipe2.dxs[3] = 0.2;
//   final parameter Real pipe2.dxs[4] = 0.2;
//   final parameter Real pipe2.dxs[5] = 0.2;
//   final parameter Boolean pipe3.allowFlowReversal = true;
//   Real pipe3.port_a.m_flow(quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0);
//   Real pipe3.port_a.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe3.port_a.h_outflow(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
//   Real pipe3.port_a.Xi_outflow[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real pipe3.port_b.m_flow(quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 9.999999999999999e+59);
//   Real pipe3.port_b.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe3.port_b.h_outflow(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
//   Real pipe3.port_b.Xi_outflow[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected final parameter Boolean pipe3.n66 = false;
//   protected final parameter Boolean pipe3.n67 = false;
//   protected parameter Boolean pipe3.n68 = true;
//   parameter Real pipe3.nParallel(min = 1.0) = 1.0;
//   final parameter Real pipe3.length(quantity = \"Length\", unit = \"m\") = 25.0;
//   parameter Boolean pipe3.isCircular = true;
//   parameter Real pipe3.diameter(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0254;
//   parameter Real pipe3.crossArea(quantity = \"Area\", unit = \"m2\") = 3.141592653589793 * pipe3.diameter * pipe3.diameter / 4.0;
//   parameter Real pipe3.perimeter(quantity = \"Length\", unit = \"m\", min = 0.0) = 3.141592653589793 * pipe3.diameter;
//   parameter Real pipe3.roughness(quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = 2.5e-05;
//   final parameter Real pipe3.V(quantity = \"Volume\", unit = \"m3\") = pipe3.crossArea * 25.0 * pipe3.nParallel;
//   final parameter Real pipe3.height_ab(quantity = \"Length\", unit = \"m\") = 25.0;
//   final parameter Integer pipe3.n = 5;
//   final Real pipe3.fluidVolumes[1](quantity = \"Volume\", unit = \"m3\");
//   final Real pipe3.fluidVolumes[2](quantity = \"Volume\", unit = \"m3\");
//   final Real pipe3.fluidVolumes[3](quantity = \"Volume\", unit = \"m3\");
//   final Real pipe3.fluidVolumes[4](quantity = \"Volume\", unit = \"m3\");
//   final Real pipe3.fluidVolumes[5](quantity = \"Volume\", unit = \"m3\");
//   final parameter enumeration(DynamicFreeInitial, FixedInitial, SteadyStateInitial, SteadyState) pipe3.energyDynamics = Modelica.Fluid.Types.Dynamics.SteadyStateInitial;
//   final parameter enumeration(DynamicFreeInitial, FixedInitial, SteadyStateInitial, SteadyState) pipe3.massDynamics = Modelica.Fluid.Types.Dynamics.SteadyStateInitial;
//   final parameter enumeration(DynamicFreeInitial, FixedInitial, SteadyStateInitial, SteadyState) pipe3.substanceDynamics = Modelica.Fluid.Types.Dynamics.SteadyStateInitial;
//   final parameter enumeration(DynamicFreeInitial, FixedInitial, SteadyStateInitial, SteadyState) pipe3.traceDynamics = Modelica.Fluid.Types.Dynamics.SteadyStateInitial;
//   parameter Real pipe3.p_a_start(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = 130000.0;
//   parameter Real pipe3.p_b_start(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = 120000.0;
//   final parameter Real pipe3.ps_start[1](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe3.p_a_start;
//   final parameter Real pipe3.ps_start[2](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe3.p_a_start + (pipe3.p_b_start - pipe3.p_a_start) / 4.0;
//   final parameter Real pipe3.ps_start[3](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe3.p_a_start + (pipe3.p_b_start - pipe3.p_a_start) * 2.0 / 4.0;
//   final parameter Real pipe3.ps_start[4](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe3.p_a_start + (pipe3.p_b_start - pipe3.p_a_start) * 3.0 / 4.0;
//   final parameter Real pipe3.ps_start[5](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe3.p_a_start + (pipe3.p_b_start - pipe3.p_a_start) * 4.0 / 4.0;
//   final parameter Boolean pipe3.use_T_start = true;
//   parameter Real pipe3.T_start(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = system.T_start;
//   parameter Real pipe3.h_start(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0) = Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.specificEnthalpy_pTX((pipe3.p_a_start + pipe3.p_b_start) / 2.0, pipe3.T_start, pipe3.X_start);
//   parameter Real pipe3.X_start[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = 0.01;
//   parameter Real pipe3.X_start[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = 0.99;
//   Real pipe3.Us[1](quantity = \"Energy\", unit = \"J\");
//   Real pipe3.Us[2](quantity = \"Energy\", unit = \"J\");
//   Real pipe3.Us[3](quantity = \"Energy\", unit = \"J\");
//   Real pipe3.Us[4](quantity = \"Energy\", unit = \"J\");
//   Real pipe3.Us[5](quantity = \"Energy\", unit = \"J\");
//   Real pipe3.ms[1](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe3.ms[2](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe3.ms[3](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe3.ms[4](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe3.ms[5](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe3.mXis[1,1](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe3.mXis[2,1](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe3.mXis[3,1](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe3.mXis[4,1](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe3.mXis[5,1](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe3.mediums[1].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = pipe3.ps_start[1], nominal = 100000.0, stateSelect = StateSelect.prefer);
//   Real pipe3.mediums[1].Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = pipe3.X_start[1], stateSelect = StateSelect.prefer);
//   Real pipe3.mediums[1].h(quantity = \"SpecificEnergy\", unit = \"J/kg\", start = pipe3.h_start);
//   Real pipe3.mediums[1].d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe3.mediums[1].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = pipe3.T_start, nominal = 300.0, stateSelect = StateSelect.prefer);
//   Real pipe3.mediums[1].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe3.mediums[1].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe3.mediums[1].u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real pipe3.mediums[1].R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real pipe3.mediums[1].MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real pipe3.mediums[1].state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe3.mediums[1].state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe3.mediums[1].state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe3.mediums[1].state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean pipe3.mediums[1].preferredMediumStates = true;
//   final parameter Boolean pipe3.mediums[1].standardOrderComponents = true;
//   Real pipe3.mediums[1].T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = Modelica.SIunits.Conversions.to_degC(pipe3.mediums[1].T);
//   Real pipe3.mediums[1].p_bar(quantity = \"Pressure\", unit = \"bar\") = Modelica.SIunits.Conversions.to_bar(pipe3.mediums[1].p);
//   Real pipe3.mediums[1].x_water(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real pipe3.mediums[1].phi;
//   protected Real pipe3.mediums[1].n69(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe3.mediums[1].n70(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe3.mediums[1].n71(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe3.mediums[1].n72(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe3.mediums[1].n73(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe3.mediums[1].n74(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe3.mediums[2].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = pipe3.ps_start[2], nominal = 100000.0, stateSelect = StateSelect.prefer);
//   Real pipe3.mediums[2].Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = pipe3.X_start[1], stateSelect = StateSelect.prefer);
//   Real pipe3.mediums[2].h(quantity = \"SpecificEnergy\", unit = \"J/kg\", start = pipe3.h_start);
//   Real pipe3.mediums[2].d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe3.mediums[2].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = pipe3.T_start, nominal = 300.0, stateSelect = StateSelect.prefer);
//   Real pipe3.mediums[2].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe3.mediums[2].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe3.mediums[2].u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real pipe3.mediums[2].R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real pipe3.mediums[2].MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real pipe3.mediums[2].state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe3.mediums[2].state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe3.mediums[2].state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe3.mediums[2].state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean pipe3.mediums[2].preferredMediumStates = true;
//   final parameter Boolean pipe3.mediums[2].standardOrderComponents = true;
//   Real pipe3.mediums[2].T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = Modelica.SIunits.Conversions.to_degC(pipe3.mediums[2].T);
//   Real pipe3.mediums[2].p_bar(quantity = \"Pressure\", unit = \"bar\") = Modelica.SIunits.Conversions.to_bar(pipe3.mediums[2].p);
//   Real pipe3.mediums[2].x_water(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real pipe3.mediums[2].phi;
//   protected Real pipe3.mediums[2].n69(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe3.mediums[2].n70(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe3.mediums[2].n71(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe3.mediums[2].n72(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe3.mediums[2].n73(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe3.mediums[2].n74(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe3.mediums[3].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = pipe3.ps_start[3], nominal = 100000.0, stateSelect = StateSelect.prefer);
//   Real pipe3.mediums[3].Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = pipe3.X_start[1], stateSelect = StateSelect.prefer);
//   Real pipe3.mediums[3].h(quantity = \"SpecificEnergy\", unit = \"J/kg\", start = pipe3.h_start);
//   Real pipe3.mediums[3].d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe3.mediums[3].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = pipe3.T_start, nominal = 300.0, stateSelect = StateSelect.prefer);
//   Real pipe3.mediums[3].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe3.mediums[3].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe3.mediums[3].u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real pipe3.mediums[3].R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real pipe3.mediums[3].MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real pipe3.mediums[3].state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe3.mediums[3].state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe3.mediums[3].state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe3.mediums[3].state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean pipe3.mediums[3].preferredMediumStates = true;
//   final parameter Boolean pipe3.mediums[3].standardOrderComponents = true;
//   Real pipe3.mediums[3].T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = Modelica.SIunits.Conversions.to_degC(pipe3.mediums[3].T);
//   Real pipe3.mediums[3].p_bar(quantity = \"Pressure\", unit = \"bar\") = Modelica.SIunits.Conversions.to_bar(pipe3.mediums[3].p);
//   Real pipe3.mediums[3].x_water(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real pipe3.mediums[3].phi;
//   protected Real pipe3.mediums[3].n69(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe3.mediums[3].n70(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe3.mediums[3].n71(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe3.mediums[3].n72(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe3.mediums[3].n73(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe3.mediums[3].n74(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe3.mediums[4].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = pipe3.ps_start[4], nominal = 100000.0, stateSelect = StateSelect.prefer);
//   Real pipe3.mediums[4].Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = pipe3.X_start[1], stateSelect = StateSelect.prefer);
//   Real pipe3.mediums[4].h(quantity = \"SpecificEnergy\", unit = \"J/kg\", start = pipe3.h_start);
//   Real pipe3.mediums[4].d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe3.mediums[4].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = pipe3.T_start, nominal = 300.0, stateSelect = StateSelect.prefer);
//   Real pipe3.mediums[4].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe3.mediums[4].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe3.mediums[4].u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real pipe3.mediums[4].R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real pipe3.mediums[4].MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real pipe3.mediums[4].state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe3.mediums[4].state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe3.mediums[4].state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe3.mediums[4].state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean pipe3.mediums[4].preferredMediumStates = true;
//   final parameter Boolean pipe3.mediums[4].standardOrderComponents = true;
//   Real pipe3.mediums[4].T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = Modelica.SIunits.Conversions.to_degC(pipe3.mediums[4].T);
//   Real pipe3.mediums[4].p_bar(quantity = \"Pressure\", unit = \"bar\") = Modelica.SIunits.Conversions.to_bar(pipe3.mediums[4].p);
//   Real pipe3.mediums[4].x_water(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real pipe3.mediums[4].phi;
//   protected Real pipe3.mediums[4].n69(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe3.mediums[4].n70(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe3.mediums[4].n71(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe3.mediums[4].n72(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe3.mediums[4].n73(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe3.mediums[4].n74(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe3.mediums[5].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = pipe3.ps_start[5], nominal = 100000.0, stateSelect = StateSelect.prefer);
//   Real pipe3.mediums[5].Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = pipe3.X_start[1], stateSelect = StateSelect.prefer);
//   Real pipe3.mediums[5].h(quantity = \"SpecificEnergy\", unit = \"J/kg\", start = pipe3.h_start);
//   Real pipe3.mediums[5].d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe3.mediums[5].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = pipe3.T_start, nominal = 300.0, stateSelect = StateSelect.prefer);
//   Real pipe3.mediums[5].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe3.mediums[5].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe3.mediums[5].u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real pipe3.mediums[5].R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real pipe3.mediums[5].MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real pipe3.mediums[5].state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe3.mediums[5].state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe3.mediums[5].state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe3.mediums[5].state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean pipe3.mediums[5].preferredMediumStates = true;
//   final parameter Boolean pipe3.mediums[5].standardOrderComponents = true;
//   Real pipe3.mediums[5].T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = Modelica.SIunits.Conversions.to_degC(pipe3.mediums[5].T);
//   Real pipe3.mediums[5].p_bar(quantity = \"Pressure\", unit = \"bar\") = Modelica.SIunits.Conversions.to_bar(pipe3.mediums[5].p);
//   Real pipe3.mediums[5].x_water(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real pipe3.mediums[5].phi;
//   protected Real pipe3.mediums[5].n69(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe3.mediums[5].n70(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe3.mediums[5].n71(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe3.mediums[5].n72(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe3.mediums[5].n73(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe3.mediums[5].n74(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe3.mb_flows[1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe3.mb_flows[2](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe3.mb_flows[3](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe3.mb_flows[4](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe3.mb_flows[5](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe3.mbXi_flows[1,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe3.mbXi_flows[2,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe3.mbXi_flows[3,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe3.mbXi_flows[4,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe3.mbXi_flows[5,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe3.Hb_flows[1](quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   Real pipe3.Hb_flows[2](quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   Real pipe3.Hb_flows[3](quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   Real pipe3.Hb_flows[4](quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   Real pipe3.Hb_flows[5](quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   Real pipe3.Qb_flows[1](quantity = \"Power\", unit = \"W\");
//   Real pipe3.Qb_flows[2](quantity = \"Power\", unit = \"W\");
//   Real pipe3.Qb_flows[3](quantity = \"Power\", unit = \"W\");
//   Real pipe3.Qb_flows[4](quantity = \"Power\", unit = \"W\");
//   Real pipe3.Qb_flows[5](quantity = \"Power\", unit = \"W\");
//   Real pipe3.Wb_flows[1](quantity = \"Power\", unit = \"W\");
//   Real pipe3.Wb_flows[2](quantity = \"Power\", unit = \"W\");
//   Real pipe3.Wb_flows[3](quantity = \"Power\", unit = \"W\");
//   Real pipe3.Wb_flows[4](quantity = \"Power\", unit = \"W\");
//   Real pipe3.Wb_flows[5](quantity = \"Power\", unit = \"W\");
//   protected final parameter Boolean pipe3.n75 = true;
//   final parameter Real pipe3.lengths[1](quantity = \"Length\", unit = \"m\") = 5.0;
//   final parameter Real pipe3.lengths[2](quantity = \"Length\", unit = \"m\") = 5.0;
//   final parameter Real pipe3.lengths[3](quantity = \"Length\", unit = \"m\") = 5.0;
//   final parameter Real pipe3.lengths[4](quantity = \"Length\", unit = \"m\") = 5.0;
//   final parameter Real pipe3.lengths[5](quantity = \"Length\", unit = \"m\") = 5.0;
//   final parameter Real pipe3.crossAreas[1](quantity = \"Area\", unit = \"m2\") = pipe3.crossArea;
//   final parameter Real pipe3.crossAreas[2](quantity = \"Area\", unit = \"m2\") = pipe3.crossArea;
//   final parameter Real pipe3.crossAreas[3](quantity = \"Area\", unit = \"m2\") = pipe3.crossArea;
//   final parameter Real pipe3.crossAreas[4](quantity = \"Area\", unit = \"m2\") = pipe3.crossArea;
//   final parameter Real pipe3.crossAreas[5](quantity = \"Area\", unit = \"m2\") = pipe3.crossArea;
//   final parameter Real pipe3.dimensions[1](quantity = \"Length\", unit = \"m\") = 4.0 * pipe3.crossArea / pipe3.perimeter;
//   final parameter Real pipe3.dimensions[2](quantity = \"Length\", unit = \"m\") = 4.0 * pipe3.crossArea / pipe3.perimeter;
//   final parameter Real pipe3.dimensions[3](quantity = \"Length\", unit = \"m\") = 4.0 * pipe3.crossArea / pipe3.perimeter;
//   final parameter Real pipe3.dimensions[4](quantity = \"Length\", unit = \"m\") = 4.0 * pipe3.crossArea / pipe3.perimeter;
//   final parameter Real pipe3.dimensions[5](quantity = \"Length\", unit = \"m\") = 4.0 * pipe3.crossArea / pipe3.perimeter;
//   final parameter Real pipe3.roughnesses[1](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = pipe3.roughness;
//   final parameter Real pipe3.roughnesses[2](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = pipe3.roughness;
//   final parameter Real pipe3.roughnesses[3](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = pipe3.roughness;
//   final parameter Real pipe3.roughnesses[4](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = pipe3.roughness;
//   final parameter Real pipe3.roughnesses[5](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = pipe3.roughness;
//   final parameter Real pipe3.dheights[1](quantity = \"Length\", unit = \"m\") = 5.0;
//   final parameter Real pipe3.dheights[2](quantity = \"Length\", unit = \"m\") = 5.0;
//   final parameter Real pipe3.dheights[3](quantity = \"Length\", unit = \"m\") = 5.0;
//   final parameter Real pipe3.dheights[4](quantity = \"Length\", unit = \"m\") = 5.0;
//   final parameter Real pipe3.dheights[5](quantity = \"Length\", unit = \"m\") = 5.0;
//   final parameter enumeration(DynamicFreeInitial, FixedInitial, SteadyStateInitial, SteadyState) pipe3.momentumDynamics = Modelica.Fluid.Types.Dynamics.SteadyStateInitial;
//   final parameter Real pipe3.m_flow_start(quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0) = 0.01;
//   final parameter Integer pipe3.nNodes(min = 1) = 5;
//   final parameter enumeration(av_vb, a_v_b, av_b, a_vb) pipe3.modelStructure = Modelica.Fluid.Types.ModelStructure.a_v_b;
//   final parameter Boolean pipe3.useLumpedPressure = false;
//   final parameter Integer pipe3.nFM = 6;
//   final parameter Integer pipe3.nFMDistributed = 6;
//   final parameter Integer pipe3.nFMLumped = 2;
//   final parameter Integer pipe3.iLumped = 3;
//   final parameter Boolean pipe3.useInnerPortProperties = false;
//   Real pipe3.state_a.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe3.state_a.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe3.state_a.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe3.state_a.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe3.state_b.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe3.state_b.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe3.state_b.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe3.state_b.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe3.statesFM[1].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe3.statesFM[1].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe3.statesFM[1].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe3.statesFM[1].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe3.statesFM[2].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe3.statesFM[2].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe3.statesFM[2].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe3.statesFM[2].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe3.statesFM[3].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe3.statesFM[3].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe3.statesFM[3].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe3.statesFM[3].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe3.statesFM[4].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe3.statesFM[4].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe3.statesFM[4].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe3.statesFM[4].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe3.statesFM[5].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe3.statesFM[5].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe3.statesFM[5].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe3.statesFM[5].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe3.statesFM[6].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe3.statesFM[6].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe3.statesFM[6].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe3.statesFM[6].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe3.statesFM[7].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe3.statesFM[7].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe3.statesFM[7].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe3.statesFM[7].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean pipe3.flowModel.from_dp = true;
//   final parameter Integer pipe3.flowModel.n = 7;
//   final Real pipe3.flowModel.states[1].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe3.statesFM[1].p;
//   final Real pipe3.flowModel.states[1].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe3.statesFM[1].T;
//   final Real pipe3.flowModel.states[1].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe3.flowModel.states[1].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe3.flowModel.states[2].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe3.statesFM[2].p;
//   final Real pipe3.flowModel.states[2].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe3.statesFM[2].T;
//   final Real pipe3.flowModel.states[2].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe3.flowModel.states[2].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe3.flowModel.states[3].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe3.statesFM[3].p;
//   final Real pipe3.flowModel.states[3].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe3.statesFM[3].T;
//   final Real pipe3.flowModel.states[3].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe3.flowModel.states[3].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe3.flowModel.states[4].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe3.statesFM[4].p;
//   final Real pipe3.flowModel.states[4].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe3.statesFM[4].T;
//   final Real pipe3.flowModel.states[4].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe3.flowModel.states[4].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe3.flowModel.states[5].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe3.statesFM[5].p;
//   final Real pipe3.flowModel.states[5].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe3.statesFM[5].T;
//   final Real pipe3.flowModel.states[5].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe3.flowModel.states[5].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe3.flowModel.states[6].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe3.statesFM[6].p;
//   final Real pipe3.flowModel.states[6].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe3.statesFM[6].T;
//   final Real pipe3.flowModel.states[6].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe3.flowModel.states[6].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe3.flowModel.states[7].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe3.statesFM[7].p;
//   final Real pipe3.flowModel.states[7].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe3.statesFM[7].T;
//   final Real pipe3.flowModel.states[7].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe3.flowModel.states[7].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe3.flowModel.vs[1](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe3.flowModel.vs[2](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe3.flowModel.vs[3](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe3.flowModel.vs[4](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe3.flowModel.vs[5](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe3.flowModel.vs[6](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe3.flowModel.vs[7](quantity = \"Velocity\", unit = \"m/s\");
//   final parameter Real pipe3.flowModel.nParallel = pipe3.nParallel;
//   final Real pipe3.flowModel.crossAreas[1](quantity = \"Area\", unit = \"m2\");
//   final Real pipe3.flowModel.crossAreas[2](quantity = \"Area\", unit = \"m2\");
//   final Real pipe3.flowModel.crossAreas[3](quantity = \"Area\", unit = \"m2\");
//   final Real pipe3.flowModel.crossAreas[4](quantity = \"Area\", unit = \"m2\");
//   final Real pipe3.flowModel.crossAreas[5](quantity = \"Area\", unit = \"m2\");
//   final Real pipe3.flowModel.crossAreas[6](quantity = \"Area\", unit = \"m2\");
//   final Real pipe3.flowModel.crossAreas[7](quantity = \"Area\", unit = \"m2\");
//   final Real pipe3.flowModel.dimensions[1](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.flowModel.dimensions[2](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.flowModel.dimensions[3](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.flowModel.dimensions[4](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.flowModel.dimensions[5](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.flowModel.dimensions[6](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.flowModel.dimensions[7](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.flowModel.roughnesses[1](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe3.flowModel.roughnesses[2](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe3.flowModel.roughnesses[3](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe3.flowModel.roughnesses[4](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe3.flowModel.roughnesses[5](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe3.flowModel.roughnesses[6](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe3.flowModel.roughnesses[7](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe3.flowModel.dheights[1](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.flowModel.dheights[2](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.flowModel.dheights[3](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.flowModel.dheights[4](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.flowModel.dheights[5](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.flowModel.dheights[6](quantity = \"Length\", unit = \"m\");
//   final parameter Real pipe3.flowModel.g(quantity = \"Acceleration\", unit = \"m/s2\") = system.g;
//   final parameter Boolean pipe3.flowModel.allowFlowReversal = true;
//   final parameter enumeration(DynamicFreeInitial, FixedInitial, SteadyStateInitial, SteadyState) pipe3.flowModel.momentumDynamics = Modelica.Fluid.Types.Dynamics.SteadyStateInitial;
//   final parameter Real pipe3.flowModel.m_flow_start(quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0) = 0.01;
//   final parameter Real pipe3.flowModel.p_a_start(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe3.p_a_start;
//   final parameter Real pipe3.flowModel.p_b_start(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe3.p_b_start;
//   final parameter Integer pipe3.flowModel.m = 6;
//   final Real pipe3.flowModel.pathLengths[1](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.flowModel.pathLengths[2](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.flowModel.pathLengths[3](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.flowModel.pathLengths[4](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.flowModel.pathLengths[5](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.flowModel.pathLengths[6](quantity = \"Length\", unit = \"m\");
//   Real pipe3.flowModel.m_flows[1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.01, stateSelect = StateSelect.prefer);
//   Real pipe3.flowModel.m_flows[2](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.01, stateSelect = StateSelect.prefer);
//   Real pipe3.flowModel.m_flows[3](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.01, stateSelect = StateSelect.prefer);
//   Real pipe3.flowModel.m_flows[4](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.01, stateSelect = StateSelect.prefer);
//   Real pipe3.flowModel.m_flows[5](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.01, stateSelect = StateSelect.prefer);
//   Real pipe3.flowModel.m_flows[6](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.01, stateSelect = StateSelect.prefer);
//   Real pipe3.flowModel.Is[1](quantity = \"Momentum\", unit = \"kg.m/s\");
//   Real pipe3.flowModel.Is[2](quantity = \"Momentum\", unit = \"kg.m/s\");
//   Real pipe3.flowModel.Is[3](quantity = \"Momentum\", unit = \"kg.m/s\");
//   Real pipe3.flowModel.Is[4](quantity = \"Momentum\", unit = \"kg.m/s\");
//   Real pipe3.flowModel.Is[5](quantity = \"Momentum\", unit = \"kg.m/s\");
//   Real pipe3.flowModel.Is[6](quantity = \"Momentum\", unit = \"kg.m/s\");
//   Real pipe3.flowModel.Ib_flows[1](quantity = \"Force\", unit = \"N\");
//   Real pipe3.flowModel.Ib_flows[2](quantity = \"Force\", unit = \"N\");
//   Real pipe3.flowModel.Ib_flows[3](quantity = \"Force\", unit = \"N\");
//   Real pipe3.flowModel.Ib_flows[4](quantity = \"Force\", unit = \"N\");
//   Real pipe3.flowModel.Ib_flows[5](quantity = \"Force\", unit = \"N\");
//   Real pipe3.flowModel.Ib_flows[6](quantity = \"Force\", unit = \"N\");
//   Real pipe3.flowModel.Fs_p[1](quantity = \"Force\", unit = \"N\");
//   Real pipe3.flowModel.Fs_p[2](quantity = \"Force\", unit = \"N\");
//   Real pipe3.flowModel.Fs_p[3](quantity = \"Force\", unit = \"N\");
//   Real pipe3.flowModel.Fs_p[4](quantity = \"Force\", unit = \"N\");
//   Real pipe3.flowModel.Fs_p[5](quantity = \"Force\", unit = \"N\");
//   Real pipe3.flowModel.Fs_p[6](quantity = \"Force\", unit = \"N\");
//   Real pipe3.flowModel.Fs_fg[1](quantity = \"Force\", unit = \"N\");
//   Real pipe3.flowModel.Fs_fg[2](quantity = \"Force\", unit = \"N\");
//   Real pipe3.flowModel.Fs_fg[3](quantity = \"Force\", unit = \"N\");
//   Real pipe3.flowModel.Fs_fg[4](quantity = \"Force\", unit = \"N\");
//   Real pipe3.flowModel.Fs_fg[5](quantity = \"Force\", unit = \"N\");
//   Real pipe3.flowModel.Fs_fg[6](quantity = \"Force\", unit = \"N\");
//   final parameter Boolean pipe3.flowModel.useUpstreamScheme = true;
//   final parameter Boolean pipe3.flowModel.use_Ib_flows = true;
//   Real pipe3.flowModel.rhos[1](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe3.flowModel.rhos[2](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe3.flowModel.rhos[3](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe3.flowModel.rhos[4](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe3.flowModel.rhos[5](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe3.flowModel.rhos[6](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe3.flowModel.rhos[7](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe3.flowModel.rhos_act[1](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe3.flowModel.rhos_act[2](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe3.flowModel.rhos_act[3](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe3.flowModel.rhos_act[4](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe3.flowModel.rhos_act[5](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe3.flowModel.rhos_act[6](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe3.flowModel.mus[1](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe3.flowModel.mus[2](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe3.flowModel.mus[3](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe3.flowModel.mus[4](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe3.flowModel.mus[5](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe3.flowModel.mus[6](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe3.flowModel.mus[7](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe3.flowModel.mus_act[1](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe3.flowModel.mus_act[2](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe3.flowModel.mus_act[3](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe3.flowModel.mus_act[4](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe3.flowModel.mus_act[5](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe3.flowModel.mus_act[6](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe3.flowModel.dps_fg[1](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", start = (pipe3.flowModel.p_a_start - pipe3.flowModel.p_b_start) / 6.0);
//   Real pipe3.flowModel.dps_fg[2](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", start = (pipe3.flowModel.p_a_start - pipe3.flowModel.p_b_start) / 6.0);
//   Real pipe3.flowModel.dps_fg[3](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", start = (pipe3.flowModel.p_a_start - pipe3.flowModel.p_b_start) / 6.0);
//   Real pipe3.flowModel.dps_fg[4](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", start = (pipe3.flowModel.p_a_start - pipe3.flowModel.p_b_start) / 6.0);
//   Real pipe3.flowModel.dps_fg[5](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", start = (pipe3.flowModel.p_a_start - pipe3.flowModel.p_b_start) / 6.0);
//   Real pipe3.flowModel.dps_fg[6](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", start = (pipe3.flowModel.p_a_start - pipe3.flowModel.p_b_start) / 6.0);
//   final parameter Real pipe3.flowModel.Re_turbulent(quantity = \"ReynoldsNumber\", unit = \"1\") = 4000.0;
//   final parameter Boolean pipe3.flowModel.show_Res = false;
//   protected final parameter Boolean pipe3.flowModel.n76 = false;
//   protected parameter Real pipe3.flowModel.n77(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 1.196838693581092;
//   protected final parameter Boolean pipe3.flowModel.n78 = false;
//   protected parameter Real pipe3.flowModel.n79(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0) = 1.823286547365138e-05;
//   Real pipe3.flowModel.pathLengths_internal[1](quantity = \"Length\", unit = \"m\");
//   Real pipe3.flowModel.pathLengths_internal[2](quantity = \"Length\", unit = \"m\");
//   Real pipe3.flowModel.pathLengths_internal[3](quantity = \"Length\", unit = \"m\");
//   Real pipe3.flowModel.pathLengths_internal[4](quantity = \"Length\", unit = \"m\");
//   Real pipe3.flowModel.pathLengths_internal[5](quantity = \"Length\", unit = \"m\");
//   Real pipe3.flowModel.pathLengths_internal[6](quantity = \"Length\", unit = \"m\");
//   Real pipe3.flowModel.Res_turbulent_internal[1](quantity = \"ReynoldsNumber\", unit = \"1\");
//   Real pipe3.flowModel.Res_turbulent_internal[2](quantity = \"ReynoldsNumber\", unit = \"1\");
//   Real pipe3.flowModel.Res_turbulent_internal[3](quantity = \"ReynoldsNumber\", unit = \"1\");
//   Real pipe3.flowModel.Res_turbulent_internal[4](quantity = \"ReynoldsNumber\", unit = \"1\");
//   Real pipe3.flowModel.Res_turbulent_internal[5](quantity = \"ReynoldsNumber\", unit = \"1\");
//   Real pipe3.flowModel.Res_turbulent_internal[6](quantity = \"ReynoldsNumber\", unit = \"1\");
//   parameter Real pipe3.flowModel.dp_nominal(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = 1.0, fixed = false, nominal = 100000.0);
//   parameter Real pipe3.flowModel.m_flow_nominal(quantity = \"MassFlowRate\", unit = \"kg/s\") = 100.0 * pipe3.flowModel.m_flow_small;
//   parameter Real pipe3.flowModel.m_flow_small(quantity = \"MassFlowRate\", unit = \"kg/s\") = system.m_flow_small;
//   protected parameter Real pipe3.flowModel.n80(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = 1.0, fixed = false, nominal = 100000.0);
//   protected final parameter Boolean pipe3.flowModel.n81 = false;
//   protected final parameter Boolean pipe3.flowModel.n82 = false;
//   protected Real pipe3.flowModel.n83[1](quantity = \"Length\", unit = \"m\");
//   protected Real pipe3.flowModel.n83[2](quantity = \"Length\", unit = \"m\");
//   protected Real pipe3.flowModel.n83[3](quantity = \"Length\", unit = \"m\");
//   protected Real pipe3.flowModel.n83[4](quantity = \"Length\", unit = \"m\");
//   protected Real pipe3.flowModel.n83[5](quantity = \"Length\", unit = \"m\");
//   protected Real pipe3.flowModel.n83[6](quantity = \"Length\", unit = \"m\");
//   protected Real pipe3.flowModel.n84(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.flowModel.WallFriction.pressureLoss_m_flow(pipe3.flowModel.m_flow_nominal / pipe3.flowModel.nParallel, pipe3.flowModel.n77, pipe3.flowModel.n77, pipe3.flowModel.n79, pipe3.flowModel.n79, pipe3.flowModel.pathLengths_internal[1], pipe3.flowModel.n83[1], (pipe3.flowModel.crossAreas[1] + pipe3.flowModel.crossAreas[2]) / 2.0, (pipe3.flowModel.roughnesses[1] + pipe3.flowModel.roughnesses[2]) / 2.0, pipe3.flowModel.m_flow_small / pipe3.flowModel.nParallel, pipe3.flowModel.Res_turbulent_internal[1]) + Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.flowModel.WallFriction.pressureLoss_m_flow(pipe3.flowModel.m_flow_nominal / pipe3.flowModel.nParallel, pipe3.flowModel.n77, pipe3.flowModel.n77, pipe3.flowModel.n79, pipe3.flowModel.n79, pipe3.flowModel.pathLengths_internal[2], pipe3.flowModel.n83[2], (pipe3.flowModel.crossAreas[2] + pipe3.flowModel.crossAreas[3]) / 2.0, (pipe3.flowModel.roughnesses[2] + pipe3.flowModel.roughnesses[3]) / 2.0, pipe3.flowModel.m_flow_small / pipe3.flowModel.nParallel, pipe3.flowModel.Res_turbulent_internal[2]) + Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.flowModel.WallFriction.pressureLoss_m_flow(pipe3.flowModel.m_flow_nominal / pipe3.flowModel.nParallel, pipe3.flowModel.n77, pipe3.flowModel.n77, pipe3.flowModel.n79, pipe3.flowModel.n79, pipe3.flowModel.pathLengths_internal[3], pipe3.flowModel.n83[3], (pipe3.flowModel.crossAreas[3] + pipe3.flowModel.crossAreas[4]) / 2.0, (pipe3.flowModel.roughnesses[3] + pipe3.flowModel.roughnesses[4]) / 2.0, pipe3.flowModel.m_flow_small / pipe3.flowModel.nParallel, pipe3.flowModel.Res_turbulent_internal[3]) + Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.flowModel.WallFriction.pressureLoss_m_flow(pipe3.flowModel.m_flow_nominal / pipe3.flowModel.nParallel, pipe3.flowModel.n77, pipe3.flowModel.n77, pipe3.flowModel.n79, pipe3.flowModel.n79, pipe3.flowModel.pathLengths_internal[4], pipe3.flowModel.n83[4], (pipe3.flowModel.crossAreas[4] + pipe3.flowModel.crossAreas[5]) / 2.0, (pipe3.flowModel.roughnesses[4] + pipe3.flowModel.roughnesses[5]) / 2.0, pipe3.flowModel.m_flow_small / pipe3.flowModel.nParallel, pipe3.flowModel.Res_turbulent_internal[4]) + Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.flowModel.WallFriction.pressureLoss_m_flow(pipe3.flowModel.m_flow_nominal / pipe3.flowModel.nParallel, pipe3.flowModel.n77, pipe3.flowModel.n77, pipe3.flowModel.n79, pipe3.flowModel.n79, pipe3.flowModel.pathLengths_internal[5], pipe3.flowModel.n83[5], (pipe3.flowModel.crossAreas[5] + pipe3.flowModel.crossAreas[6]) / 2.0, (pipe3.flowModel.roughnesses[5] + pipe3.flowModel.roughnesses[6]) / 2.0, pipe3.flowModel.m_flow_small / pipe3.flowModel.nParallel, pipe3.flowModel.Res_turbulent_internal[5]) + Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.flowModel.WallFriction.pressureLoss_m_flow(pipe3.flowModel.m_flow_nominal / pipe3.flowModel.nParallel, pipe3.flowModel.n77, pipe3.flowModel.n77, pipe3.flowModel.n79, pipe3.flowModel.n79, pipe3.flowModel.pathLengths_internal[6], pipe3.flowModel.n83[6], (pipe3.flowModel.crossAreas[6] + pipe3.flowModel.crossAreas[7]) / 2.0, (pipe3.flowModel.roughnesses[6] + pipe3.flowModel.roughnesses[7]) / 2.0, pipe3.flowModel.m_flow_small / pipe3.flowModel.nParallel, pipe3.flowModel.Res_turbulent_internal[6]);
//   Real pipe3.m_flows[1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.01);
//   Real pipe3.m_flows[2](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.01);
//   Real pipe3.m_flows[3](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.01);
//   Real pipe3.m_flows[4](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.01);
//   Real pipe3.m_flows[5](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.01);
//   Real pipe3.m_flows[6](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.01);
//   Real pipe3.mXi_flows[1,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe3.mXi_flows[2,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe3.mXi_flows[3,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe3.mXi_flows[4,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe3.mXi_flows[5,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe3.mXi_flows[6,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe3.H_flows[1](quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0);
//   Real pipe3.H_flows[2](quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0);
//   Real pipe3.H_flows[3](quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0);
//   Real pipe3.H_flows[4](quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0);
//   Real pipe3.H_flows[5](quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0);
//   Real pipe3.H_flows[6](quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0);
//   Real pipe3.vs[1](quantity = \"Velocity\", unit = \"m/s\");
//   Real pipe3.vs[2](quantity = \"Velocity\", unit = \"m/s\");
//   Real pipe3.vs[3](quantity = \"Velocity\", unit = \"m/s\");
//   Real pipe3.vs[4](quantity = \"Velocity\", unit = \"m/s\");
//   Real pipe3.vs[5](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real pipe3.n85[1](quantity = \"Length\", unit = \"m\");
//   protected Real pipe3.n85[2](quantity = \"Length\", unit = \"m\");
//   protected Real pipe3.n85[3](quantity = \"Length\", unit = \"m\");
//   protected Real pipe3.n85[4](quantity = \"Length\", unit = \"m\");
//   protected Real pipe3.n85[5](quantity = \"Length\", unit = \"m\");
//   protected Real pipe3.n85[6](quantity = \"Length\", unit = \"m\");
//   protected Real pipe3.n86[1](quantity = \"Length\", unit = \"m\");
//   protected Real pipe3.n86[2](quantity = \"Length\", unit = \"m\");
//   protected Real pipe3.n86[3](quantity = \"Length\", unit = \"m\");
//   protected Real pipe3.n86[4](quantity = \"Length\", unit = \"m\");
//   protected Real pipe3.n86[5](quantity = \"Length\", unit = \"m\");
//   protected Real pipe3.n86[6](quantity = \"Length\", unit = \"m\");
//   protected Real pipe3.n87[1](quantity = \"Area\", unit = \"m2\");
//   protected Real pipe3.n87[2](quantity = \"Area\", unit = \"m2\");
//   protected Real pipe3.n87[3](quantity = \"Area\", unit = \"m2\");
//   protected Real pipe3.n87[4](quantity = \"Area\", unit = \"m2\");
//   protected Real pipe3.n87[5](quantity = \"Area\", unit = \"m2\");
//   protected Real pipe3.n87[6](quantity = \"Area\", unit = \"m2\");
//   protected Real pipe3.n87[7](quantity = \"Area\", unit = \"m2\");
//   protected Real pipe3.n88[1](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real pipe3.n88[2](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real pipe3.n88[3](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real pipe3.n88[4](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real pipe3.n88[5](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real pipe3.n88[6](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real pipe3.n88[7](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real pipe3.n89[1](quantity = \"Length\", unit = \"m\");
//   protected Real pipe3.n89[2](quantity = \"Length\", unit = \"m\");
//   protected Real pipe3.n89[3](quantity = \"Length\", unit = \"m\");
//   protected Real pipe3.n89[4](quantity = \"Length\", unit = \"m\");
//   protected Real pipe3.n89[5](quantity = \"Length\", unit = \"m\");
//   protected Real pipe3.n89[6](quantity = \"Length\", unit = \"m\");
//   protected Real pipe3.n89[7](quantity = \"Length\", unit = \"m\");
//   protected Real pipe3.n90[1](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   protected Real pipe3.n90[2](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   protected Real pipe3.n90[3](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   protected Real pipe3.n90[4](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   protected Real pipe3.n90[5](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   protected Real pipe3.n90[6](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   protected Real pipe3.n90[7](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final parameter Boolean pipe3.use_HeatTransfer = false;
//   final parameter Integer pipe3.heatTransfer.n = 5;
//   final Real pipe3.heatTransfer.states[1].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe3.mediums[1].state.p;
//   final Real pipe3.heatTransfer.states[1].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe3.mediums[1].state.T;
//   final Real pipe3.heatTransfer.states[1].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe3.heatTransfer.states[1].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe3.heatTransfer.states[2].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe3.mediums[2].state.p;
//   final Real pipe3.heatTransfer.states[2].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe3.mediums[2].state.T;
//   final Real pipe3.heatTransfer.states[2].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe3.heatTransfer.states[2].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe3.heatTransfer.states[3].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe3.mediums[3].state.p;
//   final Real pipe3.heatTransfer.states[3].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe3.mediums[3].state.T;
//   final Real pipe3.heatTransfer.states[3].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe3.heatTransfer.states[3].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe3.heatTransfer.states[4].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe3.mediums[4].state.p;
//   final Real pipe3.heatTransfer.states[4].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe3.mediums[4].state.T;
//   final Real pipe3.heatTransfer.states[4].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe3.heatTransfer.states[4].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe3.heatTransfer.states[5].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe3.mediums[5].state.p;
//   final Real pipe3.heatTransfer.states[5].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe3.mediums[5].state.T;
//   final Real pipe3.heatTransfer.states[5].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe3.heatTransfer.states[5].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe3.heatTransfer.surfaceAreas[1](quantity = \"Area\", unit = \"m2\");
//   final Real pipe3.heatTransfer.surfaceAreas[2](quantity = \"Area\", unit = \"m2\");
//   final Real pipe3.heatTransfer.surfaceAreas[3](quantity = \"Area\", unit = \"m2\");
//   final Real pipe3.heatTransfer.surfaceAreas[4](quantity = \"Area\", unit = \"m2\");
//   final Real pipe3.heatTransfer.surfaceAreas[5](quantity = \"Area\", unit = \"m2\");
//   Real pipe3.heatTransfer.Q_flows[1](quantity = \"Power\", unit = \"W\");
//   Real pipe3.heatTransfer.Q_flows[2](quantity = \"Power\", unit = \"W\");
//   Real pipe3.heatTransfer.Q_flows[3](quantity = \"Power\", unit = \"W\");
//   Real pipe3.heatTransfer.Q_flows[4](quantity = \"Power\", unit = \"W\");
//   Real pipe3.heatTransfer.Q_flows[5](quantity = \"Power\", unit = \"W\");
//   final parameter Boolean pipe3.heatTransfer.use_k = false;
//   final parameter Real pipe3.heatTransfer.k(quantity = \"CoefficientOfHeatTransfer\", unit = \"W/(m2.K)\") = 0.0;
//   parameter Real pipe3.heatTransfer.T_ambient(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = system.T_ambient;
//   Real pipe3.heatTransfer.heatPorts[1].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe3.heatTransfer.heatPorts[1].Q_flow(quantity = \"Power\", unit = \"W\");
//   Real pipe3.heatTransfer.heatPorts[2].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe3.heatTransfer.heatPorts[2].Q_flow(quantity = \"Power\", unit = \"W\");
//   Real pipe3.heatTransfer.heatPorts[3].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe3.heatTransfer.heatPorts[3].Q_flow(quantity = \"Power\", unit = \"W\");
//   Real pipe3.heatTransfer.heatPorts[4].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe3.heatTransfer.heatPorts[4].Q_flow(quantity = \"Power\", unit = \"W\");
//   Real pipe3.heatTransfer.heatPorts[5].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe3.heatTransfer.heatPorts[5].Q_flow(quantity = \"Power\", unit = \"W\");
//   Real pipe3.heatTransfer.Ts[1](quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe3.heatTransfer.Ts[2](quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe3.heatTransfer.Ts[3](quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe3.heatTransfer.Ts[4](quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe3.heatTransfer.Ts[5](quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   final Real pipe3.heatTransfer.vs[1](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe3.heatTransfer.vs[2](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe3.heatTransfer.vs[3](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe3.heatTransfer.vs[4](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe3.heatTransfer.vs[5](quantity = \"Velocity\", unit = \"m/s\");
//   final parameter Real pipe3.heatTransfer.nParallel = pipe3.nParallel;
//   final Real pipe3.heatTransfer.lengths[1](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.heatTransfer.lengths[2](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.heatTransfer.lengths[3](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.heatTransfer.lengths[4](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.heatTransfer.lengths[5](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.heatTransfer.dimensions[1](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.heatTransfer.dimensions[2](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.heatTransfer.dimensions[3](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.heatTransfer.dimensions[4](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.heatTransfer.dimensions[5](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.heatTransfer.roughnesses[1](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe3.heatTransfer.roughnesses[2](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe3.heatTransfer.roughnesses[3](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe3.heatTransfer.roughnesses[4](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe3.heatTransfer.roughnesses[5](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final parameter Real pipe3.dxs[1] = 0.2;
//   final parameter Real pipe3.dxs[2] = 0.2;
//   final parameter Real pipe3.dxs[3] = 0.2;
//   final parameter Real pipe3.dxs[4] = 0.2;
//   final parameter Real pipe3.dxs[5] = 0.2;
//   final parameter Boolean pipe4.allowFlowReversal = true;
//   Real pipe4.port_a.m_flow(quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0);
//   Real pipe4.port_a.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe4.port_a.h_outflow(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
//   Real pipe4.port_a.Xi_outflow[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real pipe4.port_b.m_flow(quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 9.999999999999999e+59);
//   Real pipe4.port_b.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe4.port_b.h_outflow(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
//   Real pipe4.port_b.Xi_outflow[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected final parameter Boolean pipe4.n91 = false;
//   protected final parameter Boolean pipe4.n92 = false;
//   protected parameter Boolean pipe4.n93 = true;
//   parameter Real pipe4.nParallel(min = 1.0) = 1.0;
//   final parameter Real pipe4.length(quantity = \"Length\", unit = \"m\") = 50.0;
//   parameter Boolean pipe4.isCircular = true;
//   parameter Real pipe4.diameter(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0254;
//   parameter Real pipe4.crossArea(quantity = \"Area\", unit = \"m2\") = 3.141592653589793 * pipe4.diameter * pipe4.diameter / 4.0;
//   parameter Real pipe4.perimeter(quantity = \"Length\", unit = \"m\", min = 0.0) = 3.141592653589793 * pipe4.diameter;
//   parameter Real pipe4.roughness(quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = 2.5e-05;
//   final parameter Real pipe4.V(quantity = \"Volume\", unit = \"m3\") = pipe4.crossArea * 50.0 * pipe4.nParallel;
//   final parameter Real pipe4.height_ab(quantity = \"Length\", unit = \"m\") = 50.0;
//   final parameter Integer pipe4.n = 5;
//   final Real pipe4.fluidVolumes[1](quantity = \"Volume\", unit = \"m3\");
//   final Real pipe4.fluidVolumes[2](quantity = \"Volume\", unit = \"m3\");
//   final Real pipe4.fluidVolumes[3](quantity = \"Volume\", unit = \"m3\");
//   final Real pipe4.fluidVolumes[4](quantity = \"Volume\", unit = \"m3\");
//   final Real pipe4.fluidVolumes[5](quantity = \"Volume\", unit = \"m3\");
//   final parameter enumeration(DynamicFreeInitial, FixedInitial, SteadyStateInitial, SteadyState) pipe4.energyDynamics = Modelica.Fluid.Types.Dynamics.SteadyStateInitial;
//   final parameter enumeration(DynamicFreeInitial, FixedInitial, SteadyStateInitial, SteadyState) pipe4.massDynamics = Modelica.Fluid.Types.Dynamics.SteadyStateInitial;
//   final parameter enumeration(DynamicFreeInitial, FixedInitial, SteadyStateInitial, SteadyState) pipe4.substanceDynamics = Modelica.Fluid.Types.Dynamics.SteadyStateInitial;
//   final parameter enumeration(DynamicFreeInitial, FixedInitial, SteadyStateInitial, SteadyState) pipe4.traceDynamics = Modelica.Fluid.Types.Dynamics.SteadyStateInitial;
//   parameter Real pipe4.p_a_start(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = 120000.0;
//   parameter Real pipe4.p_b_start(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = 100000.0;
//   final parameter Real pipe4.ps_start[1](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe4.p_a_start;
//   final parameter Real pipe4.ps_start[2](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe4.p_a_start + (pipe4.p_b_start - pipe4.p_a_start) / 4.0;
//   final parameter Real pipe4.ps_start[3](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe4.p_a_start + (pipe4.p_b_start - pipe4.p_a_start) * 2.0 / 4.0;
//   final parameter Real pipe4.ps_start[4](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe4.p_a_start + (pipe4.p_b_start - pipe4.p_a_start) * 3.0 / 4.0;
//   final parameter Real pipe4.ps_start[5](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe4.p_a_start + (pipe4.p_b_start - pipe4.p_a_start) * 4.0 / 4.0;
//   final parameter Boolean pipe4.use_T_start = true;
//   parameter Real pipe4.T_start(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = system.T_start;
//   parameter Real pipe4.h_start(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0) = Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.specificEnthalpy_pTX((pipe4.p_a_start + pipe4.p_b_start) / 2.0, pipe4.T_start, pipe4.X_start);
//   parameter Real pipe4.X_start[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = 0.01;
//   parameter Real pipe4.X_start[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = 0.99;
//   Real pipe4.Us[1](quantity = \"Energy\", unit = \"J\");
//   Real pipe4.Us[2](quantity = \"Energy\", unit = \"J\");
//   Real pipe4.Us[3](quantity = \"Energy\", unit = \"J\");
//   Real pipe4.Us[4](quantity = \"Energy\", unit = \"J\");
//   Real pipe4.Us[5](quantity = \"Energy\", unit = \"J\");
//   Real pipe4.ms[1](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe4.ms[2](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe4.ms[3](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe4.ms[4](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe4.ms[5](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe4.mXis[1,1](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe4.mXis[2,1](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe4.mXis[3,1](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe4.mXis[4,1](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe4.mXis[5,1](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe4.mediums[1].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = pipe4.ps_start[1], nominal = 100000.0, stateSelect = StateSelect.prefer);
//   Real pipe4.mediums[1].Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = pipe4.X_start[1], stateSelect = StateSelect.prefer);
//   Real pipe4.mediums[1].h(quantity = \"SpecificEnergy\", unit = \"J/kg\", start = pipe4.h_start);
//   Real pipe4.mediums[1].d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe4.mediums[1].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = pipe4.T_start, nominal = 300.0, stateSelect = StateSelect.prefer);
//   Real pipe4.mediums[1].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe4.mediums[1].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe4.mediums[1].u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real pipe4.mediums[1].R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real pipe4.mediums[1].MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real pipe4.mediums[1].state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe4.mediums[1].state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe4.mediums[1].state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe4.mediums[1].state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean pipe4.mediums[1].preferredMediumStates = true;
//   final parameter Boolean pipe4.mediums[1].standardOrderComponents = true;
//   Real pipe4.mediums[1].T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = Modelica.SIunits.Conversions.to_degC(pipe4.mediums[1].T);
//   Real pipe4.mediums[1].p_bar(quantity = \"Pressure\", unit = \"bar\") = Modelica.SIunits.Conversions.to_bar(pipe4.mediums[1].p);
//   Real pipe4.mediums[1].x_water(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real pipe4.mediums[1].phi;
//   protected Real pipe4.mediums[1].n94(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe4.mediums[1].n95(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe4.mediums[1].n96(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe4.mediums[1].n97(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe4.mediums[1].n98(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe4.mediums[1].n99(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe4.mediums[2].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = pipe4.ps_start[2], nominal = 100000.0, stateSelect = StateSelect.prefer);
//   Real pipe4.mediums[2].Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = pipe4.X_start[1], stateSelect = StateSelect.prefer);
//   Real pipe4.mediums[2].h(quantity = \"SpecificEnergy\", unit = \"J/kg\", start = pipe4.h_start);
//   Real pipe4.mediums[2].d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe4.mediums[2].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = pipe4.T_start, nominal = 300.0, stateSelect = StateSelect.prefer);
//   Real pipe4.mediums[2].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe4.mediums[2].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe4.mediums[2].u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real pipe4.mediums[2].R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real pipe4.mediums[2].MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real pipe4.mediums[2].state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe4.mediums[2].state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe4.mediums[2].state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe4.mediums[2].state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean pipe4.mediums[2].preferredMediumStates = true;
//   final parameter Boolean pipe4.mediums[2].standardOrderComponents = true;
//   Real pipe4.mediums[2].T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = Modelica.SIunits.Conversions.to_degC(pipe4.mediums[2].T);
//   Real pipe4.mediums[2].p_bar(quantity = \"Pressure\", unit = \"bar\") = Modelica.SIunits.Conversions.to_bar(pipe4.mediums[2].p);
//   Real pipe4.mediums[2].x_water(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real pipe4.mediums[2].phi;
//   protected Real pipe4.mediums[2].n94(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe4.mediums[2].n95(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe4.mediums[2].n96(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe4.mediums[2].n97(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe4.mediums[2].n98(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe4.mediums[2].n99(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe4.mediums[3].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = pipe4.ps_start[3], nominal = 100000.0, stateSelect = StateSelect.prefer);
//   Real pipe4.mediums[3].Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = pipe4.X_start[1], stateSelect = StateSelect.prefer);
//   Real pipe4.mediums[3].h(quantity = \"SpecificEnergy\", unit = \"J/kg\", start = pipe4.h_start);
//   Real pipe4.mediums[3].d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe4.mediums[3].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = pipe4.T_start, nominal = 300.0, stateSelect = StateSelect.prefer);
//   Real pipe4.mediums[3].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe4.mediums[3].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe4.mediums[3].u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real pipe4.mediums[3].R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real pipe4.mediums[3].MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real pipe4.mediums[3].state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe4.mediums[3].state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe4.mediums[3].state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe4.mediums[3].state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean pipe4.mediums[3].preferredMediumStates = true;
//   final parameter Boolean pipe4.mediums[3].standardOrderComponents = true;
//   Real pipe4.mediums[3].T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = Modelica.SIunits.Conversions.to_degC(pipe4.mediums[3].T);
//   Real pipe4.mediums[3].p_bar(quantity = \"Pressure\", unit = \"bar\") = Modelica.SIunits.Conversions.to_bar(pipe4.mediums[3].p);
//   Real pipe4.mediums[3].x_water(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real pipe4.mediums[3].phi;
//   protected Real pipe4.mediums[3].n94(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe4.mediums[3].n95(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe4.mediums[3].n96(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe4.mediums[3].n97(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe4.mediums[3].n98(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe4.mediums[3].n99(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe4.mediums[4].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = pipe4.ps_start[4], nominal = 100000.0, stateSelect = StateSelect.prefer);
//   Real pipe4.mediums[4].Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = pipe4.X_start[1], stateSelect = StateSelect.prefer);
//   Real pipe4.mediums[4].h(quantity = \"SpecificEnergy\", unit = \"J/kg\", start = pipe4.h_start);
//   Real pipe4.mediums[4].d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe4.mediums[4].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = pipe4.T_start, nominal = 300.0, stateSelect = StateSelect.prefer);
//   Real pipe4.mediums[4].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe4.mediums[4].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe4.mediums[4].u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real pipe4.mediums[4].R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real pipe4.mediums[4].MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real pipe4.mediums[4].state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe4.mediums[4].state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe4.mediums[4].state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe4.mediums[4].state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean pipe4.mediums[4].preferredMediumStates = true;
//   final parameter Boolean pipe4.mediums[4].standardOrderComponents = true;
//   Real pipe4.mediums[4].T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = Modelica.SIunits.Conversions.to_degC(pipe4.mediums[4].T);
//   Real pipe4.mediums[4].p_bar(quantity = \"Pressure\", unit = \"bar\") = Modelica.SIunits.Conversions.to_bar(pipe4.mediums[4].p);
//   Real pipe4.mediums[4].x_water(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real pipe4.mediums[4].phi;
//   protected Real pipe4.mediums[4].n94(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe4.mediums[4].n95(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe4.mediums[4].n96(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe4.mediums[4].n97(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe4.mediums[4].n98(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe4.mediums[4].n99(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe4.mediums[5].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = pipe4.ps_start[5], nominal = 100000.0, stateSelect = StateSelect.prefer);
//   Real pipe4.mediums[5].Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = pipe4.X_start[1], stateSelect = StateSelect.prefer);
//   Real pipe4.mediums[5].h(quantity = \"SpecificEnergy\", unit = \"J/kg\", start = pipe4.h_start);
//   Real pipe4.mediums[5].d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe4.mediums[5].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = pipe4.T_start, nominal = 300.0, stateSelect = StateSelect.prefer);
//   Real pipe4.mediums[5].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe4.mediums[5].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe4.mediums[5].u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real pipe4.mediums[5].R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real pipe4.mediums[5].MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real pipe4.mediums[5].state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe4.mediums[5].state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe4.mediums[5].state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe4.mediums[5].state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean pipe4.mediums[5].preferredMediumStates = true;
//   final parameter Boolean pipe4.mediums[5].standardOrderComponents = true;
//   Real pipe4.mediums[5].T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = Modelica.SIunits.Conversions.to_degC(pipe4.mediums[5].T);
//   Real pipe4.mediums[5].p_bar(quantity = \"Pressure\", unit = \"bar\") = Modelica.SIunits.Conversions.to_bar(pipe4.mediums[5].p);
//   Real pipe4.mediums[5].x_water(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real pipe4.mediums[5].phi;
//   protected Real pipe4.mediums[5].n94(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe4.mediums[5].n95(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe4.mediums[5].n96(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe4.mediums[5].n97(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe4.mediums[5].n98(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real pipe4.mediums[5].n99(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe4.mb_flows[1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe4.mb_flows[2](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe4.mb_flows[3](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe4.mb_flows[4](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe4.mb_flows[5](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe4.mbXi_flows[1,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe4.mbXi_flows[2,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe4.mbXi_flows[3,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe4.mbXi_flows[4,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe4.mbXi_flows[5,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe4.Hb_flows[1](quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   Real pipe4.Hb_flows[2](quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   Real pipe4.Hb_flows[3](quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   Real pipe4.Hb_flows[4](quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   Real pipe4.Hb_flows[5](quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   Real pipe4.Qb_flows[1](quantity = \"Power\", unit = \"W\");
//   Real pipe4.Qb_flows[2](quantity = \"Power\", unit = \"W\");
//   Real pipe4.Qb_flows[3](quantity = \"Power\", unit = \"W\");
//   Real pipe4.Qb_flows[4](quantity = \"Power\", unit = \"W\");
//   Real pipe4.Qb_flows[5](quantity = \"Power\", unit = \"W\");
//   Real pipe4.Wb_flows[1](quantity = \"Power\", unit = \"W\");
//   Real pipe4.Wb_flows[2](quantity = \"Power\", unit = \"W\");
//   Real pipe4.Wb_flows[3](quantity = \"Power\", unit = \"W\");
//   Real pipe4.Wb_flows[4](quantity = \"Power\", unit = \"W\");
//   Real pipe4.Wb_flows[5](quantity = \"Power\", unit = \"W\");
//   protected final parameter Boolean pipe4.n100 = true;
//   final parameter Real pipe4.lengths[1](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter Real pipe4.lengths[2](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter Real pipe4.lengths[3](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter Real pipe4.lengths[4](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter Real pipe4.lengths[5](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter Real pipe4.crossAreas[1](quantity = \"Area\", unit = \"m2\") = pipe4.crossArea;
//   final parameter Real pipe4.crossAreas[2](quantity = \"Area\", unit = \"m2\") = pipe4.crossArea;
//   final parameter Real pipe4.crossAreas[3](quantity = \"Area\", unit = \"m2\") = pipe4.crossArea;
//   final parameter Real pipe4.crossAreas[4](quantity = \"Area\", unit = \"m2\") = pipe4.crossArea;
//   final parameter Real pipe4.crossAreas[5](quantity = \"Area\", unit = \"m2\") = pipe4.crossArea;
//   final parameter Real pipe4.dimensions[1](quantity = \"Length\", unit = \"m\") = 4.0 * pipe4.crossArea / pipe4.perimeter;
//   final parameter Real pipe4.dimensions[2](quantity = \"Length\", unit = \"m\") = 4.0 * pipe4.crossArea / pipe4.perimeter;
//   final parameter Real pipe4.dimensions[3](quantity = \"Length\", unit = \"m\") = 4.0 * pipe4.crossArea / pipe4.perimeter;
//   final parameter Real pipe4.dimensions[4](quantity = \"Length\", unit = \"m\") = 4.0 * pipe4.crossArea / pipe4.perimeter;
//   final parameter Real pipe4.dimensions[5](quantity = \"Length\", unit = \"m\") = 4.0 * pipe4.crossArea / pipe4.perimeter;
//   final parameter Real pipe4.roughnesses[1](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = pipe4.roughness;
//   final parameter Real pipe4.roughnesses[2](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = pipe4.roughness;
//   final parameter Real pipe4.roughnesses[3](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = pipe4.roughness;
//   final parameter Real pipe4.roughnesses[4](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = pipe4.roughness;
//   final parameter Real pipe4.roughnesses[5](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = pipe4.roughness;
//   final parameter Real pipe4.dheights[1](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter Real pipe4.dheights[2](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter Real pipe4.dheights[3](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter Real pipe4.dheights[4](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter Real pipe4.dheights[5](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter enumeration(DynamicFreeInitial, FixedInitial, SteadyStateInitial, SteadyState) pipe4.momentumDynamics = Modelica.Fluid.Types.Dynamics.SteadyStateInitial;
//   final parameter Real pipe4.m_flow_start(quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0) = 0.02;
//   final parameter Integer pipe4.nNodes(min = 1) = 5;
//   final parameter enumeration(av_vb, a_v_b, av_b, a_vb) pipe4.modelStructure = Modelica.Fluid.Types.ModelStructure.a_v_b;
//   final parameter Boolean pipe4.useLumpedPressure = false;
//   final parameter Integer pipe4.nFM = 6;
//   final parameter Integer pipe4.nFMDistributed = 6;
//   final parameter Integer pipe4.nFMLumped = 2;
//   final parameter Integer pipe4.iLumped = 3;
//   final parameter Boolean pipe4.useInnerPortProperties = false;
//   Real pipe4.state_a.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe4.state_a.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe4.state_a.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe4.state_a.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe4.state_b.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe4.state_b.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe4.state_b.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe4.state_b.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe4.statesFM[1].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe4.statesFM[1].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe4.statesFM[1].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe4.statesFM[1].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe4.statesFM[2].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe4.statesFM[2].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe4.statesFM[2].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe4.statesFM[2].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe4.statesFM[3].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe4.statesFM[3].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe4.statesFM[3].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe4.statesFM[3].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe4.statesFM[4].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe4.statesFM[4].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe4.statesFM[4].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe4.statesFM[4].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe4.statesFM[5].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe4.statesFM[5].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe4.statesFM[5].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe4.statesFM[5].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe4.statesFM[6].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe4.statesFM[6].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe4.statesFM[6].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe4.statesFM[6].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe4.statesFM[7].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe4.statesFM[7].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe4.statesFM[7].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe4.statesFM[7].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean pipe4.flowModel.from_dp = true;
//   final parameter Integer pipe4.flowModel.n = 7;
//   final Real pipe4.flowModel.states[1].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe4.statesFM[1].p;
//   final Real pipe4.flowModel.states[1].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe4.statesFM[1].T;
//   final Real pipe4.flowModel.states[1].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe4.flowModel.states[1].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe4.flowModel.states[2].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe4.statesFM[2].p;
//   final Real pipe4.flowModel.states[2].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe4.statesFM[2].T;
//   final Real pipe4.flowModel.states[2].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe4.flowModel.states[2].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe4.flowModel.states[3].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe4.statesFM[3].p;
//   final Real pipe4.flowModel.states[3].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe4.statesFM[3].T;
//   final Real pipe4.flowModel.states[3].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe4.flowModel.states[3].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe4.flowModel.states[4].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe4.statesFM[4].p;
//   final Real pipe4.flowModel.states[4].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe4.statesFM[4].T;
//   final Real pipe4.flowModel.states[4].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe4.flowModel.states[4].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe4.flowModel.states[5].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe4.statesFM[5].p;
//   final Real pipe4.flowModel.states[5].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe4.statesFM[5].T;
//   final Real pipe4.flowModel.states[5].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe4.flowModel.states[5].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe4.flowModel.states[6].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe4.statesFM[6].p;
//   final Real pipe4.flowModel.states[6].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe4.statesFM[6].T;
//   final Real pipe4.flowModel.states[6].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe4.flowModel.states[6].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe4.flowModel.states[7].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe4.statesFM[7].p;
//   final Real pipe4.flowModel.states[7].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe4.statesFM[7].T;
//   final Real pipe4.flowModel.states[7].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe4.flowModel.states[7].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe4.flowModel.vs[1](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe4.flowModel.vs[2](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe4.flowModel.vs[3](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe4.flowModel.vs[4](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe4.flowModel.vs[5](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe4.flowModel.vs[6](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe4.flowModel.vs[7](quantity = \"Velocity\", unit = \"m/s\");
//   final parameter Real pipe4.flowModel.nParallel = pipe4.nParallel;
//   final Real pipe4.flowModel.crossAreas[1](quantity = \"Area\", unit = \"m2\");
//   final Real pipe4.flowModel.crossAreas[2](quantity = \"Area\", unit = \"m2\");
//   final Real pipe4.flowModel.crossAreas[3](quantity = \"Area\", unit = \"m2\");
//   final Real pipe4.flowModel.crossAreas[4](quantity = \"Area\", unit = \"m2\");
//   final Real pipe4.flowModel.crossAreas[5](quantity = \"Area\", unit = \"m2\");
//   final Real pipe4.flowModel.crossAreas[6](quantity = \"Area\", unit = \"m2\");
//   final Real pipe4.flowModel.crossAreas[7](quantity = \"Area\", unit = \"m2\");
//   final Real pipe4.flowModel.dimensions[1](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.flowModel.dimensions[2](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.flowModel.dimensions[3](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.flowModel.dimensions[4](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.flowModel.dimensions[5](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.flowModel.dimensions[6](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.flowModel.dimensions[7](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.flowModel.roughnesses[1](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe4.flowModel.roughnesses[2](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe4.flowModel.roughnesses[3](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe4.flowModel.roughnesses[4](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe4.flowModel.roughnesses[5](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe4.flowModel.roughnesses[6](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe4.flowModel.roughnesses[7](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe4.flowModel.dheights[1](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.flowModel.dheights[2](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.flowModel.dheights[3](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.flowModel.dheights[4](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.flowModel.dheights[5](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.flowModel.dheights[6](quantity = \"Length\", unit = \"m\");
//   final parameter Real pipe4.flowModel.g(quantity = \"Acceleration\", unit = \"m/s2\") = system.g;
//   final parameter Boolean pipe4.flowModel.allowFlowReversal = true;
//   final parameter enumeration(DynamicFreeInitial, FixedInitial, SteadyStateInitial, SteadyState) pipe4.flowModel.momentumDynamics = Modelica.Fluid.Types.Dynamics.SteadyStateInitial;
//   final parameter Real pipe4.flowModel.m_flow_start(quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0) = 0.02;
//   final parameter Real pipe4.flowModel.p_a_start(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe4.p_a_start;
//   final parameter Real pipe4.flowModel.p_b_start(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe4.p_b_start;
//   final parameter Integer pipe4.flowModel.m = 6;
//   final Real pipe4.flowModel.pathLengths[1](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.flowModel.pathLengths[2](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.flowModel.pathLengths[3](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.flowModel.pathLengths[4](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.flowModel.pathLengths[5](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.flowModel.pathLengths[6](quantity = \"Length\", unit = \"m\");
//   Real pipe4.flowModel.m_flows[1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.02, stateSelect = StateSelect.prefer);
//   Real pipe4.flowModel.m_flows[2](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.02, stateSelect = StateSelect.prefer);
//   Real pipe4.flowModel.m_flows[3](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.02, stateSelect = StateSelect.prefer);
//   Real pipe4.flowModel.m_flows[4](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.02, stateSelect = StateSelect.prefer);
//   Real pipe4.flowModel.m_flows[5](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.02, stateSelect = StateSelect.prefer);
//   Real pipe4.flowModel.m_flows[6](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.02, stateSelect = StateSelect.prefer);
//   Real pipe4.flowModel.Is[1](quantity = \"Momentum\", unit = \"kg.m/s\");
//   Real pipe4.flowModel.Is[2](quantity = \"Momentum\", unit = \"kg.m/s\");
//   Real pipe4.flowModel.Is[3](quantity = \"Momentum\", unit = \"kg.m/s\");
//   Real pipe4.flowModel.Is[4](quantity = \"Momentum\", unit = \"kg.m/s\");
//   Real pipe4.flowModel.Is[5](quantity = \"Momentum\", unit = \"kg.m/s\");
//   Real pipe4.flowModel.Is[6](quantity = \"Momentum\", unit = \"kg.m/s\");
//   Real pipe4.flowModel.Ib_flows[1](quantity = \"Force\", unit = \"N\");
//   Real pipe4.flowModel.Ib_flows[2](quantity = \"Force\", unit = \"N\");
//   Real pipe4.flowModel.Ib_flows[3](quantity = \"Force\", unit = \"N\");
//   Real pipe4.flowModel.Ib_flows[4](quantity = \"Force\", unit = \"N\");
//   Real pipe4.flowModel.Ib_flows[5](quantity = \"Force\", unit = \"N\");
//   Real pipe4.flowModel.Ib_flows[6](quantity = \"Force\", unit = \"N\");
//   Real pipe4.flowModel.Fs_p[1](quantity = \"Force\", unit = \"N\");
//   Real pipe4.flowModel.Fs_p[2](quantity = \"Force\", unit = \"N\");
//   Real pipe4.flowModel.Fs_p[3](quantity = \"Force\", unit = \"N\");
//   Real pipe4.flowModel.Fs_p[4](quantity = \"Force\", unit = \"N\");
//   Real pipe4.flowModel.Fs_p[5](quantity = \"Force\", unit = \"N\");
//   Real pipe4.flowModel.Fs_p[6](quantity = \"Force\", unit = \"N\");
//   Real pipe4.flowModel.Fs_fg[1](quantity = \"Force\", unit = \"N\");
//   Real pipe4.flowModel.Fs_fg[2](quantity = \"Force\", unit = \"N\");
//   Real pipe4.flowModel.Fs_fg[3](quantity = \"Force\", unit = \"N\");
//   Real pipe4.flowModel.Fs_fg[4](quantity = \"Force\", unit = \"N\");
//   Real pipe4.flowModel.Fs_fg[5](quantity = \"Force\", unit = \"N\");
//   Real pipe4.flowModel.Fs_fg[6](quantity = \"Force\", unit = \"N\");
//   final parameter Boolean pipe4.flowModel.useUpstreamScheme = true;
//   final parameter Boolean pipe4.flowModel.use_Ib_flows = true;
//   Real pipe4.flowModel.rhos[1](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe4.flowModel.rhos[2](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe4.flowModel.rhos[3](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe4.flowModel.rhos[4](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe4.flowModel.rhos[5](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe4.flowModel.rhos[6](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe4.flowModel.rhos[7](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe4.flowModel.rhos_act[1](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe4.flowModel.rhos_act[2](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe4.flowModel.rhos_act[3](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe4.flowModel.rhos_act[4](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe4.flowModel.rhos_act[5](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe4.flowModel.rhos_act[6](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe4.flowModel.mus[1](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe4.flowModel.mus[2](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe4.flowModel.mus[3](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe4.flowModel.mus[4](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe4.flowModel.mus[5](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe4.flowModel.mus[6](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe4.flowModel.mus[7](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe4.flowModel.mus_act[1](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe4.flowModel.mus_act[2](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe4.flowModel.mus_act[3](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe4.flowModel.mus_act[4](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe4.flowModel.mus_act[5](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe4.flowModel.mus_act[6](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe4.flowModel.dps_fg[1](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", start = (pipe4.flowModel.p_a_start - pipe4.flowModel.p_b_start) / 6.0);
//   Real pipe4.flowModel.dps_fg[2](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", start = (pipe4.flowModel.p_a_start - pipe4.flowModel.p_b_start) / 6.0);
//   Real pipe4.flowModel.dps_fg[3](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", start = (pipe4.flowModel.p_a_start - pipe4.flowModel.p_b_start) / 6.0);
//   Real pipe4.flowModel.dps_fg[4](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", start = (pipe4.flowModel.p_a_start - pipe4.flowModel.p_b_start) / 6.0);
//   Real pipe4.flowModel.dps_fg[5](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", start = (pipe4.flowModel.p_a_start - pipe4.flowModel.p_b_start) / 6.0);
//   Real pipe4.flowModel.dps_fg[6](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", start = (pipe4.flowModel.p_a_start - pipe4.flowModel.p_b_start) / 6.0);
//   final parameter Real pipe4.flowModel.Re_turbulent(quantity = \"ReynoldsNumber\", unit = \"1\") = 4000.0;
//   final parameter Boolean pipe4.flowModel.show_Res = false;
//   protected final parameter Boolean pipe4.flowModel.n101 = false;
//   protected parameter Real pipe4.flowModel.n102(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 1.196838693581092;
//   protected final parameter Boolean pipe4.flowModel.n103 = false;
//   protected parameter Real pipe4.flowModel.n104(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0) = 1.823286547365138e-05;
//   Real pipe4.flowModel.pathLengths_internal[1](quantity = \"Length\", unit = \"m\");
//   Real pipe4.flowModel.pathLengths_internal[2](quantity = \"Length\", unit = \"m\");
//   Real pipe4.flowModel.pathLengths_internal[3](quantity = \"Length\", unit = \"m\");
//   Real pipe4.flowModel.pathLengths_internal[4](quantity = \"Length\", unit = \"m\");
//   Real pipe4.flowModel.pathLengths_internal[5](quantity = \"Length\", unit = \"m\");
//   Real pipe4.flowModel.pathLengths_internal[6](quantity = \"Length\", unit = \"m\");
//   Real pipe4.flowModel.Res_turbulent_internal[1](quantity = \"ReynoldsNumber\", unit = \"1\");
//   Real pipe4.flowModel.Res_turbulent_internal[2](quantity = \"ReynoldsNumber\", unit = \"1\");
//   Real pipe4.flowModel.Res_turbulent_internal[3](quantity = \"ReynoldsNumber\", unit = \"1\");
//   Real pipe4.flowModel.Res_turbulent_internal[4](quantity = \"ReynoldsNumber\", unit = \"1\");
//   Real pipe4.flowModel.Res_turbulent_internal[5](quantity = \"ReynoldsNumber\", unit = \"1\");
//   Real pipe4.flowModel.Res_turbulent_internal[6](quantity = \"ReynoldsNumber\", unit = \"1\");
//   parameter Real pipe4.flowModel.dp_nominal(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = 1.0, fixed = false, nominal = 100000.0);
//   parameter Real pipe4.flowModel.m_flow_nominal(quantity = \"MassFlowRate\", unit = \"kg/s\") = 100.0 * pipe4.flowModel.m_flow_small;
//   parameter Real pipe4.flowModel.m_flow_small(quantity = \"MassFlowRate\", unit = \"kg/s\") = system.m_flow_small;
//   protected parameter Real pipe4.flowModel.n105(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = 1.0, fixed = false, nominal = 100000.0);
//   protected final parameter Boolean pipe4.flowModel.n106 = false;
//   protected final parameter Boolean pipe4.flowModel.n107 = false;
//   protected Real pipe4.flowModel.n108[1](quantity = \"Length\", unit = \"m\");
//   protected Real pipe4.flowModel.n108[2](quantity = \"Length\", unit = \"m\");
//   protected Real pipe4.flowModel.n108[3](quantity = \"Length\", unit = \"m\");
//   protected Real pipe4.flowModel.n108[4](quantity = \"Length\", unit = \"m\");
//   protected Real pipe4.flowModel.n108[5](quantity = \"Length\", unit = \"m\");
//   protected Real pipe4.flowModel.n108[6](quantity = \"Length\", unit = \"m\");
//   protected Real pipe4.flowModel.n109(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.flowModel.WallFriction.pressureLoss_m_flow(pipe4.flowModel.m_flow_nominal / pipe4.flowModel.nParallel, pipe4.flowModel.n102, pipe4.flowModel.n102, pipe4.flowModel.n104, pipe4.flowModel.n104, pipe4.flowModel.pathLengths_internal[1], pipe4.flowModel.n108[1], (pipe4.flowModel.crossAreas[1] + pipe4.flowModel.crossAreas[2]) / 2.0, (pipe4.flowModel.roughnesses[1] + pipe4.flowModel.roughnesses[2]) / 2.0, pipe4.flowModel.m_flow_small / pipe4.flowModel.nParallel, pipe4.flowModel.Res_turbulent_internal[1]) + Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.flowModel.WallFriction.pressureLoss_m_flow(pipe4.flowModel.m_flow_nominal / pipe4.flowModel.nParallel, pipe4.flowModel.n102, pipe4.flowModel.n102, pipe4.flowModel.n104, pipe4.flowModel.n104, pipe4.flowModel.pathLengths_internal[2], pipe4.flowModel.n108[2], (pipe4.flowModel.crossAreas[2] + pipe4.flowModel.crossAreas[3]) / 2.0, (pipe4.flowModel.roughnesses[2] + pipe4.flowModel.roughnesses[3]) / 2.0, pipe4.flowModel.m_flow_small / pipe4.flowModel.nParallel, pipe4.flowModel.Res_turbulent_internal[2]) + Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.flowModel.WallFriction.pressureLoss_m_flow(pipe4.flowModel.m_flow_nominal / pipe4.flowModel.nParallel, pipe4.flowModel.n102, pipe4.flowModel.n102, pipe4.flowModel.n104, pipe4.flowModel.n104, pipe4.flowModel.pathLengths_internal[3], pipe4.flowModel.n108[3], (pipe4.flowModel.crossAreas[3] + pipe4.flowModel.crossAreas[4]) / 2.0, (pipe4.flowModel.roughnesses[3] + pipe4.flowModel.roughnesses[4]) / 2.0, pipe4.flowModel.m_flow_small / pipe4.flowModel.nParallel, pipe4.flowModel.Res_turbulent_internal[3]) + Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.flowModel.WallFriction.pressureLoss_m_flow(pipe4.flowModel.m_flow_nominal / pipe4.flowModel.nParallel, pipe4.flowModel.n102, pipe4.flowModel.n102, pipe4.flowModel.n104, pipe4.flowModel.n104, pipe4.flowModel.pathLengths_internal[4], pipe4.flowModel.n108[4], (pipe4.flowModel.crossAreas[4] + pipe4.flowModel.crossAreas[5]) / 2.0, (pipe4.flowModel.roughnesses[4] + pipe4.flowModel.roughnesses[5]) / 2.0, pipe4.flowModel.m_flow_small / pipe4.flowModel.nParallel, pipe4.flowModel.Res_turbulent_internal[4]) + Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.flowModel.WallFriction.pressureLoss_m_flow(pipe4.flowModel.m_flow_nominal / pipe4.flowModel.nParallel, pipe4.flowModel.n102, pipe4.flowModel.n102, pipe4.flowModel.n104, pipe4.flowModel.n104, pipe4.flowModel.pathLengths_internal[5], pipe4.flowModel.n108[5], (pipe4.flowModel.crossAreas[5] + pipe4.flowModel.crossAreas[6]) / 2.0, (pipe4.flowModel.roughnesses[5] + pipe4.flowModel.roughnesses[6]) / 2.0, pipe4.flowModel.m_flow_small / pipe4.flowModel.nParallel, pipe4.flowModel.Res_turbulent_internal[5]) + Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.flowModel.WallFriction.pressureLoss_m_flow(pipe4.flowModel.m_flow_nominal / pipe4.flowModel.nParallel, pipe4.flowModel.n102, pipe4.flowModel.n102, pipe4.flowModel.n104, pipe4.flowModel.n104, pipe4.flowModel.pathLengths_internal[6], pipe4.flowModel.n108[6], (pipe4.flowModel.crossAreas[6] + pipe4.flowModel.crossAreas[7]) / 2.0, (pipe4.flowModel.roughnesses[6] + pipe4.flowModel.roughnesses[7]) / 2.0, pipe4.flowModel.m_flow_small / pipe4.flowModel.nParallel, pipe4.flowModel.Res_turbulent_internal[6]);
//   Real pipe4.m_flows[1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.02);
//   Real pipe4.m_flows[2](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.02);
//   Real pipe4.m_flows[3](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.02);
//   Real pipe4.m_flows[4](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.02);
//   Real pipe4.m_flows[5](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.02);
//   Real pipe4.m_flows[6](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.02);
//   Real pipe4.mXi_flows[1,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe4.mXi_flows[2,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe4.mXi_flows[3,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe4.mXi_flows[4,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe4.mXi_flows[5,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe4.mXi_flows[6,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe4.H_flows[1](quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0);
//   Real pipe4.H_flows[2](quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0);
//   Real pipe4.H_flows[3](quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0);
//   Real pipe4.H_flows[4](quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0);
//   Real pipe4.H_flows[5](quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0);
//   Real pipe4.H_flows[6](quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0);
//   Real pipe4.vs[1](quantity = \"Velocity\", unit = \"m/s\");
//   Real pipe4.vs[2](quantity = \"Velocity\", unit = \"m/s\");
//   Real pipe4.vs[3](quantity = \"Velocity\", unit = \"m/s\");
//   Real pipe4.vs[4](quantity = \"Velocity\", unit = \"m/s\");
//   Real pipe4.vs[5](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real pipe4.n110[1](quantity = \"Length\", unit = \"m\");
//   protected Real pipe4.n110[2](quantity = \"Length\", unit = \"m\");
//   protected Real pipe4.n110[3](quantity = \"Length\", unit = \"m\");
//   protected Real pipe4.n110[4](quantity = \"Length\", unit = \"m\");
//   protected Real pipe4.n110[5](quantity = \"Length\", unit = \"m\");
//   protected Real pipe4.n110[6](quantity = \"Length\", unit = \"m\");
//   protected Real pipe4.n111[1](quantity = \"Length\", unit = \"m\");
//   protected Real pipe4.n111[2](quantity = \"Length\", unit = \"m\");
//   protected Real pipe4.n111[3](quantity = \"Length\", unit = \"m\");
//   protected Real pipe4.n111[4](quantity = \"Length\", unit = \"m\");
//   protected Real pipe4.n111[5](quantity = \"Length\", unit = \"m\");
//   protected Real pipe4.n111[6](quantity = \"Length\", unit = \"m\");
//   protected Real pipe4.n112[1](quantity = \"Area\", unit = \"m2\");
//   protected Real pipe4.n112[2](quantity = \"Area\", unit = \"m2\");
//   protected Real pipe4.n112[3](quantity = \"Area\", unit = \"m2\");
//   protected Real pipe4.n112[4](quantity = \"Area\", unit = \"m2\");
//   protected Real pipe4.n112[5](quantity = \"Area\", unit = \"m2\");
//   protected Real pipe4.n112[6](quantity = \"Area\", unit = \"m2\");
//   protected Real pipe4.n112[7](quantity = \"Area\", unit = \"m2\");
//   protected Real pipe4.n113[1](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real pipe4.n113[2](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real pipe4.n113[3](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real pipe4.n113[4](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real pipe4.n113[5](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real pipe4.n113[6](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real pipe4.n113[7](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real pipe4.n114[1](quantity = \"Length\", unit = \"m\");
//   protected Real pipe4.n114[2](quantity = \"Length\", unit = \"m\");
//   protected Real pipe4.n114[3](quantity = \"Length\", unit = \"m\");
//   protected Real pipe4.n114[4](quantity = \"Length\", unit = \"m\");
//   protected Real pipe4.n114[5](quantity = \"Length\", unit = \"m\");
//   protected Real pipe4.n114[6](quantity = \"Length\", unit = \"m\");
//   protected Real pipe4.n114[7](quantity = \"Length\", unit = \"m\");
//   protected Real pipe4.n115[1](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   protected Real pipe4.n115[2](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   protected Real pipe4.n115[3](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   protected Real pipe4.n115[4](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   protected Real pipe4.n115[5](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   protected Real pipe4.n115[6](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   protected Real pipe4.n115[7](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final parameter Boolean pipe4.use_HeatTransfer = false;
//   final parameter Integer pipe4.heatTransfer.n = 5;
//   final Real pipe4.heatTransfer.states[1].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe4.mediums[1].state.p;
//   final Real pipe4.heatTransfer.states[1].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe4.mediums[1].state.T;
//   final Real pipe4.heatTransfer.states[1].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe4.heatTransfer.states[1].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe4.heatTransfer.states[2].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe4.mediums[2].state.p;
//   final Real pipe4.heatTransfer.states[2].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe4.mediums[2].state.T;
//   final Real pipe4.heatTransfer.states[2].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe4.heatTransfer.states[2].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe4.heatTransfer.states[3].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe4.mediums[3].state.p;
//   final Real pipe4.heatTransfer.states[3].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe4.mediums[3].state.T;
//   final Real pipe4.heatTransfer.states[3].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe4.heatTransfer.states[3].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe4.heatTransfer.states[4].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe4.mediums[4].state.p;
//   final Real pipe4.heatTransfer.states[4].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe4.mediums[4].state.T;
//   final Real pipe4.heatTransfer.states[4].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe4.heatTransfer.states[4].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe4.heatTransfer.states[5].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe4.mediums[5].state.p;
//   final Real pipe4.heatTransfer.states[5].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe4.mediums[5].state.T;
//   final Real pipe4.heatTransfer.states[5].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe4.heatTransfer.states[5].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe4.heatTransfer.surfaceAreas[1](quantity = \"Area\", unit = \"m2\");
//   final Real pipe4.heatTransfer.surfaceAreas[2](quantity = \"Area\", unit = \"m2\");
//   final Real pipe4.heatTransfer.surfaceAreas[3](quantity = \"Area\", unit = \"m2\");
//   final Real pipe4.heatTransfer.surfaceAreas[4](quantity = \"Area\", unit = \"m2\");
//   final Real pipe4.heatTransfer.surfaceAreas[5](quantity = \"Area\", unit = \"m2\");
//   Real pipe4.heatTransfer.Q_flows[1](quantity = \"Power\", unit = \"W\");
//   Real pipe4.heatTransfer.Q_flows[2](quantity = \"Power\", unit = \"W\");
//   Real pipe4.heatTransfer.Q_flows[3](quantity = \"Power\", unit = \"W\");
//   Real pipe4.heatTransfer.Q_flows[4](quantity = \"Power\", unit = \"W\");
//   Real pipe4.heatTransfer.Q_flows[5](quantity = \"Power\", unit = \"W\");
//   final parameter Boolean pipe4.heatTransfer.use_k = false;
//   final parameter Real pipe4.heatTransfer.k(quantity = \"CoefficientOfHeatTransfer\", unit = \"W/(m2.K)\") = 0.0;
//   parameter Real pipe4.heatTransfer.T_ambient(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = system.T_ambient;
//   Real pipe4.heatTransfer.heatPorts[1].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe4.heatTransfer.heatPorts[1].Q_flow(quantity = \"Power\", unit = \"W\");
//   Real pipe4.heatTransfer.heatPorts[2].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe4.heatTransfer.heatPorts[2].Q_flow(quantity = \"Power\", unit = \"W\");
//   Real pipe4.heatTransfer.heatPorts[3].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe4.heatTransfer.heatPorts[3].Q_flow(quantity = \"Power\", unit = \"W\");
//   Real pipe4.heatTransfer.heatPorts[4].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe4.heatTransfer.heatPorts[4].Q_flow(quantity = \"Power\", unit = \"W\");
//   Real pipe4.heatTransfer.heatPorts[5].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe4.heatTransfer.heatPorts[5].Q_flow(quantity = \"Power\", unit = \"W\");
//   Real pipe4.heatTransfer.Ts[1](quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe4.heatTransfer.Ts[2](quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe4.heatTransfer.Ts[3](quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe4.heatTransfer.Ts[4](quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe4.heatTransfer.Ts[5](quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   final Real pipe4.heatTransfer.vs[1](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe4.heatTransfer.vs[2](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe4.heatTransfer.vs[3](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe4.heatTransfer.vs[4](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe4.heatTransfer.vs[5](quantity = \"Velocity\", unit = \"m/s\");
//   final parameter Real pipe4.heatTransfer.nParallel = pipe4.nParallel;
//   final Real pipe4.heatTransfer.lengths[1](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.heatTransfer.lengths[2](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.heatTransfer.lengths[3](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.heatTransfer.lengths[4](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.heatTransfer.lengths[5](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.heatTransfer.dimensions[1](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.heatTransfer.dimensions[2](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.heatTransfer.dimensions[3](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.heatTransfer.dimensions[4](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.heatTransfer.dimensions[5](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.heatTransfer.roughnesses[1](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe4.heatTransfer.roughnesses[2](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe4.heatTransfer.roughnesses[3](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe4.heatTransfer.roughnesses[4](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe4.heatTransfer.roughnesses[5](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final parameter Real pipe4.dxs[1] = 0.2;
//   final parameter Real pipe4.dxs[2] = 0.2;
//   final parameter Real pipe4.dxs[3] = 0.2;
//   final parameter Real pipe4.dxs[4] = 0.2;
//   final parameter Real pipe4.dxs[5] = 0.2;
//   final parameter Integer boundary4.nPorts = 1;
//   Real boundary4.medium.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0, stateSelect = StateSelect.default);
//   Real boundary4.medium.Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = 0.01, stateSelect = StateSelect.default);
//   Real boundary4.medium.h(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   Real boundary4.medium.d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real boundary4.medium.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0, stateSelect = StateSelect.default);
//   Real boundary4.medium.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real boundary4.medium.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real boundary4.medium.u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real boundary4.medium.R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real boundary4.medium.MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real boundary4.medium.state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real boundary4.medium.state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real boundary4.medium.state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real boundary4.medium.state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean boundary4.medium.preferredMediumStates = false;
//   final parameter Boolean boundary4.medium.standardOrderComponents = true;
//   Real boundary4.medium.T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = Modelica.SIunits.Conversions.to_degC(boundary4.medium.T);
//   Real boundary4.medium.p_bar(quantity = \"Pressure\", unit = \"bar\") = Modelica.SIunits.Conversions.to_bar(boundary4.medium.p);
//   Real boundary4.medium.x_water(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real boundary4.medium.phi;
//   protected Real boundary4.medium.n116(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real boundary4.medium.n117(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real boundary4.medium.n118(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real boundary4.medium.n119(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real boundary4.medium.n120(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real boundary4.medium.n121(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real boundary4.ports[1].m_flow(quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 9.999999999999999e+59);
//   Real boundary4.ports[1].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real boundary4.ports[1].h_outflow(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
//   Real boundary4.ports[1].Xi_outflow[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected final parameter enumeration(Entering, Leaving, Bidirectional) boundary4.n122 = Modelica.Fluid.Types.PortFlowDirection.Bidirectional;
//   final parameter Boolean boundary4.use_p_in = true;
//   final parameter Boolean boundary4.use_T_in = false;
//   final parameter Boolean boundary4.use_X_in = false;
//   final parameter Boolean boundary4.use_C_in = false;
//   parameter Real boundary4.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = 100000.0;
//   parameter Real boundary4.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = 293.15;
//   parameter Real boundary4.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = 0.01;
//   parameter Real boundary4.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = 0.99;
//   Real boundary4.p_in;
//   protected Real boundary4.n123;
//   protected Real boundary4.n124;
//   protected Real boundary4.n125[1];
//   protected Real boundary4.n125[2];
//   parameter Real ramp1.height = 100000.0;
//   parameter Real ramp1.duration(quantity = \"Time\", unit = \"s\", min = 0.0, start = 2.0) = 0.0;
//   Real ramp1.y;
//   parameter Real ramp1.offset = 100000.0;
//   parameter Real ramp1.startTime(quantity = \"Time\", unit = \"s\") = 2.0;
//   parameter Real heat2[1].Q_flow(quantity = \"Power\", unit = \"W\") = 40.0;
//   parameter Real heat2[1].T_ref(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 293.15;
//   parameter Real heat2[1].alpha(quantity = \"LinearTemperatureCoefficient\", unit = \"1/K\") = -0.01;
//   Real heat2[1].port.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real heat2[1].port.Q_flow(quantity = \"Power\", unit = \"W\");
//   parameter Real heat2[2].Q_flow(quantity = \"Power\", unit = \"W\") = 40.0;
//   parameter Real heat2[2].T_ref(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 293.15;
//   parameter Real heat2[2].alpha(quantity = \"LinearTemperatureCoefficient\", unit = \"1/K\") = -0.01;
//   Real heat2[2].port.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real heat2[2].port.Q_flow(quantity = \"Power\", unit = \"W\");
//   parameter Real heat2[3].Q_flow(quantity = \"Power\", unit = \"W\") = 40.0;
//   parameter Real heat2[3].T_ref(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 293.15;
//   parameter Real heat2[3].alpha(quantity = \"LinearTemperatureCoefficient\", unit = \"1/K\") = -0.01;
//   Real heat2[3].port.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real heat2[3].port.Q_flow(quantity = \"Power\", unit = \"W\");
//   parameter Real heat2[4].Q_flow(quantity = \"Power\", unit = \"W\") = 40.0;
//   parameter Real heat2[4].T_ref(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 293.15;
//   parameter Real heat2[4].alpha(quantity = \"LinearTemperatureCoefficient\", unit = \"1/K\") = -0.01;
//   Real heat2[4].port.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real heat2[4].port.Q_flow(quantity = \"Power\", unit = \"W\");
//   parameter Real heat2[5].Q_flow(quantity = \"Power\", unit = \"W\") = 40.0;
//   parameter Real heat2[5].T_ref(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 293.15;
//   parameter Real heat2[5].alpha(quantity = \"LinearTemperatureCoefficient\", unit = \"1/K\") = -0.01;
//   Real heat2[5].port.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real heat2[5].port.Q_flow(quantity = \"Power\", unit = \"W\");
// initial equation
//   pipe1.flowModel.dp_nominal = 1000.0 * pipe1.flowModel.n25;
//   pipe1.flowModel.n25 = system.dp_small;
//   der(pipe1.flowModel.m_flows[1]) = 0.0;
//   der(pipe1.flowModel.m_flows[2]) = 0.0;
//   der(pipe1.flowModel.m_flows[3]) = 0.0;
//   der(pipe1.flowModel.m_flows[4]) = 0.0;
//   der(pipe1.flowModel.m_flows[5]) = 0.0;
//   der(pipe1.flowModel.m_flows[6]) = 0.0;
//   der(pipe1.mediums[1].T) = 0.0;
//   der(pipe1.mediums[2].T) = 0.0;
//   der(pipe1.mediums[3].T) = 0.0;
//   der(pipe1.mediums[4].T) = 0.0;
//   der(pipe1.mediums[5].T) = 0.0;
//   der(pipe1.mediums[1].p) = 0.0;
//   der(pipe1.mediums[2].p) = 0.0;
//   der(pipe1.mediums[3].p) = 0.0;
//   der(pipe1.mediums[4].p) = 0.0;
//   der(pipe1.mediums[5].p) = 0.0;
//   der(pipe1.mediums[1].Xi[1]) = 0.0;
//   der(pipe1.mediums[2].Xi[1]) = 0.0;
//   der(pipe1.mediums[3].Xi[1]) = 0.0;
//   der(pipe1.mediums[4].Xi[1]) = 0.0;
//   der(pipe1.mediums[5].Xi[1]) = 0.0;
//   pipe2.flowModel.dp_nominal = 1000.0 * pipe2.flowModel.n50;
//   pipe2.flowModel.n50 = system.dp_small;
//   der(pipe2.flowModel.m_flows[1]) = 0.0;
//   der(pipe2.flowModel.m_flows[2]) = 0.0;
//   der(pipe2.flowModel.m_flows[3]) = 0.0;
//   der(pipe2.flowModel.m_flows[4]) = 0.0;
//   der(pipe2.mediums[1].T) = 0.0;
//   der(pipe2.mediums[2].T) = 0.0;
//   der(pipe2.mediums[3].T) = 0.0;
//   der(pipe2.mediums[4].T) = 0.0;
//   der(pipe2.mediums[5].T) = 0.0;
//   der(pipe2.mediums[1].p) = 0.0;
//   der(pipe2.mediums[2].p) = 0.0;
//   der(pipe2.mediums[3].p) = 0.0;
//   der(pipe2.mediums[4].p) = 0.0;
//   der(pipe2.mediums[5].p) = 0.0;
//   der(pipe2.mediums[1].Xi[1]) = 0.0;
//   der(pipe2.mediums[2].Xi[1]) = 0.0;
//   der(pipe2.mediums[3].Xi[1]) = 0.0;
//   der(pipe2.mediums[4].Xi[1]) = 0.0;
//   der(pipe2.mediums[5].Xi[1]) = 0.0;
//   pipe3.flowModel.dp_nominal = 1000.0 * pipe3.flowModel.n80;
//   pipe3.flowModel.n80 = system.dp_small;
//   der(pipe3.flowModel.m_flows[1]) = 0.0;
//   der(pipe3.flowModel.m_flows[2]) = 0.0;
//   der(pipe3.flowModel.m_flows[3]) = 0.0;
//   der(pipe3.flowModel.m_flows[4]) = 0.0;
//   der(pipe3.flowModel.m_flows[5]) = 0.0;
//   der(pipe3.flowModel.m_flows[6]) = 0.0;
//   der(pipe3.mediums[1].T) = 0.0;
//   der(pipe3.mediums[2].T) = 0.0;
//   der(pipe3.mediums[3].T) = 0.0;
//   der(pipe3.mediums[4].T) = 0.0;
//   der(pipe3.mediums[5].T) = 0.0;
//   der(pipe3.mediums[1].p) = 0.0;
//   der(pipe3.mediums[2].p) = 0.0;
//   der(pipe3.mediums[3].p) = 0.0;
//   der(pipe3.mediums[4].p) = 0.0;
//   der(pipe3.mediums[5].p) = 0.0;
//   der(pipe3.mediums[1].Xi[1]) = 0.0;
//   der(pipe3.mediums[2].Xi[1]) = 0.0;
//   der(pipe3.mediums[3].Xi[1]) = 0.0;
//   der(pipe3.mediums[4].Xi[1]) = 0.0;
//   der(pipe3.mediums[5].Xi[1]) = 0.0;
//   pipe4.flowModel.dp_nominal = 1000.0 * pipe4.flowModel.n105;
//   pipe4.flowModel.n105 = system.dp_small;
//   der(pipe4.flowModel.m_flows[1]) = 0.0;
//   der(pipe4.flowModel.m_flows[2]) = 0.0;
//   der(pipe4.flowModel.m_flows[3]) = 0.0;
//   der(pipe4.flowModel.m_flows[4]) = 0.0;
//   der(pipe4.flowModel.m_flows[5]) = 0.0;
//   der(pipe4.flowModel.m_flows[6]) = 0.0;
//   der(pipe4.mediums[1].T) = 0.0;
//   der(pipe4.mediums[2].T) = 0.0;
//   der(pipe4.mediums[3].T) = 0.0;
//   der(pipe4.mediums[4].T) = 0.0;
//   der(pipe4.mediums[5].T) = 0.0;
//   der(pipe4.mediums[1].p) = 0.0;
//   der(pipe4.mediums[2].p) = 0.0;
//   der(pipe4.mediums[3].p) = 0.0;
//   der(pipe4.mediums[4].p) = 0.0;
//   der(pipe4.mediums[5].p) = 0.0;
//   der(pipe4.mediums[1].Xi[1]) = 0.0;
//   der(pipe4.mediums[2].Xi[1]) = 0.0;
//   der(pipe4.mediums[3].Xi[1]) = 0.0;
//   der(pipe4.mediums[4].Xi[1]) = 0.0;
//   der(pipe4.mediums[5].Xi[1]) = 0.0;
// equation
//   pipe2.heatPorts[1].T = pipe2.heatTransfer.heatPorts[1].T;
//   pipe2.heatTransfer.heatPorts[1].Q_flow - pipe2.heatPorts[1].Q_flow = 0.0;
//   pipe2.heatPorts[2].T = pipe2.heatTransfer.heatPorts[2].T;
//   pipe2.heatTransfer.heatPorts[2].Q_flow - pipe2.heatPorts[2].Q_flow = 0.0;
//   pipe2.heatPorts[3].T = pipe2.heatTransfer.heatPorts[3].T;
//   pipe2.heatTransfer.heatPorts[3].Q_flow - pipe2.heatPorts[3].Q_flow = 0.0;
//   pipe2.heatPorts[4].T = pipe2.heatTransfer.heatPorts[4].T;
//   pipe2.heatTransfer.heatPorts[4].Q_flow - pipe2.heatPorts[4].Q_flow = 0.0;
//   pipe2.heatPorts[5].T = pipe2.heatTransfer.heatPorts[5].T;
//   pipe2.heatTransfer.heatPorts[5].Q_flow - pipe2.heatPorts[5].Q_flow = 0.0;
//   boundary4.p_in = boundary4.n123;
//   ramp1.y = boundary4.p_in;
//   boundary1.ports[1].p = pipe1.port_a.p;
//   pipe1.port_b.p = pipe3.port_a.p;
//   pipe1.port_b.p = pipe2.port_a.p;
//   pipe3.port_b.p = pipe4.port_a.p;
//   pipe3.port_b.p = pipe2.port_b.p;
//   pipe4.port_b.p = boundary4.ports[1].p;
//   heat2[1].port.T = pipe2.heatPorts[1].T;
//   heat2[2].port.T = pipe2.heatPorts[2].T;
//   heat2[3].port.T = pipe2.heatPorts[3].T;
//   heat2[4].port.T = pipe2.heatPorts[4].T;
//   heat2[5].port.T = pipe2.heatPorts[5].T;
//   pipe1.port_a.m_flow + boundary1.ports[1].m_flow = 0.0;
//   pipe1.heatTransfer.heatPorts[1].Q_flow = 0.0;
//   pipe1.heatTransfer.heatPorts[2].Q_flow = 0.0;
//   pipe1.heatTransfer.heatPorts[3].Q_flow = 0.0;
//   pipe1.heatTransfer.heatPorts[4].Q_flow = 0.0;
//   pipe1.heatTransfer.heatPorts[5].Q_flow = 0.0;
//   pipe3.port_a.m_flow + pipe2.port_a.m_flow + pipe1.port_b.m_flow = 0.0;
//   pipe4.port_a.m_flow + pipe3.port_b.m_flow + pipe2.port_b.m_flow = 0.0;
//   pipe3.heatTransfer.heatPorts[1].Q_flow = 0.0;
//   pipe3.heatTransfer.heatPorts[2].Q_flow = 0.0;
//   pipe3.heatTransfer.heatPorts[3].Q_flow = 0.0;
//   pipe3.heatTransfer.heatPorts[4].Q_flow = 0.0;
//   pipe3.heatTransfer.heatPorts[5].Q_flow = 0.0;
//   boundary4.ports[1].m_flow + pipe4.port_b.m_flow = 0.0;
//   pipe4.heatTransfer.heatPorts[1].Q_flow = 0.0;
//   pipe4.heatTransfer.heatPorts[2].Q_flow = 0.0;
//   pipe4.heatTransfer.heatPorts[3].Q_flow = 0.0;
//   pipe4.heatTransfer.heatPorts[4].Q_flow = 0.0;
//   pipe4.heatTransfer.heatPorts[5].Q_flow = 0.0;
//   heat2[1].port.Q_flow + pipe2.heatPorts[1].Q_flow = 0.0;
//   heat2[2].port.Q_flow + pipe2.heatPorts[2].Q_flow = 0.0;
//   heat2[3].port.Q_flow + pipe2.heatPorts[3].Q_flow = 0.0;
//   heat2[4].port.Q_flow + pipe2.heatPorts[4].Q_flow = 0.0;
//   heat2[5].port.Q_flow + pipe2.heatPorts[5].Q_flow = 0.0;
//   assert(boundary1.medium.T >= 190.0 and boundary1.medium.T <= 647.0, \"
//   Temperature T is not in the allowed range
//   190.0 K <= (T =\" + String(boundary1.medium.T, 6, 0, true) + \" K) <= 647.0 K
//   required from medium model \\\"\" + \"Moist air\" + \"\\\".\");
//   boundary1.medium.MM = 1.0 / (boundary1.medium.Xi[1] / 0.01801528 + (1.0 - boundary1.medium.Xi[1]) / 0.0289651159);
//   boundary1.medium.n6 = min(Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.saturationPressure(boundary1.medium.T), 0.999 * boundary1.medium.p);
//   boundary1.medium.n4 = min(boundary1.medium.n6 * 0.6219647130774989 / max(1e-13, boundary1.medium.p - boundary1.medium.n6) * (1.0 - boundary1.medium.Xi[1]), 1.0);
//   boundary1.medium.n1 = max(boundary1.medium.Xi[1] - boundary1.medium.n4, 0.0);
//   boundary1.medium.n2 = boundary1.medium.Xi[1] - boundary1.medium.n1;
//   boundary1.medium.n3 = 1.0 - boundary1.medium.Xi[1];
//   boundary1.medium.h = Modelica.Fluid.Examples.BranchingDynamicPipes.boundary1.Medium.specificEnthalpy_pTX(boundary1.medium.p, boundary1.medium.T, boundary1.medium.Xi);
//   boundary1.medium.R = 287.0512249529787 * boundary1.medium.n3 / (1.0 - boundary1.medium.n1) + 461.5233290850878 * boundary1.medium.n2 / (1.0 - boundary1.medium.n1);
//   boundary1.medium.u = boundary1.medium.h - boundary1.medium.R * boundary1.medium.T;
//   boundary1.medium.d = boundary1.medium.p / (boundary1.medium.R * boundary1.medium.T);
//   boundary1.medium.state.p = boundary1.medium.p;
//   boundary1.medium.state.T = boundary1.medium.T;
//   boundary1.medium.state.X[1] = boundary1.medium.X[1];
//   boundary1.medium.state.X[2] = boundary1.medium.X[2];
//   boundary1.medium.n5 = 0.6219647130774989 * boundary1.medium.n6 / max(1e-13, boundary1.medium.p - boundary1.medium.n6);
//   boundary1.medium.x_water = boundary1.medium.Xi[1] / max(boundary1.medium.n3, 1e-13);
//   boundary1.medium.phi = boundary1.medium.p / boundary1.medium.n6 * boundary1.medium.Xi[1] / (boundary1.medium.Xi[1] + 0.6219647130774989 * boundary1.medium.n3);
//   boundary1.medium.Xi[1] = boundary1.medium.X[1];
//   boundary1.medium.X[2] = 1.0 - boundary1.medium.Xi[1];
//   assert(boundary1.medium.X[1] >= -1e-05 and boundary1.medium.X[1] <= 1.00001, \"Mass fraction X[\" + String(1, 0, true) + \"] = \" + String(boundary1.medium.X[1], 6, 0, true) + \"of substance \" + \"water\" + \"
//   of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(boundary1.medium.X[2] >= -1e-05 and boundary1.medium.X[2] <= 1.00001, \"Mass fraction X[\" + String(2, 0, true) + \"] = \" + String(boundary1.medium.X[2], 6, 0, true) + \"of substance \" + \"air\" + \"
//   of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(boundary1.medium.p >= 0.0, \"Pressure (= \" + String(boundary1.medium.p, 6, 0, true) + \" Pa) of medium \\\"\" + \"Moist air\" + \"\\\" is negative
//   (Temperature = \" + String(boundary1.medium.T, 6, 0, true) + \" K)\");
//   Modelica.Fluid.Utilities.checkBoundary(\"Moist air\", {\"water\", \"air\"}, false, true, boundary1.n10, \"Boundary_pT\");
//   boundary1.n8 = boundary1.p;
//   boundary1.n9 = boundary1.T;
//   boundary1.n10[1] = boundary1.X[1];
//   boundary1.n10[2] = boundary1.X[2];
//   boundary1.medium.p = boundary1.n8;
//   boundary1.medium.T = boundary1.n9;
//   boundary1.medium.Xi[1] = boundary1.n10[1];
//   boundary1.ports[1].p = boundary1.medium.p;
//   boundary1.ports[1].h_outflow = boundary1.medium.h;
//   boundary1.ports[1].Xi_outflow[1] = boundary1.medium.Xi[1];
//   pipe1.fluidVolumes = array(pipe1.crossAreas[i] * 10.0 for i in 1:5) * pipe1.nParallel;
//   assert(pipe1.mediums[1].T >= 190.0 and pipe1.mediums[1].T <= 647.0, \"
//   Temperature T is not in the allowed range
//   190.0 K <= (T =\" + String(pipe1.mediums[1].T, 6, 0, true) + \" K) <= 647.0 K
//   required from medium model \\\"\" + \"Moist air\" + \"\\\".\");
//   pipe1.mediums[1].MM = 1.0 / (pipe1.mediums[1].Xi[1] / 0.01801528 + (1.0 - pipe1.mediums[1].Xi[1]) / 0.0289651159);
//   pipe1.mediums[1].n19 = min(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.saturationPressure(pipe1.mediums[1].T), 0.999 * pipe1.mediums[1].p);
//   pipe1.mediums[1].n17 = min(pipe1.mediums[1].n19 * 0.6219647130774989 / max(1e-13, pipe1.mediums[1].p - pipe1.mediums[1].n19) * (1.0 - pipe1.mediums[1].Xi[1]), 1.0);
//   pipe1.mediums[1].n14 = max(pipe1.mediums[1].Xi[1] - pipe1.mediums[1].n17, 0.0);
//   pipe1.mediums[1].n15 = pipe1.mediums[1].Xi[1] - pipe1.mediums[1].n14;
//   pipe1.mediums[1].n16 = 1.0 - pipe1.mediums[1].Xi[1];
//   pipe1.mediums[1].h = Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.specificEnthalpy_pTX(pipe1.mediums[1].p, pipe1.mediums[1].T, pipe1.mediums[1].Xi);
//   pipe1.mediums[1].R = 287.0512249529787 * pipe1.mediums[1].n16 / (1.0 - pipe1.mediums[1].n14) + 461.5233290850878 * pipe1.mediums[1].n15 / (1.0 - pipe1.mediums[1].n14);
//   pipe1.mediums[1].u = pipe1.mediums[1].h - pipe1.mediums[1].R * pipe1.mediums[1].T;
//   pipe1.mediums[1].d = pipe1.mediums[1].p / (pipe1.mediums[1].R * pipe1.mediums[1].T);
//   pipe1.mediums[1].state.p = pipe1.mediums[1].p;
//   pipe1.mediums[1].state.T = pipe1.mediums[1].T;
//   pipe1.mediums[1].state.X[1] = pipe1.mediums[1].X[1];
//   pipe1.mediums[1].state.X[2] = pipe1.mediums[1].X[2];
//   pipe1.mediums[1].n18 = 0.6219647130774989 * pipe1.mediums[1].n19 / max(1e-13, pipe1.mediums[1].p - pipe1.mediums[1].n19);
//   pipe1.mediums[1].x_water = pipe1.mediums[1].Xi[1] / max(pipe1.mediums[1].n16, 1e-13);
//   pipe1.mediums[1].phi = pipe1.mediums[1].p / pipe1.mediums[1].n19 * pipe1.mediums[1].Xi[1] / (pipe1.mediums[1].Xi[1] + 0.6219647130774989 * pipe1.mediums[1].n16);
//   pipe1.mediums[1].Xi[1] = pipe1.mediums[1].X[1];
//   pipe1.mediums[1].X[2] = 1.0 - pipe1.mediums[1].Xi[1];
//   assert(pipe1.mediums[1].X[1] >= -1e-05 and pipe1.mediums[1].X[1] <= 1.00001, \"Mass fraction X[\" + String(1, 0, true) + \"] = \" + String(pipe1.mediums[1].X[1], 6, 0, true) + \"of substance \" + \"water\" + \"
//   of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(pipe1.mediums[1].X[2] >= -1e-05 and pipe1.mediums[1].X[2] <= 1.00001, \"Mass fraction X[\" + String(2, 0, true) + \"] = \" + String(pipe1.mediums[1].X[2], 6, 0, true) + \"of substance \" + \"air\" + \"
//   of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(pipe1.mediums[1].p >= 0.0, \"Pressure (= \" + String(pipe1.mediums[1].p, 6, 0, true) + \" Pa) of medium \\\"\" + \"Moist air\" + \"\\\" is negative
//   (Temperature = \" + String(pipe1.mediums[1].T, 6, 0, true) + \" K)\");
//   assert(pipe1.mediums[2].T >= 190.0 and pipe1.mediums[2].T <= 647.0, \"
//   Temperature T is not in the allowed range
//   190.0 K <= (T =\" + String(pipe1.mediums[2].T, 6, 0, true) + \" K) <= 647.0 K
//   required from medium model \\\"\" + \"Moist air\" + \"\\\".\");
//   pipe1.mediums[2].MM = 1.0 / (pipe1.mediums[2].Xi[1] / 0.01801528 + (1.0 - pipe1.mediums[2].Xi[1]) / 0.0289651159);
//   pipe1.mediums[2].n19 = min(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.saturationPressure(pipe1.mediums[2].T), 0.999 * pipe1.mediums[2].p);
//   pipe1.mediums[2].n17 = min(pipe1.mediums[2].n19 * 0.6219647130774989 / max(1e-13, pipe1.mediums[2].p - pipe1.mediums[2].n19) * (1.0 - pipe1.mediums[2].Xi[1]), 1.0);
//   pipe1.mediums[2].n14 = max(pipe1.mediums[2].Xi[1] - pipe1.mediums[2].n17, 0.0);
//   pipe1.mediums[2].n15 = pipe1.mediums[2].Xi[1] - pipe1.mediums[2].n14;
//   pipe1.mediums[2].n16 = 1.0 - pipe1.mediums[2].Xi[1];
//   pipe1.mediums[2].h = Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.specificEnthalpy_pTX(pipe1.mediums[2].p, pipe1.mediums[2].T, pipe1.mediums[2].Xi);
//   pipe1.mediums[2].R = 287.0512249529787 * pipe1.mediums[2].n16 / (1.0 - pipe1.mediums[2].n14) + 461.5233290850878 * pipe1.mediums[2].n15 / (1.0 - pipe1.mediums[2].n14);
//   pipe1.mediums[2].u = pipe1.mediums[2].h - pipe1.mediums[2].R * pipe1.mediums[2].T;
//   pipe1.mediums[2].d = pipe1.mediums[2].p / (pipe1.mediums[2].R * pipe1.mediums[2].T);
//   pipe1.mediums[2].state.p = pipe1.mediums[2].p;
//   pipe1.mediums[2].state.T = pipe1.mediums[2].T;
//   pipe1.mediums[2].state.X[1] = pipe1.mediums[2].X[1];
//   pipe1.mediums[2].state.X[2] = pipe1.mediums[2].X[2];
//   pipe1.mediums[2].n18 = 0.6219647130774989 * pipe1.mediums[2].n19 / max(1e-13, pipe1.mediums[2].p - pipe1.mediums[2].n19);
//   pipe1.mediums[2].x_water = pipe1.mediums[2].Xi[1] / max(pipe1.mediums[2].n16, 1e-13);
//   pipe1.mediums[2].phi = pipe1.mediums[2].p / pipe1.mediums[2].n19 * pipe1.mediums[2].Xi[1] / (pipe1.mediums[2].Xi[1] + 0.6219647130774989 * pipe1.mediums[2].n16);
//   pipe1.mediums[2].Xi[1] = pipe1.mediums[2].X[1];
//   pipe1.mediums[2].X[2] = 1.0 - pipe1.mediums[2].Xi[1];
//   assert(pipe1.mediums[2].X[1] >= -1e-05 and pipe1.mediums[2].X[1] <= 1.00001, \"Mass fraction X[\" + String(1, 0, true) + \"] = \" + String(pipe1.mediums[2].X[1], 6, 0, true) + \"of substance \" + \"water\" + \"
//   of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(pipe1.mediums[2].X[2] >= -1e-05 and pipe1.mediums[2].X[2] <= 1.00001, \"Mass fraction X[\" + String(2, 0, true) + \"] = \" + String(pipe1.mediums[2].X[2], 6, 0, true) + \"of substance \" + \"air\" + \"
//   of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(pipe1.mediums[2].p >= 0.0, \"Pressure (= \" + String(pipe1.mediums[2].p, 6, 0, true) + \" Pa) of medium \\\"\" + \"Moist air\" + \"\\\" is negative
//   (Temperature = \" + String(pipe1.mediums[2].T, 6, 0, true) + \" K)\");
//   assert(pipe1.mediums[3].T >= 190.0 and pipe1.mediums[3].T <= 647.0, \"
//   Temperature T is not in the allowed range
//   190.0 K <= (T =\" + String(pipe1.mediums[3].T, 6, 0, true) + \" K) <= 647.0 K
//   required from medium model \\\"\" + \"Moist air\" + \"\\\".\");
//   pipe1.mediums[3].MM = 1.0 / (pipe1.mediums[3].Xi[1] / 0.01801528 + (1.0 - pipe1.mediums[3].Xi[1]) / 0.0289651159);
//   pipe1.mediums[3].n19 = min(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.saturationPressure(pipe1.mediums[3].T), 0.999 * pipe1.mediums[3].p);
//   pipe1.mediums[3].n17 = min(pipe1.mediums[3].n19 * 0.6219647130774989 / max(1e-13, pipe1.mediums[3].p - pipe1.mediums[3].n19) * (1.0 - pipe1.mediums[3].Xi[1]), 1.0);
//   pipe1.mediums[3].n14 = max(pipe1.mediums[3].Xi[1] - pipe1.mediums[3].n17, 0.0);
//   pipe1.mediums[3].n15 = pipe1.mediums[3].Xi[1] - pipe1.mediums[3].n14;
//   pipe1.mediums[3].n16 = 1.0 - pipe1.mediums[3].Xi[1];
//   pipe1.mediums[3].h = Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.specificEnthalpy_pTX(pipe1.mediums[3].p, pipe1.mediums[3].T, pipe1.mediums[3].Xi);
//   pipe1.mediums[3].R = 287.0512249529787 * pipe1.mediums[3].n16 / (1.0 - pipe1.mediums[3].n14) + 461.5233290850878 * pipe1.mediums[3].n15 / (1.0 - pipe1.mediums[3].n14);
//   pipe1.mediums[3].u = pipe1.mediums[3].h - pipe1.mediums[3].R * pipe1.mediums[3].T;
//   pipe1.mediums[3].d = pipe1.mediums[3].p / (pipe1.mediums[3].R * pipe1.mediums[3].T);
//   pipe1.mediums[3].state.p = pipe1.mediums[3].p;
//   pipe1.mediums[3].state.T = pipe1.mediums[3].T;
//   pipe1.mediums[3].state.X[1] = pipe1.mediums[3].X[1];
//   pipe1.mediums[3].state.X[2] = pipe1.mediums[3].X[2];
//   pipe1.mediums[3].n18 = 0.6219647130774989 * pipe1.mediums[3].n19 / max(1e-13, pipe1.mediums[3].p - pipe1.mediums[3].n19);
//   pipe1.mediums[3].x_water = pipe1.mediums[3].Xi[1] / max(pipe1.mediums[3].n16, 1e-13);
//   pipe1.mediums[3].phi = pipe1.mediums[3].p / pipe1.mediums[3].n19 * pipe1.mediums[3].Xi[1] / (pipe1.mediums[3].Xi[1] + 0.6219647130774989 * pipe1.mediums[3].n16);
//   pipe1.mediums[3].Xi[1] = pipe1.mediums[3].X[1];
//   pipe1.mediums[3].X[2] = 1.0 - pipe1.mediums[3].Xi[1];
//   assert(pipe1.mediums[3].X[1] >= -1e-05 and pipe1.mediums[3].X[1] <= 1.00001, \"Mass fraction X[\" + String(1, 0, true) + \"] = \" + String(pipe1.mediums[3].X[1], 6, 0, true) + \"of substance \" + \"water\" + \"
//   of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(pipe1.mediums[3].X[2] >= -1e-05 and pipe1.mediums[3].X[2] <= 1.00001, \"Mass fraction X[\" + String(2, 0, true) + \"] = \" + String(pipe1.mediums[3].X[2], 6, 0, true) + \"of substance \" + \"air\" + \"
//   of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(pipe1.mediums[3].p >= 0.0, \"Pressure (= \" + String(pipe1.mediums[3].p, 6, 0, true) + \" Pa) of medium \\\"\" + \"Moist air\" + \"\\\" is negative
//   (Temperature = \" + String(pipe1.mediums[3].T, 6, 0, true) + \" K)\");
//   assert(pipe1.mediums[4].T >= 190.0 and pipe1.mediums[4].T <= 647.0, \"
//   Temperature T is not in the allowed range
//   190.0 K <= (T =\" + String(pipe1.mediums[4].T, 6, 0, true) + \" K) <= 647.0 K
//   required from medium model \\\"\" + \"Moist air\" + \"\\\".\");
//   pipe1.mediums[4].MM = 1.0 / (pipe1.mediums[4].Xi[1] / 0.01801528 + (1.0 - pipe1.mediums[4].Xi[1]) / 0.0289651159);
//   pipe1.mediums[4].n19 = min(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.saturationPressure(pipe1.mediums[4].T), 0.999 * pipe1.mediums[4].p);
//   pipe1.mediums[4].n17 = min(pipe1.mediums[4].n19 * 0.6219647130774989 / max(1e-13, pipe1.mediums[4].p - pipe1.mediums[4].n19) * (1.0 - pipe1.mediums[4].Xi[1]), 1.0);
//   pipe1.mediums[4].n14 = max(pipe1.mediums[4].Xi[1] - pipe1.mediums[4].n17, 0.0);
//   pipe1.mediums[4].n15 = pipe1.mediums[4].Xi[1] - pipe1.mediums[4].n14;
//   pipe1.mediums[4].n16 = 1.0 - pipe1.mediums[4].Xi[1];
//   pipe1.mediums[4].h = Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.specificEnthalpy_pTX(pipe1.mediums[4].p, pipe1.mediums[4].T, pipe1.mediums[4].Xi);
//   pipe1.mediums[4].R = 287.0512249529787 * pipe1.mediums[4].n16 / (1.0 - pipe1.mediums[4].n14) + 461.5233290850878 * pipe1.mediums[4].n15 / (1.0 - pipe1.mediums[4].n14);
//   pipe1.mediums[4].u = pipe1.mediums[4].h - pipe1.mediums[4].R * pipe1.mediums[4].T;
//   pipe1.mediums[4].d = pipe1.mediums[4].p / (pipe1.mediums[4].R * pipe1.mediums[4].T);
//   pipe1.mediums[4].state.p = pipe1.mediums[4].p;
//   pipe1.mediums[4].state.T = pipe1.mediums[4].T;
//   pipe1.mediums[4].state.X[1] = pipe1.mediums[4].X[1];
//   pipe1.mediums[4].state.X[2] = pipe1.mediums[4].X[2];
//   pipe1.mediums[4].n18 = 0.6219647130774989 * pipe1.mediums[4].n19 / max(1e-13, pipe1.mediums[4].p - pipe1.mediums[4].n19);
//   pipe1.mediums[4].x_water = pipe1.mediums[4].Xi[1] / max(pipe1.mediums[4].n16, 1e-13);
//   pipe1.mediums[4].phi = pipe1.mediums[4].p / pipe1.mediums[4].n19 * pipe1.mediums[4].Xi[1] / (pipe1.mediums[4].Xi[1] + 0.6219647130774989 * pipe1.mediums[4].n16);
//   pipe1.mediums[4].Xi[1] = pipe1.mediums[4].X[1];
//   pipe1.mediums[4].X[2] = 1.0 - pipe1.mediums[4].Xi[1];
//   assert(pipe1.mediums[4].X[1] >= -1e-05 and pipe1.mediums[4].X[1] <= 1.00001, \"Mass fraction X[\" + String(1, 0, true) + \"] = \" + String(pipe1.mediums[4].X[1], 6, 0, true) + \"of substance \" + \"water\" + \"
//   of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(pipe1.mediums[4].X[2] >= -1e-05 and pipe1.mediums[4].X[2] <= 1.00001, \"Mass fraction X[\" + String(2, 0, true) + \"] = \" + String(pipe1.mediums[4].X[2], 6, 0, true) + \"of substance \" + \"air\" + \"
//   of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(pipe1.mediums[4].p >= 0.0, \"Pressure (= \" + String(pipe1.mediums[4].p, 6, 0, true) + \" Pa) of medium \\\"\" + \"Moist air\" + \"\\\" is negative
//   (Temperature = \" + String(pipe1.mediums[4].T, 6, 0, true) + \" K)\");
//   assert(pipe1.mediums[5].T >= 190.0 and pipe1.mediums[5].T <= 647.0, \"
//   Temperature T is not in the allowed range
//   190.0 K <= (T =\" + String(pipe1.mediums[5].T, 6, 0, true) + \" K) <= 647.0 K
//   required from medium model \\\"\" + \"Moist air\" + \"\\\".\");
//   pipe1.mediums[5].MM = 1.0 / (pipe1.mediums[5].Xi[1] / 0.01801528 + (1.0 - pipe1.mediums[5].Xi[1]) / 0.0289651159);
//   pipe1.mediums[5].n19 = min(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.saturationPressure(pipe1.mediums[5].T), 0.999 * pipe1.mediums[5].p);
//   pipe1.mediums[5].n17 = min(pipe1.mediums[5].n19 * 0.6219647130774989 / max(1e-13, pipe1.mediums[5].p - pipe1.mediums[5].n19) * (1.0 - pipe1.mediums[5].Xi[1]), 1.0);
//   pipe1.mediums[5].n14 = max(pipe1.mediums[5].Xi[1] - pipe1.mediums[5].n17, 0.0);
//   pipe1.mediums[5].n15 = pipe1.mediums[5].Xi[1] - pipe1.mediums[5].n14;
//   pipe1.mediums[5].n16 = 1.0 - pipe1.mediums[5].Xi[1];
//   pipe1.mediums[5].h = Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.specificEnthalpy_pTX(pipe1.mediums[5].p, pipe1.mediums[5].T, pipe1.mediums[5].Xi);
//   pipe1.mediums[5].R = 287.0512249529787 * pipe1.mediums[5].n16 / (1.0 - pipe1.mediums[5].n14) + 461.5233290850878 * pipe1.mediums[5].n15 / (1.0 - pipe1.mediums[5].n14);
//   pipe1.mediums[5].u = pipe1.mediums[5].h - pipe1.mediums[5].R * pipe1.mediums[5].T;
//   pipe1.mediums[5].d = pipe1.mediums[5].p / (pipe1.mediums[5].R * pipe1.mediums[5].T);
//   pipe1.mediums[5].state.p = pipe1.mediums[5].p;
//   pipe1.mediums[5].state.T = pipe1.mediums[5].T;
//   pipe1.mediums[5].state.X[1] = pipe1.mediums[5].X[1];
//   pipe1.mediums[5].state.X[2] = pipe1.mediums[5].X[2];
//   pipe1.mediums[5].n18 = 0.6219647130774989 * pipe1.mediums[5].n19 / max(1e-13, pipe1.mediums[5].p - pipe1.mediums[5].n19);
//   pipe1.mediums[5].x_water = pipe1.mediums[5].Xi[1] / max(pipe1.mediums[5].n16, 1e-13);
//   pipe1.mediums[5].phi = pipe1.mediums[5].p / pipe1.mediums[5].n19 * pipe1.mediums[5].Xi[1] / (pipe1.mediums[5].Xi[1] + 0.6219647130774989 * pipe1.mediums[5].n16);
//   pipe1.mediums[5].Xi[1] = pipe1.mediums[5].X[1];
//   pipe1.mediums[5].X[2] = 1.0 - pipe1.mediums[5].Xi[1];
//   assert(pipe1.mediums[5].X[1] >= -1e-05 and pipe1.mediums[5].X[1] <= 1.00001, \"Mass fraction X[\" + String(1, 0, true) + \"] = \" + String(pipe1.mediums[5].X[1], 6, 0, true) + \"of substance \" + \"water\" + \"
//   of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(pipe1.mediums[5].X[2] >= -1e-05 and pipe1.mediums[5].X[2] <= 1.00001, \"Mass fraction X[\" + String(2, 0, true) + \"] = \" + String(pipe1.mediums[5].X[2], 6, 0, true) + \"of substance \" + \"air\" + \"
//   of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(pipe1.mediums[5].p >= 0.0, \"Pressure (= \" + String(pipe1.mediums[5].p, 6, 0, true) + \" Pa) of medium \\\"\" + \"Moist air\" + \"\\\" is negative
//   (Temperature = \" + String(pipe1.mediums[5].T, 6, 0, true) + \" K)\");
//   pipe1.flowModel.states[1].X = pipe1.statesFM[1].X;
//   pipe1.flowModel.states[2].X = pipe1.statesFM[2].X;
//   pipe1.flowModel.states[3].X = pipe1.statesFM[3].X;
//   pipe1.flowModel.states[4].X = pipe1.statesFM[4].X;
//   pipe1.flowModel.states[5].X = pipe1.statesFM[5].X;
//   pipe1.flowModel.states[6].X = pipe1.statesFM[6].X;
//   pipe1.flowModel.states[7].X = pipe1.statesFM[7].X;
//   pipe1.flowModel.vs = pipe1.n33;
//   pipe1.flowModel.crossAreas = pipe1.n32;
//   pipe1.flowModel.dimensions = pipe1.n34;
//   pipe1.flowModel.roughnesses = pipe1.n35;
//   pipe1.flowModel.dheights = pipe1.n31;
//   pipe1.flowModel.pathLengths = pipe1.n30;
//   pipe1.flowModel.rhos = array(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.flowModel.Medium.density(pipe1.flowModel.states[$i1]) for $i1 in 1:7);
//   pipe1.flowModel.mus = array(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.flowModel.Medium.dynamicViscosity(pipe1.flowModel.states[$i1]) for $i1 in 1:7);
//   pipe1.flowModel.pathLengths_internal = pipe1.flowModel.pathLengths;
//   pipe1.flowModel.Res_turbulent_internal = {pipe1.flowModel.Re_turbulent, pipe1.flowModel.Re_turbulent, pipe1.flowModel.Re_turbulent, pipe1.flowModel.Re_turbulent, pipe1.flowModel.Re_turbulent, pipe1.flowModel.Re_turbulent};
//   pipe1.flowModel.n28 = {0.5 * (pipe1.flowModel.dimensions[1] + pipe1.flowModel.dimensions[2]), 0.5 * (pipe1.flowModel.dimensions[2] + pipe1.flowModel.dimensions[3]), 0.5 * (pipe1.flowModel.dimensions[3] + pipe1.flowModel.dimensions[4]), 0.5 * (pipe1.flowModel.dimensions[4] + pipe1.flowModel.dimensions[5]), 0.5 * (pipe1.flowModel.dimensions[5] + pipe1.flowModel.dimensions[6]), 0.5 * (pipe1.flowModel.dimensions[6] + pipe1.flowModel.dimensions[7])};
//   pipe1.flowModel.m_flows = array(homotopy((array(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.flowModel.WallFriction.massFlowRate_dp_staticHead(pipe1.flowModel.dps_fg[$i1], pipe1.flowModel.rhos[(1:6)[$i1]], pipe1.flowModel.rhos[(2:7)[$i1]], pipe1.flowModel.mus[(1:6)[$i1]], pipe1.flowModel.mus[(2:7)[$i1]], pipe1.flowModel.pathLengths_internal[$i1], pipe1.flowModel.n28[$i1], {pipe1.flowModel.g * pipe1.flowModel.dheights[1], pipe1.flowModel.g * pipe1.flowModel.dheights[2], pipe1.flowModel.g * pipe1.flowModel.dheights[3], pipe1.flowModel.g * pipe1.flowModel.dheights[4], pipe1.flowModel.g * pipe1.flowModel.dheights[5], pipe1.flowModel.g * pipe1.flowModel.dheights[6]}[$i1], {(pipe1.flowModel.crossAreas[1] + pipe1.flowModel.crossAreas[2]) / 2.0, (pipe1.flowModel.crossAreas[2] + pipe1.flowModel.crossAreas[3]) / 2.0, (pipe1.flowModel.crossAreas[3] + pipe1.flowModel.crossAreas[4]) / 2.0, (pipe1.flowModel.crossAreas[4] + pipe1.flowModel.crossAreas[5]) / 2.0, (pipe1.flowModel.crossAreas[5] + pipe1.flowModel.crossAreas[6]) / 2.0, (pipe1.flowModel.crossAreas[6] + pipe1.flowModel.crossAreas[7]) / 2.0}[$i1], {(pipe1.flowModel.roughnesses[1] + pipe1.flowModel.roughnesses[2]) / 2.0, (pipe1.flowModel.roughnesses[2] + pipe1.flowModel.roughnesses[3]) / 2.0, (pipe1.flowModel.roughnesses[3] + pipe1.flowModel.roughnesses[4]) / 2.0, (pipe1.flowModel.roughnesses[4] + pipe1.flowModel.roughnesses[5]) / 2.0, (pipe1.flowModel.roughnesses[5] + pipe1.flowModel.roughnesses[6]) / 2.0, (pipe1.flowModel.roughnesses[6] + pipe1.flowModel.roughnesses[7]) / 2.0}[$i1], pipe1.flowModel.n25 / 6.0, pipe1.flowModel.Res_turbulent_internal[$i1]) for $i1 in 1:6) * pipe1.flowModel.nParallel)[$i1], {pipe1.flowModel.m_flow_nominal / pipe1.flowModel.dp_nominal * (pipe1.flowModel.dps_fg[1] - pipe1.flowModel.g * pipe1.flowModel.dheights[1] * pipe1.flowModel.n22), pipe1.flowModel.m_flow_nominal / pipe1.flowModel.dp_nominal * (pipe1.flowModel.dps_fg[2] - pipe1.flowModel.g * pipe1.flowModel.dheights[2] * pipe1.flowModel.n22), pipe1.flowModel.m_flow_nominal / pipe1.flowModel.dp_nominal * (pipe1.flowModel.dps_fg[3] - pipe1.flowModel.g * pipe1.flowModel.dheights[3] * pipe1.flowModel.n22), pipe1.flowModel.m_flow_nominal / pipe1.flowModel.dp_nominal * (pipe1.flowModel.dps_fg[4] - pipe1.flowModel.g * pipe1.flowModel.dheights[4] * pipe1.flowModel.n22), pipe1.flowModel.m_flow_nominal / pipe1.flowModel.dp_nominal * (pipe1.flowModel.dps_fg[5] - pipe1.flowModel.g * pipe1.flowModel.dheights[5] * pipe1.flowModel.n22), pipe1.flowModel.m_flow_nominal / pipe1.flowModel.dp_nominal * (pipe1.flowModel.dps_fg[6] - pipe1.flowModel.g * pipe1.flowModel.dheights[6] * pipe1.flowModel.n22)}[$i1]) for $i1 in 1:6);
//   pipe1.flowModel.rhos_act[1] = noEvent(if pipe1.flowModel.m_flows[1] > 0.0 then pipe1.flowModel.rhos[1] else pipe1.flowModel.rhos[2]);
//   pipe1.flowModel.mus_act[1] = noEvent(if pipe1.flowModel.m_flows[1] > 0.0 then pipe1.flowModel.mus[1] else pipe1.flowModel.mus[2]);
//   pipe1.flowModel.rhos_act[2] = noEvent(if pipe1.flowModel.m_flows[2] > 0.0 then pipe1.flowModel.rhos[2] else pipe1.flowModel.rhos[3]);
//   pipe1.flowModel.mus_act[2] = noEvent(if pipe1.flowModel.m_flows[2] > 0.0 then pipe1.flowModel.mus[2] else pipe1.flowModel.mus[3]);
//   pipe1.flowModel.rhos_act[3] = noEvent(if pipe1.flowModel.m_flows[3] > 0.0 then pipe1.flowModel.rhos[3] else pipe1.flowModel.rhos[4]);
//   pipe1.flowModel.mus_act[3] = noEvent(if pipe1.flowModel.m_flows[3] > 0.0 then pipe1.flowModel.mus[3] else pipe1.flowModel.mus[4]);
//   pipe1.flowModel.rhos_act[4] = noEvent(if pipe1.flowModel.m_flows[4] > 0.0 then pipe1.flowModel.rhos[4] else pipe1.flowModel.rhos[5]);
//   pipe1.flowModel.mus_act[4] = noEvent(if pipe1.flowModel.m_flows[4] > 0.0 then pipe1.flowModel.mus[4] else pipe1.flowModel.mus[5]);
//   pipe1.flowModel.rhos_act[5] = noEvent(if pipe1.flowModel.m_flows[5] > 0.0 then pipe1.flowModel.rhos[5] else pipe1.flowModel.rhos[6]);
//   pipe1.flowModel.mus_act[5] = noEvent(if pipe1.flowModel.m_flows[5] > 0.0 then pipe1.flowModel.mus[5] else pipe1.flowModel.mus[6]);
//   pipe1.flowModel.rhos_act[6] = noEvent(if pipe1.flowModel.m_flows[6] > 0.0 then pipe1.flowModel.rhos[6] else pipe1.flowModel.rhos[7]);
//   pipe1.flowModel.mus_act[6] = noEvent(if pipe1.flowModel.m_flows[6] > 0.0 then pipe1.flowModel.mus[6] else pipe1.flowModel.mus[7]);
//   pipe1.flowModel.Ib_flows = array(pipe1.flowModel.rhos[i] * pipe1.flowModel.vs[i] * pipe1.flowModel.vs[i] * pipe1.flowModel.crossAreas[i] - pipe1.flowModel.rhos[i + 1] * pipe1.flowModel.vs[i + 1] * pipe1.flowModel.vs[i + 1] * pipe1.flowModel.crossAreas[i + 1] for i in 1:6) * pipe1.flowModel.nParallel;
//   pipe1.flowModel.Fs_p = array(0.5 * (pipe1.flowModel.crossAreas[i] + pipe1.flowModel.crossAreas[i + 1]) * (Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.flowModel.Medium.pressure(pipe1.flowModel.states[i + 1]) - Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.flowModel.Medium.pressure(pipe1.flowModel.states[i])) for i in 1:6) * pipe1.flowModel.nParallel;
//   pipe1.flowModel.dps_fg = array(pipe1.flowModel.Fs_fg[i] / pipe1.flowModel.nParallel * 2.0 / (pipe1.flowModel.crossAreas[i] + pipe1.flowModel.crossAreas[i + 1]) for i in 1:6);
//   pipe1.flowModel.Is = array(pipe1.flowModel.m_flows[i] * pipe1.flowModel.pathLengths[i] for i in 1:6);
//   der(pipe1.flowModel.Is[1]) = pipe1.flowModel.Ib_flows[1] - pipe1.flowModel.Fs_p[1] - pipe1.flowModel.Fs_fg[1];
//   der(pipe1.flowModel.Is[2]) = pipe1.flowModel.Ib_flows[2] - pipe1.flowModel.Fs_p[2] - pipe1.flowModel.Fs_fg[2];
//   der(pipe1.flowModel.Is[3]) = pipe1.flowModel.Ib_flows[3] - pipe1.flowModel.Fs_p[3] - pipe1.flowModel.Fs_fg[3];
//   der(pipe1.flowModel.Is[4]) = pipe1.flowModel.Ib_flows[4] - pipe1.flowModel.Fs_p[4] - pipe1.flowModel.Fs_fg[4];
//   der(pipe1.flowModel.Is[5]) = pipe1.flowModel.Ib_flows[5] - pipe1.flowModel.Fs_p[5] - pipe1.flowModel.Fs_fg[5];
//   der(pipe1.flowModel.Is[6]) = pipe1.flowModel.Ib_flows[6] - pipe1.flowModel.Fs_p[6] - pipe1.flowModel.Fs_fg[6];
//   pipe1.vs = array(0.5 * (pipe1.m_flows[i] + pipe1.m_flows[i + 1]) / pipe1.mediums[i].d / pipe1.crossAreas[i] for i in 1:5) / pipe1.nParallel;
//   pipe1.heatTransfer.states[1].X = pipe1.mediums[1].state.X;
//   pipe1.heatTransfer.states[2].X = pipe1.mediums[2].state.X;
//   pipe1.heatTransfer.states[3].X = pipe1.mediums[3].state.X;
//   pipe1.heatTransfer.states[4].X = pipe1.mediums[4].state.X;
//   pipe1.heatTransfer.states[5].X = pipe1.mediums[5].state.X;
//   pipe1.heatTransfer.surfaceAreas = {pipe1.perimeter * 10.0, pipe1.perimeter * 10.0, pipe1.perimeter * 10.0, pipe1.perimeter * 10.0, pipe1.perimeter * 10.0};
//   pipe1.heatTransfer.Ts = array(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.heatTransfer.Medium.temperature(pipe1.heatTransfer.states[$i1]) for $i1 in 1:5);
//   pipe1.heatTransfer.vs = pipe1.vs;
//   pipe1.heatTransfer.lengths = {10.0, 10.0, 10.0, 10.0, 10.0};
//   pipe1.heatTransfer.dimensions = pipe1.dimensions;
//   pipe1.heatTransfer.roughnesses = pipe1.roughnesses;
//   pipe1.heatTransfer.Ts[1] = pipe1.heatTransfer.heatPorts[1].T;
//   pipe1.heatTransfer.Ts[2] = pipe1.heatTransfer.heatPorts[2].T;
//   pipe1.heatTransfer.Ts[3] = pipe1.heatTransfer.heatPorts[3].T;
//   pipe1.heatTransfer.Ts[4] = pipe1.heatTransfer.heatPorts[4].T;
//   pipe1.heatTransfer.Ts[5] = pipe1.heatTransfer.heatPorts[5].T;
//   pipe1.heatTransfer.Q_flows[1] = pipe1.heatTransfer.heatPorts[1].Q_flow;
//   pipe1.heatTransfer.Q_flows[2] = pipe1.heatTransfer.heatPorts[2].Q_flow;
//   pipe1.heatTransfer.Q_flows[3] = pipe1.heatTransfer.heatPorts[3].Q_flow;
//   pipe1.heatTransfer.Q_flows[4] = pipe1.heatTransfer.heatPorts[4].Q_flow;
//   pipe1.heatTransfer.Q_flows[5] = pipe1.heatTransfer.heatPorts[5].Q_flow;
//   pipe1.Qb_flows[1] = pipe1.heatTransfer.Q_flows[1];
//   pipe1.Qb_flows[2] = pipe1.heatTransfer.Q_flows[2];
//   pipe1.Qb_flows[3] = pipe1.heatTransfer.Q_flows[3];
//   pipe1.Qb_flows[4] = pipe1.heatTransfer.Q_flows[4];
//   pipe1.Qb_flows[5] = pipe1.heatTransfer.Q_flows[5];
//   pipe1.Wb_flows[2:4] = array(pipe1.vs[i] * pipe1.crossAreas[i] * ((pipe1.mediums[i + 1].p - pipe1.mediums[i - 1].p) / 2.0 + (pipe1.flowModel.dps_fg[i] + pipe1.flowModel.dps_fg[i + 1]) / 2.0 - system.g * 10.0 * pipe1.mediums[i].d) for i in 2:4) * pipe1.nParallel;
//   pipe1.Wb_flows[1] = pipe1.vs[1] * pipe1.crossAreas[1] * ((pipe1.mediums[2].p - pipe1.port_a.p) / 1.5 + pipe1.flowModel.dps_fg[1] + pipe1.flowModel.dps_fg[2] / 2.0 - system.g * 10.0 * pipe1.mediums[1].d) * pipe1.nParallel;
//   pipe1.Wb_flows[5] = pipe1.vs[5] * pipe1.crossAreas[5] * ((pipe1.port_b.p - pipe1.mediums[4].p) / 1.5 + pipe1.flowModel.dps_fg[5] / 2.0 + pipe1.flowModel.dps_fg[6] - system.g * 10.0 * pipe1.mediums[5].d) * pipe1.nParallel;
//   pipe1.n30[1] = 5.0;
//   pipe1.n30[2] = 10.0;
//   pipe1.n30[3] = 10.0;
//   pipe1.n30[4] = 10.0;
//   pipe1.n30[5] = 10.0;
//   pipe1.n30[6] = 5.0;
//   pipe1.n31[1] = 5.0;
//   pipe1.n31[2] = 10.0;
//   pipe1.n31[3] = 10.0;
//   pipe1.n31[4] = 10.0;
//   pipe1.n31[5] = 10.0;
//   pipe1.n31[6] = 5.0;
//   pipe1.n32[1] = pipe1.crossAreas[1];
//   pipe1.n32[2] = pipe1.crossAreas[1];
//   pipe1.n32[3] = pipe1.crossAreas[2];
//   pipe1.n32[4] = pipe1.crossAreas[3];
//   pipe1.n32[5] = pipe1.crossAreas[4];
//   pipe1.n32[6] = pipe1.crossAreas[5];
//   pipe1.n32[7] = pipe1.crossAreas[5];
//   pipe1.n34[1] = pipe1.dimensions[1];
//   pipe1.n34[2] = pipe1.dimensions[1];
//   pipe1.n34[3] = pipe1.dimensions[2];
//   pipe1.n34[4] = pipe1.dimensions[3];
//   pipe1.n34[5] = pipe1.dimensions[4];
//   pipe1.n34[6] = pipe1.dimensions[5];
//   pipe1.n34[7] = pipe1.dimensions[5];
//   pipe1.n35[1] = pipe1.roughnesses[1];
//   pipe1.n35[2] = pipe1.roughnesses[1];
//   pipe1.n35[3] = pipe1.roughnesses[2];
//   pipe1.n35[4] = pipe1.roughnesses[3];
//   pipe1.n35[5] = pipe1.roughnesses[4];
//   pipe1.n35[6] = pipe1.roughnesses[5];
//   pipe1.n35[7] = pipe1.roughnesses[5];
//   pipe1.mb_flows[1] = pipe1.m_flows[1] - pipe1.m_flows[2];
//   pipe1.mbXi_flows[1,1] = pipe1.mXi_flows[1,1] - pipe1.mXi_flows[2,1];
//   pipe1.Hb_flows[1] = pipe1.H_flows[1] - pipe1.H_flows[2];
//   pipe1.mb_flows[2] = pipe1.m_flows[2] - pipe1.m_flows[3];
//   pipe1.mbXi_flows[2,1] = pipe1.mXi_flows[2,1] - pipe1.mXi_flows[3,1];
//   pipe1.Hb_flows[2] = pipe1.H_flows[2] - pipe1.H_flows[3];
//   pipe1.mb_flows[3] = pipe1.m_flows[3] - pipe1.m_flows[4];
//   pipe1.mbXi_flows[3,1] = pipe1.mXi_flows[3,1] - pipe1.mXi_flows[4,1];
//   pipe1.Hb_flows[3] = pipe1.H_flows[3] - pipe1.H_flows[4];
//   pipe1.mb_flows[4] = pipe1.m_flows[4] - pipe1.m_flows[5];
//   pipe1.mbXi_flows[4,1] = pipe1.mXi_flows[4,1] - pipe1.mXi_flows[5,1];
//   pipe1.Hb_flows[4] = pipe1.H_flows[4] - pipe1.H_flows[5];
//   pipe1.mb_flows[5] = pipe1.m_flows[5] - pipe1.m_flows[6];
//   pipe1.mbXi_flows[5,1] = pipe1.mXi_flows[5,1] - pipe1.mXi_flows[6,1];
//   pipe1.Hb_flows[5] = pipe1.H_flows[5] - pipe1.H_flows[6];
//   pipe1.H_flows[2] = semiLinear(pipe1.m_flows[2], pipe1.mediums[1].h, pipe1.mediums[2].h);
//   pipe1.mXi_flows[2,1] = semiLinear(pipe1.m_flows[2], pipe1.mediums[1].Xi[1], pipe1.mediums[2].Xi[1]);
//   pipe1.H_flows[3] = semiLinear(pipe1.m_flows[3], pipe1.mediums[2].h, pipe1.mediums[3].h);
//   pipe1.mXi_flows[3,1] = semiLinear(pipe1.m_flows[3], pipe1.mediums[2].Xi[1], pipe1.mediums[3].Xi[1]);
//   pipe1.H_flows[4] = semiLinear(pipe1.m_flows[4], pipe1.mediums[3].h, pipe1.mediums[4].h);
//   pipe1.mXi_flows[4,1] = semiLinear(pipe1.m_flows[4], pipe1.mediums[3].Xi[1], pipe1.mediums[4].Xi[1]);
//   pipe1.H_flows[5] = semiLinear(pipe1.m_flows[5], pipe1.mediums[4].h, pipe1.mediums[5].h);
//   pipe1.mXi_flows[5,1] = semiLinear(pipe1.m_flows[5], pipe1.mediums[4].Xi[1], pipe1.mediums[5].Xi[1]);
//   pipe1.H_flows[1] = semiLinear(pipe1.port_a.m_flow, boundary1.ports[1].h_outflow, pipe1.mediums[1].h);
//   pipe1.H_flows[6] = -semiLinear(pipe1.port_b.m_flow, ($OMC$PositiveMax(-pipe2.port_a.m_flow, 1e-07) * pipe2.port_a.h_outflow + $OMC$PositiveMax(-pipe3.port_a.m_flow, 1e-07) * pipe3.port_a.h_outflow) / ($OMC$PositiveMax(-pipe2.port_a.m_flow, 1e-07) + $OMC$PositiveMax(-pipe3.port_a.m_flow, 1e-07)), pipe1.mediums[5].h);
//   pipe1.mXi_flows[1,1] = semiLinear(pipe1.port_a.m_flow, boundary1.ports[1].Xi_outflow[1], pipe1.mediums[1].Xi[1]);
//   pipe1.mXi_flows[6,1] = -semiLinear(pipe1.port_b.m_flow, ($OMC$PositiveMax(-pipe2.port_a.m_flow, 1e-07) * pipe2.port_a.Xi_outflow[1] + $OMC$PositiveMax(-pipe3.port_a.m_flow, 1e-07) * pipe3.port_a.Xi_outflow[1]) / ($OMC$PositiveMax(-pipe2.port_a.m_flow, 1e-07) + $OMC$PositiveMax(-pipe3.port_a.m_flow, 1e-07)), pipe1.mediums[5].Xi[1]);
//   pipe1.port_a.m_flow = pipe1.m_flows[1];
//   pipe1.port_b.m_flow = -pipe1.m_flows[6];
//   pipe1.port_a.h_outflow = pipe1.mediums[1].h;
//   pipe1.port_b.h_outflow = pipe1.mediums[5].h;
//   pipe1.port_a.Xi_outflow[1] = pipe1.mediums[1].Xi[1];
//   pipe1.port_b.Xi_outflow[1] = pipe1.mediums[5].Xi[1];
//   pipe1.state_a = Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.setState_phX(pipe1.port_a.p, boundary1.ports[1].h_outflow, {boundary1.ports[1].Xi_outflow[1]});
//   pipe1.state_b = Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.setState_phX(pipe1.port_b.p, ($OMC$PositiveMax(-pipe2.port_a.m_flow, 1e-07) * pipe2.port_a.h_outflow + $OMC$PositiveMax(-pipe3.port_a.m_flow, 1e-07) * pipe3.port_a.h_outflow) / ($OMC$PositiveMax(-pipe2.port_a.m_flow, 1e-07) + $OMC$PositiveMax(-pipe3.port_a.m_flow, 1e-07)), {($OMC$PositiveMax(-pipe2.port_a.m_flow, 1e-07) * pipe2.port_a.Xi_outflow[1] + $OMC$PositiveMax(-pipe3.port_a.m_flow, 1e-07) * pipe3.port_a.Xi_outflow[1]) / ($OMC$PositiveMax(-pipe2.port_a.m_flow, 1e-07) + $OMC$PositiveMax(-pipe3.port_a.m_flow, 1e-07))});
//   pipe1.statesFM[1] = pipe1.state_a;
//   pipe1.statesFM[2] = pipe1.mediums[1].state;
//   pipe1.statesFM[3] = pipe1.mediums[2].state;
//   pipe1.statesFM[4] = pipe1.mediums[3].state;
//   pipe1.statesFM[5] = pipe1.mediums[4].state;
//   pipe1.statesFM[6] = pipe1.mediums[5].state;
//   pipe1.statesFM[7] = pipe1.state_b;
//   pipe1.m_flows[1] = pipe1.flowModel.m_flows[1];
//   pipe1.m_flows[2] = pipe1.flowModel.m_flows[2];
//   pipe1.m_flows[3] = pipe1.flowModel.m_flows[3];
//   pipe1.m_flows[4] = pipe1.flowModel.m_flows[4];
//   pipe1.m_flows[5] = pipe1.flowModel.m_flows[5];
//   pipe1.m_flows[6] = pipe1.flowModel.m_flows[6];
//   pipe1.n33[1] = pipe1.m_flows[1] / Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.density(pipe1.state_a) / pipe1.crossAreas[1] / pipe1.nParallel;
//   pipe1.n33[2] = pipe1.vs[1];
//   pipe1.n33[3] = pipe1.vs[2];
//   pipe1.n33[4] = pipe1.vs[3];
//   pipe1.n33[5] = pipe1.vs[4];
//   pipe1.n33[6] = pipe1.vs[5];
//   pipe1.n33[7] = pipe1.m_flows[6] / Modelica.Fluid.Examples.BranchingDynamicPipes.pipe1.Medium.density(pipe1.state_b) / pipe1.crossAreas[5] / pipe1.nParallel;
//   pipe1.ms[1] = pipe1.fluidVolumes[1] * pipe1.mediums[1].d;
//   pipe1.mXis[1,1] = pipe1.ms[1] * pipe1.mediums[1].Xi[1];
//   pipe1.Us[1] = pipe1.ms[1] * pipe1.mediums[1].u;
//   pipe1.ms[2] = pipe1.fluidVolumes[2] * pipe1.mediums[2].d;
//   pipe1.mXis[2,1] = pipe1.ms[2] * pipe1.mediums[2].Xi[1];
//   pipe1.Us[2] = pipe1.ms[2] * pipe1.mediums[2].u;
//   pipe1.ms[3] = pipe1.fluidVolumes[3] * pipe1.mediums[3].d;
//   pipe1.mXis[3,1] = pipe1.ms[3] * pipe1.mediums[3].Xi[1];
//   pipe1.Us[3] = pipe1.ms[3] * pipe1.mediums[3].u;
//   pipe1.ms[4] = pipe1.fluidVolumes[4] * pipe1.mediums[4].d;
//   pipe1.mXis[4,1] = pipe1.ms[4] * pipe1.mediums[4].Xi[1];
//   pipe1.Us[4] = pipe1.ms[4] * pipe1.mediums[4].u;
//   pipe1.ms[5] = pipe1.fluidVolumes[5] * pipe1.mediums[5].d;
//   pipe1.mXis[5,1] = pipe1.ms[5] * pipe1.mediums[5].Xi[1];
//   pipe1.Us[5] = pipe1.ms[5] * pipe1.mediums[5].u;
//   der(pipe1.Us[1]) = pipe1.Hb_flows[1] + pipe1.Wb_flows[1] + pipe1.Qb_flows[1];
//   der(pipe1.Us[2]) = pipe1.Hb_flows[2] + pipe1.Wb_flows[2] + pipe1.Qb_flows[2];
//   der(pipe1.Us[3]) = pipe1.Hb_flows[3] + pipe1.Wb_flows[3] + pipe1.Qb_flows[3];
//   der(pipe1.Us[4]) = pipe1.Hb_flows[4] + pipe1.Wb_flows[4] + pipe1.Qb_flows[4];
//   der(pipe1.Us[5]) = pipe1.Hb_flows[5] + pipe1.Wb_flows[5] + pipe1.Qb_flows[5];
//   der(pipe1.ms[1]) = pipe1.mb_flows[1];
//   der(pipe1.ms[2]) = pipe1.mb_flows[2];
//   der(pipe1.ms[3]) = pipe1.mb_flows[3];
//   der(pipe1.ms[4]) = pipe1.mb_flows[4];
//   der(pipe1.ms[5]) = pipe1.mb_flows[5];
//   der(pipe1.mXis[1,1]) = pipe1.mbXi_flows[1,1];
//   der(pipe1.mXis[2,1]) = pipe1.mbXi_flows[2,1];
//   der(pipe1.mXis[3,1]) = pipe1.mbXi_flows[3,1];
//   der(pipe1.mXis[4,1]) = pipe1.mbXi_flows[4,1];
//   der(pipe1.mXis[5,1]) = pipe1.mbXi_flows[5,1];
//   pipe2.fluidVolumes = array(pipe2.crossAreas[i] * 10.0 for i in 1:5) * pipe2.nParallel;
//   assert(pipe2.mediums[1].T >= 190.0 and pipe2.mediums[1].T <= 647.0, \"
//   Temperature T is not in the allowed range
//   190.0 K <= (T =\" + String(pipe2.mediums[1].T, 6, 0, true) + \" K) <= 647.0 K
//   required from medium model \\\"\" + \"Moist air\" + \"\\\".\");
//   pipe2.mediums[1].MM = 1.0 / (pipe2.mediums[1].Xi[1] / 0.01801528 + (1.0 - pipe2.mediums[1].Xi[1]) / 0.0289651159);
//   pipe2.mediums[1].n44 = min(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.saturationPressure(pipe2.mediums[1].T), 0.999 * pipe2.mediums[1].p);
//   pipe2.mediums[1].n42 = min(pipe2.mediums[1].n44 * 0.6219647130774989 / max(1e-13, pipe2.mediums[1].p - pipe2.mediums[1].n44) * (1.0 - pipe2.mediums[1].Xi[1]), 1.0);
//   pipe2.mediums[1].n39 = max(pipe2.mediums[1].Xi[1] - pipe2.mediums[1].n42, 0.0);
//   pipe2.mediums[1].n40 = pipe2.mediums[1].Xi[1] - pipe2.mediums[1].n39;
//   pipe2.mediums[1].n41 = 1.0 - pipe2.mediums[1].Xi[1];
//   pipe2.mediums[1].h = Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.specificEnthalpy_pTX(pipe2.mediums[1].p, pipe2.mediums[1].T, pipe2.mediums[1].Xi);
//   pipe2.mediums[1].R = 287.0512249529787 * pipe2.mediums[1].n41 / (1.0 - pipe2.mediums[1].n39) + 461.5233290850878 * pipe2.mediums[1].n40 / (1.0 - pipe2.mediums[1].n39);
//   pipe2.mediums[1].u = pipe2.mediums[1].h - pipe2.mediums[1].R * pipe2.mediums[1].T;
//   pipe2.mediums[1].d = pipe2.mediums[1].p / (pipe2.mediums[1].R * pipe2.mediums[1].T);
//   pipe2.mediums[1].state.p = pipe2.mediums[1].p;
//   pipe2.mediums[1].state.T = pipe2.mediums[1].T;
//   pipe2.mediums[1].state.X[1] = pipe2.mediums[1].X[1];
//   pipe2.mediums[1].state.X[2] = pipe2.mediums[1].X[2];
//   pipe2.mediums[1].n43 = 0.6219647130774989 * pipe2.mediums[1].n44 / max(1e-13, pipe2.mediums[1].p - pipe2.mediums[1].n44);
//   pipe2.mediums[1].x_water = pipe2.mediums[1].Xi[1] / max(pipe2.mediums[1].n41, 1e-13);
//   pipe2.mediums[1].phi = pipe2.mediums[1].p / pipe2.mediums[1].n44 * pipe2.mediums[1].Xi[1] / (pipe2.mediums[1].Xi[1] + 0.6219647130774989 * pipe2.mediums[1].n41);
//   pipe2.mediums[1].Xi[1] = pipe2.mediums[1].X[1];
//   pipe2.mediums[1].X[2] = 1.0 - pipe2.mediums[1].Xi[1];
//   assert(pipe2.mediums[1].X[1] >= -1e-05 and pipe2.mediums[1].X[1] <= 1.00001, \"Mass fraction X[\" + String(1, 0, true) + \"] = \" + String(pipe2.mediums[1].X[1], 6, 0, true) + \"of substance \" + \"water\" + \"
//   of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(pipe2.mediums[1].X[2] >= -1e-05 and pipe2.mediums[1].X[2] <= 1.00001, \"Mass fraction X[\" + String(2, 0, true) + \"] = \" + String(pipe2.mediums[1].X[2], 6, 0, true) + \"of substance \" + \"air\" + \"
//   of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(pipe2.mediums[1].p >= 0.0, \"Pressure (= \" + String(pipe2.mediums[1].p, 6, 0, true) + \" Pa) of medium \\\"\" + \"Moist air\" + \"\\\" is negative
//   (Temperature = \" + String(pipe2.mediums[1].T, 6, 0, true) + \" K)\");
//   assert(pipe2.mediums[2].T >= 190.0 and pipe2.mediums[2].T <= 647.0, \"
//   Temperature T is not in the allowed range
//   190.0 K <= (T =\" + String(pipe2.mediums[2].T, 6, 0, true) + \" K) <= 647.0 K
//   required from medium model \\\"\" + \"Moist air\" + \"\\\".\");
//   pipe2.mediums[2].MM = 1.0 / (pipe2.mediums[2].Xi[1] / 0.01801528 + (1.0 - pipe2.mediums[2].Xi[1]) / 0.0289651159);
//   pipe2.mediums[2].n44 = min(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.saturationPressure(pipe2.mediums[2].T), 0.999 * pipe2.mediums[2].p);
//   pipe2.mediums[2].n42 = min(pipe2.mediums[2].n44 * 0.6219647130774989 / max(1e-13, pipe2.mediums[2].p - pipe2.mediums[2].n44) * (1.0 - pipe2.mediums[2].Xi[1]), 1.0);
//   pipe2.mediums[2].n39 = max(pipe2.mediums[2].Xi[1] - pipe2.mediums[2].n42, 0.0);
//   pipe2.mediums[2].n40 = pipe2.mediums[2].Xi[1] - pipe2.mediums[2].n39;
//   pipe2.mediums[2].n41 = 1.0 - pipe2.mediums[2].Xi[1];
//   pipe2.mediums[2].h = Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.specificEnthalpy_pTX(pipe2.mediums[2].p, pipe2.mediums[2].T, pipe2.mediums[2].Xi);
//   pipe2.mediums[2].R = 287.0512249529787 * pipe2.mediums[2].n41 / (1.0 - pipe2.mediums[2].n39) + 461.5233290850878 * pipe2.mediums[2].n40 / (1.0 - pipe2.mediums[2].n39);
//   pipe2.mediums[2].u = pipe2.mediums[2].h - pipe2.mediums[2].R * pipe2.mediums[2].T;
//   pipe2.mediums[2].d = pipe2.mediums[2].p / (pipe2.mediums[2].R * pipe2.mediums[2].T);
//   pipe2.mediums[2].state.p = pipe2.mediums[2].p;
//   pipe2.mediums[2].state.T = pipe2.mediums[2].T;
//   pipe2.mediums[2].state.X[1] = pipe2.mediums[2].X[1];
//   pipe2.mediums[2].state.X[2] = pipe2.mediums[2].X[2];
//   pipe2.mediums[2].n43 = 0.6219647130774989 * pipe2.mediums[2].n44 / max(1e-13, pipe2.mediums[2].p - pipe2.mediums[2].n44);
//   pipe2.mediums[2].x_water = pipe2.mediums[2].Xi[1] / max(pipe2.mediums[2].n41, 1e-13);
//   pipe2.mediums[2].phi = pipe2.mediums[2].p / pipe2.mediums[2].n44 * pipe2.mediums[2].Xi[1] / (pipe2.mediums[2].Xi[1] + 0.6219647130774989 * pipe2.mediums[2].n41);
//   pipe2.mediums[2].Xi[1] = pipe2.mediums[2].X[1];
//   pipe2.mediums[2].X[2] = 1.0 - pipe2.mediums[2].Xi[1];
//   assert(pipe2.mediums[2].X[1] >= -1e-05 and pipe2.mediums[2].X[1] <= 1.00001, \"Mass fraction X[\" + String(1, 0, true) + \"] = \" + String(pipe2.mediums[2].X[1], 6, 0, true) + \"of substance \" + \"water\" + \"
//   of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(pipe2.mediums[2].X[2] >= -1e-05 and pipe2.mediums[2].X[2] <= 1.00001, \"Mass fraction X[\" + String(2, 0, true) + \"] = \" + String(pipe2.mediums[2].X[2], 6, 0, true) + \"of substance \" + \"air\" + \"
//   of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(pipe2.mediums[2].p >= 0.0, \"Pressure (= \" + String(pipe2.mediums[2].p, 6, 0, true) + \" Pa) of medium \\\"\" + \"Moist air\" + \"\\\" is negative
//   (Temperature = \" + String(pipe2.mediums[2].T, 6, 0, true) + \" K)\");
//   assert(pipe2.mediums[3].T >= 190.0 and pipe2.mediums[3].T <= 647.0, \"
//   Temperature T is not in the allowed range
//   190.0 K <= (T =\" + String(pipe2.mediums[3].T, 6, 0, true) + \" K) <= 647.0 K
//   required from medium model \\\"\" + \"Moist air\" + \"\\\".\");
//   pipe2.mediums[3].MM = 1.0 / (pipe2.mediums[3].Xi[1] / 0.01801528 + (1.0 - pipe2.mediums[3].Xi[1]) / 0.0289651159);
//   pipe2.mediums[3].n44 = min(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.saturationPressure(pipe2.mediums[3].T), 0.999 * pipe2.mediums[3].p);
//   pipe2.mediums[3].n42 = min(pipe2.mediums[3].n44 * 0.6219647130774989 / max(1e-13, pipe2.mediums[3].p - pipe2.mediums[3].n44) * (1.0 - pipe2.mediums[3].Xi[1]), 1.0);
//   pipe2.mediums[3].n39 = max(pipe2.mediums[3].Xi[1] - pipe2.mediums[3].n42, 0.0);
//   pipe2.mediums[3].n40 = pipe2.mediums[3].Xi[1] - pipe2.mediums[3].n39;
//   pipe2.mediums[3].n41 = 1.0 - pipe2.mediums[3].Xi[1];
//   pipe2.mediums[3].h = Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.specificEnthalpy_pTX(pipe2.mediums[3].p, pipe2.mediums[3].T, pipe2.mediums[3].Xi);
//   pipe2.mediums[3].R = 287.0512249529787 * pipe2.mediums[3].n41 / (1.0 - pipe2.mediums[3].n39) + 461.5233290850878 * pipe2.mediums[3].n40 / (1.0 - pipe2.mediums[3].n39);
//   pipe2.mediums[3].u = pipe2.mediums[3].h - pipe2.mediums[3].R * pipe2.mediums[3].T;
//   pipe2.mediums[3].d = pipe2.mediums[3].p / (pipe2.mediums[3].R * pipe2.mediums[3].T);
//   pipe2.mediums[3].state.p = pipe2.mediums[3].p;
//   pipe2.mediums[3].state.T = pipe2.mediums[3].T;
//   pipe2.mediums[3].state.X[1] = pipe2.mediums[3].X[1];
//   pipe2.mediums[3].state.X[2] = pipe2.mediums[3].X[2];
//   pipe2.mediums[3].n43 = 0.6219647130774989 * pipe2.mediums[3].n44 / max(1e-13, pipe2.mediums[3].p - pipe2.mediums[3].n44);
//   pipe2.mediums[3].x_water = pipe2.mediums[3].Xi[1] / max(pipe2.mediums[3].n41, 1e-13);
//   pipe2.mediums[3].phi = pipe2.mediums[3].p / pipe2.mediums[3].n44 * pipe2.mediums[3].Xi[1] / (pipe2.mediums[3].Xi[1] + 0.6219647130774989 * pipe2.mediums[3].n41);
//   pipe2.mediums[3].Xi[1] = pipe2.mediums[3].X[1];
//   pipe2.mediums[3].X[2] = 1.0 - pipe2.mediums[3].Xi[1];
//   assert(pipe2.mediums[3].X[1] >= -1e-05 and pipe2.mediums[3].X[1] <= 1.00001, \"Mass fraction X[\" + String(1, 0, true) + \"] = \" + String(pipe2.mediums[3].X[1], 6, 0, true) + \"of substance \" + \"water\" + \"
//   of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(pipe2.mediums[3].X[2] >= -1e-05 and pipe2.mediums[3].X[2] <= 1.00001, \"Mass fraction X[\" + String(2, 0, true) + \"] = \" + String(pipe2.mediums[3].X[2], 6, 0, true) + \"of substance \" + \"air\" + \"
//   of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(pipe2.mediums[3].p >= 0.0, \"Pressure (= \" + String(pipe2.mediums[3].p, 6, 0, true) + \" Pa) of medium \\\"\" + \"Moist air\" + \"\\\" is negative
//   (Temperature = \" + String(pipe2.mediums[3].T, 6, 0, true) + \" K)\");
//   assert(pipe2.mediums[4].T >= 190.0 and pipe2.mediums[4].T <= 647.0, \"
//   Temperature T is not in the allowed range
//   190.0 K <= (T =\" + String(pipe2.mediums[4].T, 6, 0, true) + \" K) <= 647.0 K
//   required from medium model \\\"\" + \"Moist air\" + \"\\\".\");
//   pipe2.mediums[4].MM = 1.0 / (pipe2.mediums[4].Xi[1] / 0.01801528 + (1.0 - pipe2.mediums[4].Xi[1]) / 0.0289651159);
//   pipe2.mediums[4].n44 = min(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.saturationPressure(pipe2.mediums[4].T), 0.999 * pipe2.mediums[4].p);
//   pipe2.mediums[4].n42 = min(pipe2.mediums[4].n44 * 0.6219647130774989 / max(1e-13, pipe2.mediums[4].p - pipe2.mediums[4].n44) * (1.0 - pipe2.mediums[4].Xi[1]), 1.0);
//   pipe2.mediums[4].n39 = max(pipe2.mediums[4].Xi[1] - pipe2.mediums[4].n42, 0.0);
//   pipe2.mediums[4].n40 = pipe2.mediums[4].Xi[1] - pipe2.mediums[4].n39;
//   pipe2.mediums[4].n41 = 1.0 - pipe2.mediums[4].Xi[1];
//   pipe2.mediums[4].h = Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.specificEnthalpy_pTX(pipe2.mediums[4].p, pipe2.mediums[4].T, pipe2.mediums[4].Xi);
//   pipe2.mediums[4].R = 287.0512249529787 * pipe2.mediums[4].n41 / (1.0 - pipe2.mediums[4].n39) + 461.5233290850878 * pipe2.mediums[4].n40 / (1.0 - pipe2.mediums[4].n39);
//   pipe2.mediums[4].u = pipe2.mediums[4].h - pipe2.mediums[4].R * pipe2.mediums[4].T;
//   pipe2.mediums[4].d = pipe2.mediums[4].p / (pipe2.mediums[4].R * pipe2.mediums[4].T);
//   pipe2.mediums[4].state.p = pipe2.mediums[4].p;
//   pipe2.mediums[4].state.T = pipe2.mediums[4].T;
//   pipe2.mediums[4].state.X[1] = pipe2.mediums[4].X[1];
//   pipe2.mediums[4].state.X[2] = pipe2.mediums[4].X[2];
//   pipe2.mediums[4].n43 = 0.6219647130774989 * pipe2.mediums[4].n44 / max(1e-13, pipe2.mediums[4].p - pipe2.mediums[4].n44);
//   pipe2.mediums[4].x_water = pipe2.mediums[4].Xi[1] / max(pipe2.mediums[4].n41, 1e-13);
//   pipe2.mediums[4].phi = pipe2.mediums[4].p / pipe2.mediums[4].n44 * pipe2.mediums[4].Xi[1] / (pipe2.mediums[4].Xi[1] + 0.6219647130774989 * pipe2.mediums[4].n41);
//   pipe2.mediums[4].Xi[1] = pipe2.mediums[4].X[1];
//   pipe2.mediums[4].X[2] = 1.0 - pipe2.mediums[4].Xi[1];
//   assert(pipe2.mediums[4].X[1] >= -1e-05 and pipe2.mediums[4].X[1] <= 1.00001, \"Mass fraction X[\" + String(1, 0, true) + \"] = \" + String(pipe2.mediums[4].X[1], 6, 0, true) + \"of substance \" + \"water\" + \"
//   of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(pipe2.mediums[4].X[2] >= -1e-05 and pipe2.mediums[4].X[2] <= 1.00001, \"Mass fraction X[\" + String(2, 0, true) + \"] = \" + String(pipe2.mediums[4].X[2], 6, 0, true) + \"of substance \" + \"air\" + \"
//   of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(pipe2.mediums[4].p >= 0.0, \"Pressure (= \" + String(pipe2.mediums[4].p, 6, 0, true) + \" Pa) of medium \\\"\" + \"Moist air\" + \"\\\" is negative
//   (Temperature = \" + String(pipe2.mediums[4].T, 6, 0, true) + \" K)\");
//   assert(pipe2.mediums[5].T >= 190.0 and pipe2.mediums[5].T <= 647.0, \"
//   Temperature T is not in the allowed range
//   190.0 K <= (T =\" + String(pipe2.mediums[5].T, 6, 0, true) + \" K) <= 647.0 K
//   required from medium model \\\"\" + \"Moist air\" + \"\\\".\");
//   pipe2.mediums[5].MM = 1.0 / (pipe2.mediums[5].Xi[1] / 0.01801528 + (1.0 - pipe2.mediums[5].Xi[1]) / 0.0289651159);
//   pipe2.mediums[5].n44 = min(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.saturationPressure(pipe2.mediums[5].T), 0.999 * pipe2.mediums[5].p);
//   pipe2.mediums[5].n42 = min(pipe2.mediums[5].n44 * 0.6219647130774989 / max(1e-13, pipe2.mediums[5].p - pipe2.mediums[5].n44) * (1.0 - pipe2.mediums[5].Xi[1]), 1.0);
//   pipe2.mediums[5].n39 = max(pipe2.mediums[5].Xi[1] - pipe2.mediums[5].n42, 0.0);
//   pipe2.mediums[5].n40 = pipe2.mediums[5].Xi[1] - pipe2.mediums[5].n39;
//   pipe2.mediums[5].n41 = 1.0 - pipe2.mediums[5].Xi[1];
//   pipe2.mediums[5].h = Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.specificEnthalpy_pTX(pipe2.mediums[5].p, pipe2.mediums[5].T, pipe2.mediums[5].Xi);
//   pipe2.mediums[5].R = 287.0512249529787 * pipe2.mediums[5].n41 / (1.0 - pipe2.mediums[5].n39) + 461.5233290850878 * pipe2.mediums[5].n40 / (1.0 - pipe2.mediums[5].n39);
//   pipe2.mediums[5].u = pipe2.mediums[5].h - pipe2.mediums[5].R * pipe2.mediums[5].T;
//   pipe2.mediums[5].d = pipe2.mediums[5].p / (pipe2.mediums[5].R * pipe2.mediums[5].T);
//   pipe2.mediums[5].state.p = pipe2.mediums[5].p;
//   pipe2.mediums[5].state.T = pipe2.mediums[5].T;
//   pipe2.mediums[5].state.X[1] = pipe2.mediums[5].X[1];
//   pipe2.mediums[5].state.X[2] = pipe2.mediums[5].X[2];
//   pipe2.mediums[5].n43 = 0.6219647130774989 * pipe2.mediums[5].n44 / max(1e-13, pipe2.mediums[5].p - pipe2.mediums[5].n44);
//   pipe2.mediums[5].x_water = pipe2.mediums[5].Xi[1] / max(pipe2.mediums[5].n41, 1e-13);
//   pipe2.mediums[5].phi = pipe2.mediums[5].p / pipe2.mediums[5].n44 * pipe2.mediums[5].Xi[1] / (pipe2.mediums[5].Xi[1] + 0.6219647130774989 * pipe2.mediums[5].n41);
//   pipe2.mediums[5].Xi[1] = pipe2.mediums[5].X[1];
//   pipe2.mediums[5].X[2] = 1.0 - pipe2.mediums[5].Xi[1];
//   assert(pipe2.mediums[5].X[1] >= -1e-05 and pipe2.mediums[5].X[1] <= 1.00001, \"Mass fraction X[\" + String(1, 0, true) + \"] = \" + String(pipe2.mediums[5].X[1], 6, 0, true) + \"of substance \" + \"water\" + \"
//   of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(pipe2.mediums[5].X[2] >= -1e-05 and pipe2.mediums[5].X[2] <= 1.00001, \"Mass fraction X[\" + String(2, 0, true) + \"] = \" + String(pipe2.mediums[5].X[2], 6, 0, true) + \"of substance \" + \"air\" + \"
//   of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(pipe2.mediums[5].p >= 0.0, \"Pressure (= \" + String(pipe2.mediums[5].p, 6, 0, true) + \" Pa) of medium \\\"\" + \"Moist air\" + \"\\\" is negative
//   (Temperature = \" + String(pipe2.mediums[5].T, 6, 0, true) + \" K)\");
//   pipe2.flowModel.states[1].X = pipe2.statesFM[1].X;
//   pipe2.flowModel.states[2].X = pipe2.statesFM[2].X;
//   pipe2.flowModel.states[3].X = pipe2.statesFM[3].X;
//   pipe2.flowModel.states[4].X = pipe2.statesFM[4].X;
//   pipe2.flowModel.states[5].X = pipe2.statesFM[5].X;
//   pipe2.flowModel.vs = pipe2.n58;
//   pipe2.flowModel.crossAreas = pipe2.n57;
//   pipe2.flowModel.dimensions = pipe2.n59;
//   pipe2.flowModel.roughnesses = pipe2.n60;
//   pipe2.flowModel.dheights = pipe2.n56;
//   pipe2.flowModel.pathLengths = pipe2.n55;
//   pipe2.flowModel.rhos = array(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.flowModel.Medium.density(pipe2.flowModel.states[$i1]) for $i1 in 1:5);
//   pipe2.flowModel.mus = array(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.flowModel.Medium.dynamicViscosity(pipe2.flowModel.states[$i1]) for $i1 in 1:5);
//   pipe2.flowModel.pathLengths_internal = pipe2.flowModel.pathLengths;
//   pipe2.flowModel.Res_turbulent_internal = {pipe2.flowModel.Re_turbulent, pipe2.flowModel.Re_turbulent, pipe2.flowModel.Re_turbulent, pipe2.flowModel.Re_turbulent};
//   pipe2.flowModel.n53 = {0.5 * (pipe2.flowModel.dimensions[1] + pipe2.flowModel.dimensions[2]), 0.5 * (pipe2.flowModel.dimensions[2] + pipe2.flowModel.dimensions[3]), 0.5 * (pipe2.flowModel.dimensions[3] + pipe2.flowModel.dimensions[4]), 0.5 * (pipe2.flowModel.dimensions[4] + pipe2.flowModel.dimensions[5])};
//   pipe2.flowModel.m_flows = array(homotopy((array(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.flowModel.WallFriction.massFlowRate_dp_staticHead(pipe2.flowModel.dps_fg[$i1], pipe2.flowModel.rhos[(1:4)[$i1]], pipe2.flowModel.rhos[(2:5)[$i1]], pipe2.flowModel.mus[(1:4)[$i1]], pipe2.flowModel.mus[(2:5)[$i1]], pipe2.flowModel.pathLengths_internal[$i1], pipe2.flowModel.n53[$i1], {pipe2.flowModel.g * pipe2.flowModel.dheights[1], pipe2.flowModel.g * pipe2.flowModel.dheights[2], pipe2.flowModel.g * pipe2.flowModel.dheights[3], pipe2.flowModel.g * pipe2.flowModel.dheights[4]}[$i1], {(pipe2.flowModel.crossAreas[1] + pipe2.flowModel.crossAreas[2]) / 2.0, (pipe2.flowModel.crossAreas[2] + pipe2.flowModel.crossAreas[3]) / 2.0, (pipe2.flowModel.crossAreas[3] + pipe2.flowModel.crossAreas[4]) / 2.0, (pipe2.flowModel.crossAreas[4] + pipe2.flowModel.crossAreas[5]) / 2.0}[$i1], {(pipe2.flowModel.roughnesses[1] + pipe2.flowModel.roughnesses[2]) / 2.0, (pipe2.flowModel.roughnesses[2] + pipe2.flowModel.roughnesses[3]) / 2.0, (pipe2.flowModel.roughnesses[3] + pipe2.flowModel.roughnesses[4]) / 2.0, (pipe2.flowModel.roughnesses[4] + pipe2.flowModel.roughnesses[5]) / 2.0}[$i1], pipe2.flowModel.n50 / 4.0, pipe2.flowModel.Res_turbulent_internal[$i1]) for $i1 in 1:4) * pipe2.flowModel.nParallel)[$i1], {pipe2.flowModel.m_flow_nominal / pipe2.flowModel.dp_nominal * (pipe2.flowModel.dps_fg[1] - pipe2.flowModel.g * pipe2.flowModel.dheights[1] * pipe2.flowModel.n47), pipe2.flowModel.m_flow_nominal / pipe2.flowModel.dp_nominal * (pipe2.flowModel.dps_fg[2] - pipe2.flowModel.g * pipe2.flowModel.dheights[2] * pipe2.flowModel.n47), pipe2.flowModel.m_flow_nominal / pipe2.flowModel.dp_nominal * (pipe2.flowModel.dps_fg[3] - pipe2.flowModel.g * pipe2.flowModel.dheights[3] * pipe2.flowModel.n47), pipe2.flowModel.m_flow_nominal / pipe2.flowModel.dp_nominal * (pipe2.flowModel.dps_fg[4] - pipe2.flowModel.g * pipe2.flowModel.dheights[4] * pipe2.flowModel.n47)}[$i1]) for $i1 in 1:4);
//   pipe2.flowModel.rhos_act[1] = noEvent(if pipe2.flowModel.m_flows[1] > 0.0 then pipe2.flowModel.rhos[1] else pipe2.flowModel.rhos[2]);
//   pipe2.flowModel.mus_act[1] = noEvent(if pipe2.flowModel.m_flows[1] > 0.0 then pipe2.flowModel.mus[1] else pipe2.flowModel.mus[2]);
//   pipe2.flowModel.rhos_act[2] = noEvent(if pipe2.flowModel.m_flows[2] > 0.0 then pipe2.flowModel.rhos[2] else pipe2.flowModel.rhos[3]);
//   pipe2.flowModel.mus_act[2] = noEvent(if pipe2.flowModel.m_flows[2] > 0.0 then pipe2.flowModel.mus[2] else pipe2.flowModel.mus[3]);
//   pipe2.flowModel.rhos_act[3] = noEvent(if pipe2.flowModel.m_flows[3] > 0.0 then pipe2.flowModel.rhos[3] else pipe2.flowModel.rhos[4]);
//   pipe2.flowModel.mus_act[3] = noEvent(if pipe2.flowModel.m_flows[3] > 0.0 then pipe2.flowModel.mus[3] else pipe2.flowModel.mus[4]);
//   pipe2.flowModel.rhos_act[4] = noEvent(if pipe2.flowModel.m_flows[4] > 0.0 then pipe2.flowModel.rhos[4] else pipe2.flowModel.rhos[5]);
//   pipe2.flowModel.mus_act[4] = noEvent(if pipe2.flowModel.m_flows[4] > 0.0 then pipe2.flowModel.mus[4] else pipe2.flowModel.mus[5]);
//   pipe2.flowModel.Ib_flows = array(pipe2.flowModel.rhos[i] * pipe2.flowModel.vs[i] * pipe2.flowModel.vs[i] * pipe2.flowModel.crossAreas[i] - pipe2.flowModel.rhos[i + 1] * pipe2.flowModel.vs[i + 1] * pipe2.flowModel.vs[i + 1] * pipe2.flowModel.crossAreas[i + 1] for i in 1:4) * pipe2.flowModel.nParallel;
//   pipe2.flowModel.Fs_p = array(0.5 * (pipe2.flowModel.crossAreas[i] + pipe2.flowModel.crossAreas[i + 1]) * (Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.flowModel.Medium.pressure(pipe2.flowModel.states[i + 1]) - Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.flowModel.Medium.pressure(pipe2.flowModel.states[i])) for i in 1:4) * pipe2.flowModel.nParallel;
//   pipe2.flowModel.dps_fg = array(pipe2.flowModel.Fs_fg[i] / pipe2.flowModel.nParallel * 2.0 / (pipe2.flowModel.crossAreas[i] + pipe2.flowModel.crossAreas[i + 1]) for i in 1:4);
//   pipe2.flowModel.Is = array(pipe2.flowModel.m_flows[i] * pipe2.flowModel.pathLengths[i] for i in 1:4);
//   der(pipe2.flowModel.Is[1]) = pipe2.flowModel.Ib_flows[1] - pipe2.flowModel.Fs_p[1] - pipe2.flowModel.Fs_fg[1];
//   der(pipe2.flowModel.Is[2]) = pipe2.flowModel.Ib_flows[2] - pipe2.flowModel.Fs_p[2] - pipe2.flowModel.Fs_fg[2];
//   der(pipe2.flowModel.Is[3]) = pipe2.flowModel.Ib_flows[3] - pipe2.flowModel.Fs_p[3] - pipe2.flowModel.Fs_fg[3];
//   der(pipe2.flowModel.Is[4]) = pipe2.flowModel.Ib_flows[4] - pipe2.flowModel.Fs_p[4] - pipe2.flowModel.Fs_fg[4];
//   pipe2.vs = array(0.5 * (pipe2.m_flows[i] + pipe2.m_flows[i + 1]) / pipe2.mediums[i].d / pipe2.crossAreas[i] for i in 1:5) / pipe2.nParallel;
//   pipe2.heatTransfer.states[1].X = pipe2.mediums[1].state.X;
//   pipe2.heatTransfer.states[2].X = pipe2.mediums[2].state.X;
//   pipe2.heatTransfer.states[3].X = pipe2.mediums[3].state.X;
//   pipe2.heatTransfer.states[4].X = pipe2.mediums[4].state.X;
//   pipe2.heatTransfer.states[5].X = pipe2.mediums[5].state.X;
//   pipe2.heatTransfer.surfaceAreas = {pipe2.perimeter * 10.0, pipe2.perimeter * 10.0, pipe2.perimeter * 10.0, pipe2.perimeter * 10.0, pipe2.perimeter * 10.0};
//   pipe2.heatTransfer.Ts = array(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.temperature(pipe2.heatTransfer.states[$i1]) for $i1 in 1:5);
//   pipe2.heatTransfer.vs = pipe2.vs;
//   pipe2.heatTransfer.lengths = {10.0, 10.0, 10.0, 10.0, 10.0};
//   pipe2.heatTransfer.dimensions = pipe2.dimensions;
//   pipe2.heatTransfer.roughnesses = pipe2.roughnesses;
//   pipe2.heatTransfer.diameters = pipe2.heatTransfer.dimensions;
//   pipe2.heatTransfer.n63 = 3.66;
//   pipe2.heatTransfer.n61[1] = smooth(0, pipe2.heatTransfer.n65[1] / 8.0 * abs(pipe2.heatTransfer.Res[1]) * pipe2.heatTransfer.Prs[1] / (1.0 + 12.7 * (pipe2.heatTransfer.n65[1] / 8.0) ^ 0.5 * (pipe2.heatTransfer.Prs[1] ^ 0.6666666666666666 - 1.0)) * (1.0 + 0.3333333333333333 * (pipe2.heatTransfer.diameters[1] / pipe2.heatTransfer.lengths[1] / (if pipe2.heatTransfer.vs[1] >= 0.0 then 0.5 else 4.5)) ^ 0.6666666666666666));
//   pipe2.heatTransfer.n65[1] = (1.8 * log10(max(1e-10, pipe2.heatTransfer.Res[1])) - 1.5) ^ (-2.0);
//   pipe2.heatTransfer.n62[1] = (pipe2.heatTransfer.n63 ^ 3.0 + 0.3429999999999999 + (pipe2.heatTransfer.n64[1] - 0.7) ^ 3.0) ^ 0.3333333333333333;
//   pipe2.heatTransfer.n64[1] = smooth(0, 1.077 * (abs(pipe2.heatTransfer.Res[1]) * pipe2.heatTransfer.Prs[1] * pipe2.heatTransfer.diameters[1] / pipe2.heatTransfer.lengths[1] / (if pipe2.heatTransfer.vs[1] >= 0.0 then 0.5 else 4.5)) ^ 0.3333333333333333);
//   pipe2.heatTransfer.Nus[1] = Modelica.Media.Air.MoistAir.Utilities.spliceFunction(pipe2.heatTransfer.n61[1], pipe2.heatTransfer.n62[1], pipe2.heatTransfer.Res[1] - 6150.0, 3850.0);
//   pipe2.heatTransfer.n61[2] = smooth(0, pipe2.heatTransfer.n65[2] / 8.0 * abs(pipe2.heatTransfer.Res[2]) * pipe2.heatTransfer.Prs[2] / (1.0 + 12.7 * (pipe2.heatTransfer.n65[2] / 8.0) ^ 0.5 * (pipe2.heatTransfer.Prs[2] ^ 0.6666666666666666 - 1.0)) * (1.0 + 0.3333333333333333 * (pipe2.heatTransfer.diameters[2] / pipe2.heatTransfer.lengths[2] / (if pipe2.heatTransfer.vs[2] >= 0.0 then 1.5 else 3.5)) ^ 0.6666666666666666));
//   pipe2.heatTransfer.n65[2] = (1.8 * log10(max(1e-10, pipe2.heatTransfer.Res[2])) - 1.5) ^ (-2.0);
//   pipe2.heatTransfer.n62[2] = (pipe2.heatTransfer.n63 ^ 3.0 + 0.3429999999999999 + (pipe2.heatTransfer.n64[2] - 0.7) ^ 3.0) ^ 0.3333333333333333;
//   pipe2.heatTransfer.n64[2] = smooth(0, 1.077 * (abs(pipe2.heatTransfer.Res[2]) * pipe2.heatTransfer.Prs[2] * pipe2.heatTransfer.diameters[2] / pipe2.heatTransfer.lengths[2] / (if pipe2.heatTransfer.vs[2] >= 0.0 then 1.5 else 3.5)) ^ 0.3333333333333333);
//   pipe2.heatTransfer.Nus[2] = Modelica.Media.Air.MoistAir.Utilities.spliceFunction(pipe2.heatTransfer.n61[2], pipe2.heatTransfer.n62[2], pipe2.heatTransfer.Res[2] - 6150.0, 3850.0);
//   pipe2.heatTransfer.n61[3] = smooth(0, pipe2.heatTransfer.n65[3] / 8.0 * abs(pipe2.heatTransfer.Res[3]) * pipe2.heatTransfer.Prs[3] / (1.0 + 12.7 * (pipe2.heatTransfer.n65[3] / 8.0) ^ 0.5 * (pipe2.heatTransfer.Prs[3] ^ 0.6666666666666666 - 1.0)) * (1.0 + 0.3333333333333333 * (pipe2.heatTransfer.diameters[3] / pipe2.heatTransfer.lengths[3] / 2.5) ^ 0.6666666666666666));
//   pipe2.heatTransfer.n65[3] = (1.8 * log10(max(1e-10, pipe2.heatTransfer.Res[3])) - 1.5) ^ (-2.0);
//   pipe2.heatTransfer.n62[3] = (pipe2.heatTransfer.n63 ^ 3.0 + 0.3429999999999999 + (pipe2.heatTransfer.n64[3] - 0.7) ^ 3.0) ^ 0.3333333333333333;
//   pipe2.heatTransfer.n64[3] = smooth(0, 1.077 * (abs(pipe2.heatTransfer.Res[3]) * pipe2.heatTransfer.Prs[3] * pipe2.heatTransfer.diameters[3] / pipe2.heatTransfer.lengths[3] / 2.5) ^ 0.3333333333333333);
//   pipe2.heatTransfer.Nus[3] = Modelica.Media.Air.MoistAir.Utilities.spliceFunction(pipe2.heatTransfer.n61[3], pipe2.heatTransfer.n62[3], pipe2.heatTransfer.Res[3] - 6150.0, 3850.0);
//   pipe2.heatTransfer.n61[4] = smooth(0, pipe2.heatTransfer.n65[4] / 8.0 * abs(pipe2.heatTransfer.Res[4]) * pipe2.heatTransfer.Prs[4] / (1.0 + 12.7 * (pipe2.heatTransfer.n65[4] / 8.0) ^ 0.5 * (pipe2.heatTransfer.Prs[4] ^ 0.6666666666666666 - 1.0)) * (1.0 + 0.3333333333333333 * (pipe2.heatTransfer.diameters[4] / pipe2.heatTransfer.lengths[4] / (if pipe2.heatTransfer.vs[4] >= 0.0 then 3.5 else 1.5)) ^ 0.6666666666666666));
//   pipe2.heatTransfer.n65[4] = (1.8 * log10(max(1e-10, pipe2.heatTransfer.Res[4])) - 1.5) ^ (-2.0);
//   pipe2.heatTransfer.n62[4] = (pipe2.heatTransfer.n63 ^ 3.0 + 0.3429999999999999 + (pipe2.heatTransfer.n64[4] - 0.7) ^ 3.0) ^ 0.3333333333333333;
//   pipe2.heatTransfer.n64[4] = smooth(0, 1.077 * (abs(pipe2.heatTransfer.Res[4]) * pipe2.heatTransfer.Prs[4] * pipe2.heatTransfer.diameters[4] / pipe2.heatTransfer.lengths[4] / (if pipe2.heatTransfer.vs[4] >= 0.0 then 3.5 else 1.5)) ^ 0.3333333333333333);
//   pipe2.heatTransfer.Nus[4] = Modelica.Media.Air.MoistAir.Utilities.spliceFunction(pipe2.heatTransfer.n61[4], pipe2.heatTransfer.n62[4], pipe2.heatTransfer.Res[4] - 6150.0, 3850.0);
//   pipe2.heatTransfer.n61[5] = smooth(0, pipe2.heatTransfer.n65[5] / 8.0 * abs(pipe2.heatTransfer.Res[5]) * pipe2.heatTransfer.Prs[5] / (1.0 + 12.7 * (pipe2.heatTransfer.n65[5] / 8.0) ^ 0.5 * (pipe2.heatTransfer.Prs[5] ^ 0.6666666666666666 - 1.0)) * (1.0 + 0.3333333333333333 * (pipe2.heatTransfer.diameters[5] / pipe2.heatTransfer.lengths[5] / (if pipe2.heatTransfer.vs[5] >= 0.0 then 4.5 else 0.5)) ^ 0.6666666666666666));
//   pipe2.heatTransfer.n65[5] = (1.8 * log10(max(1e-10, pipe2.heatTransfer.Res[5])) - 1.5) ^ (-2.0);
//   pipe2.heatTransfer.n62[5] = (pipe2.heatTransfer.n63 ^ 3.0 + 0.3429999999999999 + (pipe2.heatTransfer.n64[5] - 0.7) ^ 3.0) ^ 0.3333333333333333;
//   pipe2.heatTransfer.n64[5] = smooth(0, 1.077 * (abs(pipe2.heatTransfer.Res[5]) * pipe2.heatTransfer.Prs[5] * pipe2.heatTransfer.diameters[5] / pipe2.heatTransfer.lengths[5] / (if pipe2.heatTransfer.vs[5] >= 0.0 then 4.5 else 0.5)) ^ 0.3333333333333333);
//   pipe2.heatTransfer.Nus[5] = Modelica.Media.Air.MoistAir.Utilities.spliceFunction(pipe2.heatTransfer.n61[5], pipe2.heatTransfer.n62[5], pipe2.heatTransfer.Res[5] - 6150.0, 3850.0);
//   pipe2.heatTransfer.ds = array(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.density(pipe2.heatTransfer.states[$i1]) for $i1 in 1:5);
//   pipe2.heatTransfer.mus = array(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.dynamicViscosity(pipe2.heatTransfer.states[$i1]) for $i1 in 1:5);
//   pipe2.heatTransfer.lambdas = array(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.thermalConductivity(pipe2.heatTransfer.states[$i1]) for $i1 in 1:5);
//   pipe2.heatTransfer.Prs = array(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.heatTransfer.Medium.prandtlNumber(pipe2.heatTransfer.states[$i1]) for $i1 in 1:5);
//   pipe2.heatTransfer.Res = array(Modelica.Fluid.Pipes.BaseClasses.CharacteristicNumbers.ReynoldsNumber(pipe2.heatTransfer.vs[$i1], pipe2.heatTransfer.ds[$i1], pipe2.heatTransfer.mus[$i1], pipe2.heatTransfer.diameters[$i1]) for $i1 in 1:5);
//   pipe2.heatTransfer.Nus = array(Modelica.Fluid.Pipes.BaseClasses.CharacteristicNumbers.NusseltNumber(pipe2.heatTransfer.alphas[$i1], pipe2.heatTransfer.diameters[$i1], pipe2.heatTransfer.lambdas[$i1]) for $i1 in 1:5);
//   pipe2.heatTransfer.Q_flows = array(pipe2.heatTransfer.alphas[i] * pipe2.heatTransfer.surfaceAreas[i] * (pipe2.heatTransfer.heatPorts[i].T - pipe2.heatTransfer.Ts[i]) * pipe2.heatTransfer.nParallel for i in 1:5);
//   pipe2.heatTransfer.Q_flows = {pipe2.heatTransfer.heatPorts[1].Q_flow, pipe2.heatTransfer.heatPorts[2].Q_flow, pipe2.heatTransfer.heatPorts[3].Q_flow, pipe2.heatTransfer.heatPorts[4].Q_flow, pipe2.heatTransfer.heatPorts[5].Q_flow} + array(0.0 for i in 1:5);
//   pipe2.Qb_flows[1] = pipe2.heatTransfer.Q_flows[1];
//   pipe2.Qb_flows[2] = pipe2.heatTransfer.Q_flows[2];
//   pipe2.Qb_flows[3] = pipe2.heatTransfer.Q_flows[3];
//   pipe2.Qb_flows[4] = pipe2.heatTransfer.Q_flows[4];
//   pipe2.Qb_flows[5] = pipe2.heatTransfer.Q_flows[5];
//   pipe2.Wb_flows[2:4] = array(pipe2.vs[i] * pipe2.crossAreas[i] * ((pipe2.mediums[i + 1].p - pipe2.mediums[i - 1].p) / 2.0 + (pipe2.flowModel.dps_fg[i - 1] + pipe2.flowModel.dps_fg[i]) / 2.0 - system.g * 5.0 * pipe2.mediums[i].d) for i in 2:4) * pipe2.nParallel;
//   pipe2.Wb_flows[1] = pipe2.vs[1] * pipe2.crossAreas[1] * ((pipe2.mediums[2].p - pipe2.mediums[1].p) / 2.0 + pipe2.flowModel.dps_fg[1] / 2.0 - system.g * 5.0 * pipe2.mediums[1].d) * pipe2.nParallel;
//   pipe2.Wb_flows[5] = pipe2.vs[5] * pipe2.crossAreas[5] * ((pipe2.mediums[5].p - pipe2.mediums[4].p) / 2.0 + pipe2.flowModel.dps_fg[4] / 2.0 - system.g * 5.0 * pipe2.mediums[5].d) * pipe2.nParallel;
//   pipe2.n55[1] = 15.0;
//   pipe2.n55[2] = 10.0;
//   pipe2.n55[3] = 10.0;
//   pipe2.n55[4] = 15.0;
//   pipe2.n56[1] = 7.5;
//   pipe2.n56[2] = 5.0;
//   pipe2.n56[3] = 5.0;
//   pipe2.n56[4] = 7.5;
//   pipe2.n57[1] = pipe2.crossAreas[1];
//   pipe2.n57[2] = pipe2.crossAreas[2];
//   pipe2.n57[3] = pipe2.crossAreas[3];
//   pipe2.n57[4] = pipe2.crossAreas[4];
//   pipe2.n57[5] = pipe2.crossAreas[5];
//   pipe2.n59[1] = pipe2.dimensions[1];
//   pipe2.n59[2] = pipe2.dimensions[2];
//   pipe2.n59[3] = pipe2.dimensions[3];
//   pipe2.n59[4] = pipe2.dimensions[4];
//   pipe2.n59[5] = pipe2.dimensions[5];
//   pipe2.n60[1] = pipe2.roughnesses[1];
//   pipe2.n60[2] = pipe2.roughnesses[2];
//   pipe2.n60[3] = pipe2.roughnesses[3];
//   pipe2.n60[4] = pipe2.roughnesses[4];
//   pipe2.n60[5] = pipe2.roughnesses[5];
//   pipe2.mb_flows[1] = pipe2.m_flows[1] - pipe2.m_flows[2];
//   pipe2.mbXi_flows[1,1] = pipe2.mXi_flows[1,1] - pipe2.mXi_flows[2,1];
//   pipe2.Hb_flows[1] = pipe2.H_flows[1] - pipe2.H_flows[2];
//   pipe2.mb_flows[2] = pipe2.m_flows[2] - pipe2.m_flows[3];
//   pipe2.mbXi_flows[2,1] = pipe2.mXi_flows[2,1] - pipe2.mXi_flows[3,1];
//   pipe2.Hb_flows[2] = pipe2.H_flows[2] - pipe2.H_flows[3];
//   pipe2.mb_flows[3] = pipe2.m_flows[3] - pipe2.m_flows[4];
//   pipe2.mbXi_flows[3,1] = pipe2.mXi_flows[3,1] - pipe2.mXi_flows[4,1];
//   pipe2.Hb_flows[3] = pipe2.H_flows[3] - pipe2.H_flows[4];
//   pipe2.mb_flows[4] = pipe2.m_flows[4] - pipe2.m_flows[5];
//   pipe2.mbXi_flows[4,1] = pipe2.mXi_flows[4,1] - pipe2.mXi_flows[5,1];
//   pipe2.Hb_flows[4] = pipe2.H_flows[4] - pipe2.H_flows[5];
//   pipe2.mb_flows[5] = pipe2.m_flows[5] - pipe2.m_flows[6];
//   pipe2.mbXi_flows[5,1] = pipe2.mXi_flows[5,1] - pipe2.mXi_flows[6,1];
//   pipe2.Hb_flows[5] = pipe2.H_flows[5] - pipe2.H_flows[6];
//   pipe2.H_flows[2] = semiLinear(pipe2.m_flows[2], pipe2.mediums[1].h, pipe2.mediums[2].h);
//   pipe2.mXi_flows[2,1] = semiLinear(pipe2.m_flows[2], pipe2.mediums[1].Xi[1], pipe2.mediums[2].Xi[1]);
//   pipe2.H_flows[3] = semiLinear(pipe2.m_flows[3], pipe2.mediums[2].h, pipe2.mediums[3].h);
//   pipe2.mXi_flows[3,1] = semiLinear(pipe2.m_flows[3], pipe2.mediums[2].Xi[1], pipe2.mediums[3].Xi[1]);
//   pipe2.H_flows[4] = semiLinear(pipe2.m_flows[4], pipe2.mediums[3].h, pipe2.mediums[4].h);
//   pipe2.mXi_flows[4,1] = semiLinear(pipe2.m_flows[4], pipe2.mediums[3].Xi[1], pipe2.mediums[4].Xi[1]);
//   pipe2.H_flows[5] = semiLinear(pipe2.m_flows[5], pipe2.mediums[4].h, pipe2.mediums[5].h);
//   pipe2.mXi_flows[5,1] = semiLinear(pipe2.m_flows[5], pipe2.mediums[4].Xi[1], pipe2.mediums[5].Xi[1]);
//   pipe2.H_flows[1] = semiLinear(pipe2.port_a.m_flow, ($OMC$PositiveMax(-pipe3.port_a.m_flow, 1e-07) * pipe3.port_a.h_outflow + $OMC$PositiveMax(-pipe1.port_b.m_flow, 1e-07) * pipe1.port_b.h_outflow) / ($OMC$PositiveMax(-pipe3.port_a.m_flow, 1e-07) + $OMC$PositiveMax(-pipe1.port_b.m_flow, 1e-07)), pipe2.mediums[1].h);
//   pipe2.H_flows[6] = -semiLinear(pipe2.port_b.m_flow, ($OMC$PositiveMax(-pipe4.port_a.m_flow, 1e-07) * pipe4.port_a.h_outflow + $OMC$PositiveMax(-pipe3.port_b.m_flow, 1e-07) * pipe3.port_b.h_outflow) / ($OMC$PositiveMax(-pipe4.port_a.m_flow, 1e-07) + $OMC$PositiveMax(-pipe3.port_b.m_flow, 1e-07)), pipe2.mediums[5].h);
//   pipe2.mXi_flows[1,1] = semiLinear(pipe2.port_a.m_flow, ($OMC$PositiveMax(-pipe3.port_a.m_flow, 1e-07) * pipe3.port_a.Xi_outflow[1] + $OMC$PositiveMax(-pipe1.port_b.m_flow, 1e-07) * pipe1.port_b.Xi_outflow[1]) / ($OMC$PositiveMax(-pipe3.port_a.m_flow, 1e-07) + $OMC$PositiveMax(-pipe1.port_b.m_flow, 1e-07)), pipe2.mediums[1].Xi[1]);
//   pipe2.mXi_flows[6,1] = -semiLinear(pipe2.port_b.m_flow, ($OMC$PositiveMax(-pipe4.port_a.m_flow, 1e-07) * pipe4.port_a.Xi_outflow[1] + $OMC$PositiveMax(-pipe3.port_b.m_flow, 1e-07) * pipe3.port_b.Xi_outflow[1]) / ($OMC$PositiveMax(-pipe4.port_a.m_flow, 1e-07) + $OMC$PositiveMax(-pipe3.port_b.m_flow, 1e-07)), pipe2.mediums[5].Xi[1]);
//   pipe2.port_a.m_flow = pipe2.m_flows[1];
//   pipe2.port_b.m_flow = -pipe2.m_flows[6];
//   pipe2.port_a.h_outflow = pipe2.mediums[1].h;
//   pipe2.port_b.h_outflow = pipe2.mediums[5].h;
//   pipe2.port_a.Xi_outflow[1] = pipe2.mediums[1].Xi[1];
//   pipe2.port_b.Xi_outflow[1] = pipe2.mediums[5].Xi[1];
//   pipe2.state_a = Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.setState_phX(pipe2.port_a.p, ($OMC$PositiveMax(-pipe3.port_a.m_flow, 1e-07) * pipe3.port_a.h_outflow + $OMC$PositiveMax(-pipe1.port_b.m_flow, 1e-07) * pipe1.port_b.h_outflow) / ($OMC$PositiveMax(-pipe3.port_a.m_flow, 1e-07) + $OMC$PositiveMax(-pipe1.port_b.m_flow, 1e-07)), {($OMC$PositiveMax(-pipe3.port_a.m_flow, 1e-07) * pipe3.port_a.Xi_outflow[1] + $OMC$PositiveMax(-pipe1.port_b.m_flow, 1e-07) * pipe1.port_b.Xi_outflow[1]) / ($OMC$PositiveMax(-pipe3.port_a.m_flow, 1e-07) + $OMC$PositiveMax(-pipe1.port_b.m_flow, 1e-07))});
//   pipe2.state_b = Modelica.Fluid.Examples.BranchingDynamicPipes.pipe2.Medium.setState_phX(pipe2.port_b.p, ($OMC$PositiveMax(-pipe4.port_a.m_flow, 1e-07) * pipe4.port_a.h_outflow + $OMC$PositiveMax(-pipe3.port_b.m_flow, 1e-07) * pipe3.port_b.h_outflow) / ($OMC$PositiveMax(-pipe4.port_a.m_flow, 1e-07) + $OMC$PositiveMax(-pipe3.port_b.m_flow, 1e-07)), {($OMC$PositiveMax(-pipe4.port_a.m_flow, 1e-07) * pipe4.port_a.Xi_outflow[1] + $OMC$PositiveMax(-pipe3.port_b.m_flow, 1e-07) * pipe3.port_b.Xi_outflow[1]) / ($OMC$PositiveMax(-pipe4.port_a.m_flow, 1e-07) + $OMC$PositiveMax(-pipe3.port_b.m_flow, 1e-07))});
//   pipe2.statesFM[1] = pipe2.mediums[1].state;
//   pipe2.statesFM[2] = pipe2.mediums[2].state;
//   pipe2.statesFM[3] = pipe2.mediums[3].state;
//   pipe2.statesFM[4] = pipe2.mediums[4].state;
//   pipe2.statesFM[5] = pipe2.mediums[5].state;
//   pipe2.m_flows[2] = pipe2.flowModel.m_flows[1];
//   pipe2.m_flows[3] = pipe2.flowModel.m_flows[2];
//   pipe2.m_flows[4] = pipe2.flowModel.m_flows[3];
//   pipe2.m_flows[5] = pipe2.flowModel.m_flows[4];
//   pipe2.n58[1] = pipe2.vs[1];
//   pipe2.n58[2] = pipe2.vs[2];
//   pipe2.n58[3] = pipe2.vs[3];
//   pipe2.n58[4] = pipe2.vs[4];
//   pipe2.n58[5] = pipe2.vs[5];
//   pipe2.port_a.p = pipe2.mediums[1].p;
//   pipe2.port_b.p = pipe2.mediums[5].p;
//   pipe2.ms[1] = pipe2.fluidVolumes[1] * pipe2.mediums[1].d;
//   pipe2.mXis[1,1] = pipe2.ms[1] * pipe2.mediums[1].Xi[1];
//   pipe2.Us[1] = pipe2.ms[1] * pipe2.mediums[1].u;
//   pipe2.ms[2] = pipe2.fluidVolumes[2] * pipe2.mediums[2].d;
//   pipe2.mXis[2,1] = pipe2.ms[2] * pipe2.mediums[2].Xi[1];
//   pipe2.Us[2] = pipe2.ms[2] * pipe2.mediums[2].u;
//   pipe2.ms[3] = pipe2.fluidVolumes[3] * pipe2.mediums[3].d;
//   pipe2.mXis[3,1] = pipe2.ms[3] * pipe2.mediums[3].Xi[1];
//   pipe2.Us[3] = pipe2.ms[3] * pipe2.mediums[3].u;
//   pipe2.ms[4] = pipe2.fluidVolumes[4] * pipe2.mediums[4].d;
//   pipe2.mXis[4,1] = pipe2.ms[4] * pipe2.mediums[4].Xi[1];
//   pipe2.Us[4] = pipe2.ms[4] * pipe2.mediums[4].u;
//   pipe2.ms[5] = pipe2.fluidVolumes[5] * pipe2.mediums[5].d;
//   pipe2.mXis[5,1] = pipe2.ms[5] * pipe2.mediums[5].Xi[1];
//   pipe2.Us[5] = pipe2.ms[5] * pipe2.mediums[5].u;
//   der(pipe2.Us[1]) = pipe2.Hb_flows[1] + pipe2.Wb_flows[1] + pipe2.Qb_flows[1];
//   der(pipe2.Us[2]) = pipe2.Hb_flows[2] + pipe2.Wb_flows[2] + pipe2.Qb_flows[2];
//   der(pipe2.Us[3]) = pipe2.Hb_flows[3] + pipe2.Wb_flows[3] + pipe2.Qb_flows[3];
//   der(pipe2.Us[4]) = pipe2.Hb_flows[4] + pipe2.Wb_flows[4] + pipe2.Qb_flows[4];
//   der(pipe2.Us[5]) = pipe2.Hb_flows[5] + pipe2.Wb_flows[5] + pipe2.Qb_flows[5];
//   der(pipe2.ms[1]) = pipe2.mb_flows[1];
//   der(pipe2.ms[2]) = pipe2.mb_flows[2];
//   der(pipe2.ms[3]) = pipe2.mb_flows[3];
//   der(pipe2.ms[4]) = pipe2.mb_flows[4];
//   der(pipe2.ms[5]) = pipe2.mb_flows[5];
//   der(pipe2.mXis[1,1]) = pipe2.mbXi_flows[1,1];
//   der(pipe2.mXis[2,1]) = pipe2.mbXi_flows[2,1];
//   der(pipe2.mXis[3,1]) = pipe2.mbXi_flows[3,1];
//   der(pipe2.mXis[4,1]) = pipe2.mbXi_flows[4,1];
//   der(pipe2.mXis[5,1]) = pipe2.mbXi_flows[5,1];
//   pipe3.fluidVolumes = array(pipe3.crossAreas[i] * 5.0 for i in 1:5) * pipe3.nParallel;
//   assert(pipe3.mediums[1].T >= 190.0 and pipe3.mediums[1].T <= 647.0, \"
//   Temperature T is not in the allowed range
//   190.0 K <= (T =\" + String(pipe3.mediums[1].T, 6, 0, true) + \" K) <= 647.0 K
//   required from medium model \\\"\" + \"Moist air\" + \"\\\".\");
//   pipe3.mediums[1].MM = 1.0 / (pipe3.mediums[1].Xi[1] / 0.01801528 + (1.0 - pipe3.mediums[1].Xi[1]) / 0.0289651159);
//   pipe3.mediums[1].n74 = min(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.saturationPressure(pipe3.mediums[1].T), 0.999 * pipe3.mediums[1].p);
//   pipe3.mediums[1].n72 = min(pipe3.mediums[1].n74 * 0.6219647130774989 / max(1e-13, pipe3.mediums[1].p - pipe3.mediums[1].n74) * (1.0 - pipe3.mediums[1].Xi[1]), 1.0);
//   pipe3.mediums[1].n69 = max(pipe3.mediums[1].Xi[1] - pipe3.mediums[1].n72, 0.0);
//   pipe3.mediums[1].n70 = pipe3.mediums[1].Xi[1] - pipe3.mediums[1].n69;
//   pipe3.mediums[1].n71 = 1.0 - pipe3.mediums[1].Xi[1];
//   pipe3.mediums[1].h = Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.specificEnthalpy_pTX(pipe3.mediums[1].p, pipe3.mediums[1].T, pipe3.mediums[1].Xi);
//   pipe3.mediums[1].R = 287.0512249529787 * pipe3.mediums[1].n71 / (1.0 - pipe3.mediums[1].n69) + 461.5233290850878 * pipe3.mediums[1].n70 / (1.0 - pipe3.mediums[1].n69);
//   pipe3.mediums[1].u = pipe3.mediums[1].h - pipe3.mediums[1].R * pipe3.mediums[1].T;
//   pipe3.mediums[1].d = pipe3.mediums[1].p / (pipe3.mediums[1].R * pipe3.mediums[1].T);
//   pipe3.mediums[1].state.p = pipe3.mediums[1].p;
//   pipe3.mediums[1].state.T = pipe3.mediums[1].T;
//   pipe3.mediums[1].state.X[1] = pipe3.mediums[1].X[1];
//   pipe3.mediums[1].state.X[2] = pipe3.mediums[1].X[2];
//   pipe3.mediums[1].n73 = 0.6219647130774989 * pipe3.mediums[1].n74 / max(1e-13, pipe3.mediums[1].p - pipe3.mediums[1].n74);
//   pipe3.mediums[1].x_water = pipe3.mediums[1].Xi[1] / max(pipe3.mediums[1].n71, 1e-13);
//   pipe3.mediums[1].phi = pipe3.mediums[1].p / pipe3.mediums[1].n74 * pipe3.mediums[1].Xi[1] / (pipe3.mediums[1].Xi[1] + 0.6219647130774989 * pipe3.mediums[1].n71);
//   pipe3.mediums[1].Xi[1] = pipe3.mediums[1].X[1];
//   pipe3.mediums[1].X[2] = 1.0 - pipe3.mediums[1].Xi[1];
//   assert(pipe3.mediums[1].X[1] >= -1e-05 and pipe3.mediums[1].X[1] <= 1.00001, \"Mass fraction X[\" + String(1, 0, true) + \"] = \" + String(pipe3.mediums[1].X[1], 6, 0, true) + \"of substance \" + \"water\" + \"
//   of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(pipe3.mediums[1].X[2] >= -1e-05 and pipe3.mediums[1].X[2] <= 1.00001, \"Mass fraction X[\" + String(2, 0, true) + \"] = \" + String(pipe3.mediums[1].X[2], 6, 0, true) + \"of substance \" + \"air\" + \"
//   of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(pipe3.mediums[1].p >= 0.0, \"Pressure (= \" + String(pipe3.mediums[1].p, 6, 0, true) + \" Pa) of medium \\\"\" + \"Moist air\" + \"\\\" is negative
//   (Temperature = \" + String(pipe3.mediums[1].T, 6, 0, true) + \" K)\");
//   assert(pipe3.mediums[2].T >= 190.0 and pipe3.mediums[2].T <= 647.0, \"
//   Temperature T is not in the allowed range
//   190.0 K <= (T =\" + String(pipe3.mediums[2].T, 6, 0, true) + \" K) <= 647.0 K
//   required from medium model \\\"\" + \"Moist air\" + \"\\\".\");
//   pipe3.mediums[2].MM = 1.0 / (pipe3.mediums[2].Xi[1] / 0.01801528 + (1.0 - pipe3.mediums[2].Xi[1]) / 0.0289651159);
//   pipe3.mediums[2].n74 = min(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.saturationPressure(pipe3.mediums[2].T), 0.999 * pipe3.mediums[2].p);
//   pipe3.mediums[2].n72 = min(pipe3.mediums[2].n74 * 0.6219647130774989 / max(1e-13, pipe3.mediums[2].p - pipe3.mediums[2].n74) * (1.0 - pipe3.mediums[2].Xi[1]), 1.0);
//   pipe3.mediums[2].n69 = max(pipe3.mediums[2].Xi[1] - pipe3.mediums[2].n72, 0.0);
//   pipe3.mediums[2].n70 = pipe3.mediums[2].Xi[1] - pipe3.mediums[2].n69;
//   pipe3.mediums[2].n71 = 1.0 - pipe3.mediums[2].Xi[1];
//   pipe3.mediums[2].h = Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.specificEnthalpy_pTX(pipe3.mediums[2].p, pipe3.mediums[2].T, pipe3.mediums[2].Xi);
//   pipe3.mediums[2].R = 287.0512249529787 * pipe3.mediums[2].n71 / (1.0 - pipe3.mediums[2].n69) + 461.5233290850878 * pipe3.mediums[2].n70 / (1.0 - pipe3.mediums[2].n69);
//   pipe3.mediums[2].u = pipe3.mediums[2].h - pipe3.mediums[2].R * pipe3.mediums[2].T;
//   pipe3.mediums[2].d = pipe3.mediums[2].p / (pipe3.mediums[2].R * pipe3.mediums[2].T);
//   pipe3.mediums[2].state.p = pipe3.mediums[2].p;
//   pipe3.mediums[2].state.T = pipe3.mediums[2].T;
//   pipe3.mediums[2].state.X[1] = pipe3.mediums[2].X[1];
//   pipe3.mediums[2].state.X[2] = pipe3.mediums[2].X[2];
//   pipe3.mediums[2].n73 = 0.6219647130774989 * pipe3.mediums[2].n74 / max(1e-13, pipe3.mediums[2].p - pipe3.mediums[2].n74);
//   pipe3.mediums[2].x_water = pipe3.mediums[2].Xi[1] / max(pipe3.mediums[2].n71, 1e-13);
//   pipe3.mediums[2].phi = pipe3.mediums[2].p / pipe3.mediums[2].n74 * pipe3.mediums[2].Xi[1] / (pipe3.mediums[2].Xi[1] + 0.6219647130774989 * pipe3.mediums[2].n71);
//   pipe3.mediums[2].Xi[1] = pipe3.mediums[2].X[1];
//   pipe3.mediums[2].X[2] = 1.0 - pipe3.mediums[2].Xi[1];
//   assert(pipe3.mediums[2].X[1] >= -1e-05 and pipe3.mediums[2].X[1] <= 1.00001, \"Mass fraction X[\" + String(1, 0, true) + \"] = \" + String(pipe3.mediums[2].X[1], 6, 0, true) + \"of substance \" + \"water\" + \"
//   of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(pipe3.mediums[2].X[2] >= -1e-05 and pipe3.mediums[2].X[2] <= 1.00001, \"Mass fraction X[\" + String(2, 0, true) + \"] = \" + String(pipe3.mediums[2].X[2], 6, 0, true) + \"of substance \" + \"air\" + \"
//   of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(pipe3.mediums[2].p >= 0.0, \"Pressure (= \" + String(pipe3.mediums[2].p, 6, 0, true) + \" Pa) of medium \\\"\" + \"Moist air\" + \"\\\" is negative
//   (Temperature = \" + String(pipe3.mediums[2].T, 6, 0, true) + \" K)\");
//   assert(pipe3.mediums[3].T >= 190.0 and pipe3.mediums[3].T <= 647.0, \"
//   Temperature T is not in the allowed range
//   190.0 K <= (T =\" + String(pipe3.mediums[3].T, 6, 0, true) + \" K) <= 647.0 K
//   required from medium model \\\"\" + \"Moist air\" + \"\\\".\");
//   pipe3.mediums[3].MM = 1.0 / (pipe3.mediums[3].Xi[1] / 0.01801528 + (1.0 - pipe3.mediums[3].Xi[1]) / 0.0289651159);
//   pipe3.mediums[3].n74 = min(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.saturationPressure(pipe3.mediums[3].T), 0.999 * pipe3.mediums[3].p);
//   pipe3.mediums[3].n72 = min(pipe3.mediums[3].n74 * 0.6219647130774989 / max(1e-13, pipe3.mediums[3].p - pipe3.mediums[3].n74) * (1.0 - pipe3.mediums[3].Xi[1]), 1.0);
//   pipe3.mediums[3].n69 = max(pipe3.mediums[3].Xi[1] - pipe3.mediums[3].n72, 0.0);
//   pipe3.mediums[3].n70 = pipe3.mediums[3].Xi[1] - pipe3.mediums[3].n69;
//   pipe3.mediums[3].n71 = 1.0 - pipe3.mediums[3].Xi[1];
//   pipe3.mediums[3].h = Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.specificEnthalpy_pTX(pipe3.mediums[3].p, pipe3.mediums[3].T, pipe3.mediums[3].Xi);
//   pipe3.mediums[3].R = 287.0512249529787 * pipe3.mediums[3].n71 / (1.0 - pipe3.mediums[3].n69) + 461.5233290850878 * pipe3.mediums[3].n70 / (1.0 - pipe3.mediums[3].n69);
//   pipe3.mediums[3].u = pipe3.mediums[3].h - pipe3.mediums[3].R * pipe3.mediums[3].T;
//   pipe3.mediums[3].d = pipe3.mediums[3].p / (pipe3.mediums[3].R * pipe3.mediums[3].T);
//   pipe3.mediums[3].state.p = pipe3.mediums[3].p;
//   pipe3.mediums[3].state.T = pipe3.mediums[3].T;
//   pipe3.mediums[3].state.X[1] = pipe3.mediums[3].X[1];
//   pipe3.mediums[3].state.X[2] = pipe3.mediums[3].X[2];
//   pipe3.mediums[3].n73 = 0.6219647130774989 * pipe3.mediums[3].n74 / max(1e-13, pipe3.mediums[3].p - pipe3.mediums[3].n74);
//   pipe3.mediums[3].x_water = pipe3.mediums[3].Xi[1] / max(pipe3.mediums[3].n71, 1e-13);
//   pipe3.mediums[3].phi = pipe3.mediums[3].p / pipe3.mediums[3].n74 * pipe3.mediums[3].Xi[1] / (pipe3.mediums[3].Xi[1] + 0.6219647130774989 * pipe3.mediums[3].n71);
//   pipe3.mediums[3].Xi[1] = pipe3.mediums[3].X[1];
//   pipe3.mediums[3].X[2] = 1.0 - pipe3.mediums[3].Xi[1];
//   assert(pipe3.mediums[3].X[1] >= -1e-05 and pipe3.mediums[3].X[1] <= 1.00001, \"Mass fraction X[\" + String(1, 0, true) + \"] = \" + String(pipe3.mediums[3].X[1], 6, 0, true) + \"of substance \" + \"water\" + \"
//   of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(pipe3.mediums[3].X[2] >= -1e-05 and pipe3.mediums[3].X[2] <= 1.00001, \"Mass fraction X[\" + String(2, 0, true) + \"] = \" + String(pipe3.mediums[3].X[2], 6, 0, true) + \"of substance \" + \"air\" + \"
//   of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(pipe3.mediums[3].p >= 0.0, \"Pressure (= \" + String(pipe3.mediums[3].p, 6, 0, true) + \" Pa) of medium \\\"\" + \"Moist air\" + \"\\\" is negative
//   (Temperature = \" + String(pipe3.mediums[3].T, 6, 0, true) + \" K)\");
//   assert(pipe3.mediums[4].T >= 190.0 and pipe3.mediums[4].T <= 647.0, \"
//   Temperature T is not in the allowed range
//   190.0 K <= (T =\" + String(pipe3.mediums[4].T, 6, 0, true) + \" K) <= 647.0 K
//   required from medium model \\\"\" + \"Moist air\" + \"\\\".\");
//   pipe3.mediums[4].MM = 1.0 / (pipe3.mediums[4].Xi[1] / 0.01801528 + (1.0 - pipe3.mediums[4].Xi[1]) / 0.0289651159);
//   pipe3.mediums[4].n74 = min(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.saturationPressure(pipe3.mediums[4].T), 0.999 * pipe3.mediums[4].p);
//   pipe3.mediums[4].n72 = min(pipe3.mediums[4].n74 * 0.6219647130774989 / max(1e-13, pipe3.mediums[4].p - pipe3.mediums[4].n74) * (1.0 - pipe3.mediums[4].Xi[1]), 1.0);
//   pipe3.mediums[4].n69 = max(pipe3.mediums[4].Xi[1] - pipe3.mediums[4].n72, 0.0);
//   pipe3.mediums[4].n70 = pipe3.mediums[4].Xi[1] - pipe3.mediums[4].n69;
//   pipe3.mediums[4].n71 = 1.0 - pipe3.mediums[4].Xi[1];
//   pipe3.mediums[4].h = Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.specificEnthalpy_pTX(pipe3.mediums[4].p, pipe3.mediums[4].T, pipe3.mediums[4].Xi);
//   pipe3.mediums[4].R = 287.0512249529787 * pipe3.mediums[4].n71 / (1.0 - pipe3.mediums[4].n69) + 461.5233290850878 * pipe3.mediums[4].n70 / (1.0 - pipe3.mediums[4].n69);
//   pipe3.mediums[4].u = pipe3.mediums[4].h - pipe3.mediums[4].R * pipe3.mediums[4].T;
//   pipe3.mediums[4].d = pipe3.mediums[4].p / (pipe3.mediums[4].R * pipe3.mediums[4].T);
//   pipe3.mediums[4].state.p = pipe3.mediums[4].p;
//   pipe3.mediums[4].state.T = pipe3.mediums[4].T;
//   pipe3.mediums[4].state.X[1] = pipe3.mediums[4].X[1];
//   pipe3.mediums[4].state.X[2] = pipe3.mediums[4].X[2];
//   pipe3.mediums[4].n73 = 0.6219647130774989 * pipe3.mediums[4].n74 / max(1e-13, pipe3.mediums[4].p - pipe3.mediums[4].n74);
//   pipe3.mediums[4].x_water = pipe3.mediums[4].Xi[1] / max(pipe3.mediums[4].n71, 1e-13);
//   pipe3.mediums[4].phi = pipe3.mediums[4].p / pipe3.mediums[4].n74 * pipe3.mediums[4].Xi[1] / (pipe3.mediums[4].Xi[1] + 0.6219647130774989 * pipe3.mediums[4].n71);
//   pipe3.mediums[4].Xi[1] = pipe3.mediums[4].X[1];
//   pipe3.mediums[4].X[2] = 1.0 - pipe3.mediums[4].Xi[1];
//   assert(pipe3.mediums[4].X[1] >= -1e-05 and pipe3.mediums[4].X[1] <= 1.00001, \"Mass fraction X[\" + String(1, 0, true) + \"] = \" + String(pipe3.mediums[4].X[1], 6, 0, true) + \"of substance \" + \"water\" + \"
//   of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(pipe3.mediums[4].X[2] >= -1e-05 and pipe3.mediums[4].X[2] <= 1.00001, \"Mass fraction X[\" + String(2, 0, true) + \"] = \" + String(pipe3.mediums[4].X[2], 6, 0, true) + \"of substance \" + \"air\" + \"
//   of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(pipe3.mediums[4].p >= 0.0, \"Pressure (= \" + String(pipe3.mediums[4].p, 6, 0, true) + \" Pa) of medium \\\"\" + \"Moist air\" + \"\\\" is negative
//   (Temperature = \" + String(pipe3.mediums[4].T, 6, 0, true) + \" K)\");
//   assert(pipe3.mediums[5].T >= 190.0 and pipe3.mediums[5].T <= 647.0, \"
//   Temperature T is not in the allowed range
//   190.0 K <= (T =\" + String(pipe3.mediums[5].T, 6, 0, true) + \" K) <= 647.0 K
//   required from medium model \\\"\" + \"Moist air\" + \"\\\".\");
//   pipe3.mediums[5].MM = 1.0 / (pipe3.mediums[5].Xi[1] / 0.01801528 + (1.0 - pipe3.mediums[5].Xi[1]) / 0.0289651159);
//   pipe3.mediums[5].n74 = min(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.saturationPressure(pipe3.mediums[5].T), 0.999 * pipe3.mediums[5].p);
//   pipe3.mediums[5].n72 = min(pipe3.mediums[5].n74 * 0.6219647130774989 / max(1e-13, pipe3.mediums[5].p - pipe3.mediums[5].n74) * (1.0 - pipe3.mediums[5].Xi[1]), 1.0);
//   pipe3.mediums[5].n69 = max(pipe3.mediums[5].Xi[1] - pipe3.mediums[5].n72, 0.0);
//   pipe3.mediums[5].n70 = pipe3.mediums[5].Xi[1] - pipe3.mediums[5].n69;
//   pipe3.mediums[5].n71 = 1.0 - pipe3.mediums[5].Xi[1];
//   pipe3.mediums[5].h = Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.specificEnthalpy_pTX(pipe3.mediums[5].p, pipe3.mediums[5].T, pipe3.mediums[5].Xi);
//   pipe3.mediums[5].R = 287.0512249529787 * pipe3.mediums[5].n71 / (1.0 - pipe3.mediums[5].n69) + 461.5233290850878 * pipe3.mediums[5].n70 / (1.0 - pipe3.mediums[5].n69);
//   pipe3.mediums[5].u = pipe3.mediums[5].h - pipe3.mediums[5].R * pipe3.mediums[5].T;
//   pipe3.mediums[5].d = pipe3.mediums[5].p / (pipe3.mediums[5].R * pipe3.mediums[5].T);
//   pipe3.mediums[5].state.p = pipe3.mediums[5].p;
//   pipe3.mediums[5].state.T = pipe3.mediums[5].T;
//   pipe3.mediums[5].state.X[1] = pipe3.mediums[5].X[1];
//   pipe3.mediums[5].state.X[2] = pipe3.mediums[5].X[2];
//   pipe3.mediums[5].n73 = 0.6219647130774989 * pipe3.mediums[5].n74 / max(1e-13, pipe3.mediums[5].p - pipe3.mediums[5].n74);
//   pipe3.mediums[5].x_water = pipe3.mediums[5].Xi[1] / max(pipe3.mediums[5].n71, 1e-13);
//   pipe3.mediums[5].phi = pipe3.mediums[5].p / pipe3.mediums[5].n74 * pipe3.mediums[5].Xi[1] / (pipe3.mediums[5].Xi[1] + 0.6219647130774989 * pipe3.mediums[5].n71);
//   pipe3.mediums[5].Xi[1] = pipe3.mediums[5].X[1];
//   pipe3.mediums[5].X[2] = 1.0 - pipe3.mediums[5].Xi[1];
//   assert(pipe3.mediums[5].X[1] >= -1e-05 and pipe3.mediums[5].X[1] <= 1.00001, \"Mass fraction X[\" + String(1, 0, true) + \"] = \" + String(pipe3.mediums[5].X[1], 6, 0, true) + \"of substance \" + \"water\" + \"
//   of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(pipe3.mediums[5].X[2] >= -1e-05 and pipe3.mediums[5].X[2] <= 1.00001, \"Mass fraction X[\" + String(2, 0, true) + \"] = \" + String(pipe3.mediums[5].X[2], 6, 0, true) + \"of substance \" + \"air\" + \"
//   of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(pipe3.mediums[5].p >= 0.0, \"Pressure (= \" + String(pipe3.mediums[5].p, 6, 0, true) + \" Pa) of medium \\\"\" + \"Moist air\" + \"\\\" is negative
//   (Temperature = \" + String(pipe3.mediums[5].T, 6, 0, true) + \" K)\");
//   pipe3.flowModel.states[1].X = pipe3.statesFM[1].X;
//   pipe3.flowModel.states[2].X = pipe3.statesFM[2].X;
//   pipe3.flowModel.states[3].X = pipe3.statesFM[3].X;
//   pipe3.flowModel.states[4].X = pipe3.statesFM[4].X;
//   pipe3.flowModel.states[5].X = pipe3.statesFM[5].X;
//   pipe3.flowModel.states[6].X = pipe3.statesFM[6].X;
//   pipe3.flowModel.states[7].X = pipe3.statesFM[7].X;
//   pipe3.flowModel.vs = pipe3.n88;
//   pipe3.flowModel.crossAreas = pipe3.n87;
//   pipe3.flowModel.dimensions = pipe3.n89;
//   pipe3.flowModel.roughnesses = pipe3.n90;
//   pipe3.flowModel.dheights = pipe3.n86;
//   pipe3.flowModel.pathLengths = pipe3.n85;
//   pipe3.flowModel.rhos = array(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.flowModel.Medium.density(pipe3.flowModel.states[$i1]) for $i1 in 1:7);
//   pipe3.flowModel.mus = array(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.flowModel.Medium.dynamicViscosity(pipe3.flowModel.states[$i1]) for $i1 in 1:7);
//   pipe3.flowModel.pathLengths_internal = pipe3.flowModel.pathLengths;
//   pipe3.flowModel.Res_turbulent_internal = {pipe3.flowModel.Re_turbulent, pipe3.flowModel.Re_turbulent, pipe3.flowModel.Re_turbulent, pipe3.flowModel.Re_turbulent, pipe3.flowModel.Re_turbulent, pipe3.flowModel.Re_turbulent};
//   pipe3.flowModel.n83 = {0.5 * (pipe3.flowModel.dimensions[1] + pipe3.flowModel.dimensions[2]), 0.5 * (pipe3.flowModel.dimensions[2] + pipe3.flowModel.dimensions[3]), 0.5 * (pipe3.flowModel.dimensions[3] + pipe3.flowModel.dimensions[4]), 0.5 * (pipe3.flowModel.dimensions[4] + pipe3.flowModel.dimensions[5]), 0.5 * (pipe3.flowModel.dimensions[5] + pipe3.flowModel.dimensions[6]), 0.5 * (pipe3.flowModel.dimensions[6] + pipe3.flowModel.dimensions[7])};
//   pipe3.flowModel.m_flows = array(homotopy((array(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.flowModel.WallFriction.massFlowRate_dp_staticHead(pipe3.flowModel.dps_fg[$i1], pipe3.flowModel.rhos[(1:6)[$i1]], pipe3.flowModel.rhos[(2:7)[$i1]], pipe3.flowModel.mus[(1:6)[$i1]], pipe3.flowModel.mus[(2:7)[$i1]], pipe3.flowModel.pathLengths_internal[$i1], pipe3.flowModel.n83[$i1], {pipe3.flowModel.g * pipe3.flowModel.dheights[1], pipe3.flowModel.g * pipe3.flowModel.dheights[2], pipe3.flowModel.g * pipe3.flowModel.dheights[3], pipe3.flowModel.g * pipe3.flowModel.dheights[4], pipe3.flowModel.g * pipe3.flowModel.dheights[5], pipe3.flowModel.g * pipe3.flowModel.dheights[6]}[$i1], {(pipe3.flowModel.crossAreas[1] + pipe3.flowModel.crossAreas[2]) / 2.0, (pipe3.flowModel.crossAreas[2] + pipe3.flowModel.crossAreas[3]) / 2.0, (pipe3.flowModel.crossAreas[3] + pipe3.flowModel.crossAreas[4]) / 2.0, (pipe3.flowModel.crossAreas[4] + pipe3.flowModel.crossAreas[5]) / 2.0, (pipe3.flowModel.crossAreas[5] + pipe3.flowModel.crossAreas[6]) / 2.0, (pipe3.flowModel.crossAreas[6] + pipe3.flowModel.crossAreas[7]) / 2.0}[$i1], {(pipe3.flowModel.roughnesses[1] + pipe3.flowModel.roughnesses[2]) / 2.0, (pipe3.flowModel.roughnesses[2] + pipe3.flowModel.roughnesses[3]) / 2.0, (pipe3.flowModel.roughnesses[3] + pipe3.flowModel.roughnesses[4]) / 2.0, (pipe3.flowModel.roughnesses[4] + pipe3.flowModel.roughnesses[5]) / 2.0, (pipe3.flowModel.roughnesses[5] + pipe3.flowModel.roughnesses[6]) / 2.0, (pipe3.flowModel.roughnesses[6] + pipe3.flowModel.roughnesses[7]) / 2.0}[$i1], pipe3.flowModel.n80 / 6.0, pipe3.flowModel.Res_turbulent_internal[$i1]) for $i1 in 1:6) * pipe3.flowModel.nParallel)[$i1], {pipe3.flowModel.m_flow_nominal / pipe3.flowModel.dp_nominal * (pipe3.flowModel.dps_fg[1] - pipe3.flowModel.g * pipe3.flowModel.dheights[1] * pipe3.flowModel.n77), pipe3.flowModel.m_flow_nominal / pipe3.flowModel.dp_nominal * (pipe3.flowModel.dps_fg[2] - pipe3.flowModel.g * pipe3.flowModel.dheights[2] * pipe3.flowModel.n77), pipe3.flowModel.m_flow_nominal / pipe3.flowModel.dp_nominal * (pipe3.flowModel.dps_fg[3] - pipe3.flowModel.g * pipe3.flowModel.dheights[3] * pipe3.flowModel.n77), pipe3.flowModel.m_flow_nominal / pipe3.flowModel.dp_nominal * (pipe3.flowModel.dps_fg[4] - pipe3.flowModel.g * pipe3.flowModel.dheights[4] * pipe3.flowModel.n77), pipe3.flowModel.m_flow_nominal / pipe3.flowModel.dp_nominal * (pipe3.flowModel.dps_fg[5] - pipe3.flowModel.g * pipe3.flowModel.dheights[5] * pipe3.flowModel.n77), pipe3.flowModel.m_flow_nominal / pipe3.flowModel.dp_nominal * (pipe3.flowModel.dps_fg[6] - pipe3.flowModel.g * pipe3.flowModel.dheights[6] * pipe3.flowModel.n77)}[$i1]) for $i1 in 1:6);
//   pipe3.flowModel.rhos_act[1] = noEvent(if pipe3.flowModel.m_flows[1] > 0.0 then pipe3.flowModel.rhos[1] else pipe3.flowModel.rhos[2]);
//   pipe3.flowModel.mus_act[1] = noEvent(if pipe3.flowModel.m_flows[1] > 0.0 then pipe3.flowModel.mus[1] else pipe3.flowModel.mus[2]);
//   pipe3.flowModel.rhos_act[2] = noEvent(if pipe3.flowModel.m_flows[2] > 0.0 then pipe3.flowModel.rhos[2] else pipe3.flowModel.rhos[3]);
//   pipe3.flowModel.mus_act[2] = noEvent(if pipe3.flowModel.m_flows[2] > 0.0 then pipe3.flowModel.mus[2] else pipe3.flowModel.mus[3]);
//   pipe3.flowModel.rhos_act[3] = noEvent(if pipe3.flowModel.m_flows[3] > 0.0 then pipe3.flowModel.rhos[3] else pipe3.flowModel.rhos[4]);
//   pipe3.flowModel.mus_act[3] = noEvent(if pipe3.flowModel.m_flows[3] > 0.0 then pipe3.flowModel.mus[3] else pipe3.flowModel.mus[4]);
//   pipe3.flowModel.rhos_act[4] = noEvent(if pipe3.flowModel.m_flows[4] > 0.0 then pipe3.flowModel.rhos[4] else pipe3.flowModel.rhos[5]);
//   pipe3.flowModel.mus_act[4] = noEvent(if pipe3.flowModel.m_flows[4] > 0.0 then pipe3.flowModel.mus[4] else pipe3.flowModel.mus[5]);
//   pipe3.flowModel.rhos_act[5] = noEvent(if pipe3.flowModel.m_flows[5] > 0.0 then pipe3.flowModel.rhos[5] else pipe3.flowModel.rhos[6]);
//   pipe3.flowModel.mus_act[5] = noEvent(if pipe3.flowModel.m_flows[5] > 0.0 then pipe3.flowModel.mus[5] else pipe3.flowModel.mus[6]);
//   pipe3.flowModel.rhos_act[6] = noEvent(if pipe3.flowModel.m_flows[6] > 0.0 then pipe3.flowModel.rhos[6] else pipe3.flowModel.rhos[7]);
//   pipe3.flowModel.mus_act[6] = noEvent(if pipe3.flowModel.m_flows[6] > 0.0 then pipe3.flowModel.mus[6] else pipe3.flowModel.mus[7]);
//   pipe3.flowModel.Ib_flows = array(pipe3.flowModel.rhos[i] * pipe3.flowModel.vs[i] * pipe3.flowModel.vs[i] * pipe3.flowModel.crossAreas[i] - pipe3.flowModel.rhos[i + 1] * pipe3.flowModel.vs[i + 1] * pipe3.flowModel.vs[i + 1] * pipe3.flowModel.crossAreas[i + 1] for i in 1:6) * pipe3.flowModel.nParallel;
//   pipe3.flowModel.Fs_p = array(0.5 * (pipe3.flowModel.crossAreas[i] + pipe3.flowModel.crossAreas[i + 1]) * (Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.flowModel.Medium.pressure(pipe3.flowModel.states[i + 1]) - Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.flowModel.Medium.pressure(pipe3.flowModel.states[i])) for i in 1:6) * pipe3.flowModel.nParallel;
//   pipe3.flowModel.dps_fg = array(pipe3.flowModel.Fs_fg[i] / pipe3.flowModel.nParallel * 2.0 / (pipe3.flowModel.crossAreas[i] + pipe3.flowModel.crossAreas[i + 1]) for i in 1:6);
//   pipe3.flowModel.Is = array(pipe3.flowModel.m_flows[i] * pipe3.flowModel.pathLengths[i] for i in 1:6);
//   der(pipe3.flowModel.Is[1]) = pipe3.flowModel.Ib_flows[1] - pipe3.flowModel.Fs_p[1] - pipe3.flowModel.Fs_fg[1];
//   der(pipe3.flowModel.Is[2]) = pipe3.flowModel.Ib_flows[2] - pipe3.flowModel.Fs_p[2] - pipe3.flowModel.Fs_fg[2];
//   der(pipe3.flowModel.Is[3]) = pipe3.flowModel.Ib_flows[3] - pipe3.flowModel.Fs_p[3] - pipe3.flowModel.Fs_fg[3];
//   der(pipe3.flowModel.Is[4]) = pipe3.flowModel.Ib_flows[4] - pipe3.flowModel.Fs_p[4] - pipe3.flowModel.Fs_fg[4];
//   der(pipe3.flowModel.Is[5]) = pipe3.flowModel.Ib_flows[5] - pipe3.flowModel.Fs_p[5] - pipe3.flowModel.Fs_fg[5];
//   der(pipe3.flowModel.Is[6]) = pipe3.flowModel.Ib_flows[6] - pipe3.flowModel.Fs_p[6] - pipe3.flowModel.Fs_fg[6];
//   pipe3.vs = array(0.5 * (pipe3.m_flows[i] + pipe3.m_flows[i + 1]) / pipe3.mediums[i].d / pipe3.crossAreas[i] for i in 1:5) / pipe3.nParallel;
//   pipe3.heatTransfer.states[1].X = pipe3.mediums[1].state.X;
//   pipe3.heatTransfer.states[2].X = pipe3.mediums[2].state.X;
//   pipe3.heatTransfer.states[3].X = pipe3.mediums[3].state.X;
//   pipe3.heatTransfer.states[4].X = pipe3.mediums[4].state.X;
//   pipe3.heatTransfer.states[5].X = pipe3.mediums[5].state.X;
//   pipe3.heatTransfer.surfaceAreas = {pipe3.perimeter * 5.0, pipe3.perimeter * 5.0, pipe3.perimeter * 5.0, pipe3.perimeter * 5.0, pipe3.perimeter * 5.0};
//   pipe3.heatTransfer.Ts = array(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.heatTransfer.Medium.temperature(pipe3.heatTransfer.states[$i1]) for $i1 in 1:5);
//   pipe3.heatTransfer.vs = pipe3.vs;
//   pipe3.heatTransfer.lengths = {5.0, 5.0, 5.0, 5.0, 5.0};
//   pipe3.heatTransfer.dimensions = pipe3.dimensions;
//   pipe3.heatTransfer.roughnesses = pipe3.roughnesses;
//   pipe3.heatTransfer.Ts[1] = pipe3.heatTransfer.heatPorts[1].T;
//   pipe3.heatTransfer.Ts[2] = pipe3.heatTransfer.heatPorts[2].T;
//   pipe3.heatTransfer.Ts[3] = pipe3.heatTransfer.heatPorts[3].T;
//   pipe3.heatTransfer.Ts[4] = pipe3.heatTransfer.heatPorts[4].T;
//   pipe3.heatTransfer.Ts[5] = pipe3.heatTransfer.heatPorts[5].T;
//   pipe3.heatTransfer.Q_flows[1] = pipe3.heatTransfer.heatPorts[1].Q_flow;
//   pipe3.heatTransfer.Q_flows[2] = pipe3.heatTransfer.heatPorts[2].Q_flow;
//   pipe3.heatTransfer.Q_flows[3] = pipe3.heatTransfer.heatPorts[3].Q_flow;
//   pipe3.heatTransfer.Q_flows[4] = pipe3.heatTransfer.heatPorts[4].Q_flow;
//   pipe3.heatTransfer.Q_flows[5] = pipe3.heatTransfer.heatPorts[5].Q_flow;
//   pipe3.Qb_flows[1] = pipe3.heatTransfer.Q_flows[1];
//   pipe3.Qb_flows[2] = pipe3.heatTransfer.Q_flows[2];
//   pipe3.Qb_flows[3] = pipe3.heatTransfer.Q_flows[3];
//   pipe3.Qb_flows[4] = pipe3.heatTransfer.Q_flows[4];
//   pipe3.Qb_flows[5] = pipe3.heatTransfer.Q_flows[5];
//   pipe3.Wb_flows[2:4] = array(pipe3.vs[i] * pipe3.crossAreas[i] * ((pipe3.mediums[i + 1].p - pipe3.mediums[i - 1].p) / 2.0 + (pipe3.flowModel.dps_fg[i] + pipe3.flowModel.dps_fg[i + 1]) / 2.0 - system.g * 5.0 * pipe3.mediums[i].d) for i in 2:4) * pipe3.nParallel;
//   pipe3.Wb_flows[1] = pipe3.vs[1] * pipe3.crossAreas[1] * ((pipe3.mediums[2].p - pipe3.port_a.p) / 1.5 + pipe3.flowModel.dps_fg[1] + pipe3.flowModel.dps_fg[2] / 2.0 - system.g * 5.0 * pipe3.mediums[1].d) * pipe3.nParallel;
//   pipe3.Wb_flows[5] = pipe3.vs[5] * pipe3.crossAreas[5] * ((pipe3.port_b.p - pipe3.mediums[4].p) / 1.5 + pipe3.flowModel.dps_fg[5] / 2.0 + pipe3.flowModel.dps_fg[6] - system.g * 5.0 * pipe3.mediums[5].d) * pipe3.nParallel;
//   pipe3.n85[1] = 2.5;
//   pipe3.n85[2] = 5.0;
//   pipe3.n85[3] = 5.0;
//   pipe3.n85[4] = 5.0;
//   pipe3.n85[5] = 5.0;
//   pipe3.n85[6] = 2.5;
//   pipe3.n86[1] = 2.5;
//   pipe3.n86[2] = 5.0;
//   pipe3.n86[3] = 5.0;
//   pipe3.n86[4] = 5.0;
//   pipe3.n86[5] = 5.0;
//   pipe3.n86[6] = 2.5;
//   pipe3.n87[1] = pipe3.crossAreas[1];
//   pipe3.n87[2] = pipe3.crossAreas[1];
//   pipe3.n87[3] = pipe3.crossAreas[2];
//   pipe3.n87[4] = pipe3.crossAreas[3];
//   pipe3.n87[5] = pipe3.crossAreas[4];
//   pipe3.n87[6] = pipe3.crossAreas[5];
//   pipe3.n87[7] = pipe3.crossAreas[5];
//   pipe3.n89[1] = pipe3.dimensions[1];
//   pipe3.n89[2] = pipe3.dimensions[1];
//   pipe3.n89[3] = pipe3.dimensions[2];
//   pipe3.n89[4] = pipe3.dimensions[3];
//   pipe3.n89[5] = pipe3.dimensions[4];
//   pipe3.n89[6] = pipe3.dimensions[5];
//   pipe3.n89[7] = pipe3.dimensions[5];
//   pipe3.n90[1] = pipe3.roughnesses[1];
//   pipe3.n90[2] = pipe3.roughnesses[1];
//   pipe3.n90[3] = pipe3.roughnesses[2];
//   pipe3.n90[4] = pipe3.roughnesses[3];
//   pipe3.n90[5] = pipe3.roughnesses[4];
//   pipe3.n90[6] = pipe3.roughnesses[5];
//   pipe3.n90[7] = pipe3.roughnesses[5];
//   pipe3.mb_flows[1] = pipe3.m_flows[1] - pipe3.m_flows[2];
//   pipe3.mbXi_flows[1,1] = pipe3.mXi_flows[1,1] - pipe3.mXi_flows[2,1];
//   pipe3.Hb_flows[1] = pipe3.H_flows[1] - pipe3.H_flows[2];
//   pipe3.mb_flows[2] = pipe3.m_flows[2] - pipe3.m_flows[3];
//   pipe3.mbXi_flows[2,1] = pipe3.mXi_flows[2,1] - pipe3.mXi_flows[3,1];
//   pipe3.Hb_flows[2] = pipe3.H_flows[2] - pipe3.H_flows[3];
//   pipe3.mb_flows[3] = pipe3.m_flows[3] - pipe3.m_flows[4];
//   pipe3.mbXi_flows[3,1] = pipe3.mXi_flows[3,1] - pipe3.mXi_flows[4,1];
//   pipe3.Hb_flows[3] = pipe3.H_flows[3] - pipe3.H_flows[4];
//   pipe3.mb_flows[4] = pipe3.m_flows[4] - pipe3.m_flows[5];
//   pipe3.mbXi_flows[4,1] = pipe3.mXi_flows[4,1] - pipe3.mXi_flows[5,1];
//   pipe3.Hb_flows[4] = pipe3.H_flows[4] - pipe3.H_flows[5];
//   pipe3.mb_flows[5] = pipe3.m_flows[5] - pipe3.m_flows[6];
//   pipe3.mbXi_flows[5,1] = pipe3.mXi_flows[5,1] - pipe3.mXi_flows[6,1];
//   pipe3.Hb_flows[5] = pipe3.H_flows[5] - pipe3.H_flows[6];
//   pipe3.H_flows[2] = semiLinear(pipe3.m_flows[2], pipe3.mediums[1].h, pipe3.mediums[2].h);
//   pipe3.mXi_flows[2,1] = semiLinear(pipe3.m_flows[2], pipe3.mediums[1].Xi[1], pipe3.mediums[2].Xi[1]);
//   pipe3.H_flows[3] = semiLinear(pipe3.m_flows[3], pipe3.mediums[2].h, pipe3.mediums[3].h);
//   pipe3.mXi_flows[3,1] = semiLinear(pipe3.m_flows[3], pipe3.mediums[2].Xi[1], pipe3.mediums[3].Xi[1]);
//   pipe3.H_flows[4] = semiLinear(pipe3.m_flows[4], pipe3.mediums[3].h, pipe3.mediums[4].h);
//   pipe3.mXi_flows[4,1] = semiLinear(pipe3.m_flows[4], pipe3.mediums[3].Xi[1], pipe3.mediums[4].Xi[1]);
//   pipe3.H_flows[5] = semiLinear(pipe3.m_flows[5], pipe3.mediums[4].h, pipe3.mediums[5].h);
//   pipe3.mXi_flows[5,1] = semiLinear(pipe3.m_flows[5], pipe3.mediums[4].Xi[1], pipe3.mediums[5].Xi[1]);
//   pipe3.H_flows[1] = semiLinear(pipe3.port_a.m_flow, ($OMC$PositiveMax(-pipe2.port_a.m_flow, 1e-07) * pipe2.port_a.h_outflow + $OMC$PositiveMax(-pipe1.port_b.m_flow, 1e-07) * pipe1.port_b.h_outflow) / ($OMC$PositiveMax(-pipe2.port_a.m_flow, 1e-07) + $OMC$PositiveMax(-pipe1.port_b.m_flow, 1e-07)), pipe3.mediums[1].h);
//   pipe3.H_flows[6] = -semiLinear(pipe3.port_b.m_flow, ($OMC$PositiveMax(-pipe2.port_b.m_flow, 1e-07) * pipe2.port_b.h_outflow + $OMC$PositiveMax(-pipe4.port_a.m_flow, 1e-07) * pipe4.port_a.h_outflow) / ($OMC$PositiveMax(-pipe2.port_b.m_flow, 1e-07) + $OMC$PositiveMax(-pipe4.port_a.m_flow, 1e-07)), pipe3.mediums[5].h);
//   pipe3.mXi_flows[1,1] = semiLinear(pipe3.port_a.m_flow, ($OMC$PositiveMax(-pipe2.port_a.m_flow, 1e-07) * pipe2.port_a.Xi_outflow[1] + $OMC$PositiveMax(-pipe1.port_b.m_flow, 1e-07) * pipe1.port_b.Xi_outflow[1]) / ($OMC$PositiveMax(-pipe2.port_a.m_flow, 1e-07) + $OMC$PositiveMax(-pipe1.port_b.m_flow, 1e-07)), pipe3.mediums[1].Xi[1]);
//   pipe3.mXi_flows[6,1] = -semiLinear(pipe3.port_b.m_flow, ($OMC$PositiveMax(-pipe2.port_b.m_flow, 1e-07) * pipe2.port_b.Xi_outflow[1] + $OMC$PositiveMax(-pipe4.port_a.m_flow, 1e-07) * pipe4.port_a.Xi_outflow[1]) / ($OMC$PositiveMax(-pipe2.port_b.m_flow, 1e-07) + $OMC$PositiveMax(-pipe4.port_a.m_flow, 1e-07)), pipe3.mediums[5].Xi[1]);
//   pipe3.port_a.m_flow = pipe3.m_flows[1];
//   pipe3.port_b.m_flow = -pipe3.m_flows[6];
//   pipe3.port_a.h_outflow = pipe3.mediums[1].h;
//   pipe3.port_b.h_outflow = pipe3.mediums[5].h;
//   pipe3.port_a.Xi_outflow[1] = pipe3.mediums[1].Xi[1];
//   pipe3.port_b.Xi_outflow[1] = pipe3.mediums[5].Xi[1];
//   pipe3.state_a = Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.setState_phX(pipe3.port_a.p, ($OMC$PositiveMax(-pipe2.port_a.m_flow, 1e-07) * pipe2.port_a.h_outflow + $OMC$PositiveMax(-pipe1.port_b.m_flow, 1e-07) * pipe1.port_b.h_outflow) / ($OMC$PositiveMax(-pipe2.port_a.m_flow, 1e-07) + $OMC$PositiveMax(-pipe1.port_b.m_flow, 1e-07)), {($OMC$PositiveMax(-pipe2.port_a.m_flow, 1e-07) * pipe2.port_a.Xi_outflow[1] + $OMC$PositiveMax(-pipe1.port_b.m_flow, 1e-07) * pipe1.port_b.Xi_outflow[1]) / ($OMC$PositiveMax(-pipe2.port_a.m_flow, 1e-07) + $OMC$PositiveMax(-pipe1.port_b.m_flow, 1e-07))});
//   pipe3.state_b = Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.setState_phX(pipe3.port_b.p, ($OMC$PositiveMax(-pipe2.port_b.m_flow, 1e-07) * pipe2.port_b.h_outflow + $OMC$PositiveMax(-pipe4.port_a.m_flow, 1e-07) * pipe4.port_a.h_outflow) / ($OMC$PositiveMax(-pipe2.port_b.m_flow, 1e-07) + $OMC$PositiveMax(-pipe4.port_a.m_flow, 1e-07)), {($OMC$PositiveMax(-pipe2.port_b.m_flow, 1e-07) * pipe2.port_b.Xi_outflow[1] + $OMC$PositiveMax(-pipe4.port_a.m_flow, 1e-07) * pipe4.port_a.Xi_outflow[1]) / ($OMC$PositiveMax(-pipe2.port_b.m_flow, 1e-07) + $OMC$PositiveMax(-pipe4.port_a.m_flow, 1e-07))});
//   pipe3.statesFM[1] = pipe3.state_a;
//   pipe3.statesFM[2] = pipe3.mediums[1].state;
//   pipe3.statesFM[3] = pipe3.mediums[2].state;
//   pipe3.statesFM[4] = pipe3.mediums[3].state;
//   pipe3.statesFM[5] = pipe3.mediums[4].state;
//   pipe3.statesFM[6] = pipe3.mediums[5].state;
//   pipe3.statesFM[7] = pipe3.state_b;
//   pipe3.m_flows[1] = pipe3.flowModel.m_flows[1];
//   pipe3.m_flows[2] = pipe3.flowModel.m_flows[2];
//   pipe3.m_flows[3] = pipe3.flowModel.m_flows[3];
//   pipe3.m_flows[4] = pipe3.flowModel.m_flows[4];
//   pipe3.m_flows[5] = pipe3.flowModel.m_flows[5];
//   pipe3.m_flows[6] = pipe3.flowModel.m_flows[6];
//   pipe3.n88[1] = pipe3.m_flows[1] / Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.density(pipe3.state_a) / pipe3.crossAreas[1] / pipe3.nParallel;
//   pipe3.n88[2] = pipe3.vs[1];
//   pipe3.n88[3] = pipe3.vs[2];
//   pipe3.n88[4] = pipe3.vs[3];
//   pipe3.n88[5] = pipe3.vs[4];
//   pipe3.n88[6] = pipe3.vs[5];
//   pipe3.n88[7] = pipe3.m_flows[6] / Modelica.Fluid.Examples.BranchingDynamicPipes.pipe3.Medium.density(pipe3.state_b) / pipe3.crossAreas[5] / pipe3.nParallel;
//   pipe3.ms[1] = pipe3.fluidVolumes[1] * pipe3.mediums[1].d;
//   pipe3.mXis[1,1] = pipe3.ms[1] * pipe3.mediums[1].Xi[1];
//   pipe3.Us[1] = pipe3.ms[1] * pipe3.mediums[1].u;
//   pipe3.ms[2] = pipe3.fluidVolumes[2] * pipe3.mediums[2].d;
//   pipe3.mXis[2,1] = pipe3.ms[2] * pipe3.mediums[2].Xi[1];
//   pipe3.Us[2] = pipe3.ms[2] * pipe3.mediums[2].u;
//   pipe3.ms[3] = pipe3.fluidVolumes[3] * pipe3.mediums[3].d;
//   pipe3.mXis[3,1] = pipe3.ms[3] * pipe3.mediums[3].Xi[1];
//   pipe3.Us[3] = pipe3.ms[3] * pipe3.mediums[3].u;
//   pipe3.ms[4] = pipe3.fluidVolumes[4] * pipe3.mediums[4].d;
//   pipe3.mXis[4,1] = pipe3.ms[4] * pipe3.mediums[4].Xi[1];
//   pipe3.Us[4] = pipe3.ms[4] * pipe3.mediums[4].u;
//   pipe3.ms[5] = pipe3.fluidVolumes[5] * pipe3.mediums[5].d;
//   pipe3.mXis[5,1] = pipe3.ms[5] * pipe3.mediums[5].Xi[1];
//   pipe3.Us[5] = pipe3.ms[5] * pipe3.mediums[5].u;
//   der(pipe3.Us[1]) = pipe3.Hb_flows[1] + pipe3.Wb_flows[1] + pipe3.Qb_flows[1];
//   der(pipe3.Us[2]) = pipe3.Hb_flows[2] + pipe3.Wb_flows[2] + pipe3.Qb_flows[2];
//   der(pipe3.Us[3]) = pipe3.Hb_flows[3] + pipe3.Wb_flows[3] + pipe3.Qb_flows[3];
//   der(pipe3.Us[4]) = pipe3.Hb_flows[4] + pipe3.Wb_flows[4] + pipe3.Qb_flows[4];
//   der(pipe3.Us[5]) = pipe3.Hb_flows[5] + pipe3.Wb_flows[5] + pipe3.Qb_flows[5];
//   der(pipe3.ms[1]) = pipe3.mb_flows[1];
//   der(pipe3.ms[2]) = pipe3.mb_flows[2];
//   der(pipe3.ms[3]) = pipe3.mb_flows[3];
//   der(pipe3.ms[4]) = pipe3.mb_flows[4];
//   der(pipe3.ms[5]) = pipe3.mb_flows[5];
//   der(pipe3.mXis[1,1]) = pipe3.mbXi_flows[1,1];
//   der(pipe3.mXis[2,1]) = pipe3.mbXi_flows[2,1];
//   der(pipe3.mXis[3,1]) = pipe3.mbXi_flows[3,1];
//   der(pipe3.mXis[4,1]) = pipe3.mbXi_flows[4,1];
//   der(pipe3.mXis[5,1]) = pipe3.mbXi_flows[5,1];
//   pipe4.fluidVolumes = array(pipe4.crossAreas[i] * 10.0 for i in 1:5) * pipe4.nParallel;
//   assert(pipe4.mediums[1].T >= 190.0 and pipe4.mediums[1].T <= 647.0, \"
//   Temperature T is not in the allowed range
//   190.0 K <= (T =\" + String(pipe4.mediums[1].T, 6, 0, true) + \" K) <= 647.0 K
//   required from medium model \\\"\" + \"Moist air\" + \"\\\".\");
//   pipe4.mediums[1].MM = 1.0 / (pipe4.mediums[1].Xi[1] / 0.01801528 + (1.0 - pipe4.mediums[1].Xi[1]) / 0.0289651159);
//   pipe4.mediums[1].n99 = min(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.saturationPressure(pipe4.mediums[1].T), 0.999 * pipe4.mediums[1].p);
//   pipe4.mediums[1].n97 = min(pipe4.mediums[1].n99 * 0.6219647130774989 / max(1e-13, pipe4.mediums[1].p - pipe4.mediums[1].n99) * (1.0 - pipe4.mediums[1].Xi[1]), 1.0);
//   pipe4.mediums[1].n94 = max(pipe4.mediums[1].Xi[1] - pipe4.mediums[1].n97, 0.0);
//   pipe4.mediums[1].n95 = pipe4.mediums[1].Xi[1] - pipe4.mediums[1].n94;
//   pipe4.mediums[1].n96 = 1.0 - pipe4.mediums[1].Xi[1];
//   pipe4.mediums[1].h = Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.specificEnthalpy_pTX(pipe4.mediums[1].p, pipe4.mediums[1].T, pipe4.mediums[1].Xi);
//   pipe4.mediums[1].R = 287.0512249529787 * pipe4.mediums[1].n96 / (1.0 - pipe4.mediums[1].n94) + 461.5233290850878 * pipe4.mediums[1].n95 / (1.0 - pipe4.mediums[1].n94);
//   pipe4.mediums[1].u = pipe4.mediums[1].h - pipe4.mediums[1].R * pipe4.mediums[1].T;
//   pipe4.mediums[1].d = pipe4.mediums[1].p / (pipe4.mediums[1].R * pipe4.mediums[1].T);
//   pipe4.mediums[1].state.p = pipe4.mediums[1].p;
//   pipe4.mediums[1].state.T = pipe4.mediums[1].T;
//   pipe4.mediums[1].state.X[1] = pipe4.mediums[1].X[1];
//   pipe4.mediums[1].state.X[2] = pipe4.mediums[1].X[2];
//   pipe4.mediums[1].n98 = 0.6219647130774989 * pipe4.mediums[1].n99 / max(1e-13, pipe4.mediums[1].p - pipe4.mediums[1].n99);
//   pipe4.mediums[1].x_water = pipe4.mediums[1].Xi[1] / max(pipe4.mediums[1].n96, 1e-13);
//   pipe4.mediums[1].phi = pipe4.mediums[1].p / pipe4.mediums[1].n99 * pipe4.mediums[1].Xi[1] / (pipe4.mediums[1].Xi[1] + 0.6219647130774989 * pipe4.mediums[1].n96);
//   pipe4.mediums[1].Xi[1] = pipe4.mediums[1].X[1];
//   pipe4.mediums[1].X[2] = 1.0 - pipe4.mediums[1].Xi[1];
//   assert(pipe4.mediums[1].X[1] >= -1e-05 and pipe4.mediums[1].X[1] <= 1.00001, \"Mass fraction X[\" + String(1, 0, true) + \"] = \" + String(pipe4.mediums[1].X[1], 6, 0, true) + \"of substance \" + \"water\" + \"
//   of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(pipe4.mediums[1].X[2] >= -1e-05 and pipe4.mediums[1].X[2] <= 1.00001, \"Mass fraction X[\" + String(2, 0, true) + \"] = \" + String(pipe4.mediums[1].X[2], 6, 0, true) + \"of substance \" + \"air\" + \"
//   of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(pipe4.mediums[1].p >= 0.0, \"Pressure (= \" + String(pipe4.mediums[1].p, 6, 0, true) + \" Pa) of medium \\\"\" + \"Moist air\" + \"\\\" is negative
//   (Temperature = \" + String(pipe4.mediums[1].T, 6, 0, true) + \" K)\");
//   assert(pipe4.mediums[2].T >= 190.0 and pipe4.mediums[2].T <= 647.0, \"
//   Temperature T is not in the allowed range
//   190.0 K <= (T =\" + String(pipe4.mediums[2].T, 6, 0, true) + \" K) <= 647.0 K
//   required from medium model \\\"\" + \"Moist air\" + \"\\\".\");
//   pipe4.mediums[2].MM = 1.0 / (pipe4.mediums[2].Xi[1] / 0.01801528 + (1.0 - pipe4.mediums[2].Xi[1]) / 0.0289651159);
//   pipe4.mediums[2].n99 = min(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.saturationPressure(pipe4.mediums[2].T), 0.999 * pipe4.mediums[2].p);
//   pipe4.mediums[2].n97 = min(pipe4.mediums[2].n99 * 0.6219647130774989 / max(1e-13, pipe4.mediums[2].p - pipe4.mediums[2].n99) * (1.0 - pipe4.mediums[2].Xi[1]), 1.0);
//   pipe4.mediums[2].n94 = max(pipe4.mediums[2].Xi[1] - pipe4.mediums[2].n97, 0.0);
//   pipe4.mediums[2].n95 = pipe4.mediums[2].Xi[1] - pipe4.mediums[2].n94;
//   pipe4.mediums[2].n96 = 1.0 - pipe4.mediums[2].Xi[1];
//   pipe4.mediums[2].h = Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.specificEnthalpy_pTX(pipe4.mediums[2].p, pipe4.mediums[2].T, pipe4.mediums[2].Xi);
//   pipe4.mediums[2].R = 287.0512249529787 * pipe4.mediums[2].n96 / (1.0 - pipe4.mediums[2].n94) + 461.5233290850878 * pipe4.mediums[2].n95 / (1.0 - pipe4.mediums[2].n94);
//   pipe4.mediums[2].u = pipe4.mediums[2].h - pipe4.mediums[2].R * pipe4.mediums[2].T;
//   pipe4.mediums[2].d = pipe4.mediums[2].p / (pipe4.mediums[2].R * pipe4.mediums[2].T);
//   pipe4.mediums[2].state.p = pipe4.mediums[2].p;
//   pipe4.mediums[2].state.T = pipe4.mediums[2].T;
//   pipe4.mediums[2].state.X[1] = pipe4.mediums[2].X[1];
//   pipe4.mediums[2].state.X[2] = pipe4.mediums[2].X[2];
//   pipe4.mediums[2].n98 = 0.6219647130774989 * pipe4.mediums[2].n99 / max(1e-13, pipe4.mediums[2].p - pipe4.mediums[2].n99);
//   pipe4.mediums[2].x_water = pipe4.mediums[2].Xi[1] / max(pipe4.mediums[2].n96, 1e-13);
//   pipe4.mediums[2].phi = pipe4.mediums[2].p / pipe4.mediums[2].n99 * pipe4.mediums[2].Xi[1] / (pipe4.mediums[2].Xi[1] + 0.6219647130774989 * pipe4.mediums[2].n96);
//   pipe4.mediums[2].Xi[1] = pipe4.mediums[2].X[1];
//   pipe4.mediums[2].X[2] = 1.0 - pipe4.mediums[2].Xi[1];
//   assert(pipe4.mediums[2].X[1] >= -1e-05 and pipe4.mediums[2].X[1] <= 1.00001, \"Mass fraction X[\" + String(1, 0, true) + \"] = \" + String(pipe4.mediums[2].X[1], 6, 0, true) + \"of substance \" + \"water\" + \"
//   of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(pipe4.mediums[2].X[2] >= -1e-05 and pipe4.mediums[2].X[2] <= 1.00001, \"Mass fraction X[\" + String(2, 0, true) + \"] = \" + String(pipe4.mediums[2].X[2], 6, 0, true) + \"of substance \" + \"air\" + \"
//   of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(pipe4.mediums[2].p >= 0.0, \"Pressure (= \" + String(pipe4.mediums[2].p, 6, 0, true) + \" Pa) of medium \\\"\" + \"Moist air\" + \"\\\" is negative
//   (Temperature = \" + String(pipe4.mediums[2].T, 6, 0, true) + \" K)\");
//   assert(pipe4.mediums[3].T >= 190.0 and pipe4.mediums[3].T <= 647.0, \"
//   Temperature T is not in the allowed range
//   190.0 K <= (T =\" + String(pipe4.mediums[3].T, 6, 0, true) + \" K) <= 647.0 K
//   required from medium model \\\"\" + \"Moist air\" + \"\\\".\");
//   pipe4.mediums[3].MM = 1.0 / (pipe4.mediums[3].Xi[1] / 0.01801528 + (1.0 - pipe4.mediums[3].Xi[1]) / 0.0289651159);
//   pipe4.mediums[3].n99 = min(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.saturationPressure(pipe4.mediums[3].T), 0.999 * pipe4.mediums[3].p);
//   pipe4.mediums[3].n97 = min(pipe4.mediums[3].n99 * 0.6219647130774989 / max(1e-13, pipe4.mediums[3].p - pipe4.mediums[3].n99) * (1.0 - pipe4.mediums[3].Xi[1]), 1.0);
//   pipe4.mediums[3].n94 = max(pipe4.mediums[3].Xi[1] - pipe4.mediums[3].n97, 0.0);
//   pipe4.mediums[3].n95 = pipe4.mediums[3].Xi[1] - pipe4.mediums[3].n94;
//   pipe4.mediums[3].n96 = 1.0 - pipe4.mediums[3].Xi[1];
//   pipe4.mediums[3].h = Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.specificEnthalpy_pTX(pipe4.mediums[3].p, pipe4.mediums[3].T, pipe4.mediums[3].Xi);
//   pipe4.mediums[3].R = 287.0512249529787 * pipe4.mediums[3].n96 / (1.0 - pipe4.mediums[3].n94) + 461.5233290850878 * pipe4.mediums[3].n95 / (1.0 - pipe4.mediums[3].n94);
//   pipe4.mediums[3].u = pipe4.mediums[3].h - pipe4.mediums[3].R * pipe4.mediums[3].T;
//   pipe4.mediums[3].d = pipe4.mediums[3].p / (pipe4.mediums[3].R * pipe4.mediums[3].T);
//   pipe4.mediums[3].state.p = pipe4.mediums[3].p;
//   pipe4.mediums[3].state.T = pipe4.mediums[3].T;
//   pipe4.mediums[3].state.X[1] = pipe4.mediums[3].X[1];
//   pipe4.mediums[3].state.X[2] = pipe4.mediums[3].X[2];
//   pipe4.mediums[3].n98 = 0.6219647130774989 * pipe4.mediums[3].n99 / max(1e-13, pipe4.mediums[3].p - pipe4.mediums[3].n99);
//   pipe4.mediums[3].x_water = pipe4.mediums[3].Xi[1] / max(pipe4.mediums[3].n96, 1e-13);
//   pipe4.mediums[3].phi = pipe4.mediums[3].p / pipe4.mediums[3].n99 * pipe4.mediums[3].Xi[1] / (pipe4.mediums[3].Xi[1] + 0.6219647130774989 * pipe4.mediums[3].n96);
//   pipe4.mediums[3].Xi[1] = pipe4.mediums[3].X[1];
//   pipe4.mediums[3].X[2] = 1.0 - pipe4.mediums[3].Xi[1];
//   assert(pipe4.mediums[3].X[1] >= -1e-05 and pipe4.mediums[3].X[1] <= 1.00001, \"Mass fraction X[\" + String(1, 0, true) + \"] = \" + String(pipe4.mediums[3].X[1], 6, 0, true) + \"of substance \" + \"water\" + \"
//   of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(pipe4.mediums[3].X[2] >= -1e-05 and pipe4.mediums[3].X[2] <= 1.00001, \"Mass fraction X[\" + String(2, 0, true) + \"] = \" + String(pipe4.mediums[3].X[2], 6, 0, true) + \"of substance \" + \"air\" + \"
//   of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(pipe4.mediums[3].p >= 0.0, \"Pressure (= \" + String(pipe4.mediums[3].p, 6, 0, true) + \" Pa) of medium \\\"\" + \"Moist air\" + \"\\\" is negative
//   (Temperature = \" + String(pipe4.mediums[3].T, 6, 0, true) + \" K)\");
//   assert(pipe4.mediums[4].T >= 190.0 and pipe4.mediums[4].T <= 647.0, \"
//   Temperature T is not in the allowed range
//   190.0 K <= (T =\" + String(pipe4.mediums[4].T, 6, 0, true) + \" K) <= 647.0 K
//   required from medium model \\\"\" + \"Moist air\" + \"\\\".\");
//   pipe4.mediums[4].MM = 1.0 / (pipe4.mediums[4].Xi[1] / 0.01801528 + (1.0 - pipe4.mediums[4].Xi[1]) / 0.0289651159);
//   pipe4.mediums[4].n99 = min(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.saturationPressure(pipe4.mediums[4].T), 0.999 * pipe4.mediums[4].p);
//   pipe4.mediums[4].n97 = min(pipe4.mediums[4].n99 * 0.6219647130774989 / max(1e-13, pipe4.mediums[4].p - pipe4.mediums[4].n99) * (1.0 - pipe4.mediums[4].Xi[1]), 1.0);
//   pipe4.mediums[4].n94 = max(pipe4.mediums[4].Xi[1] - pipe4.mediums[4].n97, 0.0);
//   pipe4.mediums[4].n95 = pipe4.mediums[4].Xi[1] - pipe4.mediums[4].n94;
//   pipe4.mediums[4].n96 = 1.0 - pipe4.mediums[4].Xi[1];
//   pipe4.mediums[4].h = Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.specificEnthalpy_pTX(pipe4.mediums[4].p, pipe4.mediums[4].T, pipe4.mediums[4].Xi);
//   pipe4.mediums[4].R = 287.0512249529787 * pipe4.mediums[4].n96 / (1.0 - pipe4.mediums[4].n94) + 461.5233290850878 * pipe4.mediums[4].n95 / (1.0 - pipe4.mediums[4].n94);
//   pipe4.mediums[4].u = pipe4.mediums[4].h - pipe4.mediums[4].R * pipe4.mediums[4].T;
//   pipe4.mediums[4].d = pipe4.mediums[4].p / (pipe4.mediums[4].R * pipe4.mediums[4].T);
//   pipe4.mediums[4].state.p = pipe4.mediums[4].p;
//   pipe4.mediums[4].state.T = pipe4.mediums[4].T;
//   pipe4.mediums[4].state.X[1] = pipe4.mediums[4].X[1];
//   pipe4.mediums[4].state.X[2] = pipe4.mediums[4].X[2];
//   pipe4.mediums[4].n98 = 0.6219647130774989 * pipe4.mediums[4].n99 / max(1e-13, pipe4.mediums[4].p - pipe4.mediums[4].n99);
//   pipe4.mediums[4].x_water = pipe4.mediums[4].Xi[1] / max(pipe4.mediums[4].n96, 1e-13);
//   pipe4.mediums[4].phi = pipe4.mediums[4].p / pipe4.mediums[4].n99 * pipe4.mediums[4].Xi[1] / (pipe4.mediums[4].Xi[1] + 0.6219647130774989 * pipe4.mediums[4].n96);
//   pipe4.mediums[4].Xi[1] = pipe4.mediums[4].X[1];
//   pipe4.mediums[4].X[2] = 1.0 - pipe4.mediums[4].Xi[1];
//   assert(pipe4.mediums[4].X[1] >= -1e-05 and pipe4.mediums[4].X[1] <= 1.00001, \"Mass fraction X[\" + String(1, 0, true) + \"] = \" + String(pipe4.mediums[4].X[1], 6, 0, true) + \"of substance \" + \"water\" + \"
//   of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(pipe4.mediums[4].X[2] >= -1e-05 and pipe4.mediums[4].X[2] <= 1.00001, \"Mass fraction X[\" + String(2, 0, true) + \"] = \" + String(pipe4.mediums[4].X[2], 6, 0, true) + \"of substance \" + \"air\" + \"
//   of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(pipe4.mediums[4].p >= 0.0, \"Pressure (= \" + String(pipe4.mediums[4].p, 6, 0, true) + \" Pa) of medium \\\"\" + \"Moist air\" + \"\\\" is negative
//   (Temperature = \" + String(pipe4.mediums[4].T, 6, 0, true) + \" K)\");
//   assert(pipe4.mediums[5].T >= 190.0 and pipe4.mediums[5].T <= 647.0, \"
//   Temperature T is not in the allowed range
//   190.0 K <= (T =\" + String(pipe4.mediums[5].T, 6, 0, true) + \" K) <= 647.0 K
//   required from medium model \\\"\" + \"Moist air\" + \"\\\".\");
//   pipe4.mediums[5].MM = 1.0 / (pipe4.mediums[5].Xi[1] / 0.01801528 + (1.0 - pipe4.mediums[5].Xi[1]) / 0.0289651159);
//   pipe4.mediums[5].n99 = min(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.saturationPressure(pipe4.mediums[5].T), 0.999 * pipe4.mediums[5].p);
//   pipe4.mediums[5].n97 = min(pipe4.mediums[5].n99 * 0.6219647130774989 / max(1e-13, pipe4.mediums[5].p - pipe4.mediums[5].n99) * (1.0 - pipe4.mediums[5].Xi[1]), 1.0);
//   pipe4.mediums[5].n94 = max(pipe4.mediums[5].Xi[1] - pipe4.mediums[5].n97, 0.0);
//   pipe4.mediums[5].n95 = pipe4.mediums[5].Xi[1] - pipe4.mediums[5].n94;
//   pipe4.mediums[5].n96 = 1.0 - pipe4.mediums[5].Xi[1];
//   pipe4.mediums[5].h = Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.specificEnthalpy_pTX(pipe4.mediums[5].p, pipe4.mediums[5].T, pipe4.mediums[5].Xi);
//   pipe4.mediums[5].R = 287.0512249529787 * pipe4.mediums[5].n96 / (1.0 - pipe4.mediums[5].n94) + 461.5233290850878 * pipe4.mediums[5].n95 / (1.0 - pipe4.mediums[5].n94);
//   pipe4.mediums[5].u = pipe4.mediums[5].h - pipe4.mediums[5].R * pipe4.mediums[5].T;
//   pipe4.mediums[5].d = pipe4.mediums[5].p / (pipe4.mediums[5].R * pipe4.mediums[5].T);
//   pipe4.mediums[5].state.p = pipe4.mediums[5].p;
//   pipe4.mediums[5].state.T = pipe4.mediums[5].T;
//   pipe4.mediums[5].state.X[1] = pipe4.mediums[5].X[1];
//   pipe4.mediums[5].state.X[2] = pipe4.mediums[5].X[2];
//   pipe4.mediums[5].n98 = 0.6219647130774989 * pipe4.mediums[5].n99 / max(1e-13, pipe4.mediums[5].p - pipe4.mediums[5].n99);
//   pipe4.mediums[5].x_water = pipe4.mediums[5].Xi[1] / max(pipe4.mediums[5].n96, 1e-13);
//   pipe4.mediums[5].phi = pipe4.mediums[5].p / pipe4.mediums[5].n99 * pipe4.mediums[5].Xi[1] / (pipe4.mediums[5].Xi[1] + 0.6219647130774989 * pipe4.mediums[5].n96);
//   pipe4.mediums[5].Xi[1] = pipe4.mediums[5].X[1];
//   pipe4.mediums[5].X[2] = 1.0 - pipe4.mediums[5].Xi[1];
//   assert(pipe4.mediums[5].X[1] >= -1e-05 and pipe4.mediums[5].X[1] <= 1.00001, \"Mass fraction X[\" + String(1, 0, true) + \"] = \" + String(pipe4.mediums[5].X[1], 6, 0, true) + \"of substance \" + \"water\" + \"
//   of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(pipe4.mediums[5].X[2] >= -1e-05 and pipe4.mediums[5].X[2] <= 1.00001, \"Mass fraction X[\" + String(2, 0, true) + \"] = \" + String(pipe4.mediums[5].X[2], 6, 0, true) + \"of substance \" + \"air\" + \"
//   of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(pipe4.mediums[5].p >= 0.0, \"Pressure (= \" + String(pipe4.mediums[5].p, 6, 0, true) + \" Pa) of medium \\\"\" + \"Moist air\" + \"\\\" is negative
//   (Temperature = \" + String(pipe4.mediums[5].T, 6, 0, true) + \" K)\");
//   pipe4.flowModel.states[1].X = pipe4.statesFM[1].X;
//   pipe4.flowModel.states[2].X = pipe4.statesFM[2].X;
//   pipe4.flowModel.states[3].X = pipe4.statesFM[3].X;
//   pipe4.flowModel.states[4].X = pipe4.statesFM[4].X;
//   pipe4.flowModel.states[5].X = pipe4.statesFM[5].X;
//   pipe4.flowModel.states[6].X = pipe4.statesFM[6].X;
//   pipe4.flowModel.states[7].X = pipe4.statesFM[7].X;
//   pipe4.flowModel.vs = pipe4.n113;
//   pipe4.flowModel.crossAreas = pipe4.n112;
//   pipe4.flowModel.dimensions = pipe4.n114;
//   pipe4.flowModel.roughnesses = pipe4.n115;
//   pipe4.flowModel.dheights = pipe4.n111;
//   pipe4.flowModel.pathLengths = pipe4.n110;
//   pipe4.flowModel.rhos = array(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.flowModel.Medium.density(pipe4.flowModel.states[$i1]) for $i1 in 1:7);
//   pipe4.flowModel.mus = array(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.flowModel.Medium.dynamicViscosity(pipe4.flowModel.states[$i1]) for $i1 in 1:7);
//   pipe4.flowModel.pathLengths_internal = pipe4.flowModel.pathLengths;
//   pipe4.flowModel.Res_turbulent_internal = {pipe4.flowModel.Re_turbulent, pipe4.flowModel.Re_turbulent, pipe4.flowModel.Re_turbulent, pipe4.flowModel.Re_turbulent, pipe4.flowModel.Re_turbulent, pipe4.flowModel.Re_turbulent};
//   pipe4.flowModel.n108 = {0.5 * (pipe4.flowModel.dimensions[1] + pipe4.flowModel.dimensions[2]), 0.5 * (pipe4.flowModel.dimensions[2] + pipe4.flowModel.dimensions[3]), 0.5 * (pipe4.flowModel.dimensions[3] + pipe4.flowModel.dimensions[4]), 0.5 * (pipe4.flowModel.dimensions[4] + pipe4.flowModel.dimensions[5]), 0.5 * (pipe4.flowModel.dimensions[5] + pipe4.flowModel.dimensions[6]), 0.5 * (pipe4.flowModel.dimensions[6] + pipe4.flowModel.dimensions[7])};
//   pipe4.flowModel.m_flows = array(homotopy((array(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.flowModel.WallFriction.massFlowRate_dp_staticHead(pipe4.flowModel.dps_fg[$i1], pipe4.flowModel.rhos[(1:6)[$i1]], pipe4.flowModel.rhos[(2:7)[$i1]], pipe4.flowModel.mus[(1:6)[$i1]], pipe4.flowModel.mus[(2:7)[$i1]], pipe4.flowModel.pathLengths_internal[$i1], pipe4.flowModel.n108[$i1], {pipe4.flowModel.g * pipe4.flowModel.dheights[1], pipe4.flowModel.g * pipe4.flowModel.dheights[2], pipe4.flowModel.g * pipe4.flowModel.dheights[3], pipe4.flowModel.g * pipe4.flowModel.dheights[4], pipe4.flowModel.g * pipe4.flowModel.dheights[5], pipe4.flowModel.g * pipe4.flowModel.dheights[6]}[$i1], {(pipe4.flowModel.crossAreas[1] + pipe4.flowModel.crossAreas[2]) / 2.0, (pipe4.flowModel.crossAreas[2] + pipe4.flowModel.crossAreas[3]) / 2.0, (pipe4.flowModel.crossAreas[3] + pipe4.flowModel.crossAreas[4]) / 2.0, (pipe4.flowModel.crossAreas[4] + pipe4.flowModel.crossAreas[5]) / 2.0, (pipe4.flowModel.crossAreas[5] + pipe4.flowModel.crossAreas[6]) / 2.0, (pipe4.flowModel.crossAreas[6] + pipe4.flowModel.crossAreas[7]) / 2.0}[$i1], {(pipe4.flowModel.roughnesses[1] + pipe4.flowModel.roughnesses[2]) / 2.0, (pipe4.flowModel.roughnesses[2] + pipe4.flowModel.roughnesses[3]) / 2.0, (pipe4.flowModel.roughnesses[3] + pipe4.flowModel.roughnesses[4]) / 2.0, (pipe4.flowModel.roughnesses[4] + pipe4.flowModel.roughnesses[5]) / 2.0, (pipe4.flowModel.roughnesses[5] + pipe4.flowModel.roughnesses[6]) / 2.0, (pipe4.flowModel.roughnesses[6] + pipe4.flowModel.roughnesses[7]) / 2.0}[$i1], pipe4.flowModel.n105 / 6.0, pipe4.flowModel.Res_turbulent_internal[$i1]) for $i1 in 1:6) * pipe4.flowModel.nParallel)[$i1], {pipe4.flowModel.m_flow_nominal / pipe4.flowModel.dp_nominal * (pipe4.flowModel.dps_fg[1] - pipe4.flowModel.g * pipe4.flowModel.dheights[1] * pipe4.flowModel.n102), pipe4.flowModel.m_flow_nominal / pipe4.flowModel.dp_nominal * (pipe4.flowModel.dps_fg[2] - pipe4.flowModel.g * pipe4.flowModel.dheights[2] * pipe4.flowModel.n102), pipe4.flowModel.m_flow_nominal / pipe4.flowModel.dp_nominal * (pipe4.flowModel.dps_fg[3] - pipe4.flowModel.g * pipe4.flowModel.dheights[3] * pipe4.flowModel.n102), pipe4.flowModel.m_flow_nominal / pipe4.flowModel.dp_nominal * (pipe4.flowModel.dps_fg[4] - pipe4.flowModel.g * pipe4.flowModel.dheights[4] * pipe4.flowModel.n102), pipe4.flowModel.m_flow_nominal / pipe4.flowModel.dp_nominal * (pipe4.flowModel.dps_fg[5] - pipe4.flowModel.g * pipe4.flowModel.dheights[5] * pipe4.flowModel.n102), pipe4.flowModel.m_flow_nominal / pipe4.flowModel.dp_nominal * (pipe4.flowModel.dps_fg[6] - pipe4.flowModel.g * pipe4.flowModel.dheights[6] * pipe4.flowModel.n102)}[$i1]) for $i1 in 1:6);
//   pipe4.flowModel.rhos_act[1] = noEvent(if pipe4.flowModel.m_flows[1] > 0.0 then pipe4.flowModel.rhos[1] else pipe4.flowModel.rhos[2]);
//   pipe4.flowModel.mus_act[1] = noEvent(if pipe4.flowModel.m_flows[1] > 0.0 then pipe4.flowModel.mus[1] else pipe4.flowModel.mus[2]);
//   pipe4.flowModel.rhos_act[2] = noEvent(if pipe4.flowModel.m_flows[2] > 0.0 then pipe4.flowModel.rhos[2] else pipe4.flowModel.rhos[3]);
//   pipe4.flowModel.mus_act[2] = noEvent(if pipe4.flowModel.m_flows[2] > 0.0 then pipe4.flowModel.mus[2] else pipe4.flowModel.mus[3]);
//   pipe4.flowModel.rhos_act[3] = noEvent(if pipe4.flowModel.m_flows[3] > 0.0 then pipe4.flowModel.rhos[3] else pipe4.flowModel.rhos[4]);
//   pipe4.flowModel.mus_act[3] = noEvent(if pipe4.flowModel.m_flows[3] > 0.0 then pipe4.flowModel.mus[3] else pipe4.flowModel.mus[4]);
//   pipe4.flowModel.rhos_act[4] = noEvent(if pipe4.flowModel.m_flows[4] > 0.0 then pipe4.flowModel.rhos[4] else pipe4.flowModel.rhos[5]);
//   pipe4.flowModel.mus_act[4] = noEvent(if pipe4.flowModel.m_flows[4] > 0.0 then pipe4.flowModel.mus[4] else pipe4.flowModel.mus[5]);
//   pipe4.flowModel.rhos_act[5] = noEvent(if pipe4.flowModel.m_flows[5] > 0.0 then pipe4.flowModel.rhos[5] else pipe4.flowModel.rhos[6]);
//   pipe4.flowModel.mus_act[5] = noEvent(if pipe4.flowModel.m_flows[5] > 0.0 then pipe4.flowModel.mus[5] else pipe4.flowModel.mus[6]);
//   pipe4.flowModel.rhos_act[6] = noEvent(if pipe4.flowModel.m_flows[6] > 0.0 then pipe4.flowModel.rhos[6] else pipe4.flowModel.rhos[7]);
//   pipe4.flowModel.mus_act[6] = noEvent(if pipe4.flowModel.m_flows[6] > 0.0 then pipe4.flowModel.mus[6] else pipe4.flowModel.mus[7]);
//   pipe4.flowModel.Ib_flows = array(pipe4.flowModel.rhos[i] * pipe4.flowModel.vs[i] * pipe4.flowModel.vs[i] * pipe4.flowModel.crossAreas[i] - pipe4.flowModel.rhos[i + 1] * pipe4.flowModel.vs[i + 1] * pipe4.flowModel.vs[i + 1] * pipe4.flowModel.crossAreas[i + 1] for i in 1:6) * pipe4.flowModel.nParallel;
//   pipe4.flowModel.Fs_p = array(0.5 * (pipe4.flowModel.crossAreas[i] + pipe4.flowModel.crossAreas[i + 1]) * (Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.flowModel.Medium.pressure(pipe4.flowModel.states[i + 1]) - Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.flowModel.Medium.pressure(pipe4.flowModel.states[i])) for i in 1:6) * pipe4.flowModel.nParallel;
//   pipe4.flowModel.dps_fg = array(pipe4.flowModel.Fs_fg[i] / pipe4.flowModel.nParallel * 2.0 / (pipe4.flowModel.crossAreas[i] + pipe4.flowModel.crossAreas[i + 1]) for i in 1:6);
//   pipe4.flowModel.Is = array(pipe4.flowModel.m_flows[i] * pipe4.flowModel.pathLengths[i] for i in 1:6);
//   der(pipe4.flowModel.Is[1]) = pipe4.flowModel.Ib_flows[1] - pipe4.flowModel.Fs_p[1] - pipe4.flowModel.Fs_fg[1];
//   der(pipe4.flowModel.Is[2]) = pipe4.flowModel.Ib_flows[2] - pipe4.flowModel.Fs_p[2] - pipe4.flowModel.Fs_fg[2];
//   der(pipe4.flowModel.Is[3]) = pipe4.flowModel.Ib_flows[3] - pipe4.flowModel.Fs_p[3] - pipe4.flowModel.Fs_fg[3];
//   der(pipe4.flowModel.Is[4]) = pipe4.flowModel.Ib_flows[4] - pipe4.flowModel.Fs_p[4] - pipe4.flowModel.Fs_fg[4];
//   der(pipe4.flowModel.Is[5]) = pipe4.flowModel.Ib_flows[5] - pipe4.flowModel.Fs_p[5] - pipe4.flowModel.Fs_fg[5];
//   der(pipe4.flowModel.Is[6]) = pipe4.flowModel.Ib_flows[6] - pipe4.flowModel.Fs_p[6] - pipe4.flowModel.Fs_fg[6];
//   pipe4.vs = array(0.5 * (pipe4.m_flows[i] + pipe4.m_flows[i + 1]) / pipe4.mediums[i].d / pipe4.crossAreas[i] for i in 1:5) / pipe4.nParallel;
//   pipe4.heatTransfer.states[1].X = pipe4.mediums[1].state.X;
//   pipe4.heatTransfer.states[2].X = pipe4.mediums[2].state.X;
//   pipe4.heatTransfer.states[3].X = pipe4.mediums[3].state.X;
//   pipe4.heatTransfer.states[4].X = pipe4.mediums[4].state.X;
//   pipe4.heatTransfer.states[5].X = pipe4.mediums[5].state.X;
//   pipe4.heatTransfer.surfaceAreas = {pipe4.perimeter * 10.0, pipe4.perimeter * 10.0, pipe4.perimeter * 10.0, pipe4.perimeter * 10.0, pipe4.perimeter * 10.0};
//   pipe4.heatTransfer.Ts = array(Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.heatTransfer.Medium.temperature(pipe4.heatTransfer.states[$i1]) for $i1 in 1:5);
//   pipe4.heatTransfer.vs = pipe4.vs;
//   pipe4.heatTransfer.lengths = {10.0, 10.0, 10.0, 10.0, 10.0};
//   pipe4.heatTransfer.dimensions = pipe4.dimensions;
//   pipe4.heatTransfer.roughnesses = pipe4.roughnesses;
//   pipe4.heatTransfer.Ts[1] = pipe4.heatTransfer.heatPorts[1].T;
//   pipe4.heatTransfer.Ts[2] = pipe4.heatTransfer.heatPorts[2].T;
//   pipe4.heatTransfer.Ts[3] = pipe4.heatTransfer.heatPorts[3].T;
//   pipe4.heatTransfer.Ts[4] = pipe4.heatTransfer.heatPorts[4].T;
//   pipe4.heatTransfer.Ts[5] = pipe4.heatTransfer.heatPorts[5].T;
//   pipe4.heatTransfer.Q_flows[1] = pipe4.heatTransfer.heatPorts[1].Q_flow;
//   pipe4.heatTransfer.Q_flows[2] = pipe4.heatTransfer.heatPorts[2].Q_flow;
//   pipe4.heatTransfer.Q_flows[3] = pipe4.heatTransfer.heatPorts[3].Q_flow;
//   pipe4.heatTransfer.Q_flows[4] = pipe4.heatTransfer.heatPorts[4].Q_flow;
//   pipe4.heatTransfer.Q_flows[5] = pipe4.heatTransfer.heatPorts[5].Q_flow;
//   pipe4.Qb_flows[1] = pipe4.heatTransfer.Q_flows[1];
//   pipe4.Qb_flows[2] = pipe4.heatTransfer.Q_flows[2];
//   pipe4.Qb_flows[3] = pipe4.heatTransfer.Q_flows[3];
//   pipe4.Qb_flows[4] = pipe4.heatTransfer.Q_flows[4];
//   pipe4.Qb_flows[5] = pipe4.heatTransfer.Q_flows[5];
//   pipe4.Wb_flows[2:4] = array(pipe4.vs[i] * pipe4.crossAreas[i] * ((pipe4.mediums[i + 1].p - pipe4.mediums[i - 1].p) / 2.0 + (pipe4.flowModel.dps_fg[i] + pipe4.flowModel.dps_fg[i + 1]) / 2.0 - system.g * 10.0 * pipe4.mediums[i].d) for i in 2:4) * pipe4.nParallel;
//   pipe4.Wb_flows[1] = pipe4.vs[1] * pipe4.crossAreas[1] * ((pipe4.mediums[2].p - pipe4.port_a.p) / 1.5 + pipe4.flowModel.dps_fg[1] + pipe4.flowModel.dps_fg[2] / 2.0 - system.g * 10.0 * pipe4.mediums[1].d) * pipe4.nParallel;
//   pipe4.Wb_flows[5] = pipe4.vs[5] * pipe4.crossAreas[5] * ((pipe4.port_b.p - pipe4.mediums[4].p) / 1.5 + pipe4.flowModel.dps_fg[5] / 2.0 + pipe4.flowModel.dps_fg[6] - system.g * 10.0 * pipe4.mediums[5].d) * pipe4.nParallel;
//   pipe4.n110[1] = 5.0;
//   pipe4.n110[2] = 10.0;
//   pipe4.n110[3] = 10.0;
//   pipe4.n110[4] = 10.0;
//   pipe4.n110[5] = 10.0;
//   pipe4.n110[6] = 5.0;
//   pipe4.n111[1] = 5.0;
//   pipe4.n111[2] = 10.0;
//   pipe4.n111[3] = 10.0;
//   pipe4.n111[4] = 10.0;
//   pipe4.n111[5] = 10.0;
//   pipe4.n111[6] = 5.0;
//   pipe4.n112[1] = pipe4.crossAreas[1];
//   pipe4.n112[2] = pipe4.crossAreas[1];
//   pipe4.n112[3] = pipe4.crossAreas[2];
//   pipe4.n112[4] = pipe4.crossAreas[3];
//   pipe4.n112[5] = pipe4.crossAreas[4];
//   pipe4.n112[6] = pipe4.crossAreas[5];
//   pipe4.n112[7] = pipe4.crossAreas[5];
//   pipe4.n114[1] = pipe4.dimensions[1];
//   pipe4.n114[2] = pipe4.dimensions[1];
//   pipe4.n114[3] = pipe4.dimensions[2];
//   pipe4.n114[4] = pipe4.dimensions[3];
//   pipe4.n114[5] = pipe4.dimensions[4];
//   pipe4.n114[6] = pipe4.dimensions[5];
//   pipe4.n114[7] = pipe4.dimensions[5];
//   pipe4.n115[1] = pipe4.roughnesses[1];
//   pipe4.n115[2] = pipe4.roughnesses[1];
//   pipe4.n115[3] = pipe4.roughnesses[2];
//   pipe4.n115[4] = pipe4.roughnesses[3];
//   pipe4.n115[5] = pipe4.roughnesses[4];
//   pipe4.n115[6] = pipe4.roughnesses[5];
//   pipe4.n115[7] = pipe4.roughnesses[5];
//   pipe4.mb_flows[1] = pipe4.m_flows[1] - pipe4.m_flows[2];
//   pipe4.mbXi_flows[1,1] = pipe4.mXi_flows[1,1] - pipe4.mXi_flows[2,1];
//   pipe4.Hb_flows[1] = pipe4.H_flows[1] - pipe4.H_flows[2];
//   pipe4.mb_flows[2] = pipe4.m_flows[2] - pipe4.m_flows[3];
//   pipe4.mbXi_flows[2,1] = pipe4.mXi_flows[2,1] - pipe4.mXi_flows[3,1];
//   pipe4.Hb_flows[2] = pipe4.H_flows[2] - pipe4.H_flows[3];
//   pipe4.mb_flows[3] = pipe4.m_flows[3] - pipe4.m_flows[4];
//   pipe4.mbXi_flows[3,1] = pipe4.mXi_flows[3,1] - pipe4.mXi_flows[4,1];
//   pipe4.Hb_flows[3] = pipe4.H_flows[3] - pipe4.H_flows[4];
//   pipe4.mb_flows[4] = pipe4.m_flows[4] - pipe4.m_flows[5];
//   pipe4.mbXi_flows[4,1] = pipe4.mXi_flows[4,1] - pipe4.mXi_flows[5,1];
//   pipe4.Hb_flows[4] = pipe4.H_flows[4] - pipe4.H_flows[5];
//   pipe4.mb_flows[5] = pipe4.m_flows[5] - pipe4.m_flows[6];
//   pipe4.mbXi_flows[5,1] = pipe4.mXi_flows[5,1] - pipe4.mXi_flows[6,1];
//   pipe4.Hb_flows[5] = pipe4.H_flows[5] - pipe4.H_flows[6];
//   pipe4.H_flows[2] = semiLinear(pipe4.m_flows[2], pipe4.mediums[1].h, pipe4.mediums[2].h);
//   pipe4.mXi_flows[2,1] = semiLinear(pipe4.m_flows[2], pipe4.mediums[1].Xi[1], pipe4.mediums[2].Xi[1]);
//   pipe4.H_flows[3] = semiLinear(pipe4.m_flows[3], pipe4.mediums[2].h, pipe4.mediums[3].h);
//   pipe4.mXi_flows[3,1] = semiLinear(pipe4.m_flows[3], pipe4.mediums[2].Xi[1], pipe4.mediums[3].Xi[1]);
//   pipe4.H_flows[4] = semiLinear(pipe4.m_flows[4], pipe4.mediums[3].h, pipe4.mediums[4].h);
//   pipe4.mXi_flows[4,1] = semiLinear(pipe4.m_flows[4], pipe4.mediums[3].Xi[1], pipe4.mediums[4].Xi[1]);
//   pipe4.H_flows[5] = semiLinear(pipe4.m_flows[5], pipe4.mediums[4].h, pipe4.mediums[5].h);
//   pipe4.mXi_flows[5,1] = semiLinear(pipe4.m_flows[5], pipe4.mediums[4].Xi[1], pipe4.mediums[5].Xi[1]);
//   pipe4.H_flows[1] = semiLinear(pipe4.port_a.m_flow, ($OMC$PositiveMax(-pipe2.port_b.m_flow, 1e-07) * pipe2.port_b.h_outflow + $OMC$PositiveMax(-pipe3.port_b.m_flow, 1e-07) * pipe3.port_b.h_outflow) / ($OMC$PositiveMax(-pipe2.port_b.m_flow, 1e-07) + $OMC$PositiveMax(-pipe3.port_b.m_flow, 1e-07)), pipe4.mediums[1].h);
//   pipe4.H_flows[6] = -semiLinear(pipe4.port_b.m_flow, boundary4.ports[1].h_outflow, pipe4.mediums[5].h);
//   pipe4.mXi_flows[1,1] = semiLinear(pipe4.port_a.m_flow, ($OMC$PositiveMax(-pipe2.port_b.m_flow, 1e-07) * pipe2.port_b.Xi_outflow[1] + $OMC$PositiveMax(-pipe3.port_b.m_flow, 1e-07) * pipe3.port_b.Xi_outflow[1]) / ($OMC$PositiveMax(-pipe2.port_b.m_flow, 1e-07) + $OMC$PositiveMax(-pipe3.port_b.m_flow, 1e-07)), pipe4.mediums[1].Xi[1]);
//   pipe4.mXi_flows[6,1] = -semiLinear(pipe4.port_b.m_flow, boundary4.ports[1].Xi_outflow[1], pipe4.mediums[5].Xi[1]);
//   pipe4.port_a.m_flow = pipe4.m_flows[1];
//   pipe4.port_b.m_flow = -pipe4.m_flows[6];
//   pipe4.port_a.h_outflow = pipe4.mediums[1].h;
//   pipe4.port_b.h_outflow = pipe4.mediums[5].h;
//   pipe4.port_a.Xi_outflow[1] = pipe4.mediums[1].Xi[1];
//   pipe4.port_b.Xi_outflow[1] = pipe4.mediums[5].Xi[1];
//   pipe4.state_a = Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.setState_phX(pipe4.port_a.p, ($OMC$PositiveMax(-pipe2.port_b.m_flow, 1e-07) * pipe2.port_b.h_outflow + $OMC$PositiveMax(-pipe3.port_b.m_flow, 1e-07) * pipe3.port_b.h_outflow) / ($OMC$PositiveMax(-pipe2.port_b.m_flow, 1e-07) + $OMC$PositiveMax(-pipe3.port_b.m_flow, 1e-07)), {($OMC$PositiveMax(-pipe2.port_b.m_flow, 1e-07) * pipe2.port_b.Xi_outflow[1] + $OMC$PositiveMax(-pipe3.port_b.m_flow, 1e-07) * pipe3.port_b.Xi_outflow[1]) / ($OMC$PositiveMax(-pipe2.port_b.m_flow, 1e-07) + $OMC$PositiveMax(-pipe3.port_b.m_flow, 1e-07))});
//   pipe4.state_b = Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.setState_phX(pipe4.port_b.p, boundary4.ports[1].h_outflow, {boundary4.ports[1].Xi_outflow[1]});
//   pipe4.statesFM[1] = pipe4.state_a;
//   pipe4.statesFM[2] = pipe4.mediums[1].state;
//   pipe4.statesFM[3] = pipe4.mediums[2].state;
//   pipe4.statesFM[4] = pipe4.mediums[3].state;
//   pipe4.statesFM[5] = pipe4.mediums[4].state;
//   pipe4.statesFM[6] = pipe4.mediums[5].state;
//   pipe4.statesFM[7] = pipe4.state_b;
//   pipe4.m_flows[1] = pipe4.flowModel.m_flows[1];
//   pipe4.m_flows[2] = pipe4.flowModel.m_flows[2];
//   pipe4.m_flows[3] = pipe4.flowModel.m_flows[3];
//   pipe4.m_flows[4] = pipe4.flowModel.m_flows[4];
//   pipe4.m_flows[5] = pipe4.flowModel.m_flows[5];
//   pipe4.m_flows[6] = pipe4.flowModel.m_flows[6];
//   pipe4.n113[1] = pipe4.m_flows[1] / Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.density(pipe4.state_a) / pipe4.crossAreas[1] / pipe4.nParallel;
//   pipe4.n113[2] = pipe4.vs[1];
//   pipe4.n113[3] = pipe4.vs[2];
//   pipe4.n113[4] = pipe4.vs[3];
//   pipe4.n113[5] = pipe4.vs[4];
//   pipe4.n113[6] = pipe4.vs[5];
//   pipe4.n113[7] = pipe4.m_flows[6] / Modelica.Fluid.Examples.BranchingDynamicPipes.pipe4.Medium.density(pipe4.state_b) / pipe4.crossAreas[5] / pipe4.nParallel;
//   pipe4.ms[1] = pipe4.fluidVolumes[1] * pipe4.mediums[1].d;
//   pipe4.mXis[1,1] = pipe4.ms[1] * pipe4.mediums[1].Xi[1];
//   pipe4.Us[1] = pipe4.ms[1] * pipe4.mediums[1].u;
//   pipe4.ms[2] = pipe4.fluidVolumes[2] * pipe4.mediums[2].d;
//   pipe4.mXis[2,1] = pipe4.ms[2] * pipe4.mediums[2].Xi[1];
//   pipe4.Us[2] = pipe4.ms[2] * pipe4.mediums[2].u;
//   pipe4.ms[3] = pipe4.fluidVolumes[3] * pipe4.mediums[3].d;
//   pipe4.mXis[3,1] = pipe4.ms[3] * pipe4.mediums[3].Xi[1];
//   pipe4.Us[3] = pipe4.ms[3] * pipe4.mediums[3].u;
//   pipe4.ms[4] = pipe4.fluidVolumes[4] * pipe4.mediums[4].d;
//   pipe4.mXis[4,1] = pipe4.ms[4] * pipe4.mediums[4].Xi[1];
//   pipe4.Us[4] = pipe4.ms[4] * pipe4.mediums[4].u;
//   pipe4.ms[5] = pipe4.fluidVolumes[5] * pipe4.mediums[5].d;
//   pipe4.mXis[5,1] = pipe4.ms[5] * pipe4.mediums[5].Xi[1];
//   pipe4.Us[5] = pipe4.ms[5] * pipe4.mediums[5].u;
//   der(pipe4.Us[1]) = pipe4.Hb_flows[1] + pipe4.Wb_flows[1] + pipe4.Qb_flows[1];
//   der(pipe4.Us[2]) = pipe4.Hb_flows[2] + pipe4.Wb_flows[2] + pipe4.Qb_flows[2];
//   der(pipe4.Us[3]) = pipe4.Hb_flows[3] + pipe4.Wb_flows[3] + pipe4.Qb_flows[3];
//   der(pipe4.Us[4]) = pipe4.Hb_flows[4] + pipe4.Wb_flows[4] + pipe4.Qb_flows[4];
//   der(pipe4.Us[5]) = pipe4.Hb_flows[5] + pipe4.Wb_flows[5] + pipe4.Qb_flows[5];
//   der(pipe4.ms[1]) = pipe4.mb_flows[1];
//   der(pipe4.ms[2]) = pipe4.mb_flows[2];
//   der(pipe4.ms[3]) = pipe4.mb_flows[3];
//   der(pipe4.ms[4]) = pipe4.mb_flows[4];
//   der(pipe4.ms[5]) = pipe4.mb_flows[5];
//   der(pipe4.mXis[1,1]) = pipe4.mbXi_flows[1,1];
//   der(pipe4.mXis[2,1]) = pipe4.mbXi_flows[2,1];
//   der(pipe4.mXis[3,1]) = pipe4.mbXi_flows[3,1];
//   der(pipe4.mXis[4,1]) = pipe4.mbXi_flows[4,1];
//   der(pipe4.mXis[5,1]) = pipe4.mbXi_flows[5,1];
//   assert(boundary4.medium.T >= 190.0 and boundary4.medium.T <= 647.0, \"
//   Temperature T is not in the allowed range
//   190.0 K <= (T =\" + String(boundary4.medium.T, 6, 0, true) + \" K) <= 647.0 K
//   required from medium model \\\"\" + \"Moist air\" + \"\\\".\");
//   boundary4.medium.MM = 1.0 / (boundary4.medium.Xi[1] / 0.01801528 + (1.0 - boundary4.medium.Xi[1]) / 0.0289651159);
//   boundary4.medium.n121 = min(Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.saturationPressure(boundary4.medium.T), 0.999 * boundary4.medium.p);
//   boundary4.medium.n119 = min(boundary4.medium.n121 * 0.6219647130774989 / max(1e-13, boundary4.medium.p - boundary4.medium.n121) * (1.0 - boundary4.medium.Xi[1]), 1.0);
//   boundary4.medium.n116 = max(boundary4.medium.Xi[1] - boundary4.medium.n119, 0.0);
//   boundary4.medium.n117 = boundary4.medium.Xi[1] - boundary4.medium.n116;
//   boundary4.medium.n118 = 1.0 - boundary4.medium.Xi[1];
//   boundary4.medium.h = Modelica.Fluid.Examples.BranchingDynamicPipes.boundary4.Medium.specificEnthalpy_pTX(boundary4.medium.p, boundary4.medium.T, boundary4.medium.Xi);
//   boundary4.medium.R = 287.0512249529787 * boundary4.medium.n118 / (1.0 - boundary4.medium.n116) + 461.5233290850878 * boundary4.medium.n117 / (1.0 - boundary4.medium.n116);
//   boundary4.medium.u = boundary4.medium.h - boundary4.medium.R * boundary4.medium.T;
//   boundary4.medium.d = boundary4.medium.p / (boundary4.medium.R * boundary4.medium.T);
//   boundary4.medium.state.p = boundary4.medium.p;
//   boundary4.medium.state.T = boundary4.medium.T;
//   boundary4.medium.state.X[1] = boundary4.medium.X[1];
//   boundary4.medium.state.X[2] = boundary4.medium.X[2];
//   boundary4.medium.n120 = 0.6219647130774989 * boundary4.medium.n121 / max(1e-13, boundary4.medium.p - boundary4.medium.n121);
//   boundary4.medium.x_water = boundary4.medium.Xi[1] / max(boundary4.medium.n118, 1e-13);
//   boundary4.medium.phi = boundary4.medium.p / boundary4.medium.n121 * boundary4.medium.Xi[1] / (boundary4.medium.Xi[1] + 0.6219647130774989 * boundary4.medium.n118);
//   boundary4.medium.Xi[1] = boundary4.medium.X[1];
//   boundary4.medium.X[2] = 1.0 - boundary4.medium.Xi[1];
//   assert(boundary4.medium.X[1] >= -1e-05 and boundary4.medium.X[1] <= 1.00001, \"Mass fraction X[\" + String(1, 0, true) + \"] = \" + String(boundary4.medium.X[1], 6, 0, true) + \"of substance \" + \"water\" + \"
//   of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(boundary4.medium.X[2] >= -1e-05 and boundary4.medium.X[2] <= 1.00001, \"Mass fraction X[\" + String(2, 0, true) + \"] = \" + String(boundary4.medium.X[2], 6, 0, true) + \"of substance \" + \"air\" + \"
//   of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(boundary4.medium.p >= 0.0, \"Pressure (= \" + String(boundary4.medium.p, 6, 0, true) + \" Pa) of medium \\\"\" + \"Moist air\" + \"\\\" is negative
//   (Temperature = \" + String(boundary4.medium.T, 6, 0, true) + \" K)\");
//   Modelica.Fluid.Utilities.checkBoundary(\"Moist air\", {\"water\", \"air\"}, false, true, boundary4.n125, \"Boundary_pT\");
//   boundary4.n124 = boundary4.T;
//   boundary4.n125[1] = boundary4.X[1];
//   boundary4.n125[2] = boundary4.X[2];
//   boundary4.medium.p = boundary4.n123;
//   boundary4.medium.T = boundary4.n124;
//   boundary4.medium.Xi[1] = boundary4.n125[1];
//   boundary4.ports[1].p = boundary4.medium.p;
//   boundary4.ports[1].h_outflow = boundary4.medium.h;
//   boundary4.ports[1].Xi_outflow[1] = boundary4.medium.Xi[1];
//   ramp1.y = ramp1.offset + (if time < ramp1.startTime then 0.0 else if time < ramp1.startTime + ramp1.duration then (time - ramp1.startTime) * ramp1.height / ramp1.duration else ramp1.height);
//   heat2[1].port.Q_flow = -heat2[1].Q_flow * (1.0 + heat2[1].alpha * (heat2[1].port.T - heat2[1].T_ref));
//   heat2[2].port.Q_flow = -heat2[2].Q_flow * (1.0 + heat2[2].alpha * (heat2[2].port.T - heat2[2].T_ref));
//   heat2[3].port.Q_flow = -heat2[3].Q_flow * (1.0 + heat2[3].alpha * (heat2[3].port.T - heat2[3].T_ref));
//   heat2[4].port.Q_flow = -heat2[4].Q_flow * (1.0 + heat2[4].alpha * (heat2[4].port.T - heat2[4].T_ref));
//   heat2[5].port.Q_flow = -heat2[5].Q_flow * (1.0 + heat2[5].alpha * (heat2[5].port.T - heat2[5].T_ref));
// end Modelica.Fluid.Examples.BranchingDynamicPipes;
// "
// ""
// endResult
