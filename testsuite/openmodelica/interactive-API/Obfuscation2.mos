// name: Obfuscation2
// keywords:
// status: correct
// cflags: -d=newInst
//

setCommandLineOptions("--obfuscate=protected");
loadModel(Modelica, {"3.2.3"}); getErrorString();
instantiateModel(Modelica.Fluid.Examples.BranchingDynamicPipes); getErrorString();

// Result:
// true
// true
// ""
// "function n1.n101.n946.n949
//   input Real n7804(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   output Real n1737(quantity = \"ThermodynamicTemperature\", unit = \"degC\");
// algorithm
//   n1737 := n7804 - 273.15;
// end n1.n101.n946.n949;
//
// function n1.n101.n946.n993
//   input Real n12888(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   output Real n12889(quantity = \"Pressure\", unit = \"bar\");
// algorithm
//   n12889 := n12888 / 100000.0;
// end n1.n101.n946.n993;
//
// function n1.n11.n681.n682
//   input String n12660;
//
//   external \"C\" ModelicaError(n12660);
// end n1.n11.n681.n682;
//
// function n1.n7656.n102.n8149.n7835.n7670.n10111
//   input Real n403(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   input Real n3331(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
//   input Real[:] n6343(quantity = fill(\"MassFraction\", size(n6343, 1)), unit = fill(\"kg/kg\", size(n6343, 1)), min = fill(0.0, size(n6343, 1)), max = fill(1.0, size(n6343, 1)), nominal = fill(0.1, size(n6343, 1)));
//   output Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
// algorithm
//   n217 := n1.n7656.n102.n8149.n7835.n7670.n10111.n12.n8551(n3331, 190.0, 647.0, n403, n6343[1:1], n1.n7671.n9351.n9473.n10104(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), 1e-13);
// end n1.n7656.n102.n8149.n7835.n7670.n10111;
//
// function n1.n7656.n102.n8149.n7835.n7670.n10111.n12.n8551
//   input Real n9469;
//   input Real n5250;
//   input Real n5263;
//   input Real n7786 = 0.0;
//   input Real[:] n6343 = {};
//   input n1.n7656.n102.n8149.n7835.n7670.n10111.n12.n9471 n9476;
//   input Real n9964 = 1e-13;
//   output Real n9472;
//   protected constant Real n23 = 1e-15;
//   protected constant Real n9965 = 1e-10;
//   protected Real n58;
//   protected Real n136;
//   protected Real n768;
//   protected Real n497;
//   protected Real n61;
//   protected Real n403;
//   protected Real n769;
//   protected Real n723;
//   protected Real n770;
//   protected Real n771;
//   protected Real n772;
//   protected Real n773;
//   protected Boolean n774 = false;
//   protected Real n9966 = n5250 - n9965;
//   protected Real n9967 = n5263 + n9965;
//   protected Real n130 = n9966;
//   protected Real n490 = n9967;
// algorithm
//   n771 := n1.n7656.n102.n8149.n7835.n7670.n10111.n12.n9475(n9966, n7786, n6343, n9476) - n9469;
//   n772 := n1.n7656.n102.n8149.n7835.n7670.n10111.n12.n9475(n9967, n7786, n6343, n9476) - n9469;
//   n773 := n772;
//   if n771 > 0.0 and n772 > 0.0 or n771 < 0.0 and n772 < 0.0 then
//     n1.n11.n681.n682(\"The arguments x_min and x_max to OneNonLinearEquation.solve(..)
//     do not bracket the root of the single non-linear equation:
//       x_min  = \" + String(n9966, 6, 0, true) + \"
//     \" + \"  x_max  = \" + String(n9967, 6, 0, true) + \"
//     \" + \"  y_zero = \" + String(n9469, 6, 0, true) + \"
//     \" + \"  fa = f(x_min) - y_zero = \" + String(n771, 6, 0, true) + \"
//     \" + \"  fb = f(x_max) - y_zero = \" + String(n772, 6, 0, true) + \"
//     \" + \"fa and fb must have opposite sign which is not the case\");
//   end if;
//   n58 := n130;
//   n773 := n771;
//   n768 := n490 - n130;
//   n136 := n768;
//   while not n774 loop
//     if abs(n773) < abs(n772) then
//       n130 := n490;
//       n490 := n58;
//       n58 := n130;
//       n771 := n772;
//       n772 := n773;
//       n773 := n771;
//     end if;
//     n770 := 2.0 * n23 * abs(n490) + n9964;
//     n497 := (n58 - n490) / 2.0;
//     if abs(n497) <= n770 or n772 == 0.0 then
//       n774 := true;
//       n9472 := n490;
//     else
//       if abs(n768) < n770 or abs(n771) <= abs(n772) then
//         n768 := n497;
//         n136 := n768;
//       else
//         n61 := n772 / n771;
//         if n130 == n58 then
//           n403 := 2.0 * n497 * n61;
//           n769 := 1.0 - n61;
//         else
//           n769 := n771 / n773;
//           n723 := n772 / n773;
//           n403 := n61 * (2.0 * n497 * n769 * (n769 - n723) - (n490 - n130) * (n723 - 1.0));
//           n769 := (n769 - 1.0) * (n723 - 1.0) * (n61 - 1.0);
//         end if;
//         if n403 > 0.0 then
//           n769 := -n769;
//         else
//           n403 := -n403;
//         end if;
//         n61 := n768;
//         n768 := n136;
//         if 2.0 * n403 < 3.0 * n497 * n769 - abs(n770 * n769) and n403 < abs(0.5 * n61 * n769) then
//           n136 := n403 / n769;
//         else
//           n768 := n497;
//           n136 := n768;
//         end if;
//       end if;
//       n130 := n490;
//       n771 := n772;
//       n490 := n490 + (if abs(n136) > n770 then n136 else if n497 > 0.0 then n770 else -n770);
//       n772 := n1.n7656.n102.n8149.n7835.n7670.n10111.n12.n9475(n490, n7786, n6343, n9476) - n9469;
//       if n772 > 0.0 and n773 > 0.0 or n772 < 0.0 and n773 < 0.0 then
//         n58 := n130;
//         n773 := n771;
//         n768 := n490 - n130;
//         n136 := n768;
//       end if;
//     end if;
//   end while;
// end n1.n7656.n102.n8149.n7835.n7670.n10111.n12.n8551;
//
// function n1.n7656.n102.n8149.n7835.n7670.n10111.n12.n9471 \"Automatically generated record constructor for n1.n7656.n102.n8149.n7835.n7670.n10111.n12.n9471\"
//   input String n59;
//   input Real n9229;
//   input Real n9787;
//   input Real n5519;
//   input Real n10373;
//   input Real[7] n10374;
//   input Real[2] n10375;
//   input Real[7] n10376;
//   input Real[2] n10377;
//   input Real n344;
//   output n9471 res;
// end n1.n7656.n102.n8149.n7835.n7670.n10111.n12.n9471;
//
// function n1.n7656.n102.n8149.n7835.n7670.n10111.n12.n9475
//   input Real n637;
//   input Real n403 = 0.0;
//   input Real[:] n6343 = {};
//   input n1.n7656.n102.n8149.n7835.n7670.n10111.n12.n9471 n9476;
//   output Real n159;
// algorithm
//   n159 := n1.n7656.n102.n8149.n7835.n7670.n10138(n403, n637, n6343);
// end n1.n7656.n102.n8149.n7835.n7670.n10111.n12.n9475;
//
// function n1.n7656.n102.n8149.n7835.n7670.n10117
//   input Real n7827(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   output Real n7826(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0);
//   protected Real n10118(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 647.096;
//   protected Real n10119(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 22064000.0;
//   protected Real[:] n130 = {-7.85951783, 1.84408259, -11.7866497, 22.6807411, -15.9618719, 1.80122502};
//   protected Real[:] n228 = {1.0, 1.5, 3.0, 3.5, 4.0, 7.5};
//   protected Real n1968 = 1.0 - n7827 / n10118;
// algorithm
//   n7826 := exp((n130[1] * n1968 ^ n228[1] + n130[2] * n1968 ^ n228[2] + n130[3] * n1968 ^ n228[3] + n130[4] * n1968 ^ n228[4] + n130[5] * n1968 ^ n228[5] + n130[6] * n1968 ^ n228[6]) * n10118 / n7827) * n10119;
// end n1.n7656.n102.n8149.n7835.n7670.n10117;
//
// function n1.n7656.n102.n8149.n7835.n7670.n10120
//   input Real n7827(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   input Real n10121(unit = \"K/s\");
//   output Real n10122(unit = \"Pa/s\");
//   protected Real n10118(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 647.096;
//   protected Real n10119(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 22064000.0;
//   protected Real[:] n130 = {-7.85951783, 1.84408259, -11.7866497, 22.6807411, -15.9618719, 1.80122502};
//   protected Real[:] n228 = {1.0, 1.5, 3.0, 3.5, 4.0, 7.5};
//   protected Real n1968 = 1.0 - n7827 / n10118;
//   protected Real n10123 = -1.0 / n10118 * n10121;
//   protected Real n1969 = n130[1] * n1968 ^ n228[1] + n130[2] * n1968 ^ n228[2] + n130[3] * n1968 ^ n228[3] + n130[4] * n1968 ^ n228[4] + n130[5] * n1968 ^ n228[5] + n130[6] * n1968 ^ n228[6];
// algorithm
//   n10122 := exp(n1969 * n10118 / n7827) * n10119 * ((n130[1] * n1968 ^ (n228[1] - 1.0) * n228[1] * n10123 + n130[2] * n1968 ^ (n228[2] - 1.0) * n228[2] * n10123 + n130[3] * n1968 ^ (n228[3] - 1.0) * n228[3] * n10123 + n130[4] * n1968 ^ (n228[4] - 1.0) * n228[4] * n10123 + n130[5] * n1968 ^ (n228[5] - 1.0) * n228[5] * n10123 + n130[6] * n1968 ^ (n228[6] - 1.0) * n228[6] * n10123) * n10118 / n7827 - n1969 * n10118 * n10121 / n7827 ^ 2.0);
// end n1.n7656.n102.n8149.n7835.n7670.n10120;
//
// function n1.n7656.n102.n8149.n7835.n7670.n10124
//   input Real n7827(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   output Real n7826(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0);
//   protected Real n10125(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 273.16;
//   protected Real n10126(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 611.657;
//   protected Real[:] n130 = {-13.928169, 34.7078238};
//   protected Real[:] n228 = {-1.5, -1.25};
//   protected Real n1968 = n7827 / n10125;
// algorithm
//   n7826 := exp(n130[1] - n130[1] * n1968 ^ n228[1] + n130[2] - n130[2] * n1968 ^ n228[2]) * n10126;
// end n1.n7656.n102.n8149.n7835.n7670.n10124;
//
// function n1.n7656.n102.n8149.n7835.n7670.n10127
//   input Real n7827(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   input Real n10121(unit = \"K/s\");
//   output Real n10122(unit = \"Pa/s\");
//   protected Real n10125(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 273.16;
//   protected Real n10126(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 611.657;
//   protected Real[:] n130 = {-13.928169, 34.7078238};
//   protected Real[:] n228 = {-1.5, -1.25};
//   protected Real n1968 = n7827 / n10125;
//   protected Real n10123 = n10121 / n10125;
// algorithm
//   n10122 := exp(n130[1] - n130[1] * n1968 ^ n228[1] + n130[2] - n130[2] * n1968 ^ n228[2]) * n10126 * ((-n130[1] * n1968 ^ (n228[1] - 1.0) * n228[1] * n10123) - n130[2] * n1968 ^ (n228[2] - 1.0) * n228[2] * n10123);
// end n1.n7656.n102.n8149.n7835.n7670.n10127;
//
// function n1.n7656.n102.n8149.n7835.n7670.n10128
//   input Real n7827(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   input Real n10121(unit = \"K/s\");
//   output Real n10122(unit = \"Pa/s\");
// algorithm
//   n10122 := n1.n7656.n102.n8149.n7835.n7670.n11.n10129(n1.n7656.n102.n8149.n7835.n7670.n10117(n7827), n1.n7656.n102.n8149.n7835.n7670.n10124(n7827), n7827 - 273.16, 1.0, n1.n7656.n102.n8149.n7835.n7670.n10120(n7827, n10121), n1.n7656.n102.n8149.n7835.n7670.n10127(n7827, n10121), n10121, 0.0);
// end n1.n7656.n102.n8149.n7835.n7670.n10128;
//
// function n1.n7656.n102.n8149.n7835.n7670.n10136
//   input Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   output Real n3331(quantity = \"SpecificEnergy\", unit = \"J/kg\");
// algorithm
//   n3331 := n1.n7656.n102.n8149.n7835.n7670.n11.n8436(4200.0 * (n217 - 273.15), 2050.0 * (n217 - 273.15) - 333000.0, n217 - 273.16, 0.1);
// end n1.n7656.n102.n8149.n7835.n7670.n10136;
//
// function n1.n7656.n102.n8149.n7835.n7670.n10137
//   input Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   input Real n8197(unit = \"K/s\");
//   output Real n9441(unit = \"J/(kg.s)\");
// algorithm
//   n9441 := n1.n7656.n102.n8149.n7835.n7670.n11.n10129(4200.0 * (n217 - 273.15), 2050.0 * (n217 - 273.15) - 333000.0, n217 - 273.16, 0.1, 4200.0 * n8197, 2050.0 * n8197, n8197, 0.0);
// end n1.n7656.n102.n8149.n7835.n7670.n10137;
//
// function n1.n7656.n102.n8149.n7835.n7670.n10138
//   input Real n403(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   input Real[:] n6343(quantity = fill(\"MassFraction\", size(n6343, 1)), unit = fill(\"1\", size(n6343, 1)), min = fill(0.0, size(n6343, 1)), max = fill(1.0, size(n6343, 1)));
//   output Real n3331(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   protected Real n10110(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0);
//   protected Real n10108(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10105(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10106(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10107(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
// algorithm
//   n10110 := n1.n7656.n102.n8149.n7835.n7670.n8562(n217);
//   n10108 := min(n10110 * 0.6219647130774989 / max(1e-13, n403 - n10110) * (1.0 - n6343[1]), 1.0);
//   n10105 := max(n6343[1] - n10108, 0.0);
//   n10106 := n6343[1] - n10105;
//   n10107 := 1.0 - n6343[1];
//   n3331 := n1.n7671.n9351.n9473.n885.n10135(n1.n7671.n9351.n9473.n10104(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), n217, true, n1.n7671.n365.n8633.n9642.n9645, 2547494.319) * n10106 + n1.n7671.n9351.n9473.n885.n10135(n1.n7671.n9351.n9473.n10104(\"Air\", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), n217, true, n1.n7671.n365.n8633.n9642.n9645, 25104.684) * n10107 + n1.n7656.n102.n8149.n7835.n7670.n10136(n217) * n10105;
// end n1.n7656.n102.n8149.n7835.n7670.n10138;
//
// function n1.n7656.n102.n8149.n7835.n7670.n10139
//   input Real n403(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   input Real[:] n6343(quantity = fill(\"MassFraction\", size(n6343, 1)), unit = fill(\"1\", size(n6343, 1)), min = fill(0.0, size(n6343, 1)), max = fill(1.0, size(n6343, 1)));
//   input Real n4510(unit = \"Pa/s\");
//   input Real n8197(unit = \"K/s\");
//   input Real[:] n10140(unit = \"1/s\");
//   output Real n10059(unit = \"J/(kg.s)\");
//   protected Real n10110(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0);
//   protected Real n10108(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10105(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10106(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10107(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10109(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10141(unit = \"1/s\");
//   protected Real n10142(unit = \"1/s\");
//   protected Real n10143(unit = \"1/s\");
//   protected Real n9875(unit = \"Pa/s\");
//   protected Real n10144(unit = \"1/s\");
// algorithm
//   n10110 := n1.n7656.n102.n8149.n7835.n7670.n8562(n217);
//   n10109 := n10110 * 0.6219647130774989 / max(1e-13, n403 - n10110);
//   n10108 := min(n10109 * (1.0 - n6343[1]), 1.0);
//   n10105 := n1.n7656.n102.n8149.n7835.n7670.n11.n10145(n6343[1] - n10108, 0.0, 1e-05);
//   n10106 := n6343[1] - n10105;
//   n10107 := 1.0 - n6343[1];
//   n10142 := -n10140[1];
//   n9875 := n1.n7656.n102.n8149.n7835.n7670.n10128(n217, n8197);
//   n10144 := 0.6219647130774989 * (n9875 * (n403 - n10110) - n10110 * (n4510 - n9875)) / (n403 - n10110) / (n403 - n10110);
//   n10143 := n1.n7656.n102.n8149.n7835.n7670.n11.n10146(n6343[1] - n10108, 0.0, 1e-05, (1.0 + n10109) * n10140[1] - (1.0 - n6343[1]) * n10144, 0.0, 0.0);
//   n10141 := n10140[1] - n10143;
//   n10059 := n10106 * n1.n7671.n9351.n9473.n885.n10147(n1.n7671.n9351.n9473.n10104(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), n217, true, n1.n7671.n365.n8633.n9642.n9645, 2547494.319, n8197) + n10141 * n1.n7671.n9351.n9473.n885.n10135(n1.n7671.n9351.n9473.n10104(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), n217, true, n1.n7671.n365.n8633.n9642.n9645, 2547494.319) + n10107 * n1.n7671.n9351.n9473.n885.n10147(n1.n7671.n9351.n9473.n10104(\"Air\", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), n217, true, n1.n7671.n365.n8633.n9642.n9645, 25104.684, n8197) + n10142 * n1.n7671.n9351.n9473.n885.n10135(n1.n7671.n9351.n9473.n10104(\"Air\", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), n217, true, n1.n7671.n365.n8633.n9642.n9645, 25104.684) + n10105 * n1.n7656.n102.n8149.n7835.n7670.n10137(n217, n8197) + n10143 * n1.n7656.n102.n8149.n7835.n7670.n10136(n217);
// end n1.n7656.n102.n8149.n7835.n7670.n10139;
//
// function n1.n7656.n102.n8149.n7835.n7670.n11.n10129
//   input Real n8602;
//   input Real n10158;
//   input Real n637;
//   input Real n9237 = 1.0;
//   input Real n10161;
//   input Real n10162;
//   input Real n8496;
//   input Real n10163 = 0.0;
//   output Real n1629;
//   protected Real n10159;
//   protected Real n10160;
//   protected Real n10164;
//   protected Real n159;
// algorithm
//   n10160 := n637 / n9237;
//   n10159 := n10160 * 1.570796326794897;
//   n10164 := (n8496 - n10160 * n10163) / n9237;
//   if n10160 <= -0.99999999999 then
//     n159 := 0.0;
//   elseif n10160 >= 0.9999999999 then
//     n159 := 1.0;
//   else
//     n159 := (tanh(tan(n10159)) + 1.0) / 2.0;
//   end if;
//   n1629 := n10161 * n159 + (1.0 - n159) * n10162;
//   if abs(n10160) < 1.0 then
//     n1629 := n1629 + (n8602 - n10158) * n10164 * 1.570796326794897 / 2.0 / (cosh(tan(n10159)) * cos(n10159)) ^ 2.0;
//   end if;
// end n1.n7656.n102.n8149.n7835.n7670.n11.n10129;
//
// function n1.n7656.n102.n8149.n7835.n7670.n11.n10145
//   input Real n703;
//   input Real n704;
//   input Real n8496;
//   output Real n159;
// algorithm
//   n159 := max(n703, n704) + log(exp(4.0 / n8496 * (n703 - max(n703, n704))) + exp(4.0 / n8496 * (n704 - max(n703, n704)))) / (4.0 / n8496);
// end n1.n7656.n102.n8149.n7835.n7670.n11.n10145;
//
// function n1.n7656.n102.n8149.n7835.n7670.n11.n10146
//   input Real n703;
//   input Real n704;
//   input Real n8496;
//   input Real n10165;
//   input Real n10166;
//   input Real n9804;
//   output Real n7276;
// algorithm
//   n7276 := (if n703 > n704 then n10165 else n10166) + 0.25 * (((4.0 * (n10165 - (if n703 > n704 then n10165 else n10166)) / n8496 - 4.0 * (n703 - max(n703, n704)) * n9804 / n8496 ^ 2.0) * exp(4.0 * (n703 - max(n703, n704)) / n8496) + (4.0 * (n10166 - (if n703 > n704 then n10165 else n10166)) / n8496 - 4.0 * (n704 - max(n703, n704)) * n9804 / n8496 ^ 2.0) * exp(4.0 * (n704 - max(n703, n704)) / n8496)) * n8496 / (exp(4.0 * (n703 - max(n703, n704)) / n8496) + exp(4.0 * (n704 - max(n703, n704)) / n8496)) + log(exp(4.0 * (n703 - max(n703, n704)) / n8496) + exp(4.0 * (n704 - max(n703, n704)) / n8496)) * n9804);
// end n1.n7656.n102.n8149.n7835.n7670.n11.n10146;
//
// function n1.n7656.n102.n8149.n7835.n7670.n11.n8436
//   input Real n8602;
//   input Real n10158;
//   input Real n637;
//   input Real n9237 = 1.0;
//   output Real n1629;
//   protected Real n10159;
//   protected Real n10160;
//   protected Real n159;
// algorithm
//   n10160 := n637 / n9237;
//   n10159 := n10160 * 1.570796326794897;
//   if n10160 <= -0.999999999 then
//     n159 := 0.0;
//   elseif n10160 >= 0.999999999 then
//     n159 := 1.0;
//   else
//     n159 := (tanh(tan(n10159)) + 1.0) / 2.0;
//   end if;
//   n1629 := n8602 * n159 + (1.0 - n159) * n10158;
// end n1.n7656.n102.n8149.n7835.n7670.n11.n8436;
//
// function n1.n7656.n102.n8149.n7835.n7670.n523
//   input n1.n7656.n102.n8149.n7835.n7670.n8367 n865;
//   output Real n136(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
// algorithm
//   n136 := n865.n403 / (n1.n7656.n102.n8149.n7835.n7670.n9583(n865) * n865.n217);
// end n1.n7656.n102.n8149.n7835.n7670.n523;
//
// function n1.n7656.n102.n8149.n7835.n7670.n7785
//   input n1.n7656.n102.n8149.n7835.n7670.n8367 n865;
//   output Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
// algorithm
//   n217 := n865.n217;
// end n1.n7656.n102.n8149.n7835.n7670.n7785;
//
// function n1.n7656.n102.n8149.n7835.n7670.n7955
//   input Real n403(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   input Real n3331(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
//   input Real[:] n6343(quantity = fill(\"MassFraction\", size(n6343, 1)), unit = fill(\"kg/kg\", size(n6343, 1)), min = fill(0.0, size(n6343, 1)), max = fill(1.0, size(n6343, 1)), nominal = fill(0.1, size(n6343, 1))) = {0.01, 0.99};
//   output Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
// algorithm
//   n217 := n1.n7656.n102.n8149.n7835.n7670.n7785(n1.n7656.n102.n8149.n7835.n7670.n8338(n403, n3331, n6343));
// end n1.n7656.n102.n8149.n7835.n7670.n7955;
//
// function n1.n7656.n102.n8149.n7835.n7670.n7957
//   input Real n403(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   input Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   input Real[:] n6343(quantity = fill(\"MassFraction\", size(n6343, 1)), unit = fill(\"kg/kg\", size(n6343, 1)), min = fill(0.0, size(n6343, 1)), max = fill(1.0, size(n6343, 1)), nominal = fill(0.1, size(n6343, 1))) = {0.01, 0.99};
//   output Real n3331(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
// algorithm
//   n3331 := n1.n7656.n102.n8149.n7835.n7670.n8732(n1.n7656.n102.n8149.n7835.n7670.n8396(n403, n217, n6343));
// end n1.n7656.n102.n8149.n7835.n7670.n7957;
//
// function n1.n7656.n102.n8149.n7835.n7670.n8338
//   input Real n403(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   input Real n3331(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
//   input Real[:] n6343(quantity = fill(\"MassFraction\", size(n6343, 1)), unit = fill(\"kg/kg\", size(n6343, 1)), min = fill(0.0, size(n6343, 1)), max = fill(1.0, size(n6343, 1)), nominal = fill(0.1, size(n6343, 1))) = {0.01, 0.99};
//   output n1.n7656.n102.n8149.n7835.n7670.n8367 n865;
// algorithm
//   n865 := if size(n6343, 1) == 2 then n1.n7656.n102.n8149.n7835.n7670.n8367(n403, n1.n7656.n102.n8149.n7835.n7670.n10111(n403, n3331, n6343), n6343) else n1.n7656.n102.n8149.n7835.n7670.n8367(n403, n1.n7656.n102.n8149.n7835.n7670.n10111(n403, n3331, n6343), cat(1, n6343, {1.0 - sum(n6343)}));
// end n1.n7656.n102.n8149.n7835.n7670.n8338;
//
// function n1.n7656.n102.n8149.n7835.n7670.n8367 \"Automatically generated record constructor for n1.n7656.n102.n8149.n7835.n7670.n8367\"
//   input Real n403;
//   input Real n217;
//   input Real[2] n6343;
//   output n8367 res;
// end n1.n7656.n102.n8149.n7835.n7670.n8367;
//
// function n1.n7656.n102.n8149.n7835.n7670.n8396
//   input Real n403(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   input Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   input Real[:] n6343(quantity = fill(\"MassFraction\", size(n6343, 1)), unit = fill(\"kg/kg\", size(n6343, 1)), min = fill(0.0, size(n6343, 1)), max = fill(1.0, size(n6343, 1)), nominal = fill(0.1, size(n6343, 1))) = {0.01, 0.99};
//   output n1.n7656.n102.n8149.n7835.n7670.n8367 n865;
// algorithm
//   n865 := if size(n6343, 1) == 2 then n1.n7656.n102.n8149.n7835.n7670.n8367(n403, n217, n6343) else n1.n7656.n102.n8149.n7835.n7670.n8367(n403, n217, cat(1, n6343, {1.0 - sum(n6343)}));
// end n1.n7656.n102.n8149.n7835.n7670.n8396;
//
// function n1.n7656.n102.n8149.n7835.n7670.n8562
//   input Real n7827(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   output Real n7826(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
// algorithm
//   n7826 := n1.n7656.n102.n8149.n7835.n7670.n11.n8436(n1.n7656.n102.n8149.n7835.n7670.n10117(n7827), n1.n7656.n102.n8149.n7835.n7670.n10124(n7827), n7827 - 273.16, 1.0);
// end n1.n7656.n102.n8149.n7835.n7670.n8562;
//
// function n1.n7656.n102.n8149.n7835.n7670.n8732
//   input n1.n7656.n102.n8149.n7835.n7670.n8367 n865;
//   output Real n3331(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
// algorithm
//   n3331 := n1.n7656.n102.n8149.n7835.n7670.n10138(n865.n403, n865.n217, n865.n6343);
// end n1.n7656.n102.n8149.n7835.n7670.n8732;
//
// function n1.n7656.n102.n8149.n7835.n7670.n9583
//   input n1.n7656.n102.n8149.n7835.n7670.n8367 n865;
//   output Real n344(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\");
// algorithm
//   n344 := 287.0512249529787 * (1.0 - n865.n6343[1]) + 461.5233290850878 * n865.n6343[1];
// end n1.n7656.n102.n8149.n7835.n7670.n9583;
//
// function n1.n7656.n102.n8149.n7835.n7988.n7670.n7785
//   input n1.n7656.n102.n8149.n7835.n7988.n7670.n8367 n865;
//   output Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
// algorithm
//   n217 := n865.n217;
// end n1.n7656.n102.n8149.n7835.n7988.n7670.n7785;
//
// function n1.n7656.n102.n8149.n7835.n7988.n7670.n8367 \"Automatically generated record constructor for n1.n7656.n102.n8149.n7835.n7988.n7670.n8367\"
//   input Real n403;
//   input Real n217;
//   input Real[2] n6343;
//   output n8367 res;
// end n1.n7656.n102.n8149.n7835.n7988.n7670.n8367;
//
// function n1.n7656.n102.n8149.n7835.n8346.n7663.n12.n8476
//   input Real n8478(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real n8443(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0);
//   input Real n8444(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0);
//   input Real n8445(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0);
//   input Real n8446(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0);
//   input Real n2194(quantity = \"Length\", unit = \"m\");
//   input Real n6099(quantity = \"Length\", unit = \"m\", min = 0.0);
//   input Real n7704(quantity = \"Area\", unit = \"m2\");
//   input Real n8474(quantity = \"ReynoldsNumber\", unit = \"1\");
//   input Real n8475(quantity = \"ReynoldsNumber\", unit = \"1\");
//   input Real n3083(min = 0.0);
//   output Real n7744(quantity = \"MassFlowRate\", unit = \"kg/s\");
//   output Real n8479;
//   protected Real n457(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0);
//   protected Real n5456(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0);
//   protected Real n8487;
//   protected Real n2800(quantity = \"ReynoldsNumber\", unit = \"1\");
//   protected Real n8498;
//   protected Real n1201;
//   protected Real n1202;
// algorithm
//   if n8478 >= 0.0 then
//     n5456 := n8443;
//     n457 := n8445;
//   else
//     n5456 := n8444;
//     n457 := n8446;
//   end if;
//   n8487 := abs(n8478) * 2.0 * n6099 ^ 3.0 * n5456 / (n2194 * n457 * n457);
//   n1201 := 2.0 * n6099 ^ 3.0 * n5456 / (n2194 * n457 ^ 2.0);
//   n2800 := n8487 / 64.0;
//   n8498 := n1201 / 64.0;
//   if n2800 > n8474 then
//     n2800 := -2.0 * sqrt(n8487) * log10(2.51 / sqrt(n8487) + 0.27 * n3083);
//     n1202 := sqrt(n1201 * abs(n8478));
//     n8498 := 0.4342944819032518 * ((-2.0 * log(2.51 / n1202 + 0.27 * n3083) * n1201 / (2.0 * n1202)) + 5.02 / (2.0 * abs(n8478) * (2.51 / n1202 + 0.27 * n3083)));
//     if n2800 < n8475 then
//       (n2800, n8498) := n1.n7656.n102.n8149.n7835.n8346.n7663.n12.n8476.n8497(n8487, n8474, n8475, n3083, n8478);
//     end if;
//   end if;
//   n7744 := n7704 / n6099 * n457 * (if n8478 >= 0.0 then n2800 else -n2800);
//   n8479 := n7704 / n6099 * n457 * n8498;
// end n1.n7656.n102.n8149.n7835.n8346.n7663.n12.n8476;
//
// function n1.n7656.n102.n8149.n7835.n8346.n7663.n12.n8476.n8497
//   input Real n8487;
//   input Real n8474(quantity = \"ReynoldsNumber\", unit = \"1\");
//   input Real n8475(quantity = \"ReynoldsNumber\", unit = \"1\");
//   input Real n3083(min = 0.0);
//   input Real n8478(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   output Real n2800(quantity = \"ReynoldsNumber\", unit = \"1\");
//   output Real n8498;
//   protected Real n703 = log10(64.0 * n8474);
//   protected Real n233 = log10(n8474);
//   protected Real n8499 = 1.0;
//   protected Real n1202 = n3083 / 3.7 + 5.74 / n8475 ^ 0.9;
//   protected Real n637 = log10(n8487);
//   protected Real n159;
//   protected Real n8501;
//   protected Real n8490 = log10(n1202);
//   protected Real n1581 = 0.25 * (n8475 / n8490) ^ 2.0;
//   protected Real n8491 = 2.51 / sqrt(n1581) + 0.27 * n3083;
//   protected Real n704 = log10(n1581);
//   protected Real n8492 = -2.0 * sqrt(n1581) * log10(n8491);
//   protected Real n231 = log10(n8492);
//   protected Real n8500 = 0.5 + 1.090079149577162 / (n8492 * n8491);
// algorithm
//   (n159, n8501) := n1.n7656.n11.n8483(n637, n703, n704, n233, n231, n8499, n8500);
//   n2800 := 10.0 ^ n159;
//   n8498 := n2800 / abs(n8478) * n8501;
// end n1.n7656.n102.n8149.n7835.n8346.n7663.n12.n8476.n8497;
//
// function n1.n7656.n102.n8149.n7835.n8346.n7663.n8412
//   input Real n7744(quantity = \"MassFlowRate\", unit = \"kg/s\");
//   input Real n8443(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0);
//   input Real n8444(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0);
//   input Real n8445(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0);
//   input Real n8446(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0);
//   input Real n2194(quantity = \"Length\", unit = \"m\");
//   input Real n6099(quantity = \"Length\", unit = \"m\", min = 0.0);
//   input Real n7704(quantity = \"Area\", unit = \"m2\") = 3.141592653589793 * n6099 ^ 2.0 / 4.0;
//   input Real n8234(quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = 2.5e-05;
//   input Real n7750(quantity = \"MassFlowRate\", unit = \"kg/s\") = 0.01;
//   input Real n8328(quantity = \"ReynoldsNumber\", unit = \"1\") = 4000.0;
//   output Real n4510(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   protected Real n3083(min = 0.0) = n8234 / n6099;
//   protected Real n8475(quantity = \"ReynoldsNumber\", unit = \"1\") = n8328;
//   protected Real n457(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0);
//   protected Real n5456(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0);
//   protected Real n2800(quantity = \"ReynoldsNumber\", unit = \"1\");
//   protected Real n8487;
//   protected Real n8474(quantity = \"ReynoldsNumber\", unit = \"1\") = min(745.0 * exp(if n3083 <= 0.0065 then 1.0 else 0.0065 / n3083), n8328);
// algorithm
//   n5456 := if n7744 >= 0.0 then n8443 else n8444;
//   n457 := if n7744 >= 0.0 then n8445 else n8446;
//   n2800 := n6099 * abs(n7744) / (n7704 * n457);
//   n8487 := if n2800 <= n8474 then 64.0 * n2800 else if n2800 >= n8475 then 0.25 * (n2800 / log10(n3083 / 3.7 + 5.74 / n2800 ^ 0.9)) ^ 2.0 else n1.n7656.n102.n8149.n7835.n8346.n7663.n8412.n8488(n2800, n8474, n8475, n3083);
//   n4510 := n2194 * n457 * n457 / (2.0 * n5456 * n6099 * n6099 * n6099) * (if n7744 >= 0.0 then n8487 else -n8487);
// end n1.n7656.n102.n8149.n7835.n8346.n7663.n8412;
//
// function n1.n7656.n102.n8149.n7835.n8346.n7663.n8412.n8488
//   input Real n2800(quantity = \"ReynoldsNumber\", unit = \"1\");
//   input Real n8474(quantity = \"ReynoldsNumber\", unit = \"1\");
//   input Real n8475(quantity = \"ReynoldsNumber\", unit = \"1\");
//   input Real n3083;
//   output Real n8487;
//   protected Real n703 = log10(n8474);
//   protected Real n233 = log10(64.0 * n8474);
//   protected Real n8489 = 1.0;
//   protected Real n1201 = 1.121782646756099;
//   protected Real n1202 = n3083 / 3.7 + 5.74 / n8475 ^ 0.9;
//   protected Real n704 = log10(n8475);
//   protected Real n8496;
//   protected Real n8490 = log10(n1202);
//   protected Real n8494 = n704 - n703;
//   protected Real n1581 = 0.25 * (n8475 / n8490) ^ 2.0;
//   protected Real n8493 = 2.0 + 4.0 * n1201 / (n1202 * n8490 * n8475 ^ 0.9);
//   protected Real n8491 = 2.51 / sqrt(n1581) + 0.27 * n3083;
//   protected Real n231 = log10(n1581);
//   protected Real n8492 = -2.0 * sqrt(n1581) * log10(n8491);
//   protected Real n497 = (n231 - n233) / n8494;
//   protected Real n43 = (3.0 * n497 - 2.0 * n8489 - n8493) / n8494;
//   protected Real n45 = (n8489 + n8493 - 2.0 * n497) / (n8494 * n8494);
// algorithm
//   n8496 := log10(n2800 / n8474);
//   n8487 := 64.0 * n8474 * (n2800 / n8474) ^ (1.0 + n8496 * (n43 + n8496 * n45));
// end n1.n7656.n102.n8149.n7835.n8346.n7663.n8412.n8488;
//
// function n1.n7656.n102.n8149.n7835.n8346.n7663.n8415
//   input Real n4510(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real n8443(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0);
//   input Real n8444(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0);
//   input Real n8445(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0);
//   input Real n8446(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0);
//   input Real n2194(quantity = \"Length\", unit = \"m\");
//   input Real n6099(quantity = \"Length\", unit = \"m\", min = 0.0);
//   input Real n8447(unit = \"m2/s2\");
//   input Real n7704(quantity = \"Area\", unit = \"m2\") = 3.141592653589793 * n6099 ^ 2.0 / 4.0;
//   input Real n8234(quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = 2.5e-05;
//   input Real n8308(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 1.0;
//   input Real n8328(quantity = \"ReynoldsNumber\", unit = \"1\") = 4000.0;
//   output Real n7744(quantity = \"MassFlowRate\", unit = \"kg/s\");
//   protected Real n3083(min = 0.0) = n8234 / n6099;
//   protected Real n2800(quantity = \"ReynoldsNumber\", unit = \"1\");
//   protected Real n8475(quantity = \"ReynoldsNumber\", unit = \"1\") = n8328;
//   protected Real n8455(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   protected Real n8456(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   protected Real n8457(quantity = \"MassFlowRate\", unit = \"kg/s\");
//   protected Real n8458(quantity = \"MassFlowRate\", unit = \"kg/s\");
//   protected Real n8453(quantity = \"MassFlowRate\", unit = \"kg/s\");
//   protected Real n8454(quantity = \"MassFlowRate\", unit = \"kg/s\");
//   protected Real n8451(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = n8447 * n8443;
//   protected Real n8452(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = n8447 * n8444;
//   protected Real n8459(quantity = \"MassFlowRate\", unit = \"kg/s\") = 0.0;
//   protected Real n8461;
//   protected Real n8474(quantity = \"ReynoldsNumber\", unit = \"1\") = min((745.0 * exp(if n3083 <= 0.0065 then 1.0 else 0.0065 / n3083)) ^ 0.97, n8328);
//   protected Real n8460(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = (n8451 + n8452) / 2.0;
// algorithm
//   n8455 := max(n8451, n8452) + n8308;
//   n8456 := min(n8451, n8452) - n8308;
//   if n4510 >= n8455 then
//     n7744 := n1.n7656.n102.n8149.n7835.n8346.n7663.n12.n8476(n4510 - n8451, n8443, n8444, n8445, n8446, n2194, n6099, n7704, n8474, n8475, n3083)[1];
//   elseif n4510 <= n8456 then
//     n7744 := n1.n7656.n102.n8149.n7835.n8346.n7663.n12.n8476(n4510 - n8452, n8443, n8444, n8445, n8446, n2194, n6099, n7704, n8474, n8475, n3083)[1];
//   else
//     (n8457, n8453) := n1.n7656.n102.n8149.n7835.n8346.n7663.n12.n8476(n8455 - n8451, n8443, n8444, n8445, n8446, n2194, n6099, n7704, n8474, n8475, n3083);
//     (n8458, n8454) := n1.n7656.n102.n8149.n7835.n8346.n7663.n12.n8476(n8456 - n8452, n8443, n8444, n8445, n8446, n2194, n6099, n7704, n8474, n8475, n3083);
//     (n7744, n8461) := n1.n7656.n11.n8462(n8460, n8456, n8455, n8458, n8457, n8454, n8453);
//     if n4510 > n8460 then
//       n7744 := n1.n7656.n11.n8462(n4510, n8460, n8455, n8459, n8457, n8461, n8453)[1];
//     else
//       n7744 := n1.n7656.n11.n8462(n4510, n8456, n8460, n8458, n8459, n8454, n8461)[1];
//     end if;
//   end if;
// end n1.n7656.n102.n8149.n7835.n8346.n7663.n8415;
//
// function n1.n7656.n102.n8149.n7835.n8346.n7670.n523
//   input n1.n7656.n102.n8149.n7835.n8346.n7670.n8367 n865;
//   output Real n136(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
// algorithm
//   n136 := n865.n403 / (n1.n7656.n102.n8149.n7835.n8346.n7670.n9583(n865) * n865.n217);
// end n1.n7656.n102.n8149.n7835.n8346.n7670.n523;
//
// function n1.n7656.n102.n8149.n7835.n8346.n7670.n7786
//   input n1.n7656.n102.n8149.n7835.n8346.n7670.n8367 n865;
//   output Real n403(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
// algorithm
//   n403 := n865.n403;
// end n1.n7656.n102.n8149.n7835.n8346.n7670.n7786;
//
// function n1.n7656.n102.n8149.n7835.n8346.n7670.n8340
//   input n1.n7656.n102.n8149.n7835.n8346.n7670.n8367 n865;
//   output Real n4890(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
// algorithm
//   n4890 := 1e-06 * n1.n7671.n8128.n9970.n9971.n9972({9.739110288630587e-15, -3.135372487033391e-11, 4.300487659564222e-08, -3.822801629175824e-05, 0.05042787436718076, 17.23926013924253}, -150.0, 1000.0, n1.n101.n946.n949(n865.n217));
// end n1.n7656.n102.n8149.n7835.n8346.n7670.n8340;
//
// function n1.n7656.n102.n8149.n7835.n8346.n7670.n8367 \"Automatically generated record constructor for n1.n7656.n102.n8149.n7835.n8346.n7670.n8367\"
//   input Real n403;
//   input Real n217;
//   input Real[2] n6343;
//   output n8367 res;
// end n1.n7656.n102.n8149.n7835.n8346.n7670.n8367;
//
// function n1.n7656.n102.n8149.n7835.n8346.n7670.n9583
//   input n1.n7656.n102.n8149.n7835.n8346.n7670.n8367 n865;
//   output Real n344(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\");
// algorithm
//   n344 := 287.0512249529787 * (1.0 - n865.n6343[1]) + 461.5233290850878 * n865.n6343[1];
// end n1.n7656.n102.n8149.n7835.n8346.n7670.n9583;
//
// function n1.n7656.n102.n8149.n7836.n7670.n10111
//   input Real n403(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   input Real n3331(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
//   input Real[:] n6343(quantity = fill(\"MassFraction\", size(n6343, 1)), unit = fill(\"kg/kg\", size(n6343, 1)), min = fill(0.0, size(n6343, 1)), max = fill(1.0, size(n6343, 1)), nominal = fill(0.1, size(n6343, 1)));
//   output Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
// algorithm
//   n217 := n1.n7656.n102.n8149.n7836.n7670.n10111.n12.n8551(n3331, 190.0, 647.0, n403, n6343[1:1], n1.n7671.n9351.n9473.n10104(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), 1e-13);
// end n1.n7656.n102.n8149.n7836.n7670.n10111;
//
// function n1.n7656.n102.n8149.n7836.n7670.n10111.n12.n8551
//   input Real n9469;
//   input Real n5250;
//   input Real n5263;
//   input Real n7786 = 0.0;
//   input Real[:] n6343 = {};
//   input n1.n7656.n102.n8149.n7836.n7670.n10111.n12.n9471 n9476;
//   input Real n9964 = 1e-13;
//   output Real n9472;
//   protected constant Real n23 = 1e-15;
//   protected constant Real n9965 = 1e-10;
//   protected Real n58;
//   protected Real n136;
//   protected Real n768;
//   protected Real n497;
//   protected Real n61;
//   protected Real n403;
//   protected Real n769;
//   protected Real n723;
//   protected Real n770;
//   protected Real n771;
//   protected Real n772;
//   protected Real n773;
//   protected Boolean n774 = false;
//   protected Real n9966 = n5250 - n9965;
//   protected Real n9967 = n5263 + n9965;
//   protected Real n130 = n9966;
//   protected Real n490 = n9967;
// algorithm
//   n771 := n1.n7656.n102.n8149.n7836.n7670.n10111.n12.n9475(n9966, n7786, n6343, n9476) - n9469;
//   n772 := n1.n7656.n102.n8149.n7836.n7670.n10111.n12.n9475(n9967, n7786, n6343, n9476) - n9469;
//   n773 := n772;
//   if n771 > 0.0 and n772 > 0.0 or n771 < 0.0 and n772 < 0.0 then
//     n1.n11.n681.n682(\"The arguments x_min and x_max to OneNonLinearEquation.solve(..)
//     do not bracket the root of the single non-linear equation:
//       x_min  = \" + String(n9966, 6, 0, true) + \"
//     \" + \"  x_max  = \" + String(n9967, 6, 0, true) + \"
//     \" + \"  y_zero = \" + String(n9469, 6, 0, true) + \"
//     \" + \"  fa = f(x_min) - y_zero = \" + String(n771, 6, 0, true) + \"
//     \" + \"  fb = f(x_max) - y_zero = \" + String(n772, 6, 0, true) + \"
//     \" + \"fa and fb must have opposite sign which is not the case\");
//   end if;
//   n58 := n130;
//   n773 := n771;
//   n768 := n490 - n130;
//   n136 := n768;
//   while not n774 loop
//     if abs(n773) < abs(n772) then
//       n130 := n490;
//       n490 := n58;
//       n58 := n130;
//       n771 := n772;
//       n772 := n773;
//       n773 := n771;
//     end if;
//     n770 := 2.0 * n23 * abs(n490) + n9964;
//     n497 := (n58 - n490) / 2.0;
//     if abs(n497) <= n770 or n772 == 0.0 then
//       n774 := true;
//       n9472 := n490;
//     else
//       if abs(n768) < n770 or abs(n771) <= abs(n772) then
//         n768 := n497;
//         n136 := n768;
//       else
//         n61 := n772 / n771;
//         if n130 == n58 then
//           n403 := 2.0 * n497 * n61;
//           n769 := 1.0 - n61;
//         else
//           n769 := n771 / n773;
//           n723 := n772 / n773;
//           n403 := n61 * (2.0 * n497 * n769 * (n769 - n723) - (n490 - n130) * (n723 - 1.0));
//           n769 := (n769 - 1.0) * (n723 - 1.0) * (n61 - 1.0);
//         end if;
//         if n403 > 0.0 then
//           n769 := -n769;
//         else
//           n403 := -n403;
//         end if;
//         n61 := n768;
//         n768 := n136;
//         if 2.0 * n403 < 3.0 * n497 * n769 - abs(n770 * n769) and n403 < abs(0.5 * n61 * n769) then
//           n136 := n403 / n769;
//         else
//           n768 := n497;
//           n136 := n768;
//         end if;
//       end if;
//       n130 := n490;
//       n771 := n772;
//       n490 := n490 + (if abs(n136) > n770 then n136 else if n497 > 0.0 then n770 else -n770);
//       n772 := n1.n7656.n102.n8149.n7836.n7670.n10111.n12.n9475(n490, n7786, n6343, n9476) - n9469;
//       if n772 > 0.0 and n773 > 0.0 or n772 < 0.0 and n773 < 0.0 then
//         n58 := n130;
//         n773 := n771;
//         n768 := n490 - n130;
//         n136 := n768;
//       end if;
//     end if;
//   end while;
// end n1.n7656.n102.n8149.n7836.n7670.n10111.n12.n8551;
//
// function n1.n7656.n102.n8149.n7836.n7670.n10111.n12.n9471 \"Automatically generated record constructor for n1.n7656.n102.n8149.n7836.n7670.n10111.n12.n9471\"
//   input String n59;
//   input Real n9229;
//   input Real n9787;
//   input Real n5519;
//   input Real n10373;
//   input Real[7] n10374;
//   input Real[2] n10375;
//   input Real[7] n10376;
//   input Real[2] n10377;
//   input Real n344;
//   output n9471 res;
// end n1.n7656.n102.n8149.n7836.n7670.n10111.n12.n9471;
//
// function n1.n7656.n102.n8149.n7836.n7670.n10111.n12.n9475
//   input Real n637;
//   input Real n403 = 0.0;
//   input Real[:] n6343 = {};
//   input n1.n7656.n102.n8149.n7836.n7670.n10111.n12.n9471 n9476;
//   output Real n159;
// algorithm
//   n159 := n1.n7656.n102.n8149.n7836.n7670.n10138(n403, n637, n6343);
// end n1.n7656.n102.n8149.n7836.n7670.n10111.n12.n9475;
//
// function n1.n7656.n102.n8149.n7836.n7670.n10117
//   input Real n7827(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   output Real n7826(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0);
//   protected Real n10118(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 647.096;
//   protected Real n10119(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 22064000.0;
//   protected Real[:] n130 = {-7.85951783, 1.84408259, -11.7866497, 22.6807411, -15.9618719, 1.80122502};
//   protected Real[:] n228 = {1.0, 1.5, 3.0, 3.5, 4.0, 7.5};
//   protected Real n1968 = 1.0 - n7827 / n10118;
// algorithm
//   n7826 := exp((n130[1] * n1968 ^ n228[1] + n130[2] * n1968 ^ n228[2] + n130[3] * n1968 ^ n228[3] + n130[4] * n1968 ^ n228[4] + n130[5] * n1968 ^ n228[5] + n130[6] * n1968 ^ n228[6]) * n10118 / n7827) * n10119;
// end n1.n7656.n102.n8149.n7836.n7670.n10117;
//
// function n1.n7656.n102.n8149.n7836.n7670.n10120
//   input Real n7827(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   input Real n10121(unit = \"K/s\");
//   output Real n10122(unit = \"Pa/s\");
//   protected Real n10118(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 647.096;
//   protected Real n10119(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 22064000.0;
//   protected Real[:] n130 = {-7.85951783, 1.84408259, -11.7866497, 22.6807411, -15.9618719, 1.80122502};
//   protected Real[:] n228 = {1.0, 1.5, 3.0, 3.5, 4.0, 7.5};
//   protected Real n1968 = 1.0 - n7827 / n10118;
//   protected Real n10123 = -1.0 / n10118 * n10121;
//   protected Real n1969 = n130[1] * n1968 ^ n228[1] + n130[2] * n1968 ^ n228[2] + n130[3] * n1968 ^ n228[3] + n130[4] * n1968 ^ n228[4] + n130[5] * n1968 ^ n228[5] + n130[6] * n1968 ^ n228[6];
// algorithm
//   n10122 := exp(n1969 * n10118 / n7827) * n10119 * ((n130[1] * n1968 ^ (n228[1] - 1.0) * n228[1] * n10123 + n130[2] * n1968 ^ (n228[2] - 1.0) * n228[2] * n10123 + n130[3] * n1968 ^ (n228[3] - 1.0) * n228[3] * n10123 + n130[4] * n1968 ^ (n228[4] - 1.0) * n228[4] * n10123 + n130[5] * n1968 ^ (n228[5] - 1.0) * n228[5] * n10123 + n130[6] * n1968 ^ (n228[6] - 1.0) * n228[6] * n10123) * n10118 / n7827 - n1969 * n10118 * n10121 / n7827 ^ 2.0);
// end n1.n7656.n102.n8149.n7836.n7670.n10120;
//
// function n1.n7656.n102.n8149.n7836.n7670.n10124
//   input Real n7827(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   output Real n7826(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0);
//   protected Real n10125(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 273.16;
//   protected Real n10126(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 611.657;
//   protected Real[:] n130 = {-13.928169, 34.7078238};
//   protected Real[:] n228 = {-1.5, -1.25};
//   protected Real n1968 = n7827 / n10125;
// algorithm
//   n7826 := exp(n130[1] - n130[1] * n1968 ^ n228[1] + n130[2] - n130[2] * n1968 ^ n228[2]) * n10126;
// end n1.n7656.n102.n8149.n7836.n7670.n10124;
//
// function n1.n7656.n102.n8149.n7836.n7670.n10127
//   input Real n7827(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   input Real n10121(unit = \"K/s\");
//   output Real n10122(unit = \"Pa/s\");
//   protected Real n10125(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 273.16;
//   protected Real n10126(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 611.657;
//   protected Real[:] n130 = {-13.928169, 34.7078238};
//   protected Real[:] n228 = {-1.5, -1.25};
//   protected Real n1968 = n7827 / n10125;
//   protected Real n10123 = n10121 / n10125;
// algorithm
//   n10122 := exp(n130[1] - n130[1] * n1968 ^ n228[1] + n130[2] - n130[2] * n1968 ^ n228[2]) * n10126 * ((-n130[1] * n1968 ^ (n228[1] - 1.0) * n228[1] * n10123) - n130[2] * n1968 ^ (n228[2] - 1.0) * n228[2] * n10123);
// end n1.n7656.n102.n8149.n7836.n7670.n10127;
//
// function n1.n7656.n102.n8149.n7836.n7670.n10128
//   input Real n7827(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   input Real n10121(unit = \"K/s\");
//   output Real n10122(unit = \"Pa/s\");
// algorithm
//   n10122 := n1.n7656.n102.n8149.n7836.n7670.n11.n10129(n1.n7656.n102.n8149.n7836.n7670.n10117(n7827), n1.n7656.n102.n8149.n7836.n7670.n10124(n7827), n7827 - 273.16, 1.0, n1.n7656.n102.n8149.n7836.n7670.n10120(n7827, n10121), n1.n7656.n102.n8149.n7836.n7670.n10127(n7827, n10121), n10121, 0.0);
// end n1.n7656.n102.n8149.n7836.n7670.n10128;
//
// function n1.n7656.n102.n8149.n7836.n7670.n10136
//   input Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   output Real n3331(quantity = \"SpecificEnergy\", unit = \"J/kg\");
// algorithm
//   n3331 := n1.n7656.n102.n8149.n7836.n7670.n11.n8436(4200.0 * (n217 - 273.15), 2050.0 * (n217 - 273.15) - 333000.0, n217 - 273.16, 0.1);
// end n1.n7656.n102.n8149.n7836.n7670.n10136;
//
// function n1.n7656.n102.n8149.n7836.n7670.n10137
//   input Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   input Real n8197(unit = \"K/s\");
//   output Real n9441(unit = \"J/(kg.s)\");
// algorithm
//   n9441 := n1.n7656.n102.n8149.n7836.n7670.n11.n10129(4200.0 * (n217 - 273.15), 2050.0 * (n217 - 273.15) - 333000.0, n217 - 273.16, 0.1, 4200.0 * n8197, 2050.0 * n8197, n8197, 0.0);
// end n1.n7656.n102.n8149.n7836.n7670.n10137;
//
// function n1.n7656.n102.n8149.n7836.n7670.n10138
//   input Real n403(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   input Real[:] n6343(quantity = fill(\"MassFraction\", size(n6343, 1)), unit = fill(\"1\", size(n6343, 1)), min = fill(0.0, size(n6343, 1)), max = fill(1.0, size(n6343, 1)));
//   output Real n3331(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   protected Real n10110(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0);
//   protected Real n10108(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10105(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10106(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10107(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
// algorithm
//   n10110 := n1.n7656.n102.n8149.n7836.n7670.n8562(n217);
//   n10108 := min(n10110 * 0.6219647130774989 / max(1e-13, n403 - n10110) * (1.0 - n6343[1]), 1.0);
//   n10105 := max(n6343[1] - n10108, 0.0);
//   n10106 := n6343[1] - n10105;
//   n10107 := 1.0 - n6343[1];
//   n3331 := n1.n7671.n9351.n9473.n885.n10135(n1.n7671.n9351.n9473.n10104(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), n217, true, n1.n7671.n365.n8633.n9642.n9645, 2547494.319) * n10106 + n1.n7671.n9351.n9473.n885.n10135(n1.n7671.n9351.n9473.n10104(\"Air\", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), n217, true, n1.n7671.n365.n8633.n9642.n9645, 25104.684) * n10107 + n1.n7656.n102.n8149.n7836.n7670.n10136(n217) * n10105;
// end n1.n7656.n102.n8149.n7836.n7670.n10138;
//
// function n1.n7656.n102.n8149.n7836.n7670.n10139
//   input Real n403(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   input Real[:] n6343(quantity = fill(\"MassFraction\", size(n6343, 1)), unit = fill(\"1\", size(n6343, 1)), min = fill(0.0, size(n6343, 1)), max = fill(1.0, size(n6343, 1)));
//   input Real n4510(unit = \"Pa/s\");
//   input Real n8197(unit = \"K/s\");
//   input Real[:] n10140(unit = \"1/s\");
//   output Real n10059(unit = \"J/(kg.s)\");
//   protected Real n10110(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0);
//   protected Real n10108(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10105(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10106(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10107(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10109(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10141(unit = \"1/s\");
//   protected Real n10142(unit = \"1/s\");
//   protected Real n10143(unit = \"1/s\");
//   protected Real n9875(unit = \"Pa/s\");
//   protected Real n10144(unit = \"1/s\");
// algorithm
//   n10110 := n1.n7656.n102.n8149.n7836.n7670.n8562(n217);
//   n10109 := n10110 * 0.6219647130774989 / max(1e-13, n403 - n10110);
//   n10108 := min(n10109 * (1.0 - n6343[1]), 1.0);
//   n10105 := n1.n7656.n102.n8149.n7836.n7670.n11.n10145(n6343[1] - n10108, 0.0, 1e-05);
//   n10106 := n6343[1] - n10105;
//   n10107 := 1.0 - n6343[1];
//   n10142 := -n10140[1];
//   n9875 := n1.n7656.n102.n8149.n7836.n7670.n10128(n217, n8197);
//   n10144 := 0.6219647130774989 * (n9875 * (n403 - n10110) - n10110 * (n4510 - n9875)) / (n403 - n10110) / (n403 - n10110);
//   n10143 := n1.n7656.n102.n8149.n7836.n7670.n11.n10146(n6343[1] - n10108, 0.0, 1e-05, (1.0 + n10109) * n10140[1] - (1.0 - n6343[1]) * n10144, 0.0, 0.0);
//   n10141 := n10140[1] - n10143;
//   n10059 := n10106 * n1.n7671.n9351.n9473.n885.n10147(n1.n7671.n9351.n9473.n10104(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), n217, true, n1.n7671.n365.n8633.n9642.n9645, 2547494.319, n8197) + n10141 * n1.n7671.n9351.n9473.n885.n10135(n1.n7671.n9351.n9473.n10104(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), n217, true, n1.n7671.n365.n8633.n9642.n9645, 2547494.319) + n10107 * n1.n7671.n9351.n9473.n885.n10147(n1.n7671.n9351.n9473.n10104(\"Air\", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), n217, true, n1.n7671.n365.n8633.n9642.n9645, 25104.684, n8197) + n10142 * n1.n7671.n9351.n9473.n885.n10135(n1.n7671.n9351.n9473.n10104(\"Air\", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), n217, true, n1.n7671.n365.n8633.n9642.n9645, 25104.684) + n10105 * n1.n7656.n102.n8149.n7836.n7670.n10137(n217, n8197) + n10143 * n1.n7656.n102.n8149.n7836.n7670.n10136(n217);
// end n1.n7656.n102.n8149.n7836.n7670.n10139;
//
// function n1.n7656.n102.n8149.n7836.n7670.n11.n10129
//   input Real n8602;
//   input Real n10158;
//   input Real n637;
//   input Real n9237 = 1.0;
//   input Real n10161;
//   input Real n10162;
//   input Real n8496;
//   input Real n10163 = 0.0;
//   output Real n1629;
//   protected Real n10159;
//   protected Real n10160;
//   protected Real n10164;
//   protected Real n159;
// algorithm
//   n10160 := n637 / n9237;
//   n10159 := n10160 * 1.570796326794897;
//   n10164 := (n8496 - n10160 * n10163) / n9237;
//   if n10160 <= -0.99999999999 then
//     n159 := 0.0;
//   elseif n10160 >= 0.9999999999 then
//     n159 := 1.0;
//   else
//     n159 := (tanh(tan(n10159)) + 1.0) / 2.0;
//   end if;
//   n1629 := n10161 * n159 + (1.0 - n159) * n10162;
//   if abs(n10160) < 1.0 then
//     n1629 := n1629 + (n8602 - n10158) * n10164 * 1.570796326794897 / 2.0 / (cosh(tan(n10159)) * cos(n10159)) ^ 2.0;
//   end if;
// end n1.n7656.n102.n8149.n7836.n7670.n11.n10129;
//
// function n1.n7656.n102.n8149.n7836.n7670.n11.n10145
//   input Real n703;
//   input Real n704;
//   input Real n8496;
//   output Real n159;
// algorithm
//   n159 := max(n703, n704) + log(exp(4.0 / n8496 * (n703 - max(n703, n704))) + exp(4.0 / n8496 * (n704 - max(n703, n704)))) / (4.0 / n8496);
// end n1.n7656.n102.n8149.n7836.n7670.n11.n10145;
//
// function n1.n7656.n102.n8149.n7836.n7670.n11.n10146
//   input Real n703;
//   input Real n704;
//   input Real n8496;
//   input Real n10165;
//   input Real n10166;
//   input Real n9804;
//   output Real n7276;
// algorithm
//   n7276 := (if n703 > n704 then n10165 else n10166) + 0.25 * (((4.0 * (n10165 - (if n703 > n704 then n10165 else n10166)) / n8496 - 4.0 * (n703 - max(n703, n704)) * n9804 / n8496 ^ 2.0) * exp(4.0 * (n703 - max(n703, n704)) / n8496) + (4.0 * (n10166 - (if n703 > n704 then n10165 else n10166)) / n8496 - 4.0 * (n704 - max(n703, n704)) * n9804 / n8496 ^ 2.0) * exp(4.0 * (n704 - max(n703, n704)) / n8496)) * n8496 / (exp(4.0 * (n703 - max(n703, n704)) / n8496) + exp(4.0 * (n704 - max(n703, n704)) / n8496)) + log(exp(4.0 * (n703 - max(n703, n704)) / n8496) + exp(4.0 * (n704 - max(n703, n704)) / n8496)) * n9804);
// end n1.n7656.n102.n8149.n7836.n7670.n11.n10146;
//
// function n1.n7656.n102.n8149.n7836.n7670.n11.n8436
//   input Real n8602;
//   input Real n10158;
//   input Real n637;
//   input Real n9237 = 1.0;
//   output Real n1629;
//   protected Real n10159;
//   protected Real n10160;
//   protected Real n159;
// algorithm
//   n10160 := n637 / n9237;
//   n10159 := n10160 * 1.570796326794897;
//   if n10160 <= -0.999999999 then
//     n159 := 0.0;
//   elseif n10160 >= 0.999999999 then
//     n159 := 1.0;
//   else
//     n159 := (tanh(tan(n10159)) + 1.0) / 2.0;
//   end if;
//   n1629 := n8602 * n159 + (1.0 - n159) * n10158;
// end n1.n7656.n102.n8149.n7836.n7670.n11.n8436;
//
// function n1.n7656.n102.n8149.n7836.n7670.n7785
//   input n1.n7656.n102.n8149.n7836.n7670.n8367 n865;
//   output Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
// algorithm
//   n217 := n865.n217;
// end n1.n7656.n102.n8149.n7836.n7670.n7785;
//
// function n1.n7656.n102.n8149.n7836.n7670.n7955
//   input Real n403(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   input Real n3331(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
//   input Real[:] n6343(quantity = fill(\"MassFraction\", size(n6343, 1)), unit = fill(\"kg/kg\", size(n6343, 1)), min = fill(0.0, size(n6343, 1)), max = fill(1.0, size(n6343, 1)), nominal = fill(0.1, size(n6343, 1))) = {0.01, 0.99};
//   output Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
// algorithm
//   n217 := n1.n7656.n102.n8149.n7836.n7670.n7785(n1.n7656.n102.n8149.n7836.n7670.n8338(n403, n3331, n6343));
// end n1.n7656.n102.n8149.n7836.n7670.n7955;
//
// function n1.n7656.n102.n8149.n7836.n7670.n7957
//   input Real n403(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   input Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   input Real[:] n6343(quantity = fill(\"MassFraction\", size(n6343, 1)), unit = fill(\"kg/kg\", size(n6343, 1)), min = fill(0.0, size(n6343, 1)), max = fill(1.0, size(n6343, 1)), nominal = fill(0.1, size(n6343, 1))) = {0.01, 0.99};
//   output Real n3331(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
// algorithm
//   n3331 := n1.n7656.n102.n8149.n7836.n7670.n8732(n1.n7656.n102.n8149.n7836.n7670.n8396(n403, n217, n6343));
// end n1.n7656.n102.n8149.n7836.n7670.n7957;
//
// function n1.n7656.n102.n8149.n7836.n7670.n8338
//   input Real n403(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   input Real n3331(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
//   input Real[:] n6343(quantity = fill(\"MassFraction\", size(n6343, 1)), unit = fill(\"kg/kg\", size(n6343, 1)), min = fill(0.0, size(n6343, 1)), max = fill(1.0, size(n6343, 1)), nominal = fill(0.1, size(n6343, 1))) = {0.01, 0.99};
//   output n1.n7656.n102.n8149.n7836.n7670.n8367 n865;
// algorithm
//   n865 := if size(n6343, 1) == 2 then n1.n7656.n102.n8149.n7836.n7670.n8367(n403, n1.n7656.n102.n8149.n7836.n7670.n10111(n403, n3331, n6343), n6343) else n1.n7656.n102.n8149.n7836.n7670.n8367(n403, n1.n7656.n102.n8149.n7836.n7670.n10111(n403, n3331, n6343), cat(1, n6343, {1.0 - sum(n6343)}));
// end n1.n7656.n102.n8149.n7836.n7670.n8338;
//
// function n1.n7656.n102.n8149.n7836.n7670.n8367 \"Automatically generated record constructor for n1.n7656.n102.n8149.n7836.n7670.n8367\"
//   input Real n403;
//   input Real n217;
//   input Real[2] n6343;
//   output n8367 res;
// end n1.n7656.n102.n8149.n7836.n7670.n8367;
//
// function n1.n7656.n102.n8149.n7836.n7670.n8396
//   input Real n403(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   input Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   input Real[:] n6343(quantity = fill(\"MassFraction\", size(n6343, 1)), unit = fill(\"kg/kg\", size(n6343, 1)), min = fill(0.0, size(n6343, 1)), max = fill(1.0, size(n6343, 1)), nominal = fill(0.1, size(n6343, 1))) = {0.01, 0.99};
//   output n1.n7656.n102.n8149.n7836.n7670.n8367 n865;
// algorithm
//   n865 := if size(n6343, 1) == 2 then n1.n7656.n102.n8149.n7836.n7670.n8367(n403, n217, n6343) else n1.n7656.n102.n8149.n7836.n7670.n8367(n403, n217, cat(1, n6343, {1.0 - sum(n6343)}));
// end n1.n7656.n102.n8149.n7836.n7670.n8396;
//
// function n1.n7656.n102.n8149.n7836.n7670.n8562
//   input Real n7827(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   output Real n7826(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
// algorithm
//   n7826 := n1.n7656.n102.n8149.n7836.n7670.n11.n8436(n1.n7656.n102.n8149.n7836.n7670.n10117(n7827), n1.n7656.n102.n8149.n7836.n7670.n10124(n7827), n7827 - 273.16, 1.0);
// end n1.n7656.n102.n8149.n7836.n7670.n8562;
//
// function n1.n7656.n102.n8149.n7836.n7670.n8732
//   input n1.n7656.n102.n8149.n7836.n7670.n8367 n865;
//   output Real n3331(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
// algorithm
//   n3331 := n1.n7656.n102.n8149.n7836.n7670.n10138(n865.n403, n865.n217, n865.n6343);
// end n1.n7656.n102.n8149.n7836.n7670.n8732;
//
// function n1.n7656.n102.n8149.n7836.n7988.n7670.n10117
//   input Real n7827(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   output Real n7826(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0);
//   protected Real n10118(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 647.096;
//   protected Real n10119(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 22064000.0;
//   protected Real[:] n130 = {-7.85951783, 1.84408259, -11.7866497, 22.6807411, -15.9618719, 1.80122502};
//   protected Real[:] n228 = {1.0, 1.5, 3.0, 3.5, 4.0, 7.5};
//   protected Real n1968 = 1.0 - n7827 / n10118;
// algorithm
//   n7826 := exp((n130[1] * n1968 ^ n228[1] + n130[2] * n1968 ^ n228[2] + n130[3] * n1968 ^ n228[3] + n130[4] * n1968 ^ n228[4] + n130[5] * n1968 ^ n228[5] + n130[6] * n1968 ^ n228[6]) * n10118 / n7827) * n10119;
// end n1.n7656.n102.n8149.n7836.n7988.n7670.n10117;
//
// function n1.n7656.n102.n8149.n7836.n7988.n7670.n10120
//   input Real n7827(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   input Real n10121(unit = \"K/s\");
//   output Real n10122(unit = \"Pa/s\");
//   protected Real n10118(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 647.096;
//   protected Real n10119(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 22064000.0;
//   protected Real[:] n130 = {-7.85951783, 1.84408259, -11.7866497, 22.6807411, -15.9618719, 1.80122502};
//   protected Real[:] n228 = {1.0, 1.5, 3.0, 3.5, 4.0, 7.5};
//   protected Real n1968 = 1.0 - n7827 / n10118;
//   protected Real n10123 = -1.0 / n10118 * n10121;
//   protected Real n1969 = n130[1] * n1968 ^ n228[1] + n130[2] * n1968 ^ n228[2] + n130[3] * n1968 ^ n228[3] + n130[4] * n1968 ^ n228[4] + n130[5] * n1968 ^ n228[5] + n130[6] * n1968 ^ n228[6];
// algorithm
//   n10122 := exp(n1969 * n10118 / n7827) * n10119 * ((n130[1] * n1968 ^ (n228[1] - 1.0) * n228[1] * n10123 + n130[2] * n1968 ^ (n228[2] - 1.0) * n228[2] * n10123 + n130[3] * n1968 ^ (n228[3] - 1.0) * n228[3] * n10123 + n130[4] * n1968 ^ (n228[4] - 1.0) * n228[4] * n10123 + n130[5] * n1968 ^ (n228[5] - 1.0) * n228[5] * n10123 + n130[6] * n1968 ^ (n228[6] - 1.0) * n228[6] * n10123) * n10118 / n7827 - n1969 * n10118 * n10121 / n7827 ^ 2.0);
// end n1.n7656.n102.n8149.n7836.n7988.n7670.n10120;
//
// function n1.n7656.n102.n8149.n7836.n7988.n7670.n10124
//   input Real n7827(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   output Real n7826(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0);
//   protected Real n10125(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 273.16;
//   protected Real n10126(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 611.657;
//   protected Real[:] n130 = {-13.928169, 34.7078238};
//   protected Real[:] n228 = {-1.5, -1.25};
//   protected Real n1968 = n7827 / n10125;
// algorithm
//   n7826 := exp(n130[1] - n130[1] * n1968 ^ n228[1] + n130[2] - n130[2] * n1968 ^ n228[2]) * n10126;
// end n1.n7656.n102.n8149.n7836.n7988.n7670.n10124;
//
// function n1.n7656.n102.n8149.n7836.n7988.n7670.n10127
//   input Real n7827(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   input Real n10121(unit = \"K/s\");
//   output Real n10122(unit = \"Pa/s\");
//   protected Real n10125(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 273.16;
//   protected Real n10126(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 611.657;
//   protected Real[:] n130 = {-13.928169, 34.7078238};
//   protected Real[:] n228 = {-1.5, -1.25};
//   protected Real n1968 = n7827 / n10125;
//   protected Real n10123 = n10121 / n10125;
// algorithm
//   n10122 := exp(n130[1] - n130[1] * n1968 ^ n228[1] + n130[2] - n130[2] * n1968 ^ n228[2]) * n10126 * ((-n130[1] * n1968 ^ (n228[1] - 1.0) * n228[1] * n10123) - n130[2] * n1968 ^ (n228[2] - 1.0) * n228[2] * n10123);
// end n1.n7656.n102.n8149.n7836.n7988.n7670.n10127;
//
// function n1.n7656.n102.n8149.n7836.n7988.n7670.n10128
//   input Real n7827(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   input Real n10121(unit = \"K/s\");
//   output Real n10122(unit = \"Pa/s\");
// algorithm
//   n10122 := n1.n7656.n102.n8149.n7836.n7988.n7670.n11.n10129(n1.n7656.n102.n8149.n7836.n7988.n7670.n10117(n7827), n1.n7656.n102.n8149.n7836.n7988.n7670.n10124(n7827), n7827 - 273.16, 1.0, n1.n7656.n102.n8149.n7836.n7988.n7670.n10120(n7827, n10121), n1.n7656.n102.n8149.n7836.n7988.n7670.n10127(n7827, n10121), n10121, 0.0);
// end n1.n7656.n102.n8149.n7836.n7988.n7670.n10128;
//
// function n1.n7656.n102.n8149.n7836.n7988.n7670.n10136
//   input Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   output Real n3331(quantity = \"SpecificEnergy\", unit = \"J/kg\");
// algorithm
//   n3331 := n1.n7656.n102.n8149.n7836.n7988.n7670.n11.n8436(4200.0 * (n217 - 273.15), 2050.0 * (n217 - 273.15) - 333000.0, n217 - 273.16, 0.1);
// end n1.n7656.n102.n8149.n7836.n7988.n7670.n10136;
//
// function n1.n7656.n102.n8149.n7836.n7988.n7670.n10137
//   input Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   input Real n8197(unit = \"K/s\");
//   output Real n9441(unit = \"J/(kg.s)\");
// algorithm
//   n9441 := n1.n7656.n102.n8149.n7836.n7988.n7670.n11.n10129(4200.0 * (n217 - 273.15), 2050.0 * (n217 - 273.15) - 333000.0, n217 - 273.16, 0.1, 4200.0 * n8197, 2050.0 * n8197, n8197, 0.0);
// end n1.n7656.n102.n8149.n7836.n7988.n7670.n10137;
//
// function n1.n7656.n102.n8149.n7836.n7988.n7670.n10139
//   input Real n403(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   input Real[:] n6343(quantity = fill(\"MassFraction\", size(n6343, 1)), unit = fill(\"1\", size(n6343, 1)), min = fill(0.0, size(n6343, 1)), max = fill(1.0, size(n6343, 1)));
//   input Real n4510(unit = \"Pa/s\");
//   input Real n8197(unit = \"K/s\");
//   input Real[:] n10140(unit = \"1/s\");
//   output Real n10059(unit = \"J/(kg.s)\");
//   protected Real n10110(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0);
//   protected Real n10108(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10105(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10106(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10107(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10109(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10141(unit = \"1/s\");
//   protected Real n10142(unit = \"1/s\");
//   protected Real n10143(unit = \"1/s\");
//   protected Real n9875(unit = \"Pa/s\");
//   protected Real n10144(unit = \"1/s\");
// algorithm
//   n10110 := n1.n7656.n102.n8149.n7836.n7988.n7670.n8562(n217);
//   n10109 := n10110 * 0.6219647130774989 / max(1e-13, n403 - n10110);
//   n10108 := min(n10109 * (1.0 - n6343[1]), 1.0);
//   n10105 := n1.n7656.n102.n8149.n7836.n7988.n7670.n11.n10145(n6343[1] - n10108, 0.0, 1e-05);
//   n10106 := n6343[1] - n10105;
//   n10107 := 1.0 - n6343[1];
//   n10142 := -n10140[1];
//   n9875 := n1.n7656.n102.n8149.n7836.n7988.n7670.n10128(n217, n8197);
//   n10144 := 0.6219647130774989 * (n9875 * (n403 - n10110) - n10110 * (n4510 - n9875)) / (n403 - n10110) / (n403 - n10110);
//   n10143 := n1.n7656.n102.n8149.n7836.n7988.n7670.n11.n10146(n6343[1] - n10108, 0.0, 1e-05, (1.0 + n10109) * n10140[1] - (1.0 - n6343[1]) * n10144, 0.0, 0.0);
//   n10141 := n10140[1] - n10143;
//   n10059 := n10106 * n1.n7671.n9351.n9473.n885.n10147(n1.n7671.n9351.n9473.n10104(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), n217, true, n1.n7671.n365.n8633.n9642.n9645, 2547494.319, n8197) + n10141 * n1.n7671.n9351.n9473.n885.n10135(n1.n7671.n9351.n9473.n10104(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), n217, true, n1.n7671.n365.n8633.n9642.n9645, 2547494.319) + n10107 * n1.n7671.n9351.n9473.n885.n10147(n1.n7671.n9351.n9473.n10104(\"Air\", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), n217, true, n1.n7671.n365.n8633.n9642.n9645, 25104.684, n8197) + n10142 * n1.n7671.n9351.n9473.n885.n10135(n1.n7671.n9351.n9473.n10104(\"Air\", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), n217, true, n1.n7671.n365.n8633.n9642.n9645, 25104.684) + n10105 * n1.n7656.n102.n8149.n7836.n7988.n7670.n10137(n217, n8197) + n10143 * n1.n7656.n102.n8149.n7836.n7988.n7670.n10136(n217);
// end n1.n7656.n102.n8149.n7836.n7988.n7670.n10139;
//
// function n1.n7656.n102.n8149.n7836.n7988.n7670.n11.n10129
//   input Real n8602;
//   input Real n10158;
//   input Real n637;
//   input Real n9237 = 1.0;
//   input Real n10161;
//   input Real n10162;
//   input Real n8496;
//   input Real n10163 = 0.0;
//   output Real n1629;
//   protected Real n10159;
//   protected Real n10160;
//   protected Real n10164;
//   protected Real n159;
// algorithm
//   n10160 := n637 / n9237;
//   n10159 := n10160 * 1.570796326794897;
//   n10164 := (n8496 - n10160 * n10163) / n9237;
//   if n10160 <= -0.99999999999 then
//     n159 := 0.0;
//   elseif n10160 >= 0.9999999999 then
//     n159 := 1.0;
//   else
//     n159 := (tanh(tan(n10159)) + 1.0) / 2.0;
//   end if;
//   n1629 := n10161 * n159 + (1.0 - n159) * n10162;
//   if abs(n10160) < 1.0 then
//     n1629 := n1629 + (n8602 - n10158) * n10164 * 1.570796326794897 / 2.0 / (cosh(tan(n10159)) * cos(n10159)) ^ 2.0;
//   end if;
// end n1.n7656.n102.n8149.n7836.n7988.n7670.n11.n10129;
//
// function n1.n7656.n102.n8149.n7836.n7988.n7670.n11.n10145
//   input Real n703;
//   input Real n704;
//   input Real n8496;
//   output Real n159;
// algorithm
//   n159 := max(n703, n704) + log(exp(4.0 / n8496 * (n703 - max(n703, n704))) + exp(4.0 / n8496 * (n704 - max(n703, n704)))) / (4.0 / n8496);
// end n1.n7656.n102.n8149.n7836.n7988.n7670.n11.n10145;
//
// function n1.n7656.n102.n8149.n7836.n7988.n7670.n11.n10146
//   input Real n703;
//   input Real n704;
//   input Real n8496;
//   input Real n10165;
//   input Real n10166;
//   input Real n9804;
//   output Real n7276;
// algorithm
//   n7276 := (if n703 > n704 then n10165 else n10166) + 0.25 * (((4.0 * (n10165 - (if n703 > n704 then n10165 else n10166)) / n8496 - 4.0 * (n703 - max(n703, n704)) * n9804 / n8496 ^ 2.0) * exp(4.0 * (n703 - max(n703, n704)) / n8496) + (4.0 * (n10166 - (if n703 > n704 then n10165 else n10166)) / n8496 - 4.0 * (n704 - max(n703, n704)) * n9804 / n8496 ^ 2.0) * exp(4.0 * (n704 - max(n703, n704)) / n8496)) * n8496 / (exp(4.0 * (n703 - max(n703, n704)) / n8496) + exp(4.0 * (n704 - max(n703, n704)) / n8496)) + log(exp(4.0 * (n703 - max(n703, n704)) / n8496) + exp(4.0 * (n704 - max(n703, n704)) / n8496)) * n9804);
// end n1.n7656.n102.n8149.n7836.n7988.n7670.n11.n10146;
//
// function n1.n7656.n102.n8149.n7836.n7988.n7670.n11.n8436
//   input Real n8602;
//   input Real n10158;
//   input Real n637;
//   input Real n9237 = 1.0;
//   output Real n1629;
//   protected Real n10159;
//   protected Real n10160;
//   protected Real n159;
// algorithm
//   n10160 := n637 / n9237;
//   n10159 := n10160 * 1.570796326794897;
//   if n10160 <= -0.999999999 then
//     n159 := 0.0;
//   elseif n10160 >= 0.999999999 then
//     n159 := 1.0;
//   else
//     n159 := (tanh(tan(n10159)) + 1.0) / 2.0;
//   end if;
//   n1629 := n8602 * n159 + (1.0 - n159) * n10158;
// end n1.n7656.n102.n8149.n7836.n7988.n7670.n11.n8436;
//
// function n1.n7656.n102.n8149.n7836.n7988.n7670.n523
//   input n1.n7656.n102.n8149.n7836.n7988.n7670.n8367 n865;
//   output Real n136(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
// algorithm
//   n136 := n865.n403 / (n1.n7656.n102.n8149.n7836.n7988.n7670.n9583(n865) * n865.n217);
// end n1.n7656.n102.n8149.n7836.n7988.n7670.n523;
//
// function n1.n7656.n102.n8149.n7836.n7988.n7670.n7785
//   input n1.n7656.n102.n8149.n7836.n7988.n7670.n8367 n865;
//   output Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
// algorithm
//   n217 := n865.n217;
// end n1.n7656.n102.n8149.n7836.n7988.n7670.n7785;
//
// function n1.n7656.n102.n8149.n7836.n7988.n7670.n8340
//   input n1.n7656.n102.n8149.n7836.n7988.n7670.n8367 n865;
//   output Real n4890(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
// algorithm
//   n4890 := 1e-06 * n1.n7671.n8128.n9970.n9971.n9972({9.739110288630587e-15, -3.135372487033391e-11, 4.300487659564222e-08, -3.822801629175824e-05, 0.05042787436718076, 17.23926013924253}, -150.0, 1000.0, n1.n101.n946.n949(n865.n217));
// end n1.n7656.n102.n8149.n7836.n7988.n7670.n8340;
//
// function n1.n7656.n102.n8149.n7836.n7988.n7670.n8367 \"Automatically generated record constructor for n1.n7656.n102.n8149.n7836.n7988.n7670.n8367\"
//   input Real n403;
//   input Real n217;
//   input Real[2] n6343;
//   output n8367 res;
// end n1.n7656.n102.n8149.n7836.n7988.n7670.n8367;
//
// function n1.n7656.n102.n8149.n7836.n7988.n7670.n8428
//   input n1.n7656.n102.n8149.n7836.n7988.n7670.n8367 n865;
//   output Real n474(quantity = \"ThermalConductivity\", unit = \"W/(m.K)\", min = 0.0, max = 500.0, start = 1.0, nominal = 1.0);
// algorithm
//   n474 := 0.001 * n1.n7671.n8128.n9970.n9971.n9972({6.569147081771781e-15, -3.402596192305051e-11, 5.327928484630316e-08, -4.534083928921947e-05, 0.07612967530903766, 24.16948108809705}, -150.0, 1000.0, n1.n101.n946.n949(n865.n217));
// end n1.n7656.n102.n8149.n7836.n7988.n7670.n8428;
//
// function n1.n7656.n102.n8149.n7836.n7988.n7670.n8429
//   input n1.n7656.n102.n8149.n7836.n7988.n7670.n8367 n865;
//   output Real n5989(quantity = \"PrandtlNumber\", unit = \"1\", min = 0.001, max = 100000.0, nominal = 1.0);
// algorithm
//   n5989 := n1.n7656.n102.n8149.n7836.n7988.n7670.n8340(n865) * n1.n7656.n102.n8149.n7836.n7988.n7670.n9354(n865) / n1.n7656.n102.n8149.n7836.n7988.n7670.n8428(n865);
// end n1.n7656.n102.n8149.n7836.n7988.n7670.n8429;
//
// function n1.n7656.n102.n8149.n7836.n7988.n7670.n8562
//   input Real n7827(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   output Real n7826(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
// algorithm
//   n7826 := n1.n7656.n102.n8149.n7836.n7988.n7670.n11.n8436(n1.n7656.n102.n8149.n7836.n7988.n7670.n10117(n7827), n1.n7656.n102.n8149.n7836.n7988.n7670.n10124(n7827), n7827 - 273.16, 1.0);
// end n1.n7656.n102.n8149.n7836.n7988.n7670.n8562;
//
// function n1.n7656.n102.n8149.n7836.n7988.n7670.n9354
//   input n1.n7656.n102.n8149.n7836.n7988.n7670.n8367 n865;
//   output Real n4554(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   protected Real n8197(unit = \"s/K\") = 1.0;
// algorithm
//   n4554 := n1.n7656.n102.n8149.n7836.n7988.n7670.n10139(n865.n403, n865.n217, n865.n6343, 0.0, 1.0, {0.0, 0.0}) * n8197;
// end n1.n7656.n102.n8149.n7836.n7988.n7670.n9354;
//
// function n1.n7656.n102.n8149.n7836.n7988.n7670.n9583
//   input n1.n7656.n102.n8149.n7836.n7988.n7670.n8367 n865;
//   output Real n344(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\");
// algorithm
//   n344 := 287.0512249529787 * (1.0 - n865.n6343[1]) + 461.5233290850878 * n865.n6343[1];
// end n1.n7656.n102.n8149.n7836.n7988.n7670.n9583;
//
// function n1.n7656.n102.n8149.n7836.n8346.n7663.n12.n8476
//   input Real n8478(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real n8443(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0);
//   input Real n8444(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0);
//   input Real n8445(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0);
//   input Real n8446(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0);
//   input Real n2194(quantity = \"Length\", unit = \"m\");
//   input Real n6099(quantity = \"Length\", unit = \"m\", min = 0.0);
//   input Real n7704(quantity = \"Area\", unit = \"m2\");
//   input Real n8474(quantity = \"ReynoldsNumber\", unit = \"1\");
//   input Real n8475(quantity = \"ReynoldsNumber\", unit = \"1\");
//   input Real n3083(min = 0.0);
//   output Real n7744(quantity = \"MassFlowRate\", unit = \"kg/s\");
//   output Real n8479;
//   protected Real n457(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0);
//   protected Real n5456(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0);
//   protected Real n8487;
//   protected Real n2800(quantity = \"ReynoldsNumber\", unit = \"1\");
//   protected Real n8498;
//   protected Real n1201;
//   protected Real n1202;
// algorithm
//   if n8478 >= 0.0 then
//     n5456 := n8443;
//     n457 := n8445;
//   else
//     n5456 := n8444;
//     n457 := n8446;
//   end if;
//   n8487 := abs(n8478) * 2.0 * n6099 ^ 3.0 * n5456 / (n2194 * n457 * n457);
//   n1201 := 2.0 * n6099 ^ 3.0 * n5456 / (n2194 * n457 ^ 2.0);
//   n2800 := n8487 / 64.0;
//   n8498 := n1201 / 64.0;
//   if n2800 > n8474 then
//     n2800 := -2.0 * sqrt(n8487) * log10(2.51 / sqrt(n8487) + 0.27 * n3083);
//     n1202 := sqrt(n1201 * abs(n8478));
//     n8498 := 0.4342944819032518 * ((-2.0 * log(2.51 / n1202 + 0.27 * n3083) * n1201 / (2.0 * n1202)) + 5.02 / (2.0 * abs(n8478) * (2.51 / n1202 + 0.27 * n3083)));
//     if n2800 < n8475 then
//       (n2800, n8498) := n1.n7656.n102.n8149.n7836.n8346.n7663.n12.n8476.n8497(n8487, n8474, n8475, n3083, n8478);
//     end if;
//   end if;
//   n7744 := n7704 / n6099 * n457 * (if n8478 >= 0.0 then n2800 else -n2800);
//   n8479 := n7704 / n6099 * n457 * n8498;
// end n1.n7656.n102.n8149.n7836.n8346.n7663.n12.n8476;
//
// function n1.n7656.n102.n8149.n7836.n8346.n7663.n12.n8476.n8497
//   input Real n8487;
//   input Real n8474(quantity = \"ReynoldsNumber\", unit = \"1\");
//   input Real n8475(quantity = \"ReynoldsNumber\", unit = \"1\");
//   input Real n3083(min = 0.0);
//   input Real n8478(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   output Real n2800(quantity = \"ReynoldsNumber\", unit = \"1\");
//   output Real n8498;
//   protected Real n703 = log10(64.0 * n8474);
//   protected Real n233 = log10(n8474);
//   protected Real n8499 = 1.0;
//   protected Real n1202 = n3083 / 3.7 + 5.74 / n8475 ^ 0.9;
//   protected Real n637 = log10(n8487);
//   protected Real n159;
//   protected Real n8501;
//   protected Real n8490 = log10(n1202);
//   protected Real n1581 = 0.25 * (n8475 / n8490) ^ 2.0;
//   protected Real n8491 = 2.51 / sqrt(n1581) + 0.27 * n3083;
//   protected Real n704 = log10(n1581);
//   protected Real n8492 = -2.0 * sqrt(n1581) * log10(n8491);
//   protected Real n231 = log10(n8492);
//   protected Real n8500 = 0.5 + 1.090079149577162 / (n8492 * n8491);
// algorithm
//   (n159, n8501) := n1.n7656.n11.n8483(n637, n703, n704, n233, n231, n8499, n8500);
//   n2800 := 10.0 ^ n159;
//   n8498 := n2800 / abs(n8478) * n8501;
// end n1.n7656.n102.n8149.n7836.n8346.n7663.n12.n8476.n8497;
//
// function n1.n7656.n102.n8149.n7836.n8346.n7663.n8412
//   input Real n7744(quantity = \"MassFlowRate\", unit = \"kg/s\");
//   input Real n8443(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0);
//   input Real n8444(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0);
//   input Real n8445(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0);
//   input Real n8446(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0);
//   input Real n2194(quantity = \"Length\", unit = \"m\");
//   input Real n6099(quantity = \"Length\", unit = \"m\", min = 0.0);
//   input Real n7704(quantity = \"Area\", unit = \"m2\") = 3.141592653589793 * n6099 ^ 2.0 / 4.0;
//   input Real n8234(quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = 2.5e-05;
//   input Real n7750(quantity = \"MassFlowRate\", unit = \"kg/s\") = 0.01;
//   input Real n8328(quantity = \"ReynoldsNumber\", unit = \"1\") = 4000.0;
//   output Real n4510(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   protected Real n3083(min = 0.0) = n8234 / n6099;
//   protected Real n8475(quantity = \"ReynoldsNumber\", unit = \"1\") = n8328;
//   protected Real n457(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0);
//   protected Real n5456(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0);
//   protected Real n2800(quantity = \"ReynoldsNumber\", unit = \"1\");
//   protected Real n8487;
//   protected Real n8474(quantity = \"ReynoldsNumber\", unit = \"1\") = min(745.0 * exp(if n3083 <= 0.0065 then 1.0 else 0.0065 / n3083), n8328);
// algorithm
//   n5456 := if n7744 >= 0.0 then n8443 else n8444;
//   n457 := if n7744 >= 0.0 then n8445 else n8446;
//   n2800 := n6099 * abs(n7744) / (n7704 * n457);
//   n8487 := if n2800 <= n8474 then 64.0 * n2800 else if n2800 >= n8475 then 0.25 * (n2800 / log10(n3083 / 3.7 + 5.74 / n2800 ^ 0.9)) ^ 2.0 else n1.n7656.n102.n8149.n7836.n8346.n7663.n8412.n8488(n2800, n8474, n8475, n3083);
//   n4510 := n2194 * n457 * n457 / (2.0 * n5456 * n6099 * n6099 * n6099) * (if n7744 >= 0.0 then n8487 else -n8487);
// end n1.n7656.n102.n8149.n7836.n8346.n7663.n8412;
//
// function n1.n7656.n102.n8149.n7836.n8346.n7663.n8412.n8488
//   input Real n2800(quantity = \"ReynoldsNumber\", unit = \"1\");
//   input Real n8474(quantity = \"ReynoldsNumber\", unit = \"1\");
//   input Real n8475(quantity = \"ReynoldsNumber\", unit = \"1\");
//   input Real n3083;
//   output Real n8487;
//   protected Real n703 = log10(n8474);
//   protected Real n233 = log10(64.0 * n8474);
//   protected Real n8489 = 1.0;
//   protected Real n1201 = 1.121782646756099;
//   protected Real n1202 = n3083 / 3.7 + 5.74 / n8475 ^ 0.9;
//   protected Real n704 = log10(n8475);
//   protected Real n8496;
//   protected Real n8490 = log10(n1202);
//   protected Real n8494 = n704 - n703;
//   protected Real n1581 = 0.25 * (n8475 / n8490) ^ 2.0;
//   protected Real n8493 = 2.0 + 4.0 * n1201 / (n1202 * n8490 * n8475 ^ 0.9);
//   protected Real n8491 = 2.51 / sqrt(n1581) + 0.27 * n3083;
//   protected Real n231 = log10(n1581);
//   protected Real n8492 = -2.0 * sqrt(n1581) * log10(n8491);
//   protected Real n497 = (n231 - n233) / n8494;
//   protected Real n43 = (3.0 * n497 - 2.0 * n8489 - n8493) / n8494;
//   protected Real n45 = (n8489 + n8493 - 2.0 * n497) / (n8494 * n8494);
// algorithm
//   n8496 := log10(n2800 / n8474);
//   n8487 := 64.0 * n8474 * (n2800 / n8474) ^ (1.0 + n8496 * (n43 + n8496 * n45));
// end n1.n7656.n102.n8149.n7836.n8346.n7663.n8412.n8488;
//
// function n1.n7656.n102.n8149.n7836.n8346.n7663.n8415
//   input Real n4510(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real n8443(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0);
//   input Real n8444(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0);
//   input Real n8445(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0);
//   input Real n8446(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0);
//   input Real n2194(quantity = \"Length\", unit = \"m\");
//   input Real n6099(quantity = \"Length\", unit = \"m\", min = 0.0);
//   input Real n8447(unit = \"m2/s2\");
//   input Real n7704(quantity = \"Area\", unit = \"m2\") = 3.141592653589793 * n6099 ^ 2.0 / 4.0;
//   input Real n8234(quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = 2.5e-05;
//   input Real n8308(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 1.0;
//   input Real n8328(quantity = \"ReynoldsNumber\", unit = \"1\") = 4000.0;
//   output Real n7744(quantity = \"MassFlowRate\", unit = \"kg/s\");
//   protected Real n3083(min = 0.0) = n8234 / n6099;
//   protected Real n2800(quantity = \"ReynoldsNumber\", unit = \"1\");
//   protected Real n8475(quantity = \"ReynoldsNumber\", unit = \"1\") = n8328;
//   protected Real n8455(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   protected Real n8456(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   protected Real n8457(quantity = \"MassFlowRate\", unit = \"kg/s\");
//   protected Real n8458(quantity = \"MassFlowRate\", unit = \"kg/s\");
//   protected Real n8453(quantity = \"MassFlowRate\", unit = \"kg/s\");
//   protected Real n8454(quantity = \"MassFlowRate\", unit = \"kg/s\");
//   protected Real n8451(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = n8447 * n8443;
//   protected Real n8452(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = n8447 * n8444;
//   protected Real n8459(quantity = \"MassFlowRate\", unit = \"kg/s\") = 0.0;
//   protected Real n8461;
//   protected Real n8474(quantity = \"ReynoldsNumber\", unit = \"1\") = min((745.0 * exp(if n3083 <= 0.0065 then 1.0 else 0.0065 / n3083)) ^ 0.97, n8328);
//   protected Real n8460(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = (n8451 + n8452) / 2.0;
// algorithm
//   n8455 := max(n8451, n8452) + n8308;
//   n8456 := min(n8451, n8452) - n8308;
//   if n4510 >= n8455 then
//     n7744 := n1.n7656.n102.n8149.n7836.n8346.n7663.n12.n8476(n4510 - n8451, n8443, n8444, n8445, n8446, n2194, n6099, n7704, n8474, n8475, n3083)[1];
//   elseif n4510 <= n8456 then
//     n7744 := n1.n7656.n102.n8149.n7836.n8346.n7663.n12.n8476(n4510 - n8452, n8443, n8444, n8445, n8446, n2194, n6099, n7704, n8474, n8475, n3083)[1];
//   else
//     (n8457, n8453) := n1.n7656.n102.n8149.n7836.n8346.n7663.n12.n8476(n8455 - n8451, n8443, n8444, n8445, n8446, n2194, n6099, n7704, n8474, n8475, n3083);
//     (n8458, n8454) := n1.n7656.n102.n8149.n7836.n8346.n7663.n12.n8476(n8456 - n8452, n8443, n8444, n8445, n8446, n2194, n6099, n7704, n8474, n8475, n3083);
//     (n7744, n8461) := n1.n7656.n11.n8462(n8460, n8456, n8455, n8458, n8457, n8454, n8453);
//     if n4510 > n8460 then
//       n7744 := n1.n7656.n11.n8462(n4510, n8460, n8455, n8459, n8457, n8461, n8453)[1];
//     else
//       n7744 := n1.n7656.n11.n8462(n4510, n8456, n8460, n8458, n8459, n8454, n8461)[1];
//     end if;
//   end if;
// end n1.n7656.n102.n8149.n7836.n8346.n7663.n8415;
//
// function n1.n7656.n102.n8149.n7836.n8346.n7670.n523
//   input n1.n7656.n102.n8149.n7836.n8346.n7670.n8367 n865;
//   output Real n136(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
// algorithm
//   n136 := n865.n403 / (n1.n7656.n102.n8149.n7836.n8346.n7670.n9583(n865) * n865.n217);
// end n1.n7656.n102.n8149.n7836.n8346.n7670.n523;
//
// function n1.n7656.n102.n8149.n7836.n8346.n7670.n7786
//   input n1.n7656.n102.n8149.n7836.n8346.n7670.n8367 n865;
//   output Real n403(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
// algorithm
//   n403 := n865.n403;
// end n1.n7656.n102.n8149.n7836.n8346.n7670.n7786;
//
// function n1.n7656.n102.n8149.n7836.n8346.n7670.n8340
//   input n1.n7656.n102.n8149.n7836.n8346.n7670.n8367 n865;
//   output Real n4890(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
// algorithm
//   n4890 := 1e-06 * n1.n7671.n8128.n9970.n9971.n9972({9.739110288630587e-15, -3.135372487033391e-11, 4.300487659564222e-08, -3.822801629175824e-05, 0.05042787436718076, 17.23926013924253}, -150.0, 1000.0, n1.n101.n946.n949(n865.n217));
// end n1.n7656.n102.n8149.n7836.n8346.n7670.n8340;
//
// function n1.n7656.n102.n8149.n7836.n8346.n7670.n8367 \"Automatically generated record constructor for n1.n7656.n102.n8149.n7836.n8346.n7670.n8367\"
//   input Real n403;
//   input Real n217;
//   input Real[2] n6343;
//   output n8367 res;
// end n1.n7656.n102.n8149.n7836.n8346.n7670.n8367;
//
// function n1.n7656.n102.n8149.n7836.n8346.n7670.n9583
//   input n1.n7656.n102.n8149.n7836.n8346.n7670.n8367 n865;
//   output Real n344(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\");
// algorithm
//   n344 := 287.0512249529787 * (1.0 - n865.n6343[1]) + 461.5233290850878 * n865.n6343[1];
// end n1.n7656.n102.n8149.n7836.n8346.n7670.n9583;
//
// function n1.n7656.n102.n8149.n7837.n7670.n10111
//   input Real n403(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   input Real n3331(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
//   input Real[:] n6343(quantity = fill(\"MassFraction\", size(n6343, 1)), unit = fill(\"kg/kg\", size(n6343, 1)), min = fill(0.0, size(n6343, 1)), max = fill(1.0, size(n6343, 1)), nominal = fill(0.1, size(n6343, 1)));
//   output Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
// algorithm
//   n217 := n1.n7656.n102.n8149.n7837.n7670.n10111.n12.n8551(n3331, 190.0, 647.0, n403, n6343[1:1], n1.n7671.n9351.n9473.n10104(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), 1e-13);
// end n1.n7656.n102.n8149.n7837.n7670.n10111;
//
// function n1.n7656.n102.n8149.n7837.n7670.n10111.n12.n8551
//   input Real n9469;
//   input Real n5250;
//   input Real n5263;
//   input Real n7786 = 0.0;
//   input Real[:] n6343 = {};
//   input n1.n7656.n102.n8149.n7837.n7670.n10111.n12.n9471 n9476;
//   input Real n9964 = 1e-13;
//   output Real n9472;
//   protected constant Real n23 = 1e-15;
//   protected constant Real n9965 = 1e-10;
//   protected Real n58;
//   protected Real n136;
//   protected Real n768;
//   protected Real n497;
//   protected Real n61;
//   protected Real n403;
//   protected Real n769;
//   protected Real n723;
//   protected Real n770;
//   protected Real n771;
//   protected Real n772;
//   protected Real n773;
//   protected Boolean n774 = false;
//   protected Real n9966 = n5250 - n9965;
//   protected Real n9967 = n5263 + n9965;
//   protected Real n130 = n9966;
//   protected Real n490 = n9967;
// algorithm
//   n771 := n1.n7656.n102.n8149.n7837.n7670.n10111.n12.n9475(n9966, n7786, n6343, n9476) - n9469;
//   n772 := n1.n7656.n102.n8149.n7837.n7670.n10111.n12.n9475(n9967, n7786, n6343, n9476) - n9469;
//   n773 := n772;
//   if n771 > 0.0 and n772 > 0.0 or n771 < 0.0 and n772 < 0.0 then
//     n1.n11.n681.n682(\"The arguments x_min and x_max to OneNonLinearEquation.solve(..)
//     do not bracket the root of the single non-linear equation:
//       x_min  = \" + String(n9966, 6, 0, true) + \"
//     \" + \"  x_max  = \" + String(n9967, 6, 0, true) + \"
//     \" + \"  y_zero = \" + String(n9469, 6, 0, true) + \"
//     \" + \"  fa = f(x_min) - y_zero = \" + String(n771, 6, 0, true) + \"
//     \" + \"  fb = f(x_max) - y_zero = \" + String(n772, 6, 0, true) + \"
//     \" + \"fa and fb must have opposite sign which is not the case\");
//   end if;
//   n58 := n130;
//   n773 := n771;
//   n768 := n490 - n130;
//   n136 := n768;
//   while not n774 loop
//     if abs(n773) < abs(n772) then
//       n130 := n490;
//       n490 := n58;
//       n58 := n130;
//       n771 := n772;
//       n772 := n773;
//       n773 := n771;
//     end if;
//     n770 := 2.0 * n23 * abs(n490) + n9964;
//     n497 := (n58 - n490) / 2.0;
//     if abs(n497) <= n770 or n772 == 0.0 then
//       n774 := true;
//       n9472 := n490;
//     else
//       if abs(n768) < n770 or abs(n771) <= abs(n772) then
//         n768 := n497;
//         n136 := n768;
//       else
//         n61 := n772 / n771;
//         if n130 == n58 then
//           n403 := 2.0 * n497 * n61;
//           n769 := 1.0 - n61;
//         else
//           n769 := n771 / n773;
//           n723 := n772 / n773;
//           n403 := n61 * (2.0 * n497 * n769 * (n769 - n723) - (n490 - n130) * (n723 - 1.0));
//           n769 := (n769 - 1.0) * (n723 - 1.0) * (n61 - 1.0);
//         end if;
//         if n403 > 0.0 then
//           n769 := -n769;
//         else
//           n403 := -n403;
//         end if;
//         n61 := n768;
//         n768 := n136;
//         if 2.0 * n403 < 3.0 * n497 * n769 - abs(n770 * n769) and n403 < abs(0.5 * n61 * n769) then
//           n136 := n403 / n769;
//         else
//           n768 := n497;
//           n136 := n768;
//         end if;
//       end if;
//       n130 := n490;
//       n771 := n772;
//       n490 := n490 + (if abs(n136) > n770 then n136 else if n497 > 0.0 then n770 else -n770);
//       n772 := n1.n7656.n102.n8149.n7837.n7670.n10111.n12.n9475(n490, n7786, n6343, n9476) - n9469;
//       if n772 > 0.0 and n773 > 0.0 or n772 < 0.0 and n773 < 0.0 then
//         n58 := n130;
//         n773 := n771;
//         n768 := n490 - n130;
//         n136 := n768;
//       end if;
//     end if;
//   end while;
// end n1.n7656.n102.n8149.n7837.n7670.n10111.n12.n8551;
//
// function n1.n7656.n102.n8149.n7837.n7670.n10111.n12.n9471 \"Automatically generated record constructor for n1.n7656.n102.n8149.n7837.n7670.n10111.n12.n9471\"
//   input String n59;
//   input Real n9229;
//   input Real n9787;
//   input Real n5519;
//   input Real n10373;
//   input Real[7] n10374;
//   input Real[2] n10375;
//   input Real[7] n10376;
//   input Real[2] n10377;
//   input Real n344;
//   output n9471 res;
// end n1.n7656.n102.n8149.n7837.n7670.n10111.n12.n9471;
//
// function n1.n7656.n102.n8149.n7837.n7670.n10111.n12.n9475
//   input Real n637;
//   input Real n403 = 0.0;
//   input Real[:] n6343 = {};
//   input n1.n7656.n102.n8149.n7837.n7670.n10111.n12.n9471 n9476;
//   output Real n159;
// algorithm
//   n159 := n1.n7656.n102.n8149.n7837.n7670.n10138(n403, n637, n6343);
// end n1.n7656.n102.n8149.n7837.n7670.n10111.n12.n9475;
//
// function n1.n7656.n102.n8149.n7837.n7670.n10117
//   input Real n7827(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   output Real n7826(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0);
//   protected Real n10118(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 647.096;
//   protected Real n10119(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 22064000.0;
//   protected Real[:] n130 = {-7.85951783, 1.84408259, -11.7866497, 22.6807411, -15.9618719, 1.80122502};
//   protected Real[:] n228 = {1.0, 1.5, 3.0, 3.5, 4.0, 7.5};
//   protected Real n1968 = 1.0 - n7827 / n10118;
// algorithm
//   n7826 := exp((n130[1] * n1968 ^ n228[1] + n130[2] * n1968 ^ n228[2] + n130[3] * n1968 ^ n228[3] + n130[4] * n1968 ^ n228[4] + n130[5] * n1968 ^ n228[5] + n130[6] * n1968 ^ n228[6]) * n10118 / n7827) * n10119;
// end n1.n7656.n102.n8149.n7837.n7670.n10117;
//
// function n1.n7656.n102.n8149.n7837.n7670.n10120
//   input Real n7827(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   input Real n10121(unit = \"K/s\");
//   output Real n10122(unit = \"Pa/s\");
//   protected Real n10118(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 647.096;
//   protected Real n10119(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 22064000.0;
//   protected Real[:] n130 = {-7.85951783, 1.84408259, -11.7866497, 22.6807411, -15.9618719, 1.80122502};
//   protected Real[:] n228 = {1.0, 1.5, 3.0, 3.5, 4.0, 7.5};
//   protected Real n1968 = 1.0 - n7827 / n10118;
//   protected Real n10123 = -1.0 / n10118 * n10121;
//   protected Real n1969 = n130[1] * n1968 ^ n228[1] + n130[2] * n1968 ^ n228[2] + n130[3] * n1968 ^ n228[3] + n130[4] * n1968 ^ n228[4] + n130[5] * n1968 ^ n228[5] + n130[6] * n1968 ^ n228[6];
// algorithm
//   n10122 := exp(n1969 * n10118 / n7827) * n10119 * ((n130[1] * n1968 ^ (n228[1] - 1.0) * n228[1] * n10123 + n130[2] * n1968 ^ (n228[2] - 1.0) * n228[2] * n10123 + n130[3] * n1968 ^ (n228[3] - 1.0) * n228[3] * n10123 + n130[4] * n1968 ^ (n228[4] - 1.0) * n228[4] * n10123 + n130[5] * n1968 ^ (n228[5] - 1.0) * n228[5] * n10123 + n130[6] * n1968 ^ (n228[6] - 1.0) * n228[6] * n10123) * n10118 / n7827 - n1969 * n10118 * n10121 / n7827 ^ 2.0);
// end n1.n7656.n102.n8149.n7837.n7670.n10120;
//
// function n1.n7656.n102.n8149.n7837.n7670.n10124
//   input Real n7827(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   output Real n7826(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0);
//   protected Real n10125(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 273.16;
//   protected Real n10126(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 611.657;
//   protected Real[:] n130 = {-13.928169, 34.7078238};
//   protected Real[:] n228 = {-1.5, -1.25};
//   protected Real n1968 = n7827 / n10125;
// algorithm
//   n7826 := exp(n130[1] - n130[1] * n1968 ^ n228[1] + n130[2] - n130[2] * n1968 ^ n228[2]) * n10126;
// end n1.n7656.n102.n8149.n7837.n7670.n10124;
//
// function n1.n7656.n102.n8149.n7837.n7670.n10127
//   input Real n7827(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   input Real n10121(unit = \"K/s\");
//   output Real n10122(unit = \"Pa/s\");
//   protected Real n10125(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 273.16;
//   protected Real n10126(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 611.657;
//   protected Real[:] n130 = {-13.928169, 34.7078238};
//   protected Real[:] n228 = {-1.5, -1.25};
//   protected Real n1968 = n7827 / n10125;
//   protected Real n10123 = n10121 / n10125;
// algorithm
//   n10122 := exp(n130[1] - n130[1] * n1968 ^ n228[1] + n130[2] - n130[2] * n1968 ^ n228[2]) * n10126 * ((-n130[1] * n1968 ^ (n228[1] - 1.0) * n228[1] * n10123) - n130[2] * n1968 ^ (n228[2] - 1.0) * n228[2] * n10123);
// end n1.n7656.n102.n8149.n7837.n7670.n10127;
//
// function n1.n7656.n102.n8149.n7837.n7670.n10128
//   input Real n7827(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   input Real n10121(unit = \"K/s\");
//   output Real n10122(unit = \"Pa/s\");
// algorithm
//   n10122 := n1.n7656.n102.n8149.n7837.n7670.n11.n10129(n1.n7656.n102.n8149.n7837.n7670.n10117(n7827), n1.n7656.n102.n8149.n7837.n7670.n10124(n7827), n7827 - 273.16, 1.0, n1.n7656.n102.n8149.n7837.n7670.n10120(n7827, n10121), n1.n7656.n102.n8149.n7837.n7670.n10127(n7827, n10121), n10121, 0.0);
// end n1.n7656.n102.n8149.n7837.n7670.n10128;
//
// function n1.n7656.n102.n8149.n7837.n7670.n10136
//   input Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   output Real n3331(quantity = \"SpecificEnergy\", unit = \"J/kg\");
// algorithm
//   n3331 := n1.n7656.n102.n8149.n7837.n7670.n11.n8436(4200.0 * (n217 - 273.15), 2050.0 * (n217 - 273.15) - 333000.0, n217 - 273.16, 0.1);
// end n1.n7656.n102.n8149.n7837.n7670.n10136;
//
// function n1.n7656.n102.n8149.n7837.n7670.n10137
//   input Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   input Real n8197(unit = \"K/s\");
//   output Real n9441(unit = \"J/(kg.s)\");
// algorithm
//   n9441 := n1.n7656.n102.n8149.n7837.n7670.n11.n10129(4200.0 * (n217 - 273.15), 2050.0 * (n217 - 273.15) - 333000.0, n217 - 273.16, 0.1, 4200.0 * n8197, 2050.0 * n8197, n8197, 0.0);
// end n1.n7656.n102.n8149.n7837.n7670.n10137;
//
// function n1.n7656.n102.n8149.n7837.n7670.n10138
//   input Real n403(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   input Real[:] n6343(quantity = fill(\"MassFraction\", size(n6343, 1)), unit = fill(\"1\", size(n6343, 1)), min = fill(0.0, size(n6343, 1)), max = fill(1.0, size(n6343, 1)));
//   output Real n3331(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   protected Real n10110(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0);
//   protected Real n10108(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10105(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10106(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10107(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
// algorithm
//   n10110 := n1.n7656.n102.n8149.n7837.n7670.n8562(n217);
//   n10108 := min(n10110 * 0.6219647130774989 / max(1e-13, n403 - n10110) * (1.0 - n6343[1]), 1.0);
//   n10105 := max(n6343[1] - n10108, 0.0);
//   n10106 := n6343[1] - n10105;
//   n10107 := 1.0 - n6343[1];
//   n3331 := n1.n7671.n9351.n9473.n885.n10135(n1.n7671.n9351.n9473.n10104(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), n217, true, n1.n7671.n365.n8633.n9642.n9645, 2547494.319) * n10106 + n1.n7671.n9351.n9473.n885.n10135(n1.n7671.n9351.n9473.n10104(\"Air\", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), n217, true, n1.n7671.n365.n8633.n9642.n9645, 25104.684) * n10107 + n1.n7656.n102.n8149.n7837.n7670.n10136(n217) * n10105;
// end n1.n7656.n102.n8149.n7837.n7670.n10138;
//
// function n1.n7656.n102.n8149.n7837.n7670.n10139
//   input Real n403(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   input Real[:] n6343(quantity = fill(\"MassFraction\", size(n6343, 1)), unit = fill(\"1\", size(n6343, 1)), min = fill(0.0, size(n6343, 1)), max = fill(1.0, size(n6343, 1)));
//   input Real n4510(unit = \"Pa/s\");
//   input Real n8197(unit = \"K/s\");
//   input Real[:] n10140(unit = \"1/s\");
//   output Real n10059(unit = \"J/(kg.s)\");
//   protected Real n10110(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0);
//   protected Real n10108(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10105(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10106(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10107(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10109(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10141(unit = \"1/s\");
//   protected Real n10142(unit = \"1/s\");
//   protected Real n10143(unit = \"1/s\");
//   protected Real n9875(unit = \"Pa/s\");
//   protected Real n10144(unit = \"1/s\");
// algorithm
//   n10110 := n1.n7656.n102.n8149.n7837.n7670.n8562(n217);
//   n10109 := n10110 * 0.6219647130774989 / max(1e-13, n403 - n10110);
//   n10108 := min(n10109 * (1.0 - n6343[1]), 1.0);
//   n10105 := n1.n7656.n102.n8149.n7837.n7670.n11.n10145(n6343[1] - n10108, 0.0, 1e-05);
//   n10106 := n6343[1] - n10105;
//   n10107 := 1.0 - n6343[1];
//   n10142 := -n10140[1];
//   n9875 := n1.n7656.n102.n8149.n7837.n7670.n10128(n217, n8197);
//   n10144 := 0.6219647130774989 * (n9875 * (n403 - n10110) - n10110 * (n4510 - n9875)) / (n403 - n10110) / (n403 - n10110);
//   n10143 := n1.n7656.n102.n8149.n7837.n7670.n11.n10146(n6343[1] - n10108, 0.0, 1e-05, (1.0 + n10109) * n10140[1] - (1.0 - n6343[1]) * n10144, 0.0, 0.0);
//   n10141 := n10140[1] - n10143;
//   n10059 := n10106 * n1.n7671.n9351.n9473.n885.n10147(n1.n7671.n9351.n9473.n10104(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), n217, true, n1.n7671.n365.n8633.n9642.n9645, 2547494.319, n8197) + n10141 * n1.n7671.n9351.n9473.n885.n10135(n1.n7671.n9351.n9473.n10104(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), n217, true, n1.n7671.n365.n8633.n9642.n9645, 2547494.319) + n10107 * n1.n7671.n9351.n9473.n885.n10147(n1.n7671.n9351.n9473.n10104(\"Air\", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), n217, true, n1.n7671.n365.n8633.n9642.n9645, 25104.684, n8197) + n10142 * n1.n7671.n9351.n9473.n885.n10135(n1.n7671.n9351.n9473.n10104(\"Air\", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), n217, true, n1.n7671.n365.n8633.n9642.n9645, 25104.684) + n10105 * n1.n7656.n102.n8149.n7837.n7670.n10137(n217, n8197) + n10143 * n1.n7656.n102.n8149.n7837.n7670.n10136(n217);
// end n1.n7656.n102.n8149.n7837.n7670.n10139;
//
// function n1.n7656.n102.n8149.n7837.n7670.n11.n10129
//   input Real n8602;
//   input Real n10158;
//   input Real n637;
//   input Real n9237 = 1.0;
//   input Real n10161;
//   input Real n10162;
//   input Real n8496;
//   input Real n10163 = 0.0;
//   output Real n1629;
//   protected Real n10159;
//   protected Real n10160;
//   protected Real n10164;
//   protected Real n159;
// algorithm
//   n10160 := n637 / n9237;
//   n10159 := n10160 * 1.570796326794897;
//   n10164 := (n8496 - n10160 * n10163) / n9237;
//   if n10160 <= -0.99999999999 then
//     n159 := 0.0;
//   elseif n10160 >= 0.9999999999 then
//     n159 := 1.0;
//   else
//     n159 := (tanh(tan(n10159)) + 1.0) / 2.0;
//   end if;
//   n1629 := n10161 * n159 + (1.0 - n159) * n10162;
//   if abs(n10160) < 1.0 then
//     n1629 := n1629 + (n8602 - n10158) * n10164 * 1.570796326794897 / 2.0 / (cosh(tan(n10159)) * cos(n10159)) ^ 2.0;
//   end if;
// end n1.n7656.n102.n8149.n7837.n7670.n11.n10129;
//
// function n1.n7656.n102.n8149.n7837.n7670.n11.n10145
//   input Real n703;
//   input Real n704;
//   input Real n8496;
//   output Real n159;
// algorithm
//   n159 := max(n703, n704) + log(exp(4.0 / n8496 * (n703 - max(n703, n704))) + exp(4.0 / n8496 * (n704 - max(n703, n704)))) / (4.0 / n8496);
// end n1.n7656.n102.n8149.n7837.n7670.n11.n10145;
//
// function n1.n7656.n102.n8149.n7837.n7670.n11.n10146
//   input Real n703;
//   input Real n704;
//   input Real n8496;
//   input Real n10165;
//   input Real n10166;
//   input Real n9804;
//   output Real n7276;
// algorithm
//   n7276 := (if n703 > n704 then n10165 else n10166) + 0.25 * (((4.0 * (n10165 - (if n703 > n704 then n10165 else n10166)) / n8496 - 4.0 * (n703 - max(n703, n704)) * n9804 / n8496 ^ 2.0) * exp(4.0 * (n703 - max(n703, n704)) / n8496) + (4.0 * (n10166 - (if n703 > n704 then n10165 else n10166)) / n8496 - 4.0 * (n704 - max(n703, n704)) * n9804 / n8496 ^ 2.0) * exp(4.0 * (n704 - max(n703, n704)) / n8496)) * n8496 / (exp(4.0 * (n703 - max(n703, n704)) / n8496) + exp(4.0 * (n704 - max(n703, n704)) / n8496)) + log(exp(4.0 * (n703 - max(n703, n704)) / n8496) + exp(4.0 * (n704 - max(n703, n704)) / n8496)) * n9804);
// end n1.n7656.n102.n8149.n7837.n7670.n11.n10146;
//
// function n1.n7656.n102.n8149.n7837.n7670.n11.n8436
//   input Real n8602;
//   input Real n10158;
//   input Real n637;
//   input Real n9237 = 1.0;
//   output Real n1629;
//   protected Real n10159;
//   protected Real n10160;
//   protected Real n159;
// algorithm
//   n10160 := n637 / n9237;
//   n10159 := n10160 * 1.570796326794897;
//   if n10160 <= -0.999999999 then
//     n159 := 0.0;
//   elseif n10160 >= 0.999999999 then
//     n159 := 1.0;
//   else
//     n159 := (tanh(tan(n10159)) + 1.0) / 2.0;
//   end if;
//   n1629 := n8602 * n159 + (1.0 - n159) * n10158;
// end n1.n7656.n102.n8149.n7837.n7670.n11.n8436;
//
// function n1.n7656.n102.n8149.n7837.n7670.n523
//   input n1.n7656.n102.n8149.n7837.n7670.n8367 n865;
//   output Real n136(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
// algorithm
//   n136 := n865.n403 / (n1.n7656.n102.n8149.n7837.n7670.n9583(n865) * n865.n217);
// end n1.n7656.n102.n8149.n7837.n7670.n523;
//
// function n1.n7656.n102.n8149.n7837.n7670.n7785
//   input n1.n7656.n102.n8149.n7837.n7670.n8367 n865;
//   output Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
// algorithm
//   n217 := n865.n217;
// end n1.n7656.n102.n8149.n7837.n7670.n7785;
//
// function n1.n7656.n102.n8149.n7837.n7670.n7955
//   input Real n403(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   input Real n3331(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
//   input Real[:] n6343(quantity = fill(\"MassFraction\", size(n6343, 1)), unit = fill(\"kg/kg\", size(n6343, 1)), min = fill(0.0, size(n6343, 1)), max = fill(1.0, size(n6343, 1)), nominal = fill(0.1, size(n6343, 1))) = {0.01, 0.99};
//   output Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
// algorithm
//   n217 := n1.n7656.n102.n8149.n7837.n7670.n7785(n1.n7656.n102.n8149.n7837.n7670.n8338(n403, n3331, n6343));
// end n1.n7656.n102.n8149.n7837.n7670.n7955;
//
// function n1.n7656.n102.n8149.n7837.n7670.n7957
//   input Real n403(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   input Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   input Real[:] n6343(quantity = fill(\"MassFraction\", size(n6343, 1)), unit = fill(\"kg/kg\", size(n6343, 1)), min = fill(0.0, size(n6343, 1)), max = fill(1.0, size(n6343, 1)), nominal = fill(0.1, size(n6343, 1))) = {0.01, 0.99};
//   output Real n3331(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
// algorithm
//   n3331 := n1.n7656.n102.n8149.n7837.n7670.n8732(n1.n7656.n102.n8149.n7837.n7670.n8396(n403, n217, n6343));
// end n1.n7656.n102.n8149.n7837.n7670.n7957;
//
// function n1.n7656.n102.n8149.n7837.n7670.n8338
//   input Real n403(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   input Real n3331(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
//   input Real[:] n6343(quantity = fill(\"MassFraction\", size(n6343, 1)), unit = fill(\"kg/kg\", size(n6343, 1)), min = fill(0.0, size(n6343, 1)), max = fill(1.0, size(n6343, 1)), nominal = fill(0.1, size(n6343, 1))) = {0.01, 0.99};
//   output n1.n7656.n102.n8149.n7837.n7670.n8367 n865;
// algorithm
//   n865 := if size(n6343, 1) == 2 then n1.n7656.n102.n8149.n7837.n7670.n8367(n403, n1.n7656.n102.n8149.n7837.n7670.n10111(n403, n3331, n6343), n6343) else n1.n7656.n102.n8149.n7837.n7670.n8367(n403, n1.n7656.n102.n8149.n7837.n7670.n10111(n403, n3331, n6343), cat(1, n6343, {1.0 - sum(n6343)}));
// end n1.n7656.n102.n8149.n7837.n7670.n8338;
//
// function n1.n7656.n102.n8149.n7837.n7670.n8367 \"Automatically generated record constructor for n1.n7656.n102.n8149.n7837.n7670.n8367\"
//   input Real n403;
//   input Real n217;
//   input Real[2] n6343;
//   output n8367 res;
// end n1.n7656.n102.n8149.n7837.n7670.n8367;
//
// function n1.n7656.n102.n8149.n7837.n7670.n8396
//   input Real n403(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   input Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   input Real[:] n6343(quantity = fill(\"MassFraction\", size(n6343, 1)), unit = fill(\"kg/kg\", size(n6343, 1)), min = fill(0.0, size(n6343, 1)), max = fill(1.0, size(n6343, 1)), nominal = fill(0.1, size(n6343, 1))) = {0.01, 0.99};
//   output n1.n7656.n102.n8149.n7837.n7670.n8367 n865;
// algorithm
//   n865 := if size(n6343, 1) == 2 then n1.n7656.n102.n8149.n7837.n7670.n8367(n403, n217, n6343) else n1.n7656.n102.n8149.n7837.n7670.n8367(n403, n217, cat(1, n6343, {1.0 - sum(n6343)}));
// end n1.n7656.n102.n8149.n7837.n7670.n8396;
//
// function n1.n7656.n102.n8149.n7837.n7670.n8562
//   input Real n7827(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   output Real n7826(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
// algorithm
//   n7826 := n1.n7656.n102.n8149.n7837.n7670.n11.n8436(n1.n7656.n102.n8149.n7837.n7670.n10117(n7827), n1.n7656.n102.n8149.n7837.n7670.n10124(n7827), n7827 - 273.16, 1.0);
// end n1.n7656.n102.n8149.n7837.n7670.n8562;
//
// function n1.n7656.n102.n8149.n7837.n7670.n8732
//   input n1.n7656.n102.n8149.n7837.n7670.n8367 n865;
//   output Real n3331(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
// algorithm
//   n3331 := n1.n7656.n102.n8149.n7837.n7670.n10138(n865.n403, n865.n217, n865.n6343);
// end n1.n7656.n102.n8149.n7837.n7670.n8732;
//
// function n1.n7656.n102.n8149.n7837.n7670.n9583
//   input n1.n7656.n102.n8149.n7837.n7670.n8367 n865;
//   output Real n344(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\");
// algorithm
//   n344 := 287.0512249529787 * (1.0 - n865.n6343[1]) + 461.5233290850878 * n865.n6343[1];
// end n1.n7656.n102.n8149.n7837.n7670.n9583;
//
// function n1.n7656.n102.n8149.n7837.n7988.n7670.n7785
//   input n1.n7656.n102.n8149.n7837.n7988.n7670.n8367 n865;
//   output Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
// algorithm
//   n217 := n865.n217;
// end n1.n7656.n102.n8149.n7837.n7988.n7670.n7785;
//
// function n1.n7656.n102.n8149.n7837.n7988.n7670.n8367 \"Automatically generated record constructor for n1.n7656.n102.n8149.n7837.n7988.n7670.n8367\"
//   input Real n403;
//   input Real n217;
//   input Real[2] n6343;
//   output n8367 res;
// end n1.n7656.n102.n8149.n7837.n7988.n7670.n8367;
//
// function n1.n7656.n102.n8149.n7837.n8346.n7663.n12.n8476
//   input Real n8478(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real n8443(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0);
//   input Real n8444(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0);
//   input Real n8445(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0);
//   input Real n8446(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0);
//   input Real n2194(quantity = \"Length\", unit = \"m\");
//   input Real n6099(quantity = \"Length\", unit = \"m\", min = 0.0);
//   input Real n7704(quantity = \"Area\", unit = \"m2\");
//   input Real n8474(quantity = \"ReynoldsNumber\", unit = \"1\");
//   input Real n8475(quantity = \"ReynoldsNumber\", unit = \"1\");
//   input Real n3083(min = 0.0);
//   output Real n7744(quantity = \"MassFlowRate\", unit = \"kg/s\");
//   output Real n8479;
//   protected Real n457(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0);
//   protected Real n5456(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0);
//   protected Real n8487;
//   protected Real n2800(quantity = \"ReynoldsNumber\", unit = \"1\");
//   protected Real n8498;
//   protected Real n1201;
//   protected Real n1202;
// algorithm
//   if n8478 >= 0.0 then
//     n5456 := n8443;
//     n457 := n8445;
//   else
//     n5456 := n8444;
//     n457 := n8446;
//   end if;
//   n8487 := abs(n8478) * 2.0 * n6099 ^ 3.0 * n5456 / (n2194 * n457 * n457);
//   n1201 := 2.0 * n6099 ^ 3.0 * n5456 / (n2194 * n457 ^ 2.0);
//   n2800 := n8487 / 64.0;
//   n8498 := n1201 / 64.0;
//   if n2800 > n8474 then
//     n2800 := -2.0 * sqrt(n8487) * log10(2.51 / sqrt(n8487) + 0.27 * n3083);
//     n1202 := sqrt(n1201 * abs(n8478));
//     n8498 := 0.4342944819032518 * ((-2.0 * log(2.51 / n1202 + 0.27 * n3083) * n1201 / (2.0 * n1202)) + 5.02 / (2.0 * abs(n8478) * (2.51 / n1202 + 0.27 * n3083)));
//     if n2800 < n8475 then
//       (n2800, n8498) := n1.n7656.n102.n8149.n7837.n8346.n7663.n12.n8476.n8497(n8487, n8474, n8475, n3083, n8478);
//     end if;
//   end if;
//   n7744 := n7704 / n6099 * n457 * (if n8478 >= 0.0 then n2800 else -n2800);
//   n8479 := n7704 / n6099 * n457 * n8498;
// end n1.n7656.n102.n8149.n7837.n8346.n7663.n12.n8476;
//
// function n1.n7656.n102.n8149.n7837.n8346.n7663.n12.n8476.n8497
//   input Real n8487;
//   input Real n8474(quantity = \"ReynoldsNumber\", unit = \"1\");
//   input Real n8475(quantity = \"ReynoldsNumber\", unit = \"1\");
//   input Real n3083(min = 0.0);
//   input Real n8478(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   output Real n2800(quantity = \"ReynoldsNumber\", unit = \"1\");
//   output Real n8498;
//   protected Real n703 = log10(64.0 * n8474);
//   protected Real n233 = log10(n8474);
//   protected Real n8499 = 1.0;
//   protected Real n1202 = n3083 / 3.7 + 5.74 / n8475 ^ 0.9;
//   protected Real n637 = log10(n8487);
//   protected Real n159;
//   protected Real n8501;
//   protected Real n8490 = log10(n1202);
//   protected Real n1581 = 0.25 * (n8475 / n8490) ^ 2.0;
//   protected Real n8491 = 2.51 / sqrt(n1581) + 0.27 * n3083;
//   protected Real n704 = log10(n1581);
//   protected Real n8492 = -2.0 * sqrt(n1581) * log10(n8491);
//   protected Real n231 = log10(n8492);
//   protected Real n8500 = 0.5 + 1.090079149577162 / (n8492 * n8491);
// algorithm
//   (n159, n8501) := n1.n7656.n11.n8483(n637, n703, n704, n233, n231, n8499, n8500);
//   n2800 := 10.0 ^ n159;
//   n8498 := n2800 / abs(n8478) * n8501;
// end n1.n7656.n102.n8149.n7837.n8346.n7663.n12.n8476.n8497;
//
// function n1.n7656.n102.n8149.n7837.n8346.n7663.n8412
//   input Real n7744(quantity = \"MassFlowRate\", unit = \"kg/s\");
//   input Real n8443(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0);
//   input Real n8444(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0);
//   input Real n8445(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0);
//   input Real n8446(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0);
//   input Real n2194(quantity = \"Length\", unit = \"m\");
//   input Real n6099(quantity = \"Length\", unit = \"m\", min = 0.0);
//   input Real n7704(quantity = \"Area\", unit = \"m2\") = 3.141592653589793 * n6099 ^ 2.0 / 4.0;
//   input Real n8234(quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = 2.5e-05;
//   input Real n7750(quantity = \"MassFlowRate\", unit = \"kg/s\") = 0.01;
//   input Real n8328(quantity = \"ReynoldsNumber\", unit = \"1\") = 4000.0;
//   output Real n4510(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   protected Real n3083(min = 0.0) = n8234 / n6099;
//   protected Real n8475(quantity = \"ReynoldsNumber\", unit = \"1\") = n8328;
//   protected Real n457(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0);
//   protected Real n5456(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0);
//   protected Real n2800(quantity = \"ReynoldsNumber\", unit = \"1\");
//   protected Real n8487;
//   protected Real n8474(quantity = \"ReynoldsNumber\", unit = \"1\") = min(745.0 * exp(if n3083 <= 0.0065 then 1.0 else 0.0065 / n3083), n8328);
// algorithm
//   n5456 := if n7744 >= 0.0 then n8443 else n8444;
//   n457 := if n7744 >= 0.0 then n8445 else n8446;
//   n2800 := n6099 * abs(n7744) / (n7704 * n457);
//   n8487 := if n2800 <= n8474 then 64.0 * n2800 else if n2800 >= n8475 then 0.25 * (n2800 / log10(n3083 / 3.7 + 5.74 / n2800 ^ 0.9)) ^ 2.0 else n1.n7656.n102.n8149.n7837.n8346.n7663.n8412.n8488(n2800, n8474, n8475, n3083);
//   n4510 := n2194 * n457 * n457 / (2.0 * n5456 * n6099 * n6099 * n6099) * (if n7744 >= 0.0 then n8487 else -n8487);
// end n1.n7656.n102.n8149.n7837.n8346.n7663.n8412;
//
// function n1.n7656.n102.n8149.n7837.n8346.n7663.n8412.n8488
//   input Real n2800(quantity = \"ReynoldsNumber\", unit = \"1\");
//   input Real n8474(quantity = \"ReynoldsNumber\", unit = \"1\");
//   input Real n8475(quantity = \"ReynoldsNumber\", unit = \"1\");
//   input Real n3083;
//   output Real n8487;
//   protected Real n703 = log10(n8474);
//   protected Real n233 = log10(64.0 * n8474);
//   protected Real n8489 = 1.0;
//   protected Real n1201 = 1.121782646756099;
//   protected Real n1202 = n3083 / 3.7 + 5.74 / n8475 ^ 0.9;
//   protected Real n704 = log10(n8475);
//   protected Real n8496;
//   protected Real n8490 = log10(n1202);
//   protected Real n8494 = n704 - n703;
//   protected Real n1581 = 0.25 * (n8475 / n8490) ^ 2.0;
//   protected Real n8493 = 2.0 + 4.0 * n1201 / (n1202 * n8490 * n8475 ^ 0.9);
//   protected Real n8491 = 2.51 / sqrt(n1581) + 0.27 * n3083;
//   protected Real n231 = log10(n1581);
//   protected Real n8492 = -2.0 * sqrt(n1581) * log10(n8491);
//   protected Real n497 = (n231 - n233) / n8494;
//   protected Real n43 = (3.0 * n497 - 2.0 * n8489 - n8493) / n8494;
//   protected Real n45 = (n8489 + n8493 - 2.0 * n497) / (n8494 * n8494);
// algorithm
//   n8496 := log10(n2800 / n8474);
//   n8487 := 64.0 * n8474 * (n2800 / n8474) ^ (1.0 + n8496 * (n43 + n8496 * n45));
// end n1.n7656.n102.n8149.n7837.n8346.n7663.n8412.n8488;
//
// function n1.n7656.n102.n8149.n7837.n8346.n7663.n8415
//   input Real n4510(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real n8443(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0);
//   input Real n8444(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0);
//   input Real n8445(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0);
//   input Real n8446(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0);
//   input Real n2194(quantity = \"Length\", unit = \"m\");
//   input Real n6099(quantity = \"Length\", unit = \"m\", min = 0.0);
//   input Real n8447(unit = \"m2/s2\");
//   input Real n7704(quantity = \"Area\", unit = \"m2\") = 3.141592653589793 * n6099 ^ 2.0 / 4.0;
//   input Real n8234(quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = 2.5e-05;
//   input Real n8308(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 1.0;
//   input Real n8328(quantity = \"ReynoldsNumber\", unit = \"1\") = 4000.0;
//   output Real n7744(quantity = \"MassFlowRate\", unit = \"kg/s\");
//   protected Real n3083(min = 0.0) = n8234 / n6099;
//   protected Real n2800(quantity = \"ReynoldsNumber\", unit = \"1\");
//   protected Real n8475(quantity = \"ReynoldsNumber\", unit = \"1\") = n8328;
//   protected Real n8455(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   protected Real n8456(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   protected Real n8457(quantity = \"MassFlowRate\", unit = \"kg/s\");
//   protected Real n8458(quantity = \"MassFlowRate\", unit = \"kg/s\");
//   protected Real n8453(quantity = \"MassFlowRate\", unit = \"kg/s\");
//   protected Real n8454(quantity = \"MassFlowRate\", unit = \"kg/s\");
//   protected Real n8451(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = n8447 * n8443;
//   protected Real n8452(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = n8447 * n8444;
//   protected Real n8459(quantity = \"MassFlowRate\", unit = \"kg/s\") = 0.0;
//   protected Real n8461;
//   protected Real n8474(quantity = \"ReynoldsNumber\", unit = \"1\") = min((745.0 * exp(if n3083 <= 0.0065 then 1.0 else 0.0065 / n3083)) ^ 0.97, n8328);
//   protected Real n8460(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = (n8451 + n8452) / 2.0;
// algorithm
//   n8455 := max(n8451, n8452) + n8308;
//   n8456 := min(n8451, n8452) - n8308;
//   if n4510 >= n8455 then
//     n7744 := n1.n7656.n102.n8149.n7837.n8346.n7663.n12.n8476(n4510 - n8451, n8443, n8444, n8445, n8446, n2194, n6099, n7704, n8474, n8475, n3083)[1];
//   elseif n4510 <= n8456 then
//     n7744 := n1.n7656.n102.n8149.n7837.n8346.n7663.n12.n8476(n4510 - n8452, n8443, n8444, n8445, n8446, n2194, n6099, n7704, n8474, n8475, n3083)[1];
//   else
//     (n8457, n8453) := n1.n7656.n102.n8149.n7837.n8346.n7663.n12.n8476(n8455 - n8451, n8443, n8444, n8445, n8446, n2194, n6099, n7704, n8474, n8475, n3083);
//     (n8458, n8454) := n1.n7656.n102.n8149.n7837.n8346.n7663.n12.n8476(n8456 - n8452, n8443, n8444, n8445, n8446, n2194, n6099, n7704, n8474, n8475, n3083);
//     (n7744, n8461) := n1.n7656.n11.n8462(n8460, n8456, n8455, n8458, n8457, n8454, n8453);
//     if n4510 > n8460 then
//       n7744 := n1.n7656.n11.n8462(n4510, n8460, n8455, n8459, n8457, n8461, n8453)[1];
//     else
//       n7744 := n1.n7656.n11.n8462(n4510, n8456, n8460, n8458, n8459, n8454, n8461)[1];
//     end if;
//   end if;
// end n1.n7656.n102.n8149.n7837.n8346.n7663.n8415;
//
// function n1.n7656.n102.n8149.n7837.n8346.n7670.n523
//   input n1.n7656.n102.n8149.n7837.n8346.n7670.n8367 n865;
//   output Real n136(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
// algorithm
//   n136 := n865.n403 / (n1.n7656.n102.n8149.n7837.n8346.n7670.n9583(n865) * n865.n217);
// end n1.n7656.n102.n8149.n7837.n8346.n7670.n523;
//
// function n1.n7656.n102.n8149.n7837.n8346.n7670.n7786
//   input n1.n7656.n102.n8149.n7837.n8346.n7670.n8367 n865;
//   output Real n403(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
// algorithm
//   n403 := n865.n403;
// end n1.n7656.n102.n8149.n7837.n8346.n7670.n7786;
//
// function n1.n7656.n102.n8149.n7837.n8346.n7670.n8340
//   input n1.n7656.n102.n8149.n7837.n8346.n7670.n8367 n865;
//   output Real n4890(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
// algorithm
//   n4890 := 1e-06 * n1.n7671.n8128.n9970.n9971.n9972({9.739110288630587e-15, -3.135372487033391e-11, 4.300487659564222e-08, -3.822801629175824e-05, 0.05042787436718076, 17.23926013924253}, -150.0, 1000.0, n1.n101.n946.n949(n865.n217));
// end n1.n7656.n102.n8149.n7837.n8346.n7670.n8340;
//
// function n1.n7656.n102.n8149.n7837.n8346.n7670.n8367 \"Automatically generated record constructor for n1.n7656.n102.n8149.n7837.n8346.n7670.n8367\"
//   input Real n403;
//   input Real n217;
//   input Real[2] n6343;
//   output n8367 res;
// end n1.n7656.n102.n8149.n7837.n8346.n7670.n8367;
//
// function n1.n7656.n102.n8149.n7837.n8346.n7670.n9583
//   input n1.n7656.n102.n8149.n7837.n8346.n7670.n8367 n865;
//   output Real n344(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\");
// algorithm
//   n344 := 287.0512249529787 * (1.0 - n865.n6343[1]) + 461.5233290850878 * n865.n6343[1];
// end n1.n7656.n102.n8149.n7837.n8346.n7670.n9583;
//
// function n1.n7656.n102.n8149.n8133.n7670.n10111
//   input Real n403(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   input Real n3331(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
//   input Real[:] n6343(quantity = fill(\"MassFraction\", size(n6343, 1)), unit = fill(\"kg/kg\", size(n6343, 1)), min = fill(0.0, size(n6343, 1)), max = fill(1.0, size(n6343, 1)), nominal = fill(0.1, size(n6343, 1)));
//   output Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
// algorithm
//   n217 := n1.n7656.n102.n8149.n8133.n7670.n10111.n12.n8551(n3331, 190.0, 647.0, n403, n6343[1:1], n1.n7671.n9351.n9473.n10104(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), 1e-13);
// end n1.n7656.n102.n8149.n8133.n7670.n10111;
//
// function n1.n7656.n102.n8149.n8133.n7670.n10111.n12.n8551
//   input Real n9469;
//   input Real n5250;
//   input Real n5263;
//   input Real n7786 = 0.0;
//   input Real[:] n6343 = {};
//   input n1.n7656.n102.n8149.n8133.n7670.n10111.n12.n9471 n9476;
//   input Real n9964 = 1e-13;
//   output Real n9472;
//   protected constant Real n23 = 1e-15;
//   protected constant Real n9965 = 1e-10;
//   protected Real n58;
//   protected Real n136;
//   protected Real n768;
//   protected Real n497;
//   protected Real n61;
//   protected Real n403;
//   protected Real n769;
//   protected Real n723;
//   protected Real n770;
//   protected Real n771;
//   protected Real n772;
//   protected Real n773;
//   protected Boolean n774 = false;
//   protected Real n9966 = n5250 - n9965;
//   protected Real n9967 = n5263 + n9965;
//   protected Real n130 = n9966;
//   protected Real n490 = n9967;
// algorithm
//   n771 := n1.n7656.n102.n8149.n8133.n7670.n10111.n12.n9475(n9966, n7786, n6343, n9476) - n9469;
//   n772 := n1.n7656.n102.n8149.n8133.n7670.n10111.n12.n9475(n9967, n7786, n6343, n9476) - n9469;
//   n773 := n772;
//   if n771 > 0.0 and n772 > 0.0 or n771 < 0.0 and n772 < 0.0 then
//     n1.n11.n681.n682(\"The arguments x_min and x_max to OneNonLinearEquation.solve(..)
//     do not bracket the root of the single non-linear equation:
//       x_min  = \" + String(n9966, 6, 0, true) + \"
//     \" + \"  x_max  = \" + String(n9967, 6, 0, true) + \"
//     \" + \"  y_zero = \" + String(n9469, 6, 0, true) + \"
//     \" + \"  fa = f(x_min) - y_zero = \" + String(n771, 6, 0, true) + \"
//     \" + \"  fb = f(x_max) - y_zero = \" + String(n772, 6, 0, true) + \"
//     \" + \"fa and fb must have opposite sign which is not the case\");
//   end if;
//   n58 := n130;
//   n773 := n771;
//   n768 := n490 - n130;
//   n136 := n768;
//   while not n774 loop
//     if abs(n773) < abs(n772) then
//       n130 := n490;
//       n490 := n58;
//       n58 := n130;
//       n771 := n772;
//       n772 := n773;
//       n773 := n771;
//     end if;
//     n770 := 2.0 * n23 * abs(n490) + n9964;
//     n497 := (n58 - n490) / 2.0;
//     if abs(n497) <= n770 or n772 == 0.0 then
//       n774 := true;
//       n9472 := n490;
//     else
//       if abs(n768) < n770 or abs(n771) <= abs(n772) then
//         n768 := n497;
//         n136 := n768;
//       else
//         n61 := n772 / n771;
//         if n130 == n58 then
//           n403 := 2.0 * n497 * n61;
//           n769 := 1.0 - n61;
//         else
//           n769 := n771 / n773;
//           n723 := n772 / n773;
//           n403 := n61 * (2.0 * n497 * n769 * (n769 - n723) - (n490 - n130) * (n723 - 1.0));
//           n769 := (n769 - 1.0) * (n723 - 1.0) * (n61 - 1.0);
//         end if;
//         if n403 > 0.0 then
//           n769 := -n769;
//         else
//           n403 := -n403;
//         end if;
//         n61 := n768;
//         n768 := n136;
//         if 2.0 * n403 < 3.0 * n497 * n769 - abs(n770 * n769) and n403 < abs(0.5 * n61 * n769) then
//           n136 := n403 / n769;
//         else
//           n768 := n497;
//           n136 := n768;
//         end if;
//       end if;
//       n130 := n490;
//       n771 := n772;
//       n490 := n490 + (if abs(n136) > n770 then n136 else if n497 > 0.0 then n770 else -n770);
//       n772 := n1.n7656.n102.n8149.n8133.n7670.n10111.n12.n9475(n490, n7786, n6343, n9476) - n9469;
//       if n772 > 0.0 and n773 > 0.0 or n772 < 0.0 and n773 < 0.0 then
//         n58 := n130;
//         n773 := n771;
//         n768 := n490 - n130;
//         n136 := n768;
//       end if;
//     end if;
//   end while;
// end n1.n7656.n102.n8149.n8133.n7670.n10111.n12.n8551;
//
// function n1.n7656.n102.n8149.n8133.n7670.n10111.n12.n9471 \"Automatically generated record constructor for n1.n7656.n102.n8149.n8133.n7670.n10111.n12.n9471\"
//   input String n59;
//   input Real n9229;
//   input Real n9787;
//   input Real n5519;
//   input Real n10373;
//   input Real[7] n10374;
//   input Real[2] n10375;
//   input Real[7] n10376;
//   input Real[2] n10377;
//   input Real n344;
//   output n9471 res;
// end n1.n7656.n102.n8149.n8133.n7670.n10111.n12.n9471;
//
// function n1.n7656.n102.n8149.n8133.n7670.n10111.n12.n9475
//   input Real n637;
//   input Real n403 = 0.0;
//   input Real[:] n6343 = {};
//   input n1.n7656.n102.n8149.n8133.n7670.n10111.n12.n9471 n9476;
//   output Real n159;
// algorithm
//   n159 := n1.n7656.n102.n8149.n8133.n7670.n10138(n403, n637, n6343);
// end n1.n7656.n102.n8149.n8133.n7670.n10111.n12.n9475;
//
// function n1.n7656.n102.n8149.n8133.n7670.n10117
//   input Real n7827(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   output Real n7826(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0);
//   protected Real n10118(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 647.096;
//   protected Real n10119(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 22064000.0;
//   protected Real[:] n130 = {-7.85951783, 1.84408259, -11.7866497, 22.6807411, -15.9618719, 1.80122502};
//   protected Real[:] n228 = {1.0, 1.5, 3.0, 3.5, 4.0, 7.5};
//   protected Real n1968 = 1.0 - n7827 / n10118;
// algorithm
//   n7826 := exp((n130[1] * n1968 ^ n228[1] + n130[2] * n1968 ^ n228[2] + n130[3] * n1968 ^ n228[3] + n130[4] * n1968 ^ n228[4] + n130[5] * n1968 ^ n228[5] + n130[6] * n1968 ^ n228[6]) * n10118 / n7827) * n10119;
// end n1.n7656.n102.n8149.n8133.n7670.n10117;
//
// function n1.n7656.n102.n8149.n8133.n7670.n10120
//   input Real n7827(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   input Real n10121(unit = \"K/s\");
//   output Real n10122(unit = \"Pa/s\");
//   protected Real n10118(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 647.096;
//   protected Real n10119(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 22064000.0;
//   protected Real[:] n130 = {-7.85951783, 1.84408259, -11.7866497, 22.6807411, -15.9618719, 1.80122502};
//   protected Real[:] n228 = {1.0, 1.5, 3.0, 3.5, 4.0, 7.5};
//   protected Real n1968 = 1.0 - n7827 / n10118;
//   protected Real n10123 = -1.0 / n10118 * n10121;
//   protected Real n1969 = n130[1] * n1968 ^ n228[1] + n130[2] * n1968 ^ n228[2] + n130[3] * n1968 ^ n228[3] + n130[4] * n1968 ^ n228[4] + n130[5] * n1968 ^ n228[5] + n130[6] * n1968 ^ n228[6];
// algorithm
//   n10122 := exp(n1969 * n10118 / n7827) * n10119 * ((n130[1] * n1968 ^ (n228[1] - 1.0) * n228[1] * n10123 + n130[2] * n1968 ^ (n228[2] - 1.0) * n228[2] * n10123 + n130[3] * n1968 ^ (n228[3] - 1.0) * n228[3] * n10123 + n130[4] * n1968 ^ (n228[4] - 1.0) * n228[4] * n10123 + n130[5] * n1968 ^ (n228[5] - 1.0) * n228[5] * n10123 + n130[6] * n1968 ^ (n228[6] - 1.0) * n228[6] * n10123) * n10118 / n7827 - n1969 * n10118 * n10121 / n7827 ^ 2.0);
// end n1.n7656.n102.n8149.n8133.n7670.n10120;
//
// function n1.n7656.n102.n8149.n8133.n7670.n10124
//   input Real n7827(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   output Real n7826(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0);
//   protected Real n10125(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 273.16;
//   protected Real n10126(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 611.657;
//   protected Real[:] n130 = {-13.928169, 34.7078238};
//   protected Real[:] n228 = {-1.5, -1.25};
//   protected Real n1968 = n7827 / n10125;
// algorithm
//   n7826 := exp(n130[1] - n130[1] * n1968 ^ n228[1] + n130[2] - n130[2] * n1968 ^ n228[2]) * n10126;
// end n1.n7656.n102.n8149.n8133.n7670.n10124;
//
// function n1.n7656.n102.n8149.n8133.n7670.n10127
//   input Real n7827(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   input Real n10121(unit = \"K/s\");
//   output Real n10122(unit = \"Pa/s\");
//   protected Real n10125(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 273.16;
//   protected Real n10126(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 611.657;
//   protected Real[:] n130 = {-13.928169, 34.7078238};
//   protected Real[:] n228 = {-1.5, -1.25};
//   protected Real n1968 = n7827 / n10125;
//   protected Real n10123 = n10121 / n10125;
// algorithm
//   n10122 := exp(n130[1] - n130[1] * n1968 ^ n228[1] + n130[2] - n130[2] * n1968 ^ n228[2]) * n10126 * ((-n130[1] * n1968 ^ (n228[1] - 1.0) * n228[1] * n10123) - n130[2] * n1968 ^ (n228[2] - 1.0) * n228[2] * n10123);
// end n1.n7656.n102.n8149.n8133.n7670.n10127;
//
// function n1.n7656.n102.n8149.n8133.n7670.n10128
//   input Real n7827(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   input Real n10121(unit = \"K/s\");
//   output Real n10122(unit = \"Pa/s\");
// algorithm
//   n10122 := n1.n7656.n102.n8149.n8133.n7670.n11.n10129(n1.n7656.n102.n8149.n8133.n7670.n10117(n7827), n1.n7656.n102.n8149.n8133.n7670.n10124(n7827), n7827 - 273.16, 1.0, n1.n7656.n102.n8149.n8133.n7670.n10120(n7827, n10121), n1.n7656.n102.n8149.n8133.n7670.n10127(n7827, n10121), n10121, 0.0);
// end n1.n7656.n102.n8149.n8133.n7670.n10128;
//
// function n1.n7656.n102.n8149.n8133.n7670.n10136
//   input Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   output Real n3331(quantity = \"SpecificEnergy\", unit = \"J/kg\");
// algorithm
//   n3331 := n1.n7656.n102.n8149.n8133.n7670.n11.n8436(4200.0 * (n217 - 273.15), 2050.0 * (n217 - 273.15) - 333000.0, n217 - 273.16, 0.1);
// end n1.n7656.n102.n8149.n8133.n7670.n10136;
//
// function n1.n7656.n102.n8149.n8133.n7670.n10137
//   input Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   input Real n8197(unit = \"K/s\");
//   output Real n9441(unit = \"J/(kg.s)\");
// algorithm
//   n9441 := n1.n7656.n102.n8149.n8133.n7670.n11.n10129(4200.0 * (n217 - 273.15), 2050.0 * (n217 - 273.15) - 333000.0, n217 - 273.16, 0.1, 4200.0 * n8197, 2050.0 * n8197, n8197, 0.0);
// end n1.n7656.n102.n8149.n8133.n7670.n10137;
//
// function n1.n7656.n102.n8149.n8133.n7670.n10138
//   input Real n403(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   input Real[:] n6343(quantity = fill(\"MassFraction\", size(n6343, 1)), unit = fill(\"1\", size(n6343, 1)), min = fill(0.0, size(n6343, 1)), max = fill(1.0, size(n6343, 1)));
//   output Real n3331(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   protected Real n10110(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0);
//   protected Real n10108(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10105(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10106(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10107(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
// algorithm
//   n10110 := n1.n7656.n102.n8149.n8133.n7670.n8562(n217);
//   n10108 := min(n10110 * 0.6219647130774989 / max(1e-13, n403 - n10110) * (1.0 - n6343[1]), 1.0);
//   n10105 := max(n6343[1] - n10108, 0.0);
//   n10106 := n6343[1] - n10105;
//   n10107 := 1.0 - n6343[1];
//   n3331 := n1.n7671.n9351.n9473.n885.n10135(n1.n7671.n9351.n9473.n10104(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), n217, true, n1.n7671.n365.n8633.n9642.n9645, 2547494.319) * n10106 + n1.n7671.n9351.n9473.n885.n10135(n1.n7671.n9351.n9473.n10104(\"Air\", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), n217, true, n1.n7671.n365.n8633.n9642.n9645, 25104.684) * n10107 + n1.n7656.n102.n8149.n8133.n7670.n10136(n217) * n10105;
// end n1.n7656.n102.n8149.n8133.n7670.n10138;
//
// function n1.n7656.n102.n8149.n8133.n7670.n10139
//   input Real n403(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   input Real[:] n6343(quantity = fill(\"MassFraction\", size(n6343, 1)), unit = fill(\"1\", size(n6343, 1)), min = fill(0.0, size(n6343, 1)), max = fill(1.0, size(n6343, 1)));
//   input Real n4510(unit = \"Pa/s\");
//   input Real n8197(unit = \"K/s\");
//   input Real[:] n10140(unit = \"1/s\");
//   output Real n10059(unit = \"J/(kg.s)\");
//   protected Real n10110(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0);
//   protected Real n10108(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10105(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10106(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10107(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10109(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10141(unit = \"1/s\");
//   protected Real n10142(unit = \"1/s\");
//   protected Real n10143(unit = \"1/s\");
//   protected Real n9875(unit = \"Pa/s\");
//   protected Real n10144(unit = \"1/s\");
// algorithm
//   n10110 := n1.n7656.n102.n8149.n8133.n7670.n8562(n217);
//   n10109 := n10110 * 0.6219647130774989 / max(1e-13, n403 - n10110);
//   n10108 := min(n10109 * (1.0 - n6343[1]), 1.0);
//   n10105 := n1.n7656.n102.n8149.n8133.n7670.n11.n10145(n6343[1] - n10108, 0.0, 1e-05);
//   n10106 := n6343[1] - n10105;
//   n10107 := 1.0 - n6343[1];
//   n10142 := -n10140[1];
//   n9875 := n1.n7656.n102.n8149.n8133.n7670.n10128(n217, n8197);
//   n10144 := 0.6219647130774989 * (n9875 * (n403 - n10110) - n10110 * (n4510 - n9875)) / (n403 - n10110) / (n403 - n10110);
//   n10143 := n1.n7656.n102.n8149.n8133.n7670.n11.n10146(n6343[1] - n10108, 0.0, 1e-05, (1.0 + n10109) * n10140[1] - (1.0 - n6343[1]) * n10144, 0.0, 0.0);
//   n10141 := n10140[1] - n10143;
//   n10059 := n10106 * n1.n7671.n9351.n9473.n885.n10147(n1.n7671.n9351.n9473.n10104(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), n217, true, n1.n7671.n365.n8633.n9642.n9645, 2547494.319, n8197) + n10141 * n1.n7671.n9351.n9473.n885.n10135(n1.n7671.n9351.n9473.n10104(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), n217, true, n1.n7671.n365.n8633.n9642.n9645, 2547494.319) + n10107 * n1.n7671.n9351.n9473.n885.n10147(n1.n7671.n9351.n9473.n10104(\"Air\", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), n217, true, n1.n7671.n365.n8633.n9642.n9645, 25104.684, n8197) + n10142 * n1.n7671.n9351.n9473.n885.n10135(n1.n7671.n9351.n9473.n10104(\"Air\", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), n217, true, n1.n7671.n365.n8633.n9642.n9645, 25104.684) + n10105 * n1.n7656.n102.n8149.n8133.n7670.n10137(n217, n8197) + n10143 * n1.n7656.n102.n8149.n8133.n7670.n10136(n217);
// end n1.n7656.n102.n8149.n8133.n7670.n10139;
//
// function n1.n7656.n102.n8149.n8133.n7670.n11.n10129
//   input Real n8602;
//   input Real n10158;
//   input Real n637;
//   input Real n9237 = 1.0;
//   input Real n10161;
//   input Real n10162;
//   input Real n8496;
//   input Real n10163 = 0.0;
//   output Real n1629;
//   protected Real n10159;
//   protected Real n10160;
//   protected Real n10164;
//   protected Real n159;
// algorithm
//   n10160 := n637 / n9237;
//   n10159 := n10160 * 1.570796326794897;
//   n10164 := (n8496 - n10160 * n10163) / n9237;
//   if n10160 <= -0.99999999999 then
//     n159 := 0.0;
//   elseif n10160 >= 0.9999999999 then
//     n159 := 1.0;
//   else
//     n159 := (tanh(tan(n10159)) + 1.0) / 2.0;
//   end if;
//   n1629 := n10161 * n159 + (1.0 - n159) * n10162;
//   if abs(n10160) < 1.0 then
//     n1629 := n1629 + (n8602 - n10158) * n10164 * 1.570796326794897 / 2.0 / (cosh(tan(n10159)) * cos(n10159)) ^ 2.0;
//   end if;
// end n1.n7656.n102.n8149.n8133.n7670.n11.n10129;
//
// function n1.n7656.n102.n8149.n8133.n7670.n11.n10145
//   input Real n703;
//   input Real n704;
//   input Real n8496;
//   output Real n159;
// algorithm
//   n159 := max(n703, n704) + log(exp(4.0 / n8496 * (n703 - max(n703, n704))) + exp(4.0 / n8496 * (n704 - max(n703, n704)))) / (4.0 / n8496);
// end n1.n7656.n102.n8149.n8133.n7670.n11.n10145;
//
// function n1.n7656.n102.n8149.n8133.n7670.n11.n10146
//   input Real n703;
//   input Real n704;
//   input Real n8496;
//   input Real n10165;
//   input Real n10166;
//   input Real n9804;
//   output Real n7276;
// algorithm
//   n7276 := (if n703 > n704 then n10165 else n10166) + 0.25 * (((4.0 * (n10165 - (if n703 > n704 then n10165 else n10166)) / n8496 - 4.0 * (n703 - max(n703, n704)) * n9804 / n8496 ^ 2.0) * exp(4.0 * (n703 - max(n703, n704)) / n8496) + (4.0 * (n10166 - (if n703 > n704 then n10165 else n10166)) / n8496 - 4.0 * (n704 - max(n703, n704)) * n9804 / n8496 ^ 2.0) * exp(4.0 * (n704 - max(n703, n704)) / n8496)) * n8496 / (exp(4.0 * (n703 - max(n703, n704)) / n8496) + exp(4.0 * (n704 - max(n703, n704)) / n8496)) + log(exp(4.0 * (n703 - max(n703, n704)) / n8496) + exp(4.0 * (n704 - max(n703, n704)) / n8496)) * n9804);
// end n1.n7656.n102.n8149.n8133.n7670.n11.n10146;
//
// function n1.n7656.n102.n8149.n8133.n7670.n11.n8436
//   input Real n8602;
//   input Real n10158;
//   input Real n637;
//   input Real n9237 = 1.0;
//   output Real n1629;
//   protected Real n10159;
//   protected Real n10160;
//   protected Real n159;
// algorithm
//   n10160 := n637 / n9237;
//   n10159 := n10160 * 1.570796326794897;
//   if n10160 <= -0.999999999 then
//     n159 := 0.0;
//   elseif n10160 >= 0.999999999 then
//     n159 := 1.0;
//   else
//     n159 := (tanh(tan(n10159)) + 1.0) / 2.0;
//   end if;
//   n1629 := n8602 * n159 + (1.0 - n159) * n10158;
// end n1.n7656.n102.n8149.n8133.n7670.n11.n8436;
//
// function n1.n7656.n102.n8149.n8133.n7670.n523
//   input n1.n7656.n102.n8149.n8133.n7670.n8367 n865;
//   output Real n136(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
// algorithm
//   n136 := n865.n403 / (n1.n7656.n102.n8149.n8133.n7670.n9583(n865) * n865.n217);
// end n1.n7656.n102.n8149.n8133.n7670.n523;
//
// function n1.n7656.n102.n8149.n8133.n7670.n7785
//   input n1.n7656.n102.n8149.n8133.n7670.n8367 n865;
//   output Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
// algorithm
//   n217 := n865.n217;
// end n1.n7656.n102.n8149.n8133.n7670.n7785;
//
// function n1.n7656.n102.n8149.n8133.n7670.n7955
//   input Real n403(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   input Real n3331(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
//   input Real[:] n6343(quantity = fill(\"MassFraction\", size(n6343, 1)), unit = fill(\"kg/kg\", size(n6343, 1)), min = fill(0.0, size(n6343, 1)), max = fill(1.0, size(n6343, 1)), nominal = fill(0.1, size(n6343, 1))) = {0.01, 0.99};
//   output Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
// algorithm
//   n217 := n1.n7656.n102.n8149.n8133.n7670.n7785(n1.n7656.n102.n8149.n8133.n7670.n8338(n403, n3331, n6343));
// end n1.n7656.n102.n8149.n8133.n7670.n7955;
//
// function n1.n7656.n102.n8149.n8133.n7670.n7957
//   input Real n403(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   input Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   input Real[:] n6343(quantity = fill(\"MassFraction\", size(n6343, 1)), unit = fill(\"kg/kg\", size(n6343, 1)), min = fill(0.0, size(n6343, 1)), max = fill(1.0, size(n6343, 1)), nominal = fill(0.1, size(n6343, 1))) = {0.01, 0.99};
//   output Real n3331(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
// algorithm
//   n3331 := n1.n7656.n102.n8149.n8133.n7670.n8732(n1.n7656.n102.n8149.n8133.n7670.n8396(n403, n217, n6343));
// end n1.n7656.n102.n8149.n8133.n7670.n7957;
//
// function n1.n7656.n102.n8149.n8133.n7670.n8338
//   input Real n403(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   input Real n3331(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
//   input Real[:] n6343(quantity = fill(\"MassFraction\", size(n6343, 1)), unit = fill(\"kg/kg\", size(n6343, 1)), min = fill(0.0, size(n6343, 1)), max = fill(1.0, size(n6343, 1)), nominal = fill(0.1, size(n6343, 1))) = {0.01, 0.99};
//   output n1.n7656.n102.n8149.n8133.n7670.n8367 n865;
// algorithm
//   n865 := if size(n6343, 1) == 2 then n1.n7656.n102.n8149.n8133.n7670.n8367(n403, n1.n7656.n102.n8149.n8133.n7670.n10111(n403, n3331, n6343), n6343) else n1.n7656.n102.n8149.n8133.n7670.n8367(n403, n1.n7656.n102.n8149.n8133.n7670.n10111(n403, n3331, n6343), cat(1, n6343, {1.0 - sum(n6343)}));
// end n1.n7656.n102.n8149.n8133.n7670.n8338;
//
// function n1.n7656.n102.n8149.n8133.n7670.n8367 \"Automatically generated record constructor for n1.n7656.n102.n8149.n8133.n7670.n8367\"
//   input Real n403;
//   input Real n217;
//   input Real[2] n6343;
//   output n8367 res;
// end n1.n7656.n102.n8149.n8133.n7670.n8367;
//
// function n1.n7656.n102.n8149.n8133.n7670.n8396
//   input Real n403(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   input Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   input Real[:] n6343(quantity = fill(\"MassFraction\", size(n6343, 1)), unit = fill(\"kg/kg\", size(n6343, 1)), min = fill(0.0, size(n6343, 1)), max = fill(1.0, size(n6343, 1)), nominal = fill(0.1, size(n6343, 1))) = {0.01, 0.99};
//   output n1.n7656.n102.n8149.n8133.n7670.n8367 n865;
// algorithm
//   n865 := if size(n6343, 1) == 2 then n1.n7656.n102.n8149.n8133.n7670.n8367(n403, n217, n6343) else n1.n7656.n102.n8149.n8133.n7670.n8367(n403, n217, cat(1, n6343, {1.0 - sum(n6343)}));
// end n1.n7656.n102.n8149.n8133.n7670.n8396;
//
// function n1.n7656.n102.n8149.n8133.n7670.n8562
//   input Real n7827(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   output Real n7826(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
// algorithm
//   n7826 := n1.n7656.n102.n8149.n8133.n7670.n11.n8436(n1.n7656.n102.n8149.n8133.n7670.n10117(n7827), n1.n7656.n102.n8149.n8133.n7670.n10124(n7827), n7827 - 273.16, 1.0);
// end n1.n7656.n102.n8149.n8133.n7670.n8562;
//
// function n1.n7656.n102.n8149.n8133.n7670.n8732
//   input n1.n7656.n102.n8149.n8133.n7670.n8367 n865;
//   output Real n3331(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
// algorithm
//   n3331 := n1.n7656.n102.n8149.n8133.n7670.n10138(n865.n403, n865.n217, n865.n6343);
// end n1.n7656.n102.n8149.n8133.n7670.n8732;
//
// function n1.n7656.n102.n8149.n8133.n7670.n9583
//   input n1.n7656.n102.n8149.n8133.n7670.n8367 n865;
//   output Real n344(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\");
// algorithm
//   n344 := 287.0512249529787 * (1.0 - n865.n6343[1]) + 461.5233290850878 * n865.n6343[1];
// end n1.n7656.n102.n8149.n8133.n7670.n9583;
//
// function n1.n7656.n102.n8149.n8133.n7988.n7670.n7785
//   input n1.n7656.n102.n8149.n8133.n7988.n7670.n8367 n865;
//   output Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
// algorithm
//   n217 := n865.n217;
// end n1.n7656.n102.n8149.n8133.n7988.n7670.n7785;
//
// function n1.n7656.n102.n8149.n8133.n7988.n7670.n8367 \"Automatically generated record constructor for n1.n7656.n102.n8149.n8133.n7988.n7670.n8367\"
//   input Real n403;
//   input Real n217;
//   input Real[2] n6343;
//   output n8367 res;
// end n1.n7656.n102.n8149.n8133.n7988.n7670.n8367;
//
// function n1.n7656.n102.n8149.n8133.n8346.n7663.n12.n8476
//   input Real n8478(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real n8443(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0);
//   input Real n8444(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0);
//   input Real n8445(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0);
//   input Real n8446(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0);
//   input Real n2194(quantity = \"Length\", unit = \"m\");
//   input Real n6099(quantity = \"Length\", unit = \"m\", min = 0.0);
//   input Real n7704(quantity = \"Area\", unit = \"m2\");
//   input Real n8474(quantity = \"ReynoldsNumber\", unit = \"1\");
//   input Real n8475(quantity = \"ReynoldsNumber\", unit = \"1\");
//   input Real n3083(min = 0.0);
//   output Real n7744(quantity = \"MassFlowRate\", unit = \"kg/s\");
//   output Real n8479;
//   protected Real n457(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0);
//   protected Real n5456(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0);
//   protected Real n8487;
//   protected Real n2800(quantity = \"ReynoldsNumber\", unit = \"1\");
//   protected Real n8498;
//   protected Real n1201;
//   protected Real n1202;
// algorithm
//   if n8478 >= 0.0 then
//     n5456 := n8443;
//     n457 := n8445;
//   else
//     n5456 := n8444;
//     n457 := n8446;
//   end if;
//   n8487 := abs(n8478) * 2.0 * n6099 ^ 3.0 * n5456 / (n2194 * n457 * n457);
//   n1201 := 2.0 * n6099 ^ 3.0 * n5456 / (n2194 * n457 ^ 2.0);
//   n2800 := n8487 / 64.0;
//   n8498 := n1201 / 64.0;
//   if n2800 > n8474 then
//     n2800 := -2.0 * sqrt(n8487) * log10(2.51 / sqrt(n8487) + 0.27 * n3083);
//     n1202 := sqrt(n1201 * abs(n8478));
//     n8498 := 0.4342944819032518 * ((-2.0 * log(2.51 / n1202 + 0.27 * n3083) * n1201 / (2.0 * n1202)) + 5.02 / (2.0 * abs(n8478) * (2.51 / n1202 + 0.27 * n3083)));
//     if n2800 < n8475 then
//       (n2800, n8498) := n1.n7656.n102.n8149.n8133.n8346.n7663.n12.n8476.n8497(n8487, n8474, n8475, n3083, n8478);
//     end if;
//   end if;
//   n7744 := n7704 / n6099 * n457 * (if n8478 >= 0.0 then n2800 else -n2800);
//   n8479 := n7704 / n6099 * n457 * n8498;
// end n1.n7656.n102.n8149.n8133.n8346.n7663.n12.n8476;
//
// function n1.n7656.n102.n8149.n8133.n8346.n7663.n12.n8476.n8497
//   input Real n8487;
//   input Real n8474(quantity = \"ReynoldsNumber\", unit = \"1\");
//   input Real n8475(quantity = \"ReynoldsNumber\", unit = \"1\");
//   input Real n3083(min = 0.0);
//   input Real n8478(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   output Real n2800(quantity = \"ReynoldsNumber\", unit = \"1\");
//   output Real n8498;
//   protected Real n703 = log10(64.0 * n8474);
//   protected Real n233 = log10(n8474);
//   protected Real n8499 = 1.0;
//   protected Real n1202 = n3083 / 3.7 + 5.74 / n8475 ^ 0.9;
//   protected Real n637 = log10(n8487);
//   protected Real n159;
//   protected Real n8501;
//   protected Real n8490 = log10(n1202);
//   protected Real n1581 = 0.25 * (n8475 / n8490) ^ 2.0;
//   protected Real n8491 = 2.51 / sqrt(n1581) + 0.27 * n3083;
//   protected Real n704 = log10(n1581);
//   protected Real n8492 = -2.0 * sqrt(n1581) * log10(n8491);
//   protected Real n231 = log10(n8492);
//   protected Real n8500 = 0.5 + 1.090079149577162 / (n8492 * n8491);
// algorithm
//   (n159, n8501) := n1.n7656.n11.n8483(n637, n703, n704, n233, n231, n8499, n8500);
//   n2800 := 10.0 ^ n159;
//   n8498 := n2800 / abs(n8478) * n8501;
// end n1.n7656.n102.n8149.n8133.n8346.n7663.n12.n8476.n8497;
//
// function n1.n7656.n102.n8149.n8133.n8346.n7663.n8412
//   input Real n7744(quantity = \"MassFlowRate\", unit = \"kg/s\");
//   input Real n8443(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0);
//   input Real n8444(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0);
//   input Real n8445(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0);
//   input Real n8446(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0);
//   input Real n2194(quantity = \"Length\", unit = \"m\");
//   input Real n6099(quantity = \"Length\", unit = \"m\", min = 0.0);
//   input Real n7704(quantity = \"Area\", unit = \"m2\") = 3.141592653589793 * n6099 ^ 2.0 / 4.0;
//   input Real n8234(quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = 2.5e-05;
//   input Real n7750(quantity = \"MassFlowRate\", unit = \"kg/s\") = 0.01;
//   input Real n8328(quantity = \"ReynoldsNumber\", unit = \"1\") = 4000.0;
//   output Real n4510(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   protected Real n3083(min = 0.0) = n8234 / n6099;
//   protected Real n8475(quantity = \"ReynoldsNumber\", unit = \"1\") = n8328;
//   protected Real n457(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0);
//   protected Real n5456(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0);
//   protected Real n2800(quantity = \"ReynoldsNumber\", unit = \"1\");
//   protected Real n8487;
//   protected Real n8474(quantity = \"ReynoldsNumber\", unit = \"1\") = min(745.0 * exp(if n3083 <= 0.0065 then 1.0 else 0.0065 / n3083), n8328);
// algorithm
//   n5456 := if n7744 >= 0.0 then n8443 else n8444;
//   n457 := if n7744 >= 0.0 then n8445 else n8446;
//   n2800 := n6099 * abs(n7744) / (n7704 * n457);
//   n8487 := if n2800 <= n8474 then 64.0 * n2800 else if n2800 >= n8475 then 0.25 * (n2800 / log10(n3083 / 3.7 + 5.74 / n2800 ^ 0.9)) ^ 2.0 else n1.n7656.n102.n8149.n8133.n8346.n7663.n8412.n8488(n2800, n8474, n8475, n3083);
//   n4510 := n2194 * n457 * n457 / (2.0 * n5456 * n6099 * n6099 * n6099) * (if n7744 >= 0.0 then n8487 else -n8487);
// end n1.n7656.n102.n8149.n8133.n8346.n7663.n8412;
//
// function n1.n7656.n102.n8149.n8133.n8346.n7663.n8412.n8488
//   input Real n2800(quantity = \"ReynoldsNumber\", unit = \"1\");
//   input Real n8474(quantity = \"ReynoldsNumber\", unit = \"1\");
//   input Real n8475(quantity = \"ReynoldsNumber\", unit = \"1\");
//   input Real n3083;
//   output Real n8487;
//   protected Real n703 = log10(n8474);
//   protected Real n233 = log10(64.0 * n8474);
//   protected Real n8489 = 1.0;
//   protected Real n1201 = 1.121782646756099;
//   protected Real n1202 = n3083 / 3.7 + 5.74 / n8475 ^ 0.9;
//   protected Real n704 = log10(n8475);
//   protected Real n8496;
//   protected Real n8490 = log10(n1202);
//   protected Real n8494 = n704 - n703;
//   protected Real n1581 = 0.25 * (n8475 / n8490) ^ 2.0;
//   protected Real n8493 = 2.0 + 4.0 * n1201 / (n1202 * n8490 * n8475 ^ 0.9);
//   protected Real n8491 = 2.51 / sqrt(n1581) + 0.27 * n3083;
//   protected Real n231 = log10(n1581);
//   protected Real n8492 = -2.0 * sqrt(n1581) * log10(n8491);
//   protected Real n497 = (n231 - n233) / n8494;
//   protected Real n43 = (3.0 * n497 - 2.0 * n8489 - n8493) / n8494;
//   protected Real n45 = (n8489 + n8493 - 2.0 * n497) / (n8494 * n8494);
// algorithm
//   n8496 := log10(n2800 / n8474);
//   n8487 := 64.0 * n8474 * (n2800 / n8474) ^ (1.0 + n8496 * (n43 + n8496 * n45));
// end n1.n7656.n102.n8149.n8133.n8346.n7663.n8412.n8488;
//
// function n1.n7656.n102.n8149.n8133.n8346.n7663.n8415
//   input Real n4510(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real n8443(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0);
//   input Real n8444(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0);
//   input Real n8445(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0);
//   input Real n8446(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0);
//   input Real n2194(quantity = \"Length\", unit = \"m\");
//   input Real n6099(quantity = \"Length\", unit = \"m\", min = 0.0);
//   input Real n8447(unit = \"m2/s2\");
//   input Real n7704(quantity = \"Area\", unit = \"m2\") = 3.141592653589793 * n6099 ^ 2.0 / 4.0;
//   input Real n8234(quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = 2.5e-05;
//   input Real n8308(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 1.0;
//   input Real n8328(quantity = \"ReynoldsNumber\", unit = \"1\") = 4000.0;
//   output Real n7744(quantity = \"MassFlowRate\", unit = \"kg/s\");
//   protected Real n3083(min = 0.0) = n8234 / n6099;
//   protected Real n2800(quantity = \"ReynoldsNumber\", unit = \"1\");
//   protected Real n8475(quantity = \"ReynoldsNumber\", unit = \"1\") = n8328;
//   protected Real n8455(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   protected Real n8456(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   protected Real n8457(quantity = \"MassFlowRate\", unit = \"kg/s\");
//   protected Real n8458(quantity = \"MassFlowRate\", unit = \"kg/s\");
//   protected Real n8453(quantity = \"MassFlowRate\", unit = \"kg/s\");
//   protected Real n8454(quantity = \"MassFlowRate\", unit = \"kg/s\");
//   protected Real n8451(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = n8447 * n8443;
//   protected Real n8452(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = n8447 * n8444;
//   protected Real n8459(quantity = \"MassFlowRate\", unit = \"kg/s\") = 0.0;
//   protected Real n8461;
//   protected Real n8474(quantity = \"ReynoldsNumber\", unit = \"1\") = min((745.0 * exp(if n3083 <= 0.0065 then 1.0 else 0.0065 / n3083)) ^ 0.97, n8328);
//   protected Real n8460(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = (n8451 + n8452) / 2.0;
// algorithm
//   n8455 := max(n8451, n8452) + n8308;
//   n8456 := min(n8451, n8452) - n8308;
//   if n4510 >= n8455 then
//     n7744 := n1.n7656.n102.n8149.n8133.n8346.n7663.n12.n8476(n4510 - n8451, n8443, n8444, n8445, n8446, n2194, n6099, n7704, n8474, n8475, n3083)[1];
//   elseif n4510 <= n8456 then
//     n7744 := n1.n7656.n102.n8149.n8133.n8346.n7663.n12.n8476(n4510 - n8452, n8443, n8444, n8445, n8446, n2194, n6099, n7704, n8474, n8475, n3083)[1];
//   else
//     (n8457, n8453) := n1.n7656.n102.n8149.n8133.n8346.n7663.n12.n8476(n8455 - n8451, n8443, n8444, n8445, n8446, n2194, n6099, n7704, n8474, n8475, n3083);
//     (n8458, n8454) := n1.n7656.n102.n8149.n8133.n8346.n7663.n12.n8476(n8456 - n8452, n8443, n8444, n8445, n8446, n2194, n6099, n7704, n8474, n8475, n3083);
//     (n7744, n8461) := n1.n7656.n11.n8462(n8460, n8456, n8455, n8458, n8457, n8454, n8453);
//     if n4510 > n8460 then
//       n7744 := n1.n7656.n11.n8462(n4510, n8460, n8455, n8459, n8457, n8461, n8453)[1];
//     else
//       n7744 := n1.n7656.n11.n8462(n4510, n8456, n8460, n8458, n8459, n8454, n8461)[1];
//     end if;
//   end if;
// end n1.n7656.n102.n8149.n8133.n8346.n7663.n8415;
//
// function n1.n7656.n102.n8149.n8133.n8346.n7670.n523
//   input n1.n7656.n102.n8149.n8133.n8346.n7670.n8367 n865;
//   output Real n136(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
// algorithm
//   n136 := n865.n403 / (n1.n7656.n102.n8149.n8133.n8346.n7670.n9583(n865) * n865.n217);
// end n1.n7656.n102.n8149.n8133.n8346.n7670.n523;
//
// function n1.n7656.n102.n8149.n8133.n8346.n7670.n7786
//   input n1.n7656.n102.n8149.n8133.n8346.n7670.n8367 n865;
//   output Real n403(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
// algorithm
//   n403 := n865.n403;
// end n1.n7656.n102.n8149.n8133.n8346.n7670.n7786;
//
// function n1.n7656.n102.n8149.n8133.n8346.n7670.n8340
//   input n1.n7656.n102.n8149.n8133.n8346.n7670.n8367 n865;
//   output Real n4890(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
// algorithm
//   n4890 := 1e-06 * n1.n7671.n8128.n9970.n9971.n9972({9.739110288630587e-15, -3.135372487033391e-11, 4.300487659564222e-08, -3.822801629175824e-05, 0.05042787436718076, 17.23926013924253}, -150.0, 1000.0, n1.n101.n946.n949(n865.n217));
// end n1.n7656.n102.n8149.n8133.n8346.n7670.n8340;
//
// function n1.n7656.n102.n8149.n8133.n8346.n7670.n8367 \"Automatically generated record constructor for n1.n7656.n102.n8149.n8133.n8346.n7670.n8367\"
//   input Real n403;
//   input Real n217;
//   input Real[2] n6343;
//   output n8367 res;
// end n1.n7656.n102.n8149.n8133.n8346.n7670.n8367;
//
// function n1.n7656.n102.n8149.n8133.n8346.n7670.n9583
//   input n1.n7656.n102.n8149.n8133.n8346.n7670.n8367 n865;
//   output Real n344(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\");
// algorithm
//   n344 := 287.0512249529787 * (1.0 - n865.n6343[1]) + 461.5233290850878 * n865.n6343[1];
// end n1.n7656.n102.n8149.n8133.n8346.n7670.n9583;
//
// function n1.n7656.n102.n8149.n8153.n7670.n10111
//   input Real n403(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   input Real n3331(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
//   input Real[:] n6343(quantity = fill(\"MassFraction\", size(n6343, 1)), unit = fill(\"kg/kg\", size(n6343, 1)), min = fill(0.0, size(n6343, 1)), max = fill(1.0, size(n6343, 1)), nominal = fill(0.1, size(n6343, 1)));
//   output Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
// algorithm
//   n217 := n1.n7656.n102.n8149.n8153.n7670.n10111.n12.n8551(n3331, 190.0, 647.0, n403, n6343[1:1], n1.n7671.n9351.n9473.n10104(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), 1e-13);
// end n1.n7656.n102.n8149.n8153.n7670.n10111;
//
// function n1.n7656.n102.n8149.n8153.n7670.n10111.n12.n8551
//   input Real n9469;
//   input Real n5250;
//   input Real n5263;
//   input Real n7786 = 0.0;
//   input Real[:] n6343 = {};
//   input n1.n7656.n102.n8149.n8153.n7670.n10111.n12.n9471 n9476;
//   input Real n9964 = 1e-13;
//   output Real n9472;
//   protected constant Real n23 = 1e-15;
//   protected constant Real n9965 = 1e-10;
//   protected Real n58;
//   protected Real n136;
//   protected Real n768;
//   protected Real n497;
//   protected Real n61;
//   protected Real n403;
//   protected Real n769;
//   protected Real n723;
//   protected Real n770;
//   protected Real n771;
//   protected Real n772;
//   protected Real n773;
//   protected Boolean n774 = false;
//   protected Real n9966 = n5250 - n9965;
//   protected Real n9967 = n5263 + n9965;
//   protected Real n130 = n9966;
//   protected Real n490 = n9967;
// algorithm
//   n771 := n1.n7656.n102.n8149.n8153.n7670.n10111.n12.n9475(n9966, n7786, n6343, n9476) - n9469;
//   n772 := n1.n7656.n102.n8149.n8153.n7670.n10111.n12.n9475(n9967, n7786, n6343, n9476) - n9469;
//   n773 := n772;
//   if n771 > 0.0 and n772 > 0.0 or n771 < 0.0 and n772 < 0.0 then
//     n1.n11.n681.n682(\"The arguments x_min and x_max to OneNonLinearEquation.solve(..)
//     do not bracket the root of the single non-linear equation:
//       x_min  = \" + String(n9966, 6, 0, true) + \"
//     \" + \"  x_max  = \" + String(n9967, 6, 0, true) + \"
//     \" + \"  y_zero = \" + String(n9469, 6, 0, true) + \"
//     \" + \"  fa = f(x_min) - y_zero = \" + String(n771, 6, 0, true) + \"
//     \" + \"  fb = f(x_max) - y_zero = \" + String(n772, 6, 0, true) + \"
//     \" + \"fa and fb must have opposite sign which is not the case\");
//   end if;
//   n58 := n130;
//   n773 := n771;
//   n768 := n490 - n130;
//   n136 := n768;
//   while not n774 loop
//     if abs(n773) < abs(n772) then
//       n130 := n490;
//       n490 := n58;
//       n58 := n130;
//       n771 := n772;
//       n772 := n773;
//       n773 := n771;
//     end if;
//     n770 := 2.0 * n23 * abs(n490) + n9964;
//     n497 := (n58 - n490) / 2.0;
//     if abs(n497) <= n770 or n772 == 0.0 then
//       n774 := true;
//       n9472 := n490;
//     else
//       if abs(n768) < n770 or abs(n771) <= abs(n772) then
//         n768 := n497;
//         n136 := n768;
//       else
//         n61 := n772 / n771;
//         if n130 == n58 then
//           n403 := 2.0 * n497 * n61;
//           n769 := 1.0 - n61;
//         else
//           n769 := n771 / n773;
//           n723 := n772 / n773;
//           n403 := n61 * (2.0 * n497 * n769 * (n769 - n723) - (n490 - n130) * (n723 - 1.0));
//           n769 := (n769 - 1.0) * (n723 - 1.0) * (n61 - 1.0);
//         end if;
//         if n403 > 0.0 then
//           n769 := -n769;
//         else
//           n403 := -n403;
//         end if;
//         n61 := n768;
//         n768 := n136;
//         if 2.0 * n403 < 3.0 * n497 * n769 - abs(n770 * n769) and n403 < abs(0.5 * n61 * n769) then
//           n136 := n403 / n769;
//         else
//           n768 := n497;
//           n136 := n768;
//         end if;
//       end if;
//       n130 := n490;
//       n771 := n772;
//       n490 := n490 + (if abs(n136) > n770 then n136 else if n497 > 0.0 then n770 else -n770);
//       n772 := n1.n7656.n102.n8149.n8153.n7670.n10111.n12.n9475(n490, n7786, n6343, n9476) - n9469;
//       if n772 > 0.0 and n773 > 0.0 or n772 < 0.0 and n773 < 0.0 then
//         n58 := n130;
//         n773 := n771;
//         n768 := n490 - n130;
//         n136 := n768;
//       end if;
//     end if;
//   end while;
// end n1.n7656.n102.n8149.n8153.n7670.n10111.n12.n8551;
//
// function n1.n7656.n102.n8149.n8153.n7670.n10111.n12.n9471 \"Automatically generated record constructor for n1.n7656.n102.n8149.n8153.n7670.n10111.n12.n9471\"
//   input String n59;
//   input Real n9229;
//   input Real n9787;
//   input Real n5519;
//   input Real n10373;
//   input Real[7] n10374;
//   input Real[2] n10375;
//   input Real[7] n10376;
//   input Real[2] n10377;
//   input Real n344;
//   output n9471 res;
// end n1.n7656.n102.n8149.n8153.n7670.n10111.n12.n9471;
//
// function n1.n7656.n102.n8149.n8153.n7670.n10111.n12.n9475
//   input Real n637;
//   input Real n403 = 0.0;
//   input Real[:] n6343 = {};
//   input n1.n7656.n102.n8149.n8153.n7670.n10111.n12.n9471 n9476;
//   output Real n159;
// algorithm
//   n159 := n1.n7656.n102.n8149.n8153.n7670.n10138(n403, n637, n6343);
// end n1.n7656.n102.n8149.n8153.n7670.n10111.n12.n9475;
//
// function n1.n7656.n102.n8149.n8153.n7670.n10117
//   input Real n7827(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   output Real n7826(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0);
//   protected Real n10118(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 647.096;
//   protected Real n10119(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 22064000.0;
//   protected Real[:] n130 = {-7.85951783, 1.84408259, -11.7866497, 22.6807411, -15.9618719, 1.80122502};
//   protected Real[:] n228 = {1.0, 1.5, 3.0, 3.5, 4.0, 7.5};
//   protected Real n1968 = 1.0 - n7827 / n10118;
// algorithm
//   n7826 := exp((n130[1] * n1968 ^ n228[1] + n130[2] * n1968 ^ n228[2] + n130[3] * n1968 ^ n228[3] + n130[4] * n1968 ^ n228[4] + n130[5] * n1968 ^ n228[5] + n130[6] * n1968 ^ n228[6]) * n10118 / n7827) * n10119;
// end n1.n7656.n102.n8149.n8153.n7670.n10117;
//
// function n1.n7656.n102.n8149.n8153.n7670.n10120
//   input Real n7827(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   input Real n10121(unit = \"K/s\");
//   output Real n10122(unit = \"Pa/s\");
//   protected Real n10118(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 647.096;
//   protected Real n10119(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 22064000.0;
//   protected Real[:] n130 = {-7.85951783, 1.84408259, -11.7866497, 22.6807411, -15.9618719, 1.80122502};
//   protected Real[:] n228 = {1.0, 1.5, 3.0, 3.5, 4.0, 7.5};
//   protected Real n1968 = 1.0 - n7827 / n10118;
//   protected Real n10123 = -1.0 / n10118 * n10121;
//   protected Real n1969 = n130[1] * n1968 ^ n228[1] + n130[2] * n1968 ^ n228[2] + n130[3] * n1968 ^ n228[3] + n130[4] * n1968 ^ n228[4] + n130[5] * n1968 ^ n228[5] + n130[6] * n1968 ^ n228[6];
// algorithm
//   n10122 := exp(n1969 * n10118 / n7827) * n10119 * ((n130[1] * n1968 ^ (n228[1] - 1.0) * n228[1] * n10123 + n130[2] * n1968 ^ (n228[2] - 1.0) * n228[2] * n10123 + n130[3] * n1968 ^ (n228[3] - 1.0) * n228[3] * n10123 + n130[4] * n1968 ^ (n228[4] - 1.0) * n228[4] * n10123 + n130[5] * n1968 ^ (n228[5] - 1.0) * n228[5] * n10123 + n130[6] * n1968 ^ (n228[6] - 1.0) * n228[6] * n10123) * n10118 / n7827 - n1969 * n10118 * n10121 / n7827 ^ 2.0);
// end n1.n7656.n102.n8149.n8153.n7670.n10120;
//
// function n1.n7656.n102.n8149.n8153.n7670.n10124
//   input Real n7827(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   output Real n7826(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0);
//   protected Real n10125(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 273.16;
//   protected Real n10126(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 611.657;
//   protected Real[:] n130 = {-13.928169, 34.7078238};
//   protected Real[:] n228 = {-1.5, -1.25};
//   protected Real n1968 = n7827 / n10125;
// algorithm
//   n7826 := exp(n130[1] - n130[1] * n1968 ^ n228[1] + n130[2] - n130[2] * n1968 ^ n228[2]) * n10126;
// end n1.n7656.n102.n8149.n8153.n7670.n10124;
//
// function n1.n7656.n102.n8149.n8153.n7670.n10127
//   input Real n7827(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   input Real n10121(unit = \"K/s\");
//   output Real n10122(unit = \"Pa/s\");
//   protected Real n10125(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 273.16;
//   protected Real n10126(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 611.657;
//   protected Real[:] n130 = {-13.928169, 34.7078238};
//   protected Real[:] n228 = {-1.5, -1.25};
//   protected Real n1968 = n7827 / n10125;
//   protected Real n10123 = n10121 / n10125;
// algorithm
//   n10122 := exp(n130[1] - n130[1] * n1968 ^ n228[1] + n130[2] - n130[2] * n1968 ^ n228[2]) * n10126 * ((-n130[1] * n1968 ^ (n228[1] - 1.0) * n228[1] * n10123) - n130[2] * n1968 ^ (n228[2] - 1.0) * n228[2] * n10123);
// end n1.n7656.n102.n8149.n8153.n7670.n10127;
//
// function n1.n7656.n102.n8149.n8153.n7670.n10128
//   input Real n7827(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   input Real n10121(unit = \"K/s\");
//   output Real n10122(unit = \"Pa/s\");
// algorithm
//   n10122 := n1.n7656.n102.n8149.n8153.n7670.n11.n10129(n1.n7656.n102.n8149.n8153.n7670.n10117(n7827), n1.n7656.n102.n8149.n8153.n7670.n10124(n7827), n7827 - 273.16, 1.0, n1.n7656.n102.n8149.n8153.n7670.n10120(n7827, n10121), n1.n7656.n102.n8149.n8153.n7670.n10127(n7827, n10121), n10121, 0.0);
// end n1.n7656.n102.n8149.n8153.n7670.n10128;
//
// function n1.n7656.n102.n8149.n8153.n7670.n10136
//   input Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   output Real n3331(quantity = \"SpecificEnergy\", unit = \"J/kg\");
// algorithm
//   n3331 := n1.n7656.n102.n8149.n8153.n7670.n11.n8436(4200.0 * (n217 - 273.15), 2050.0 * (n217 - 273.15) - 333000.0, n217 - 273.16, 0.1);
// end n1.n7656.n102.n8149.n8153.n7670.n10136;
//
// function n1.n7656.n102.n8149.n8153.n7670.n10137
//   input Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   input Real n8197(unit = \"K/s\");
//   output Real n9441(unit = \"J/(kg.s)\");
// algorithm
//   n9441 := n1.n7656.n102.n8149.n8153.n7670.n11.n10129(4200.0 * (n217 - 273.15), 2050.0 * (n217 - 273.15) - 333000.0, n217 - 273.16, 0.1, 4200.0 * n8197, 2050.0 * n8197, n8197, 0.0);
// end n1.n7656.n102.n8149.n8153.n7670.n10137;
//
// function n1.n7656.n102.n8149.n8153.n7670.n10138
//   input Real n403(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   input Real[:] n6343(quantity = fill(\"MassFraction\", size(n6343, 1)), unit = fill(\"1\", size(n6343, 1)), min = fill(0.0, size(n6343, 1)), max = fill(1.0, size(n6343, 1)));
//   output Real n3331(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   protected Real n10110(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0);
//   protected Real n10108(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10105(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10106(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10107(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
// algorithm
//   n10110 := n1.n7656.n102.n8149.n8153.n7670.n8562(n217);
//   n10108 := min(n10110 * 0.6219647130774989 / max(1e-13, n403 - n10110) * (1.0 - n6343[1]), 1.0);
//   n10105 := max(n6343[1] - n10108, 0.0);
//   n10106 := n6343[1] - n10105;
//   n10107 := 1.0 - n6343[1];
//   n3331 := n1.n7671.n9351.n9473.n885.n10135(n1.n7671.n9351.n9473.n10104(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), n217, true, n1.n7671.n365.n8633.n9642.n9645, 2547494.319) * n10106 + n1.n7671.n9351.n9473.n885.n10135(n1.n7671.n9351.n9473.n10104(\"Air\", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), n217, true, n1.n7671.n365.n8633.n9642.n9645, 25104.684) * n10107 + n1.n7656.n102.n8149.n8153.n7670.n10136(n217) * n10105;
// end n1.n7656.n102.n8149.n8153.n7670.n10138;
//
// function n1.n7656.n102.n8149.n8153.n7670.n10139
//   input Real n403(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   input Real[:] n6343(quantity = fill(\"MassFraction\", size(n6343, 1)), unit = fill(\"1\", size(n6343, 1)), min = fill(0.0, size(n6343, 1)), max = fill(1.0, size(n6343, 1)));
//   input Real n4510(unit = \"Pa/s\");
//   input Real n8197(unit = \"K/s\");
//   input Real[:] n10140(unit = \"1/s\");
//   output Real n10059(unit = \"J/(kg.s)\");
//   protected Real n10110(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0);
//   protected Real n10108(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10105(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10106(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10107(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10109(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10141(unit = \"1/s\");
//   protected Real n10142(unit = \"1/s\");
//   protected Real n10143(unit = \"1/s\");
//   protected Real n9875(unit = \"Pa/s\");
//   protected Real n10144(unit = \"1/s\");
// algorithm
//   n10110 := n1.n7656.n102.n8149.n8153.n7670.n8562(n217);
//   n10109 := n10110 * 0.6219647130774989 / max(1e-13, n403 - n10110);
//   n10108 := min(n10109 * (1.0 - n6343[1]), 1.0);
//   n10105 := n1.n7656.n102.n8149.n8153.n7670.n11.n10145(n6343[1] - n10108, 0.0, 1e-05);
//   n10106 := n6343[1] - n10105;
//   n10107 := 1.0 - n6343[1];
//   n10142 := -n10140[1];
//   n9875 := n1.n7656.n102.n8149.n8153.n7670.n10128(n217, n8197);
//   n10144 := 0.6219647130774989 * (n9875 * (n403 - n10110) - n10110 * (n4510 - n9875)) / (n403 - n10110) / (n403 - n10110);
//   n10143 := n1.n7656.n102.n8149.n8153.n7670.n11.n10146(n6343[1] - n10108, 0.0, 1e-05, (1.0 + n10109) * n10140[1] - (1.0 - n6343[1]) * n10144, 0.0, 0.0);
//   n10141 := n10140[1] - n10143;
//   n10059 := n10106 * n1.n7671.n9351.n9473.n885.n10147(n1.n7671.n9351.n9473.n10104(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), n217, true, n1.n7671.n365.n8633.n9642.n9645, 2547494.319, n8197) + n10141 * n1.n7671.n9351.n9473.n885.n10135(n1.n7671.n9351.n9473.n10104(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), n217, true, n1.n7671.n365.n8633.n9642.n9645, 2547494.319) + n10107 * n1.n7671.n9351.n9473.n885.n10147(n1.n7671.n9351.n9473.n10104(\"Air\", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), n217, true, n1.n7671.n365.n8633.n9642.n9645, 25104.684, n8197) + n10142 * n1.n7671.n9351.n9473.n885.n10135(n1.n7671.n9351.n9473.n10104(\"Air\", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), n217, true, n1.n7671.n365.n8633.n9642.n9645, 25104.684) + n10105 * n1.n7656.n102.n8149.n8153.n7670.n10137(n217, n8197) + n10143 * n1.n7656.n102.n8149.n8153.n7670.n10136(n217);
// end n1.n7656.n102.n8149.n8153.n7670.n10139;
//
// function n1.n7656.n102.n8149.n8153.n7670.n11.n10129
//   input Real n8602;
//   input Real n10158;
//   input Real n637;
//   input Real n9237 = 1.0;
//   input Real n10161;
//   input Real n10162;
//   input Real n8496;
//   input Real n10163 = 0.0;
//   output Real n1629;
//   protected Real n10159;
//   protected Real n10160;
//   protected Real n10164;
//   protected Real n159;
// algorithm
//   n10160 := n637 / n9237;
//   n10159 := n10160 * 1.570796326794897;
//   n10164 := (n8496 - n10160 * n10163) / n9237;
//   if n10160 <= -0.99999999999 then
//     n159 := 0.0;
//   elseif n10160 >= 0.9999999999 then
//     n159 := 1.0;
//   else
//     n159 := (tanh(tan(n10159)) + 1.0) / 2.0;
//   end if;
//   n1629 := n10161 * n159 + (1.0 - n159) * n10162;
//   if abs(n10160) < 1.0 then
//     n1629 := n1629 + (n8602 - n10158) * n10164 * 1.570796326794897 / 2.0 / (cosh(tan(n10159)) * cos(n10159)) ^ 2.0;
//   end if;
// end n1.n7656.n102.n8149.n8153.n7670.n11.n10129;
//
// function n1.n7656.n102.n8149.n8153.n7670.n11.n10145
//   input Real n703;
//   input Real n704;
//   input Real n8496;
//   output Real n159;
// algorithm
//   n159 := max(n703, n704) + log(exp(4.0 / n8496 * (n703 - max(n703, n704))) + exp(4.0 / n8496 * (n704 - max(n703, n704)))) / (4.0 / n8496);
// end n1.n7656.n102.n8149.n8153.n7670.n11.n10145;
//
// function n1.n7656.n102.n8149.n8153.n7670.n11.n10146
//   input Real n703;
//   input Real n704;
//   input Real n8496;
//   input Real n10165;
//   input Real n10166;
//   input Real n9804;
//   output Real n7276;
// algorithm
//   n7276 := (if n703 > n704 then n10165 else n10166) + 0.25 * (((4.0 * (n10165 - (if n703 > n704 then n10165 else n10166)) / n8496 - 4.0 * (n703 - max(n703, n704)) * n9804 / n8496 ^ 2.0) * exp(4.0 * (n703 - max(n703, n704)) / n8496) + (4.0 * (n10166 - (if n703 > n704 then n10165 else n10166)) / n8496 - 4.0 * (n704 - max(n703, n704)) * n9804 / n8496 ^ 2.0) * exp(4.0 * (n704 - max(n703, n704)) / n8496)) * n8496 / (exp(4.0 * (n703 - max(n703, n704)) / n8496) + exp(4.0 * (n704 - max(n703, n704)) / n8496)) + log(exp(4.0 * (n703 - max(n703, n704)) / n8496) + exp(4.0 * (n704 - max(n703, n704)) / n8496)) * n9804);
// end n1.n7656.n102.n8149.n8153.n7670.n11.n10146;
//
// function n1.n7656.n102.n8149.n8153.n7670.n11.n8436
//   input Real n8602;
//   input Real n10158;
//   input Real n637;
//   input Real n9237 = 1.0;
//   output Real n1629;
//   protected Real n10159;
//   protected Real n10160;
//   protected Real n159;
// algorithm
//   n10160 := n637 / n9237;
//   n10159 := n10160 * 1.570796326794897;
//   if n10160 <= -0.999999999 then
//     n159 := 0.0;
//   elseif n10160 >= 0.999999999 then
//     n159 := 1.0;
//   else
//     n159 := (tanh(tan(n10159)) + 1.0) / 2.0;
//   end if;
//   n1629 := n8602 * n159 + (1.0 - n159) * n10158;
// end n1.n7656.n102.n8149.n8153.n7670.n11.n8436;
//
// function n1.n7656.n102.n8149.n8153.n7670.n7785
//   input n1.n7656.n102.n8149.n8153.n7670.n8367 n865;
//   output Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
// algorithm
//   n217 := n865.n217;
// end n1.n7656.n102.n8149.n8153.n7670.n7785;
//
// function n1.n7656.n102.n8149.n8153.n7670.n7955
//   input Real n403(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   input Real n3331(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
//   input Real[:] n6343(quantity = fill(\"MassFraction\", size(n6343, 1)), unit = fill(\"kg/kg\", size(n6343, 1)), min = fill(0.0, size(n6343, 1)), max = fill(1.0, size(n6343, 1)), nominal = fill(0.1, size(n6343, 1))) = {0.01, 0.99};
//   output Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
// algorithm
//   n217 := n1.n7656.n102.n8149.n8153.n7670.n7785(n1.n7656.n102.n8149.n8153.n7670.n8338(n403, n3331, n6343));
// end n1.n7656.n102.n8149.n8153.n7670.n7955;
//
// function n1.n7656.n102.n8149.n8153.n7670.n7957
//   input Real n403(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   input Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   input Real[:] n6343(quantity = fill(\"MassFraction\", size(n6343, 1)), unit = fill(\"kg/kg\", size(n6343, 1)), min = fill(0.0, size(n6343, 1)), max = fill(1.0, size(n6343, 1)), nominal = fill(0.1, size(n6343, 1))) = {0.01, 0.99};
//   output Real n3331(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
// algorithm
//   n3331 := n1.n7656.n102.n8149.n8153.n7670.n8732(n1.n7656.n102.n8149.n8153.n7670.n8396(n403, n217, n6343));
// end n1.n7656.n102.n8149.n8153.n7670.n7957;
//
// function n1.n7656.n102.n8149.n8153.n7670.n8338
//   input Real n403(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   input Real n3331(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
//   input Real[:] n6343(quantity = fill(\"MassFraction\", size(n6343, 1)), unit = fill(\"kg/kg\", size(n6343, 1)), min = fill(0.0, size(n6343, 1)), max = fill(1.0, size(n6343, 1)), nominal = fill(0.1, size(n6343, 1))) = {0.01, 0.99};
//   output n1.n7656.n102.n8149.n8153.n7670.n8367 n865;
// algorithm
//   n865 := if size(n6343, 1) == 2 then n1.n7656.n102.n8149.n8153.n7670.n8367(n403, n1.n7656.n102.n8149.n8153.n7670.n10111(n403, n3331, n6343), n6343) else n1.n7656.n102.n8149.n8153.n7670.n8367(n403, n1.n7656.n102.n8149.n8153.n7670.n10111(n403, n3331, n6343), cat(1, n6343, {1.0 - sum(n6343)}));
// end n1.n7656.n102.n8149.n8153.n7670.n8338;
//
// function n1.n7656.n102.n8149.n8153.n7670.n8367 \"Automatically generated record constructor for n1.n7656.n102.n8149.n8153.n7670.n8367\"
//   input Real n403;
//   input Real n217;
//   input Real[2] n6343;
//   output n8367 res;
// end n1.n7656.n102.n8149.n8153.n7670.n8367;
//
// function n1.n7656.n102.n8149.n8153.n7670.n8396
//   input Real n403(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   input Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   input Real[:] n6343(quantity = fill(\"MassFraction\", size(n6343, 1)), unit = fill(\"kg/kg\", size(n6343, 1)), min = fill(0.0, size(n6343, 1)), max = fill(1.0, size(n6343, 1)), nominal = fill(0.1, size(n6343, 1))) = {0.01, 0.99};
//   output n1.n7656.n102.n8149.n8153.n7670.n8367 n865;
// algorithm
//   n865 := if size(n6343, 1) == 2 then n1.n7656.n102.n8149.n8153.n7670.n8367(n403, n217, n6343) else n1.n7656.n102.n8149.n8153.n7670.n8367(n403, n217, cat(1, n6343, {1.0 - sum(n6343)}));
// end n1.n7656.n102.n8149.n8153.n7670.n8396;
//
// function n1.n7656.n102.n8149.n8153.n7670.n8562
//   input Real n7827(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   output Real n7826(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
// algorithm
//   n7826 := n1.n7656.n102.n8149.n8153.n7670.n11.n8436(n1.n7656.n102.n8149.n8153.n7670.n10117(n7827), n1.n7656.n102.n8149.n8153.n7670.n10124(n7827), n7827 - 273.16, 1.0);
// end n1.n7656.n102.n8149.n8153.n7670.n8562;
//
// function n1.n7656.n102.n8149.n8153.n7670.n8732
//   input n1.n7656.n102.n8149.n8153.n7670.n8367 n865;
//   output Real n3331(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
// algorithm
//   n3331 := n1.n7656.n102.n8149.n8153.n7670.n10138(n865.n403, n865.n217, n865.n6343);
// end n1.n7656.n102.n8149.n8153.n7670.n8732;
//
// function n1.n7656.n102.n8149.n8155.n7670.n10111
//   input Real n403(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   input Real n3331(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
//   input Real[:] n6343(quantity = fill(\"MassFraction\", size(n6343, 1)), unit = fill(\"kg/kg\", size(n6343, 1)), min = fill(0.0, size(n6343, 1)), max = fill(1.0, size(n6343, 1)), nominal = fill(0.1, size(n6343, 1)));
//   output Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
// algorithm
//   n217 := n1.n7656.n102.n8149.n8155.n7670.n10111.n12.n8551(n3331, 190.0, 647.0, n403, n6343[1:1], n1.n7671.n9351.n9473.n10104(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), 1e-13);
// end n1.n7656.n102.n8149.n8155.n7670.n10111;
//
// function n1.n7656.n102.n8149.n8155.n7670.n10111.n12.n8551
//   input Real n9469;
//   input Real n5250;
//   input Real n5263;
//   input Real n7786 = 0.0;
//   input Real[:] n6343 = {};
//   input n1.n7656.n102.n8149.n8155.n7670.n10111.n12.n9471 n9476;
//   input Real n9964 = 1e-13;
//   output Real n9472;
//   protected constant Real n23 = 1e-15;
//   protected constant Real n9965 = 1e-10;
//   protected Real n58;
//   protected Real n136;
//   protected Real n768;
//   protected Real n497;
//   protected Real n61;
//   protected Real n403;
//   protected Real n769;
//   protected Real n723;
//   protected Real n770;
//   protected Real n771;
//   protected Real n772;
//   protected Real n773;
//   protected Boolean n774 = false;
//   protected Real n9966 = n5250 - n9965;
//   protected Real n9967 = n5263 + n9965;
//   protected Real n130 = n9966;
//   protected Real n490 = n9967;
// algorithm
//   n771 := n1.n7656.n102.n8149.n8155.n7670.n10111.n12.n9475(n9966, n7786, n6343, n9476) - n9469;
//   n772 := n1.n7656.n102.n8149.n8155.n7670.n10111.n12.n9475(n9967, n7786, n6343, n9476) - n9469;
//   n773 := n772;
//   if n771 > 0.0 and n772 > 0.0 or n771 < 0.0 and n772 < 0.0 then
//     n1.n11.n681.n682(\"The arguments x_min and x_max to OneNonLinearEquation.solve(..)
//     do not bracket the root of the single non-linear equation:
//       x_min  = \" + String(n9966, 6, 0, true) + \"
//     \" + \"  x_max  = \" + String(n9967, 6, 0, true) + \"
//     \" + \"  y_zero = \" + String(n9469, 6, 0, true) + \"
//     \" + \"  fa = f(x_min) - y_zero = \" + String(n771, 6, 0, true) + \"
//     \" + \"  fb = f(x_max) - y_zero = \" + String(n772, 6, 0, true) + \"
//     \" + \"fa and fb must have opposite sign which is not the case\");
//   end if;
//   n58 := n130;
//   n773 := n771;
//   n768 := n490 - n130;
//   n136 := n768;
//   while not n774 loop
//     if abs(n773) < abs(n772) then
//       n130 := n490;
//       n490 := n58;
//       n58 := n130;
//       n771 := n772;
//       n772 := n773;
//       n773 := n771;
//     end if;
//     n770 := 2.0 * n23 * abs(n490) + n9964;
//     n497 := (n58 - n490) / 2.0;
//     if abs(n497) <= n770 or n772 == 0.0 then
//       n774 := true;
//       n9472 := n490;
//     else
//       if abs(n768) < n770 or abs(n771) <= abs(n772) then
//         n768 := n497;
//         n136 := n768;
//       else
//         n61 := n772 / n771;
//         if n130 == n58 then
//           n403 := 2.0 * n497 * n61;
//           n769 := 1.0 - n61;
//         else
//           n769 := n771 / n773;
//           n723 := n772 / n773;
//           n403 := n61 * (2.0 * n497 * n769 * (n769 - n723) - (n490 - n130) * (n723 - 1.0));
//           n769 := (n769 - 1.0) * (n723 - 1.0) * (n61 - 1.0);
//         end if;
//         if n403 > 0.0 then
//           n769 := -n769;
//         else
//           n403 := -n403;
//         end if;
//         n61 := n768;
//         n768 := n136;
//         if 2.0 * n403 < 3.0 * n497 * n769 - abs(n770 * n769) and n403 < abs(0.5 * n61 * n769) then
//           n136 := n403 / n769;
//         else
//           n768 := n497;
//           n136 := n768;
//         end if;
//       end if;
//       n130 := n490;
//       n771 := n772;
//       n490 := n490 + (if abs(n136) > n770 then n136 else if n497 > 0.0 then n770 else -n770);
//       n772 := n1.n7656.n102.n8149.n8155.n7670.n10111.n12.n9475(n490, n7786, n6343, n9476) - n9469;
//       if n772 > 0.0 and n773 > 0.0 or n772 < 0.0 and n773 < 0.0 then
//         n58 := n130;
//         n773 := n771;
//         n768 := n490 - n130;
//         n136 := n768;
//       end if;
//     end if;
//   end while;
// end n1.n7656.n102.n8149.n8155.n7670.n10111.n12.n8551;
//
// function n1.n7656.n102.n8149.n8155.n7670.n10111.n12.n9471 \"Automatically generated record constructor for n1.n7656.n102.n8149.n8155.n7670.n10111.n12.n9471\"
//   input String n59;
//   input Real n9229;
//   input Real n9787;
//   input Real n5519;
//   input Real n10373;
//   input Real[7] n10374;
//   input Real[2] n10375;
//   input Real[7] n10376;
//   input Real[2] n10377;
//   input Real n344;
//   output n9471 res;
// end n1.n7656.n102.n8149.n8155.n7670.n10111.n12.n9471;
//
// function n1.n7656.n102.n8149.n8155.n7670.n10111.n12.n9475
//   input Real n637;
//   input Real n403 = 0.0;
//   input Real[:] n6343 = {};
//   input n1.n7656.n102.n8149.n8155.n7670.n10111.n12.n9471 n9476;
//   output Real n159;
// algorithm
//   n159 := n1.n7656.n102.n8149.n8155.n7670.n10138(n403, n637, n6343);
// end n1.n7656.n102.n8149.n8155.n7670.n10111.n12.n9475;
//
// function n1.n7656.n102.n8149.n8155.n7670.n10117
//   input Real n7827(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   output Real n7826(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0);
//   protected Real n10118(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 647.096;
//   protected Real n10119(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 22064000.0;
//   protected Real[:] n130 = {-7.85951783, 1.84408259, -11.7866497, 22.6807411, -15.9618719, 1.80122502};
//   protected Real[:] n228 = {1.0, 1.5, 3.0, 3.5, 4.0, 7.5};
//   protected Real n1968 = 1.0 - n7827 / n10118;
// algorithm
//   n7826 := exp((n130[1] * n1968 ^ n228[1] + n130[2] * n1968 ^ n228[2] + n130[3] * n1968 ^ n228[3] + n130[4] * n1968 ^ n228[4] + n130[5] * n1968 ^ n228[5] + n130[6] * n1968 ^ n228[6]) * n10118 / n7827) * n10119;
// end n1.n7656.n102.n8149.n8155.n7670.n10117;
//
// function n1.n7656.n102.n8149.n8155.n7670.n10120
//   input Real n7827(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   input Real n10121(unit = \"K/s\");
//   output Real n10122(unit = \"Pa/s\");
//   protected Real n10118(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 647.096;
//   protected Real n10119(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 22064000.0;
//   protected Real[:] n130 = {-7.85951783, 1.84408259, -11.7866497, 22.6807411, -15.9618719, 1.80122502};
//   protected Real[:] n228 = {1.0, 1.5, 3.0, 3.5, 4.0, 7.5};
//   protected Real n1968 = 1.0 - n7827 / n10118;
//   protected Real n10123 = -1.0 / n10118 * n10121;
//   protected Real n1969 = n130[1] * n1968 ^ n228[1] + n130[2] * n1968 ^ n228[2] + n130[3] * n1968 ^ n228[3] + n130[4] * n1968 ^ n228[4] + n130[5] * n1968 ^ n228[5] + n130[6] * n1968 ^ n228[6];
// algorithm
//   n10122 := exp(n1969 * n10118 / n7827) * n10119 * ((n130[1] * n1968 ^ (n228[1] - 1.0) * n228[1] * n10123 + n130[2] * n1968 ^ (n228[2] - 1.0) * n228[2] * n10123 + n130[3] * n1968 ^ (n228[3] - 1.0) * n228[3] * n10123 + n130[4] * n1968 ^ (n228[4] - 1.0) * n228[4] * n10123 + n130[5] * n1968 ^ (n228[5] - 1.0) * n228[5] * n10123 + n130[6] * n1968 ^ (n228[6] - 1.0) * n228[6] * n10123) * n10118 / n7827 - n1969 * n10118 * n10121 / n7827 ^ 2.0);
// end n1.n7656.n102.n8149.n8155.n7670.n10120;
//
// function n1.n7656.n102.n8149.n8155.n7670.n10124
//   input Real n7827(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   output Real n7826(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0);
//   protected Real n10125(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 273.16;
//   protected Real n10126(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 611.657;
//   protected Real[:] n130 = {-13.928169, 34.7078238};
//   protected Real[:] n228 = {-1.5, -1.25};
//   protected Real n1968 = n7827 / n10125;
// algorithm
//   n7826 := exp(n130[1] - n130[1] * n1968 ^ n228[1] + n130[2] - n130[2] * n1968 ^ n228[2]) * n10126;
// end n1.n7656.n102.n8149.n8155.n7670.n10124;
//
// function n1.n7656.n102.n8149.n8155.n7670.n10127
//   input Real n7827(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   input Real n10121(unit = \"K/s\");
//   output Real n10122(unit = \"Pa/s\");
//   protected Real n10125(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 273.16;
//   protected Real n10126(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 611.657;
//   protected Real[:] n130 = {-13.928169, 34.7078238};
//   protected Real[:] n228 = {-1.5, -1.25};
//   protected Real n1968 = n7827 / n10125;
//   protected Real n10123 = n10121 / n10125;
// algorithm
//   n10122 := exp(n130[1] - n130[1] * n1968 ^ n228[1] + n130[2] - n130[2] * n1968 ^ n228[2]) * n10126 * ((-n130[1] * n1968 ^ (n228[1] - 1.0) * n228[1] * n10123) - n130[2] * n1968 ^ (n228[2] - 1.0) * n228[2] * n10123);
// end n1.n7656.n102.n8149.n8155.n7670.n10127;
//
// function n1.n7656.n102.n8149.n8155.n7670.n10128
//   input Real n7827(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   input Real n10121(unit = \"K/s\");
//   output Real n10122(unit = \"Pa/s\");
// algorithm
//   n10122 := n1.n7656.n102.n8149.n8155.n7670.n11.n10129(n1.n7656.n102.n8149.n8155.n7670.n10117(n7827), n1.n7656.n102.n8149.n8155.n7670.n10124(n7827), n7827 - 273.16, 1.0, n1.n7656.n102.n8149.n8155.n7670.n10120(n7827, n10121), n1.n7656.n102.n8149.n8155.n7670.n10127(n7827, n10121), n10121, 0.0);
// end n1.n7656.n102.n8149.n8155.n7670.n10128;
//
// function n1.n7656.n102.n8149.n8155.n7670.n10136
//   input Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   output Real n3331(quantity = \"SpecificEnergy\", unit = \"J/kg\");
// algorithm
//   n3331 := n1.n7656.n102.n8149.n8155.n7670.n11.n8436(4200.0 * (n217 - 273.15), 2050.0 * (n217 - 273.15) - 333000.0, n217 - 273.16, 0.1);
// end n1.n7656.n102.n8149.n8155.n7670.n10136;
//
// function n1.n7656.n102.n8149.n8155.n7670.n10137
//   input Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   input Real n8197(unit = \"K/s\");
//   output Real n9441(unit = \"J/(kg.s)\");
// algorithm
//   n9441 := n1.n7656.n102.n8149.n8155.n7670.n11.n10129(4200.0 * (n217 - 273.15), 2050.0 * (n217 - 273.15) - 333000.0, n217 - 273.16, 0.1, 4200.0 * n8197, 2050.0 * n8197, n8197, 0.0);
// end n1.n7656.n102.n8149.n8155.n7670.n10137;
//
// function n1.n7656.n102.n8149.n8155.n7670.n10138
//   input Real n403(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   input Real[:] n6343(quantity = fill(\"MassFraction\", size(n6343, 1)), unit = fill(\"1\", size(n6343, 1)), min = fill(0.0, size(n6343, 1)), max = fill(1.0, size(n6343, 1)));
//   output Real n3331(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   protected Real n10110(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0);
//   protected Real n10108(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10105(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10106(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10107(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
// algorithm
//   n10110 := n1.n7656.n102.n8149.n8155.n7670.n8562(n217);
//   n10108 := min(n10110 * 0.6219647130774989 / max(1e-13, n403 - n10110) * (1.0 - n6343[1]), 1.0);
//   n10105 := max(n6343[1] - n10108, 0.0);
//   n10106 := n6343[1] - n10105;
//   n10107 := 1.0 - n6343[1];
//   n3331 := n1.n7671.n9351.n9473.n885.n10135(n1.n7671.n9351.n9473.n10104(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), n217, true, n1.n7671.n365.n8633.n9642.n9645, 2547494.319) * n10106 + n1.n7671.n9351.n9473.n885.n10135(n1.n7671.n9351.n9473.n10104(\"Air\", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), n217, true, n1.n7671.n365.n8633.n9642.n9645, 25104.684) * n10107 + n1.n7656.n102.n8149.n8155.n7670.n10136(n217) * n10105;
// end n1.n7656.n102.n8149.n8155.n7670.n10138;
//
// function n1.n7656.n102.n8149.n8155.n7670.n10139
//   input Real n403(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   input Real[:] n6343(quantity = fill(\"MassFraction\", size(n6343, 1)), unit = fill(\"1\", size(n6343, 1)), min = fill(0.0, size(n6343, 1)), max = fill(1.0, size(n6343, 1)));
//   input Real n4510(unit = \"Pa/s\");
//   input Real n8197(unit = \"K/s\");
//   input Real[:] n10140(unit = \"1/s\");
//   output Real n10059(unit = \"J/(kg.s)\");
//   protected Real n10110(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0);
//   protected Real n10108(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10105(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10106(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10107(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10109(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real n10141(unit = \"1/s\");
//   protected Real n10142(unit = \"1/s\");
//   protected Real n10143(unit = \"1/s\");
//   protected Real n9875(unit = \"Pa/s\");
//   protected Real n10144(unit = \"1/s\");
// algorithm
//   n10110 := n1.n7656.n102.n8149.n8155.n7670.n8562(n217);
//   n10109 := n10110 * 0.6219647130774989 / max(1e-13, n403 - n10110);
//   n10108 := min(n10109 * (1.0 - n6343[1]), 1.0);
//   n10105 := n1.n7656.n102.n8149.n8155.n7670.n11.n10145(n6343[1] - n10108, 0.0, 1e-05);
//   n10106 := n6343[1] - n10105;
//   n10107 := 1.0 - n6343[1];
//   n10142 := -n10140[1];
//   n9875 := n1.n7656.n102.n8149.n8155.n7670.n10128(n217, n8197);
//   n10144 := 0.6219647130774989 * (n9875 * (n403 - n10110) - n10110 * (n4510 - n9875)) / (n403 - n10110) / (n403 - n10110);
//   n10143 := n1.n7656.n102.n8149.n8155.n7670.n11.n10146(n6343[1] - n10108, 0.0, 1e-05, (1.0 + n10109) * n10140[1] - (1.0 - n6343[1]) * n10144, 0.0, 0.0);
//   n10141 := n10140[1] - n10143;
//   n10059 := n10106 * n1.n7671.n9351.n9473.n885.n10147(n1.n7671.n9351.n9473.n10104(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), n217, true, n1.n7671.n365.n8633.n9642.n9645, 2547494.319, n8197) + n10141 * n1.n7671.n9351.n9473.n885.n10135(n1.n7671.n9351.n9473.n10104(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000.0, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), n217, true, n1.n7671.n365.n8633.n9642.n9645, 2547494.319) + n10107 * n1.n7671.n9351.n9473.n885.n10147(n1.n7671.n9351.n9473.n10104(\"Air\", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), n217, true, n1.n7671.n365.n8633.n9642.n9645, 25104.684, n8197) + n10142 * n1.n7671.n9351.n9473.n885.n10135(n1.n7671.n9351.n9473.n10104(\"Air\", 0.0289651159, -4333.833858403446, 298609.6803431054, 1000.0, {10099.5016, -196.827561, 5.00915511, -0.00576101373, 1.06685993e-05, -7.94029797e-09, 2.18523191e-12}, {-176.796731, -3.921504225}, {241521.443, -1257.8746, 5.14455867, -0.000213854179, 7.06522784e-08, -1.07148349e-11, 6.57780015e-16}, {6462.26319, -8.147411905}, 287.0512249529787), n217, true, n1.n7671.n365.n8633.n9642.n9645, 25104.684) + n10105 * n1.n7656.n102.n8149.n8155.n7670.n10137(n217, n8197) + n10143 * n1.n7656.n102.n8149.n8155.n7670.n10136(n217);
// end n1.n7656.n102.n8149.n8155.n7670.n10139;
//
// function n1.n7656.n102.n8149.n8155.n7670.n11.n10129
//   input Real n8602;
//   input Real n10158;
//   input Real n637;
//   input Real n9237 = 1.0;
//   input Real n10161;
//   input Real n10162;
//   input Real n8496;
//   input Real n10163 = 0.0;
//   output Real n1629;
//   protected Real n10159;
//   protected Real n10160;
//   protected Real n10164;
//   protected Real n159;
// algorithm
//   n10160 := n637 / n9237;
//   n10159 := n10160 * 1.570796326794897;
//   n10164 := (n8496 - n10160 * n10163) / n9237;
//   if n10160 <= -0.99999999999 then
//     n159 := 0.0;
//   elseif n10160 >= 0.9999999999 then
//     n159 := 1.0;
//   else
//     n159 := (tanh(tan(n10159)) + 1.0) / 2.0;
//   end if;
//   n1629 := n10161 * n159 + (1.0 - n159) * n10162;
//   if abs(n10160) < 1.0 then
//     n1629 := n1629 + (n8602 - n10158) * n10164 * 1.570796326794897 / 2.0 / (cosh(tan(n10159)) * cos(n10159)) ^ 2.0;
//   end if;
// end n1.n7656.n102.n8149.n8155.n7670.n11.n10129;
//
// function n1.n7656.n102.n8149.n8155.n7670.n11.n10145
//   input Real n703;
//   input Real n704;
//   input Real n8496;
//   output Real n159;
// algorithm
//   n159 := max(n703, n704) + log(exp(4.0 / n8496 * (n703 - max(n703, n704))) + exp(4.0 / n8496 * (n704 - max(n703, n704)))) / (4.0 / n8496);
// end n1.n7656.n102.n8149.n8155.n7670.n11.n10145;
//
// function n1.n7656.n102.n8149.n8155.n7670.n11.n10146
//   input Real n703;
//   input Real n704;
//   input Real n8496;
//   input Real n10165;
//   input Real n10166;
//   input Real n9804;
//   output Real n7276;
// algorithm
//   n7276 := (if n703 > n704 then n10165 else n10166) + 0.25 * (((4.0 * (n10165 - (if n703 > n704 then n10165 else n10166)) / n8496 - 4.0 * (n703 - max(n703, n704)) * n9804 / n8496 ^ 2.0) * exp(4.0 * (n703 - max(n703, n704)) / n8496) + (4.0 * (n10166 - (if n703 > n704 then n10165 else n10166)) / n8496 - 4.0 * (n704 - max(n703, n704)) * n9804 / n8496 ^ 2.0) * exp(4.0 * (n704 - max(n703, n704)) / n8496)) * n8496 / (exp(4.0 * (n703 - max(n703, n704)) / n8496) + exp(4.0 * (n704 - max(n703, n704)) / n8496)) + log(exp(4.0 * (n703 - max(n703, n704)) / n8496) + exp(4.0 * (n704 - max(n703, n704)) / n8496)) * n9804);
// end n1.n7656.n102.n8149.n8155.n7670.n11.n10146;
//
// function n1.n7656.n102.n8149.n8155.n7670.n11.n8436
//   input Real n8602;
//   input Real n10158;
//   input Real n637;
//   input Real n9237 = 1.0;
//   output Real n1629;
//   protected Real n10159;
//   protected Real n10160;
//   protected Real n159;
// algorithm
//   n10160 := n637 / n9237;
//   n10159 := n10160 * 1.570796326794897;
//   if n10160 <= -0.999999999 then
//     n159 := 0.0;
//   elseif n10160 >= 0.999999999 then
//     n159 := 1.0;
//   else
//     n159 := (tanh(tan(n10159)) + 1.0) / 2.0;
//   end if;
//   n1629 := n8602 * n159 + (1.0 - n159) * n10158;
// end n1.n7656.n102.n8149.n8155.n7670.n11.n8436;
//
// function n1.n7656.n102.n8149.n8155.n7670.n7785
//   input n1.n7656.n102.n8149.n8155.n7670.n8367 n865;
//   output Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
// algorithm
//   n217 := n865.n217;
// end n1.n7656.n102.n8149.n8155.n7670.n7785;
//
// function n1.n7656.n102.n8149.n8155.n7670.n7955
//   input Real n403(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   input Real n3331(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
//   input Real[:] n6343(quantity = fill(\"MassFraction\", size(n6343, 1)), unit = fill(\"kg/kg\", size(n6343, 1)), min = fill(0.0, size(n6343, 1)), max = fill(1.0, size(n6343, 1)), nominal = fill(0.1, size(n6343, 1))) = {0.01, 0.99};
//   output Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
// algorithm
//   n217 := n1.n7656.n102.n8149.n8155.n7670.n7785(n1.n7656.n102.n8149.n8155.n7670.n8338(n403, n3331, n6343));
// end n1.n7656.n102.n8149.n8155.n7670.n7955;
//
// function n1.n7656.n102.n8149.n8155.n7670.n7957
//   input Real n403(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   input Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   input Real[:] n6343(quantity = fill(\"MassFraction\", size(n6343, 1)), unit = fill(\"kg/kg\", size(n6343, 1)), min = fill(0.0, size(n6343, 1)), max = fill(1.0, size(n6343, 1)), nominal = fill(0.1, size(n6343, 1))) = {0.01, 0.99};
//   output Real n3331(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
// algorithm
//   n3331 := n1.n7656.n102.n8149.n8155.n7670.n8732(n1.n7656.n102.n8149.n8155.n7670.n8396(n403, n217, n6343));
// end n1.n7656.n102.n8149.n8155.n7670.n7957;
//
// function n1.n7656.n102.n8149.n8155.n7670.n8338
//   input Real n403(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   input Real n3331(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
//   input Real[:] n6343(quantity = fill(\"MassFraction\", size(n6343, 1)), unit = fill(\"kg/kg\", size(n6343, 1)), min = fill(0.0, size(n6343, 1)), max = fill(1.0, size(n6343, 1)), nominal = fill(0.1, size(n6343, 1))) = {0.01, 0.99};
//   output n1.n7656.n102.n8149.n8155.n7670.n8367 n865;
// algorithm
//   n865 := if size(n6343, 1) == 2 then n1.n7656.n102.n8149.n8155.n7670.n8367(n403, n1.n7656.n102.n8149.n8155.n7670.n10111(n403, n3331, n6343), n6343) else n1.n7656.n102.n8149.n8155.n7670.n8367(n403, n1.n7656.n102.n8149.n8155.n7670.n10111(n403, n3331, n6343), cat(1, n6343, {1.0 - sum(n6343)}));
// end n1.n7656.n102.n8149.n8155.n7670.n8338;
//
// function n1.n7656.n102.n8149.n8155.n7670.n8367 \"Automatically generated record constructor for n1.n7656.n102.n8149.n8155.n7670.n8367\"
//   input Real n403;
//   input Real n217;
//   input Real[2] n6343;
//   output n8367 res;
// end n1.n7656.n102.n8149.n8155.n7670.n8367;
//
// function n1.n7656.n102.n8149.n8155.n7670.n8396
//   input Real n403(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   input Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   input Real[:] n6343(quantity = fill(\"MassFraction\", size(n6343, 1)), unit = fill(\"kg/kg\", size(n6343, 1)), min = fill(0.0, size(n6343, 1)), max = fill(1.0, size(n6343, 1)), nominal = fill(0.1, size(n6343, 1))) = {0.01, 0.99};
//   output n1.n7656.n102.n8149.n8155.n7670.n8367 n865;
// algorithm
//   n865 := if size(n6343, 1) == 2 then n1.n7656.n102.n8149.n8155.n7670.n8367(n403, n217, n6343) else n1.n7656.n102.n8149.n8155.n7670.n8367(n403, n217, cat(1, n6343, {1.0 - sum(n6343)}));
// end n1.n7656.n102.n8149.n8155.n7670.n8396;
//
// function n1.n7656.n102.n8149.n8155.n7670.n8562
//   input Real n7827(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   output Real n7826(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
// algorithm
//   n7826 := n1.n7656.n102.n8149.n8155.n7670.n11.n8436(n1.n7656.n102.n8149.n8155.n7670.n10117(n7827), n1.n7656.n102.n8149.n8155.n7670.n10124(n7827), n7827 - 273.16, 1.0);
// end n1.n7656.n102.n8149.n8155.n7670.n8562;
//
// function n1.n7656.n102.n8149.n8155.n7670.n8732
//   input n1.n7656.n102.n8149.n8155.n7670.n8367 n865;
//   output Real n3331(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
// algorithm
//   n3331 := n1.n7656.n102.n8149.n8155.n7670.n10138(n865.n403, n865.n217, n865.n6343);
// end n1.n7656.n102.n8149.n8155.n7670.n8732;
//
// function n1.n7656.n11.n8462
//   input Real n637;
//   input Real n1050;
//   input Real n703;
//   input Real n287;
//   input Real n233;
//   input Real n9302;
//   input Real n8499;
//   output Real n159;
//   output Real n58;
//   protected Real n9304;
//   protected Real n9305;
//   protected Real n9306;
//   protected Real n457;
//   protected Real n4890;
//   protected Real n3481;
//   protected Real n5456;
//   protected Real n9307;
//   protected Real n9308;
//   protected Real n9309;
//   protected Real n9310;
//   protected Real n9311;
//   protected Real n1120;
//   protected Real n2374;
//   protected Real n9312;
//   protected Real n9313;
//   protected Real n9314;
//   protected Real n9315;
//   protected Boolean n9316 = false;
// algorithm
//   assert(n1050 < n703, \"assert message 8766466662519165273\");
//   if n9302 * n8499 >= 0.0 then
//   else
//     assert(abs(n9302) < 1e-15 or abs(n8499) < 1e-15, \"assert message 1884851029044619375\");
//   end if;
//   n9304 := n703 - n1050;
//   n9305 := (n233 - n287) / n9304;
//   if abs(n9305) <= 0.0 then
//     n159 := n287 + n9305 * (n637 - n1050);
//     n58 := 0.0;
//   elseif abs(n8499 + n9302 - 2.0 * n9305) < 1e-13 then
//     n159 := n287 + (n637 - n1050) * (n9302 + (n637 - n1050) / n9304 * ((-2.0 * n9302) - n8499 + 3.0 * n9305 + (n637 - n1050) * (n9302 + n8499 - 2.0 * n9305) / n9304));
//     n9314 := (n1050 + n703) / 2.0;
//     n58 := 3.0 * (n9302 + n8499 - 2.0 * n9305) * (n9314 - n1050) ^ 2.0 / n9304 ^ 2.0 + 2.0 * ((-2.0 * n9302) - n8499 + 3.0 * n9305) * (n9314 - n1050) / n9304 + n9302;
//   else
//     n9306 := 0.3333333333333333 * ((-3.0 * n1050 * n9302) - 3.0 * n1050 * n8499 + 6.0 * n1050 * n9305 - 2.0 * n9304 * n9302 - n9304 * n8499 + 3.0 * n9304 * n9305) / ((-n9302) - n8499 + 2.0 * n9305);
//     n457 := n9306 - n1050;
//     n4890 := n703 - n9306;
//     n3481 := 3.0 * (n9302 + n8499 - 2.0 * n9305) * (n9306 - n1050) ^ 2.0 / n9304 ^ 2.0 + 2.0 * ((-2.0 * n9302) - n8499 + 3.0 * n9305) * (n9306 - n1050) / n9304 + n9302;
//     n9314 := 0.25 * /*Real*/(sign(n9305)) * min(abs(n3481), abs(n9305));
//     if abs(n9302 - n8499) <= 1e-13 then
//       n9315 := n9302;
//       if n233 > n287 + n9302 * (n703 - n1050) then
//         n9316 := true;
//       end if;
//     elseif abs(n8499 + n9302 - 2.0 * n9305) < 1e-13 then
//       n9315 := (6.0 * n9305 * (n8499 + n9302 - 1.5 * n9305) - n8499 * n9302 - n8499 ^ 2.0 - n9302 ^ 2.0) * (if n8499 + n9302 - 2.0 * n9305 >= 0.0 then 1.0 else -1.0) * 9.999999999999999e+59;
//     else
//       n9315 := (6.0 * n9305 * (n8499 + n9302 - 1.5 * n9305) - n8499 * n9302 - n8499 ^ 2.0 - n9302 ^ 2.0) / (3.0 * (n8499 + n9302 - 2.0 * n9305));
//     end if;
//     if (n457 > 0.0 and n4890 < n9304 and n9305 * n3481 <= 0.0 or abs(n9314) < abs(n9315) and n9315 * n9305 >= 0.0 or abs(n9314) < abs(0.1 * n9305)) and not n9316 then
//       n58 := n9314;
//       if abs(n58) < abs(n9315) and n9315 * n9305 >= 0.0 then
//         n58 := n9315;
//       end if;
//       if abs(n58) < abs(0.1 * n9305) then
//         n58 := 0.1 * n9305;
//       end if;
//       n9307 := (n9302 * n457 + n8499 * n4890) / n9304;
//       if abs(n9307 - n58) < 1e-06 then
//         n58 := 0.999999 * n9307;
//       end if;
//       n5456 := 3.0 * (n9305 - n58) / (n9307 - n58);
//       n9308 := n5456 * n457;
//       n9309 := n5456 * n4890;
//       n9310 := n1050 + n9308;
//       n9311 := n703 - n9309;
//       n1120 := (n9302 - n58) / max(n9308 ^ 2.0, 1e-13);
//       n2374 := (n8499 - n58) / max(n9309 ^ 2.0, 1e-13);
//       n9312 := n287 - n1120 / 3.0 * (n1050 - n9310) ^ 3.0 - n58 * n1050;
//       n9313 := n233 - n2374 / 3.0 * (n703 - n9311) ^ 3.0 - n58 * n703;
//       if n637 < n9310 then
//         n159 := n1120 / 3.0 * (n637 - n9310) ^ 3.0 + n58 * n637 + n9312;
//       elseif n637 < n9311 then
//         n159 := n58 * n637 + n9312;
//       else
//         n159 := n2374 / 3.0 * (n637 - n9311) ^ 3.0 + n58 * n637 + n9313;
//       end if;
//     else
//       n159 := n287 + (n637 - n1050) * (n9302 + (n637 - n1050) / n9304 * ((-2.0 * n9302) - n8499 + 3.0 * n9305 + (n637 - n1050) * (n9302 + n8499 - 2.0 * n9305) / n9304));
//       n9314 := (n1050 + n703) / 2.0;
//       n58 := 3.0 * (n9302 + n8499 - 2.0 * n9305) * (n9314 - n1050) ^ 2.0 / n9304 ^ 2.0 + 2.0 * ((-2.0 * n9302) - n8499 + 3.0 * n9305) * (n9314 - n1050) / n9304 + n9302;
//     end if;
//   end if;
// end n1.n7656.n11.n8462;
//
// function n1.n7656.n11.n8483
//   input Real n637;
//   input Real n703;
//   input Real n704;
//   input Real n233;
//   input Real n231;
//   input Real n8499;
//   input Real n8500;
//   output Real n159;
//   output Real n8501;
//   protected Real n3331;
//   protected Real n1548;
//   protected Real n9318;
//   protected Real n9319;
//   protected Real n9320;
//   protected Real n9321;
//   protected Real n9322;
//   protected Real n9323;
//   protected Real n9324;
//   protected Real n9325;
//   protected Real n8490;
//   protected Real n1202;
// algorithm
//   n3331 := n704 - n703;
//   if abs(n3331) > 0.0 then
//     n1548 := (n637 - n703) / n3331;
//     n8490 := n1548 ^ 3.0;
//     n1202 := n1548 ^ 2.0;
//     n9318 := 2.0 * n8490 - 3.0 * n1202 + 1.0;
//     n9319 := n8490 - 2.0 * n1202 + n1548;
//     n9320 := (-2.0 * n8490) + 3.0 * n1202;
//     n9321 := n8490 - n1202;
//     n9322 := 6.0 * (n1202 - n1548);
//     n9323 := 3.0 * n1202 - 4.0 * n1548 + 1.0;
//     n9324 := 6.0 * (n1548 - n1202);
//     n9325 := 3.0 * n1202 - 2.0 * n1548;
//     n159 := n233 * n9318 + n3331 * n8499 * n9319 + n231 * n9320 + n3331 * n8500 * n9321;
//     n8501 := n233 * n9322 / n3331 + n8499 * n9323 + n231 * n9324 / n3331 + n8500 * n9325;
//   else
//     n159 := (n233 + n231) / 2.0;
//     n8501 := /*Real*/(sign(n231 - n233)) * 9.999999999999999e+59;
//   end if;
// end n1.n7656.n11.n8483;
//
// function n1.n7656.n11.n8727
//   input String n8726;
//   input String[:] n8724;
//   input Boolean n7994;
//   input Boolean n9288;
//   input Real[:] n9289;
//   input String n9290 = \"??? boundary ???\";
//   protected Integer n7958 = size(n9289, 1);
//   protected String n9291;
// algorithm
//   assert(not n7994 or n7994 and n9288, \"assert message 405342961918706907\");
//   for n49 in 1:n7958 loop
//     assert(n9289[n49] >= 0.0, \"assert message 837991791729573288\");
//   end for;
//   if n7958 > 0 and abs(sum(n9289) - 1.0) > 1e-10 then
//     n9291 := \"\";
//     for n49 in 1:n7958 loop
//       n9291 := n9291 + \"   X_boundary[\" + String(n49, 0, true) + \"] = \" + String(n9289[n49], 6, 0, true) + \" \\\"\" + n8724[n49] + \"\\\"
//       \";
//     end for;
//     n1.n11.n681.n682(\"The boundary mass fractions in medium \\\"\" + n8726 + \"\\\" in model \\\"\" + n9290 + \"\\\"
//     \" + \"do not sum up to 1. Instead, sum(X_boundary) = \" + String(sum(n9289), 6, 0, true) + \":
//     \" + n9291);
//   end if;
// end n1.n7656.n11.n8727;
//
// function n1.n7656.n7680.n5984.n8393.n8329
//   input Real n213(quantity = \"Velocity\", unit = \"m/s\");
//   input Real n5456(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0);
//   input Real n457(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0);
//   input Real n640(quantity = \"Length\", unit = \"m\");
//   output Real n2800(quantity = \"ReynoldsNumber\", unit = \"1\");
// algorithm
//   n2800 := abs(n213) * n5456 * n640 / n457;
// end n1.n7656.n7680.n5984.n8393.n8329;
//
// function n1.n7656.n7680.n5984.n8393.n8430
//   input Real n712(quantity = \"CoefficientOfHeatTransfer\", unit = \"W/(m2.K)\");
//   input Real n640(quantity = \"Length\", unit = \"m\");
//   input Real n474(quantity = \"ThermalConductivity\", unit = \"W/(m.K)\");
//   output Real n8438(quantity = \"NusseltNumber\", unit = \"1\");
// algorithm
//   n8438 := n712 * n640 / n474;
// end n1.n7656.n7680.n5984.n8393.n8430;
//
// function n1.n7671.n8128.n9970.n9971.n10036
//   input Real[:] n403;
//   input Real n122;
//   output Real n159;
// algorithm
//   n159 := n403[1];
//   for n752 in 2:size(n403, 1) loop
//     n159 := n403[n752] + n122 * n159;
//   end for;
// end n1.n7671.n8128.n9970.n9971.n10036;
//
// function n1.n7671.n8128.n9970.n9971.n11662
//   input Real[:] n403;
//   input Real n122;
//   input Real n11673;
//   output Real n7276;
//   protected Integer n228 = size(n403, 1);
// algorithm
//   n7276 := n403[1] * /*Real*/(n228 - 1);
//   for n752 in 2:size(n403, 1) - 1 loop
//     n7276 := n403[n752] * /*Real*/(n228 - n752) + n122 * n7276;
//   end for;
//   n7276 := n7276 * n11673;
// end n1.n7671.n8128.n9970.n9971.n11662;
//
// function n1.n7671.n8128.n9970.n9971.n11663
//   input Real[:] n403;
//   input Real n675;
//   input Real n674;
//   input Real n122;
//   input Real n11673;
//   output Real n7276;
// algorithm
//   if n122 < n675 then
//     n7276 := n1.n7671.n8128.n9970.n9971.n11662(n403, n675, n11673);
//   elseif n122 > n674 then
//     n7276 := n1.n7671.n8128.n9970.n9971.n11662(n403, n674, n11673);
//   else
//     n7276 := n1.n7671.n8128.n9970.n9971.n11662(n403, n122, n11673);
//   end if;
// end n1.n7671.n8128.n9970.n9971.n11663;
//
// function n1.n7671.n8128.n9970.n9971.n9972
//   input Real[:] n403;
//   input Real n675;
//   input Real n674;
//   input Real n122;
//   output Real n159;
// algorithm
//   if n122 < n675 then
//     n159 := n1.n7671.n8128.n9970.n9971.n10036(n403, n675) - n1.n7671.n8128.n9970.n9971.n11662(n403, n675, n675 - n122);
//   elseif n122 > n674 then
//     n159 := n1.n7671.n8128.n9970.n9971.n10036(n403, n674) + n1.n7671.n8128.n9970.n9971.n11662(n403, n674, n122 - n674);
//   else
//     n159 := n1.n7671.n8128.n9970.n9971.n10036(n403, n122);
//   end if;
// end n1.n7671.n8128.n9970.n9971.n9972;
//
// function n1.n7671.n8150.n8151.n11.n10129
//   input Real n8602;
//   input Real n10158;
//   input Real n637;
//   input Real n9237 = 1.0;
//   input Real n10161;
//   input Real n10162;
//   input Real n8496;
//   input Real n10163 = 0.0;
//   output Real n1629;
//   protected Real n10159;
//   protected Real n10160;
//   protected Real n10164;
//   protected Real n159;
// algorithm
//   n10160 := n637 / n9237;
//   n10159 := n10160 * 1.570796326794897;
//   n10164 := (n8496 - n10160 * n10163) / n9237;
//   if n10160 <= -0.99999999999 then
//     n159 := 0.0;
//   elseif n10160 >= 0.9999999999 then
//     n159 := 1.0;
//   else
//     n159 := (tanh(tan(n10159)) + 1.0) / 2.0;
//   end if;
//   n1629 := n10161 * n159 + (1.0 - n159) * n10162;
//   if abs(n10160) < 1.0 then
//     n1629 := n1629 + (n8602 - n10158) * n10164 * 1.570796326794897 / 2.0 / (cosh(tan(n10159)) * cos(n10159)) ^ 2.0;
//   end if;
// end n1.n7671.n8150.n8151.n11.n10129;
//
// function n1.n7671.n8150.n8151.n11.n8436
//   input Real n8602;
//   input Real n10158;
//   input Real n637;
//   input Real n9237 = 1.0;
//   output Real n1629;
//   protected Real n10159;
//   protected Real n10160;
//   protected Real n159;
// algorithm
//   n10160 := n637 / n9237;
//   n10159 := n10160 * 1.570796326794897;
//   if n10160 <= -0.999999999 then
//     n159 := 0.0;
//   elseif n10160 >= 0.999999999 then
//     n159 := 1.0;
//   else
//     n159 := (tanh(tan(n10159)) + 1.0) / 2.0;
//   end if;
//   n1629 := n8602 * n159 + (1.0 - n159) * n10158;
// end n1.n7671.n8150.n8151.n11.n8436;
//
// function n1.n7671.n9351.n9473.n10104 \"Automatically generated record constructor for n1.n7671.n9351.n9473.n10104\"
//   input String n59;
//   input Real n9229;
//   input Real n9787;
//   input Real n5519;
//   input Real n10373;
//   input Real[7] n10374;
//   input Real[2] n10375;
//   input Real[7] n10376;
//   input Real[2] n10377;
//   input Real n344;
//   output n10104 res;
// end n1.n7671.n9351.n9473.n10104;
//
// function n1.n7671.n9351.n9473.n885.n10135
//   input n1.n7671.n9351.n9473.n10104 n2501;
//   input Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   input Boolean n10385 = true;
//   input enumeration(n9643, n9644, n9645) n10134 = n1.n7671.n365.n8633.n9642.n9643;
//   input Real n9933(quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   output Real n3331(quantity = \"SpecificEnergy\", unit = \"J/kg\");
// algorithm
//   n3331 := n2501.n344 * ((-n2501.n10374[1]) + n217 * (n2501.n10375[1] + n2501.n10374[2] * log(n217) + n217 * (n2501.n10374[3] + n217 * (0.5 * n2501.n10374[4] + n217 * (0.3333333333333333 * n2501.n10374[5] + n217 * (0.25 * n2501.n10374[6] + 0.2 * n2501.n10374[7] * n217)))))) / n217 + (if n10385 then -n2501.n9787 else 0.0) + (if n10134 == n1.n7671.n365.n8633.n9642.n9643 then n2501.n5519 else 0.0) + (if n10134 == n1.n7671.n365.n8633.n9642.n9645 then n9933 else 0.0);
// end n1.n7671.n9351.n9473.n885.n10135;
//
// function n1.n7671.n9351.n9473.n885.n10147
//   input n1.n7671.n9351.n9473.n10104 n2501;
//   input Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   input Boolean n10385 = true;
//   input enumeration(n9643, n9644, n9645) n10134 = n1.n7671.n365.n8633.n9642.n9643;
//   input Real n9933(quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real n8197(unit = \"K/s\");
//   output Real n10059(unit = \"J/(kg.s)\");
// algorithm
//   n10059 := n8197 * n1.n7671.n9351.n9473.n885.n10153(n2501, n217);
// end n1.n7671.n9351.n9473.n885.n10147;
//
// function n1.n7671.n9351.n9473.n885.n10153
//   input n1.n7671.n9351.n9473.n10104 n2501;
//   input Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   output Real n4554(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\");
// algorithm
//   n4554 := n2501.n344 * 1.0 / (n217 * n217) * (n2501.n10374[1] + n217 * (n2501.n10374[2] + n217 * (n2501.n10374[3] + n217 * (n2501.n10374[4] + n217 * (n2501.n10374[5] + n217 * (n2501.n10374[6] + n2501.n10374[7] * n217))))));
// end n1.n7671.n9351.n9473.n885.n10153;
//
// function n1.n7671.n9351.n9473.n885.n10383
//   input n1.n7671.n9351.n9473.n10104 n2501;
//   input Real n217(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   input Real n8197;
//   output Real n10384;
// algorithm
//   n10384 := n8197 * n2501.n344 / (n217 * n217 * n217) * ((-2.0 * n2501.n10374[1]) + n217 * ((-n2501.n10374[2]) + n217 * n217 * (n2501.n10374[4] + n217 * (2.0 * n2501.n10374[5] + n217 * (3.0 * n2501.n10374[6] + 4.0 * n2501.n10374[7] * n217)))));
// end n1.n7671.n9351.n9473.n885.n10383;
//
// class n1.n7656.n102.n8149
//   parameter Real system.p_ambient(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 101325.0;
//   parameter Real system.T_ambient(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 293.15;
//   parameter Real system.g(quantity = \"Acceleration\", unit = \"m/s2\") = 9.806649999999999;
//   final parameter Boolean system.allowFlowReversal = true;
//   final parameter enumeration(n8305, n7697, n7751, n117) system.energyDynamics = n1.n7656.n31.n7696.n7751;
//   final parameter enumeration(n8305, n7697, n7751, n117) system.massDynamics = n1.n7656.n31.n7696.n7751;
//   final parameter enumeration(n8305, n7697, n7751, n117) system.substanceDynamics = n1.n7656.n31.n7696.n7751;
//   final parameter enumeration(n8305, n7697, n7751, n117) system.traceDynamics = n1.n7656.n31.n7696.n7751;
//   final parameter enumeration(n8305, n7697, n7751, n117) system.momentumDynamics = n1.n7656.n31.n7696.n7751;
//   parameter Real system.m_flow_start(quantity = \"MassFlowRate\", unit = \"kg/s\") = 0.0;
//   parameter Real system.p_start(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = system.p_ambient;
//   parameter Real system.T_start(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = system.T_ambient;
//   final parameter Boolean system.use_eps_Re = false;
//   parameter Real system.m_flow_nominal(quantity = \"MassFlowRate\", unit = \"kg/s\") = 100.0 * system.m_flow_small;
//   parameter Real system.eps_m_flow(min = 0.0) = 0.0001;
//   parameter Real system.dp_small(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = 1.0;
//   parameter Real system.m_flow_small(quantity = \"MassFlowRate\", unit = \"kg/s\", min = 0.0) = 0.01;
//   final parameter Integer boundary1.nPorts = 1;
//   Real boundary1.medium.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0, stateSelect = StateSelect.default);
//   Real boundary1.medium.Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = 0.01, stateSelect = StateSelect.default);
//   Real boundary1.medium.h(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   Real boundary1.medium.d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real boundary1.medium.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0, stateSelect = StateSelect.default);
//   Real boundary1.medium.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real boundary1.medium.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real boundary1.medium.u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real boundary1.medium.R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real boundary1.medium.MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real boundary1.medium.state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real boundary1.medium.state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real boundary1.medium.state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real boundary1.medium.state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean boundary1.medium.preferredMediumStates = false;
//   final parameter Boolean boundary1.medium.standardOrderComponents = true;
//   Real boundary1.medium.T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = n1.n101.n946.n949(boundary1.medium.T);
//   Real boundary1.medium.p_bar(quantity = \"Pressure\", unit = \"bar\") = n1.n101.n946.n993(boundary1.medium.p);
//   Real boundary1.medium.x_water(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real boundary1.medium.phi;
//   protected Real n8153.n7931.n10105(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n8153.n7931.n10106(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n8153.n7931.n10107(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n8153.n7931.n10108(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n8153.n7931.n10109(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n8153.n7931.n10110(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real boundary1.ports[1].m_flow(quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 9.999999999999999e+59);
//   Real boundary1.ports[1].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real boundary1.ports[1].h_outflow(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
//   Real boundary1.ports[1].Xi_outflow[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected final parameter enumeration(n8710, n8711, n8714) n8153.n8745 = n1.n7656.n31.n8708.n8714;
//   final parameter Boolean boundary1.use_p_in = false;
//   final parameter Boolean boundary1.use_T_in = false;
//   final parameter Boolean boundary1.use_X_in = false;
//   final parameter Boolean boundary1.use_C_in = false;
//   parameter Real boundary1.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = 150000.0;
//   parameter Real boundary1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = 293.15;
//   parameter Real boundary1.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = 0.01;
//   parameter Real boundary1.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = 0.99;
//   protected Real n8153.n8735;
//   protected Real n8153.n8736;
//   protected Real n8153.n8737[1];
//   protected Real n8153.n8737[2];
//   final parameter Boolean pipe1.allowFlowReversal = true;
//   Real pipe1.port_a.m_flow(quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0);
//   Real pipe1.port_a.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe1.port_a.h_outflow(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
//   Real pipe1.port_a.Xi_outflow[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real pipe1.port_b.m_flow(quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 9.999999999999999e+59);
//   Real pipe1.port_b.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe1.port_b.h_outflow(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
//   Real pipe1.port_b.Xi_outflow[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected final parameter Boolean n7835.n7805 = false;
//   protected final parameter Boolean n7835.n7806 = false;
//   protected parameter Boolean n7835.n8767 = true;
//   parameter Real pipe1.nParallel(min = 1.0) = 1.0;
//   final parameter Real pipe1.length(quantity = \"Length\", unit = \"m\") = 50.0;
//   parameter Boolean pipe1.isCircular = true;
//   parameter Real pipe1.diameter(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0254;
//   parameter Real pipe1.crossArea(quantity = \"Area\", unit = \"m2\") = 3.141592653589793 * pipe1.diameter * pipe1.diameter / 4.0;
//   parameter Real pipe1.perimeter(quantity = \"Length\", unit = \"m\", min = 0.0) = 3.141592653589793 * pipe1.diameter;
//   parameter Real pipe1.roughness(quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = 2.5e-05;
//   final parameter Real pipe1.V(quantity = \"Volume\", unit = \"m3\") = pipe1.crossArea * 50.0 * pipe1.nParallel;
//   final parameter Real pipe1.height_ab(quantity = \"Length\", unit = \"m\") = 50.0;
//   final parameter Integer pipe1.n = 5;
//   final Real pipe1.fluidVolumes[1](quantity = \"Volume\", unit = \"m3\");
//   final Real pipe1.fluidVolumes[2](quantity = \"Volume\", unit = \"m3\");
//   final Real pipe1.fluidVolumes[3](quantity = \"Volume\", unit = \"m3\");
//   final Real pipe1.fluidVolumes[4](quantity = \"Volume\", unit = \"m3\");
//   final Real pipe1.fluidVolumes[5](quantity = \"Volume\", unit = \"m3\");
//   final parameter enumeration(n8305, n7697, n7751, n117) pipe1.energyDynamics = n1.n7656.n31.n7696.n7751;
//   final parameter enumeration(n8305, n7697, n7751, n117) pipe1.massDynamics = n1.n7656.n31.n7696.n7751;
//   final parameter enumeration(n8305, n7697, n7751, n117) pipe1.substanceDynamics = n1.n7656.n31.n7696.n7751;
//   final parameter enumeration(n8305, n7697, n7751, n117) pipe1.traceDynamics = n1.n7656.n31.n7696.n7751;
//   parameter Real pipe1.p_a_start(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = 150000.0;
//   parameter Real pipe1.p_b_start(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = 130000.0;
//   final parameter Real pipe1.ps_start[1](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe1.p_a_start;
//   final parameter Real pipe1.ps_start[2](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe1.p_a_start + (pipe1.p_b_start - pipe1.p_a_start) / 4.0;
//   final parameter Real pipe1.ps_start[3](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe1.p_a_start + (pipe1.p_b_start - pipe1.p_a_start) * 2.0 / 4.0;
//   final parameter Real pipe1.ps_start[4](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe1.p_a_start + (pipe1.p_b_start - pipe1.p_a_start) * 3.0 / 4.0;
//   final parameter Real pipe1.ps_start[5](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe1.p_a_start + (pipe1.p_b_start - pipe1.p_a_start) * 4.0 / 4.0;
//   final parameter Boolean pipe1.use_T_start = true;
//   parameter Real pipe1.T_start(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = system.T_start;
//   parameter Real pipe1.h_start(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0) = n1.n7656.n102.n8149.n7835.n7670.n7957((pipe1.p_a_start + pipe1.p_b_start) / 2.0, pipe1.T_start, pipe1.X_start);
//   parameter Real pipe1.X_start[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = 0.01;
//   parameter Real pipe1.X_start[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = 0.99;
//   Real pipe1.Us[1](quantity = \"Energy\", unit = \"J\");
//   Real pipe1.Us[2](quantity = \"Energy\", unit = \"J\");
//   Real pipe1.Us[3](quantity = \"Energy\", unit = \"J\");
//   Real pipe1.Us[4](quantity = \"Energy\", unit = \"J\");
//   Real pipe1.Us[5](quantity = \"Energy\", unit = \"J\");
//   Real pipe1.ms[1](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe1.ms[2](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe1.ms[3](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe1.ms[4](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe1.ms[5](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe1.mXis[1,1](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe1.mXis[2,1](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe1.mXis[3,1](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe1.mXis[4,1](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe1.mXis[5,1](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe1.mediums[1].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = pipe1.ps_start[1], nominal = 100000.0, stateSelect = StateSelect.prefer);
//   Real pipe1.mediums[1].Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = pipe1.X_start[1], stateSelect = StateSelect.prefer);
//   Real pipe1.mediums[1].h(quantity = \"SpecificEnergy\", unit = \"J/kg\", start = pipe1.h_start);
//   Real pipe1.mediums[1].d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe1.mediums[1].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = pipe1.T_start, nominal = 300.0, stateSelect = StateSelect.prefer);
//   Real pipe1.mediums[1].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe1.mediums[1].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe1.mediums[1].u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real pipe1.mediums[1].R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real pipe1.mediums[1].MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real pipe1.mediums[1].state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe1.mediums[1].state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe1.mediums[1].state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe1.mediums[1].state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean pipe1.mediums[1].preferredMediumStates = true;
//   final parameter Boolean pipe1.mediums[1].standardOrderComponents = true;
//   Real pipe1.mediums[1].T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = n1.n101.n946.n949(pipe1.mediums[1].T);
//   Real pipe1.mediums[1].p_bar(quantity = \"Pressure\", unit = \"bar\") = n1.n101.n946.n993(pipe1.mediums[1].p);
//   Real pipe1.mediums[1].x_water(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real pipe1.mediums[1].phi;
//   protected Real n7835.n8256[1].n10105(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7835.n8256[1].n10106(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7835.n8256[1].n10107(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7835.n8256[1].n10108(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7835.n8256[1].n10109(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7835.n8256[1].n10110(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe1.mediums[2].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = pipe1.ps_start[2], nominal = 100000.0, stateSelect = StateSelect.prefer);
//   Real pipe1.mediums[2].Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = pipe1.X_start[1], stateSelect = StateSelect.prefer);
//   Real pipe1.mediums[2].h(quantity = \"SpecificEnergy\", unit = \"J/kg\", start = pipe1.h_start);
//   Real pipe1.mediums[2].d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe1.mediums[2].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = pipe1.T_start, nominal = 300.0, stateSelect = StateSelect.prefer);
//   Real pipe1.mediums[2].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe1.mediums[2].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe1.mediums[2].u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real pipe1.mediums[2].R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real pipe1.mediums[2].MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real pipe1.mediums[2].state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe1.mediums[2].state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe1.mediums[2].state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe1.mediums[2].state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean pipe1.mediums[2].preferredMediumStates = true;
//   final parameter Boolean pipe1.mediums[2].standardOrderComponents = true;
//   Real pipe1.mediums[2].T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = n1.n101.n946.n949(pipe1.mediums[2].T);
//   Real pipe1.mediums[2].p_bar(quantity = \"Pressure\", unit = \"bar\") = n1.n101.n946.n993(pipe1.mediums[2].p);
//   Real pipe1.mediums[2].x_water(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real pipe1.mediums[2].phi;
//   protected Real n7835.n8256[2].n10105(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7835.n8256[2].n10106(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7835.n8256[2].n10107(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7835.n8256[2].n10108(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7835.n8256[2].n10109(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7835.n8256[2].n10110(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe1.mediums[3].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = pipe1.ps_start[3], nominal = 100000.0, stateSelect = StateSelect.prefer);
//   Real pipe1.mediums[3].Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = pipe1.X_start[1], stateSelect = StateSelect.prefer);
//   Real pipe1.mediums[3].h(quantity = \"SpecificEnergy\", unit = \"J/kg\", start = pipe1.h_start);
//   Real pipe1.mediums[3].d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe1.mediums[3].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = pipe1.T_start, nominal = 300.0, stateSelect = StateSelect.prefer);
//   Real pipe1.mediums[3].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe1.mediums[3].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe1.mediums[3].u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real pipe1.mediums[3].R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real pipe1.mediums[3].MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real pipe1.mediums[3].state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe1.mediums[3].state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe1.mediums[3].state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe1.mediums[3].state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean pipe1.mediums[3].preferredMediumStates = true;
//   final parameter Boolean pipe1.mediums[3].standardOrderComponents = true;
//   Real pipe1.mediums[3].T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = n1.n101.n946.n949(pipe1.mediums[3].T);
//   Real pipe1.mediums[3].p_bar(quantity = \"Pressure\", unit = \"bar\") = n1.n101.n946.n993(pipe1.mediums[3].p);
//   Real pipe1.mediums[3].x_water(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real pipe1.mediums[3].phi;
//   protected Real n7835.n8256[3].n10105(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7835.n8256[3].n10106(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7835.n8256[3].n10107(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7835.n8256[3].n10108(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7835.n8256[3].n10109(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7835.n8256[3].n10110(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe1.mediums[4].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = pipe1.ps_start[4], nominal = 100000.0, stateSelect = StateSelect.prefer);
//   Real pipe1.mediums[4].Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = pipe1.X_start[1], stateSelect = StateSelect.prefer);
//   Real pipe1.mediums[4].h(quantity = \"SpecificEnergy\", unit = \"J/kg\", start = pipe1.h_start);
//   Real pipe1.mediums[4].d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe1.mediums[4].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = pipe1.T_start, nominal = 300.0, stateSelect = StateSelect.prefer);
//   Real pipe1.mediums[4].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe1.mediums[4].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe1.mediums[4].u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real pipe1.mediums[4].R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real pipe1.mediums[4].MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real pipe1.mediums[4].state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe1.mediums[4].state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe1.mediums[4].state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe1.mediums[4].state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean pipe1.mediums[4].preferredMediumStates = true;
//   final parameter Boolean pipe1.mediums[4].standardOrderComponents = true;
//   Real pipe1.mediums[4].T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = n1.n101.n946.n949(pipe1.mediums[4].T);
//   Real pipe1.mediums[4].p_bar(quantity = \"Pressure\", unit = \"bar\") = n1.n101.n946.n993(pipe1.mediums[4].p);
//   Real pipe1.mediums[4].x_water(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real pipe1.mediums[4].phi;
//   protected Real n7835.n8256[4].n10105(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7835.n8256[4].n10106(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7835.n8256[4].n10107(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7835.n8256[4].n10108(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7835.n8256[4].n10109(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7835.n8256[4].n10110(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe1.mediums[5].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = pipe1.ps_start[5], nominal = 100000.0, stateSelect = StateSelect.prefer);
//   Real pipe1.mediums[5].Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = pipe1.X_start[1], stateSelect = StateSelect.prefer);
//   Real pipe1.mediums[5].h(quantity = \"SpecificEnergy\", unit = \"J/kg\", start = pipe1.h_start);
//   Real pipe1.mediums[5].d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe1.mediums[5].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = pipe1.T_start, nominal = 300.0, stateSelect = StateSelect.prefer);
//   Real pipe1.mediums[5].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe1.mediums[5].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe1.mediums[5].u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real pipe1.mediums[5].R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real pipe1.mediums[5].MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real pipe1.mediums[5].state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe1.mediums[5].state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe1.mediums[5].state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe1.mediums[5].state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean pipe1.mediums[5].preferredMediumStates = true;
//   final parameter Boolean pipe1.mediums[5].standardOrderComponents = true;
//   Real pipe1.mediums[5].T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = n1.n101.n946.n949(pipe1.mediums[5].T);
//   Real pipe1.mediums[5].p_bar(quantity = \"Pressure\", unit = \"bar\") = n1.n101.n946.n993(pipe1.mediums[5].p);
//   Real pipe1.mediums[5].x_water(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real pipe1.mediums[5].phi;
//   protected Real n7835.n8256[5].n10105(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7835.n8256[5].n10106(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7835.n8256[5].n10107(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7835.n8256[5].n10108(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7835.n8256[5].n10109(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7835.n8256[5].n10110(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe1.mb_flows[1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe1.mb_flows[2](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe1.mb_flows[3](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe1.mb_flows[4](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe1.mb_flows[5](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe1.mbXi_flows[1,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe1.mbXi_flows[2,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe1.mbXi_flows[3,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe1.mbXi_flows[4,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe1.mbXi_flows[5,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe1.Hb_flows[1](quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   Real pipe1.Hb_flows[2](quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   Real pipe1.Hb_flows[3](quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   Real pipe1.Hb_flows[4](quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   Real pipe1.Hb_flows[5](quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   Real pipe1.Qb_flows[1](quantity = \"Power\", unit = \"W\");
//   Real pipe1.Qb_flows[2](quantity = \"Power\", unit = \"W\");
//   Real pipe1.Qb_flows[3](quantity = \"Power\", unit = \"W\");
//   Real pipe1.Qb_flows[4](quantity = \"Power\", unit = \"W\");
//   Real pipe1.Qb_flows[5](quantity = \"Power\", unit = \"W\");
//   Real pipe1.Wb_flows[1](quantity = \"Power\", unit = \"W\");
//   Real pipe1.Wb_flows[2](quantity = \"Power\", unit = \"W\");
//   Real pipe1.Wb_flows[3](quantity = \"Power\", unit = \"W\");
//   Real pipe1.Wb_flows[4](quantity = \"Power\", unit = \"W\");
//   Real pipe1.Wb_flows[5](quantity = \"Power\", unit = \"W\");
//   protected final parameter Boolean n7835.n8082 = true;
//   final parameter Real pipe1.lengths[1](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter Real pipe1.lengths[2](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter Real pipe1.lengths[3](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter Real pipe1.lengths[4](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter Real pipe1.lengths[5](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter Real pipe1.crossAreas[1](quantity = \"Area\", unit = \"m2\") = pipe1.crossArea;
//   final parameter Real pipe1.crossAreas[2](quantity = \"Area\", unit = \"m2\") = pipe1.crossArea;
//   final parameter Real pipe1.crossAreas[3](quantity = \"Area\", unit = \"m2\") = pipe1.crossArea;
//   final parameter Real pipe1.crossAreas[4](quantity = \"Area\", unit = \"m2\") = pipe1.crossArea;
//   final parameter Real pipe1.crossAreas[5](quantity = \"Area\", unit = \"m2\") = pipe1.crossArea;
//   final parameter Real pipe1.dimensions[1](quantity = \"Length\", unit = \"m\") = 4.0 * pipe1.crossArea / pipe1.perimeter;
//   final parameter Real pipe1.dimensions[2](quantity = \"Length\", unit = \"m\") = 4.0 * pipe1.crossArea / pipe1.perimeter;
//   final parameter Real pipe1.dimensions[3](quantity = \"Length\", unit = \"m\") = 4.0 * pipe1.crossArea / pipe1.perimeter;
//   final parameter Real pipe1.dimensions[4](quantity = \"Length\", unit = \"m\") = 4.0 * pipe1.crossArea / pipe1.perimeter;
//   final parameter Real pipe1.dimensions[5](quantity = \"Length\", unit = \"m\") = 4.0 * pipe1.crossArea / pipe1.perimeter;
//   final parameter Real pipe1.roughnesses[1](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = pipe1.roughness;
//   final parameter Real pipe1.roughnesses[2](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = pipe1.roughness;
//   final parameter Real pipe1.roughnesses[3](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = pipe1.roughness;
//   final parameter Real pipe1.roughnesses[4](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = pipe1.roughness;
//   final parameter Real pipe1.roughnesses[5](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = pipe1.roughness;
//   final parameter Real pipe1.dheights[1](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter Real pipe1.dheights[2](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter Real pipe1.dheights[3](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter Real pipe1.dheights[4](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter Real pipe1.dheights[5](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter enumeration(n8305, n7697, n7751, n117) pipe1.momentumDynamics = n1.n7656.n31.n7696.n7751;
//   final parameter Real pipe1.m_flow_start(quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0) = 0.02;
//   final parameter Integer pipe1.nNodes(min = 1) = 5;
//   final parameter enumeration(n8127, n7761, n8187, n8189) pipe1.modelStructure = n1.n7656.n31.n7760.n7761;
//   final parameter Boolean pipe1.useLumpedPressure = false;
//   final parameter Integer pipe1.nFM = 6;
//   final parameter Integer pipe1.nFMDistributed = 6;
//   final parameter Integer pipe1.nFMLumped = 2;
//   final parameter Integer pipe1.iLumped = 3;
//   final parameter Boolean pipe1.useInnerPortProperties = false;
//   Real pipe1.state_a.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe1.state_a.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe1.state_a.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe1.state_a.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe1.state_b.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe1.state_b.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe1.state_b.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe1.state_b.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe1.statesFM[1].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe1.statesFM[1].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe1.statesFM[1].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe1.statesFM[1].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe1.statesFM[2].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe1.statesFM[2].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe1.statesFM[2].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe1.statesFM[2].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe1.statesFM[3].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe1.statesFM[3].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe1.statesFM[3].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe1.statesFM[3].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe1.statesFM[4].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe1.statesFM[4].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe1.statesFM[4].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe1.statesFM[4].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe1.statesFM[5].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe1.statesFM[5].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe1.statesFM[5].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe1.statesFM[5].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe1.statesFM[6].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe1.statesFM[6].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe1.statesFM[6].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe1.statesFM[6].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe1.statesFM[7].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe1.statesFM[7].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe1.statesFM[7].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe1.statesFM[7].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean pipe1.flowModel.from_dp = true;
//   final parameter Integer pipe1.flowModel.n = 7;
//   final Real pipe1.flowModel.states[1].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe1.statesFM[1].p;
//   final Real pipe1.flowModel.states[1].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe1.statesFM[1].T;
//   final Real pipe1.flowModel.states[1].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe1.flowModel.states[1].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe1.flowModel.states[2].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe1.statesFM[2].p;
//   final Real pipe1.flowModel.states[2].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe1.statesFM[2].T;
//   final Real pipe1.flowModel.states[2].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe1.flowModel.states[2].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe1.flowModel.states[3].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe1.statesFM[3].p;
//   final Real pipe1.flowModel.states[3].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe1.statesFM[3].T;
//   final Real pipe1.flowModel.states[3].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe1.flowModel.states[3].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe1.flowModel.states[4].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe1.statesFM[4].p;
//   final Real pipe1.flowModel.states[4].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe1.statesFM[4].T;
//   final Real pipe1.flowModel.states[4].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe1.flowModel.states[4].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe1.flowModel.states[5].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe1.statesFM[5].p;
//   final Real pipe1.flowModel.states[5].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe1.statesFM[5].T;
//   final Real pipe1.flowModel.states[5].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe1.flowModel.states[5].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe1.flowModel.states[6].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe1.statesFM[6].p;
//   final Real pipe1.flowModel.states[6].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe1.statesFM[6].T;
//   final Real pipe1.flowModel.states[6].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe1.flowModel.states[6].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe1.flowModel.states[7].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe1.statesFM[7].p;
//   final Real pipe1.flowModel.states[7].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe1.statesFM[7].T;
//   final Real pipe1.flowModel.states[7].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe1.flowModel.states[7].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe1.flowModel.vs[1](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe1.flowModel.vs[2](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe1.flowModel.vs[3](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe1.flowModel.vs[4](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe1.flowModel.vs[5](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe1.flowModel.vs[6](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe1.flowModel.vs[7](quantity = \"Velocity\", unit = \"m/s\");
//   final parameter Real pipe1.flowModel.nParallel = pipe1.nParallel;
//   final Real pipe1.flowModel.crossAreas[1](quantity = \"Area\", unit = \"m2\");
//   final Real pipe1.flowModel.crossAreas[2](quantity = \"Area\", unit = \"m2\");
//   final Real pipe1.flowModel.crossAreas[3](quantity = \"Area\", unit = \"m2\");
//   final Real pipe1.flowModel.crossAreas[4](quantity = \"Area\", unit = \"m2\");
//   final Real pipe1.flowModel.crossAreas[5](quantity = \"Area\", unit = \"m2\");
//   final Real pipe1.flowModel.crossAreas[6](quantity = \"Area\", unit = \"m2\");
//   final Real pipe1.flowModel.crossAreas[7](quantity = \"Area\", unit = \"m2\");
//   final Real pipe1.flowModel.dimensions[1](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.flowModel.dimensions[2](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.flowModel.dimensions[3](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.flowModel.dimensions[4](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.flowModel.dimensions[5](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.flowModel.dimensions[6](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.flowModel.dimensions[7](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.flowModel.roughnesses[1](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe1.flowModel.roughnesses[2](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe1.flowModel.roughnesses[3](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe1.flowModel.roughnesses[4](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe1.flowModel.roughnesses[5](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe1.flowModel.roughnesses[6](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe1.flowModel.roughnesses[7](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe1.flowModel.dheights[1](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.flowModel.dheights[2](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.flowModel.dheights[3](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.flowModel.dheights[4](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.flowModel.dheights[5](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.flowModel.dheights[6](quantity = \"Length\", unit = \"m\");
//   final parameter Real pipe1.flowModel.g(quantity = \"Acceleration\", unit = \"m/s2\") = system.g;
//   final parameter Boolean pipe1.flowModel.allowFlowReversal = true;
//   final parameter enumeration(n8305, n7697, n7751, n117) pipe1.flowModel.momentumDynamics = n1.n7656.n31.n7696.n7751;
//   final parameter Real pipe1.flowModel.m_flow_start(quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0) = 0.02;
//   final parameter Real pipe1.flowModel.p_a_start(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe1.p_a_start;
//   final parameter Real pipe1.flowModel.p_b_start(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe1.p_b_start;
//   final parameter Integer pipe1.flowModel.m = 6;
//   final Real pipe1.flowModel.pathLengths[1](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.flowModel.pathLengths[2](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.flowModel.pathLengths[3](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.flowModel.pathLengths[4](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.flowModel.pathLengths[5](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.flowModel.pathLengths[6](quantity = \"Length\", unit = \"m\");
//   Real pipe1.flowModel.m_flows[1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.02, stateSelect = StateSelect.prefer);
//   Real pipe1.flowModel.m_flows[2](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.02, stateSelect = StateSelect.prefer);
//   Real pipe1.flowModel.m_flows[3](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.02, stateSelect = StateSelect.prefer);
//   Real pipe1.flowModel.m_flows[4](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.02, stateSelect = StateSelect.prefer);
//   Real pipe1.flowModel.m_flows[5](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.02, stateSelect = StateSelect.prefer);
//   Real pipe1.flowModel.m_flows[6](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.02, stateSelect = StateSelect.prefer);
//   Real pipe1.flowModel.Is[1](quantity = \"Momentum\", unit = \"kg.m/s\");
//   Real pipe1.flowModel.Is[2](quantity = \"Momentum\", unit = \"kg.m/s\");
//   Real pipe1.flowModel.Is[3](quantity = \"Momentum\", unit = \"kg.m/s\");
//   Real pipe1.flowModel.Is[4](quantity = \"Momentum\", unit = \"kg.m/s\");
//   Real pipe1.flowModel.Is[5](quantity = \"Momentum\", unit = \"kg.m/s\");
//   Real pipe1.flowModel.Is[6](quantity = \"Momentum\", unit = \"kg.m/s\");
//   Real pipe1.flowModel.Ib_flows[1](quantity = \"Force\", unit = \"N\");
//   Real pipe1.flowModel.Ib_flows[2](quantity = \"Force\", unit = \"N\");
//   Real pipe1.flowModel.Ib_flows[3](quantity = \"Force\", unit = \"N\");
//   Real pipe1.flowModel.Ib_flows[4](quantity = \"Force\", unit = \"N\");
//   Real pipe1.flowModel.Ib_flows[5](quantity = \"Force\", unit = \"N\");
//   Real pipe1.flowModel.Ib_flows[6](quantity = \"Force\", unit = \"N\");
//   Real pipe1.flowModel.Fs_p[1](quantity = \"Force\", unit = \"N\");
//   Real pipe1.flowModel.Fs_p[2](quantity = \"Force\", unit = \"N\");
//   Real pipe1.flowModel.Fs_p[3](quantity = \"Force\", unit = \"N\");
//   Real pipe1.flowModel.Fs_p[4](quantity = \"Force\", unit = \"N\");
//   Real pipe1.flowModel.Fs_p[5](quantity = \"Force\", unit = \"N\");
//   Real pipe1.flowModel.Fs_p[6](quantity = \"Force\", unit = \"N\");
//   Real pipe1.flowModel.Fs_fg[1](quantity = \"Force\", unit = \"N\");
//   Real pipe1.flowModel.Fs_fg[2](quantity = \"Force\", unit = \"N\");
//   Real pipe1.flowModel.Fs_fg[3](quantity = \"Force\", unit = \"N\");
//   Real pipe1.flowModel.Fs_fg[4](quantity = \"Force\", unit = \"N\");
//   Real pipe1.flowModel.Fs_fg[5](quantity = \"Force\", unit = \"N\");
//   Real pipe1.flowModel.Fs_fg[6](quantity = \"Force\", unit = \"N\");
//   final parameter Boolean pipe1.flowModel.useUpstreamScheme = true;
//   final parameter Boolean pipe1.flowModel.use_Ib_flows = true;
//   Real pipe1.flowModel.rhos[1](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe1.flowModel.rhos[2](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe1.flowModel.rhos[3](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe1.flowModel.rhos[4](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe1.flowModel.rhos[5](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe1.flowModel.rhos[6](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe1.flowModel.rhos[7](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe1.flowModel.rhos_act[1](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe1.flowModel.rhos_act[2](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe1.flowModel.rhos_act[3](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe1.flowModel.rhos_act[4](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe1.flowModel.rhos_act[5](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe1.flowModel.rhos_act[6](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe1.flowModel.mus[1](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe1.flowModel.mus[2](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe1.flowModel.mus[3](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe1.flowModel.mus[4](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe1.flowModel.mus[5](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe1.flowModel.mus[6](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe1.flowModel.mus[7](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe1.flowModel.mus_act[1](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe1.flowModel.mus_act[2](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe1.flowModel.mus_act[3](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe1.flowModel.mus_act[4](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe1.flowModel.mus_act[5](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe1.flowModel.mus_act[6](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe1.flowModel.dps_fg[1](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", start = (pipe1.flowModel.p_a_start - pipe1.flowModel.p_b_start) / 6.0);
//   Real pipe1.flowModel.dps_fg[2](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", start = (pipe1.flowModel.p_a_start - pipe1.flowModel.p_b_start) / 6.0);
//   Real pipe1.flowModel.dps_fg[3](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", start = (pipe1.flowModel.p_a_start - pipe1.flowModel.p_b_start) / 6.0);
//   Real pipe1.flowModel.dps_fg[4](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", start = (pipe1.flowModel.p_a_start - pipe1.flowModel.p_b_start) / 6.0);
//   Real pipe1.flowModel.dps_fg[5](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", start = (pipe1.flowModel.p_a_start - pipe1.flowModel.p_b_start) / 6.0);
//   Real pipe1.flowModel.dps_fg[6](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", start = (pipe1.flowModel.p_a_start - pipe1.flowModel.p_b_start) / 6.0);
//   final parameter Real pipe1.flowModel.Re_turbulent(quantity = \"ReynoldsNumber\", unit = \"1\") = 4000.0;
//   final parameter Boolean pipe1.flowModel.show_Res = false;
//   protected final parameter Boolean n7835.n8346.n8385 = false;
//   protected parameter Real n7835.n8346.n8135(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 1.196838693581092;
//   protected final parameter Boolean n7835.n8346.n8389 = false;
//   protected parameter Real n7835.n8346.n8390(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0) = 1.823286547365138e-05;
//   Real pipe1.flowModel.pathLengths_internal[1](quantity = \"Length\", unit = \"m\");
//   Real pipe1.flowModel.pathLengths_internal[2](quantity = \"Length\", unit = \"m\");
//   Real pipe1.flowModel.pathLengths_internal[3](quantity = \"Length\", unit = \"m\");
//   Real pipe1.flowModel.pathLengths_internal[4](quantity = \"Length\", unit = \"m\");
//   Real pipe1.flowModel.pathLengths_internal[5](quantity = \"Length\", unit = \"m\");
//   Real pipe1.flowModel.pathLengths_internal[6](quantity = \"Length\", unit = \"m\");
//   Real pipe1.flowModel.Res_turbulent_internal[1](quantity = \"ReynoldsNumber\", unit = \"1\");
//   Real pipe1.flowModel.Res_turbulent_internal[2](quantity = \"ReynoldsNumber\", unit = \"1\");
//   Real pipe1.flowModel.Res_turbulent_internal[3](quantity = \"ReynoldsNumber\", unit = \"1\");
//   Real pipe1.flowModel.Res_turbulent_internal[4](quantity = \"ReynoldsNumber\", unit = \"1\");
//   Real pipe1.flowModel.Res_turbulent_internal[5](quantity = \"ReynoldsNumber\", unit = \"1\");
//   Real pipe1.flowModel.Res_turbulent_internal[6](quantity = \"ReynoldsNumber\", unit = \"1\");
//   parameter Real pipe1.flowModel.dp_nominal(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = 1.0, fixed = false, nominal = 100000.0);
//   parameter Real pipe1.flowModel.m_flow_nominal(quantity = \"MassFlowRate\", unit = \"kg/s\") = 100.0 * pipe1.flowModel.m_flow_small;
//   parameter Real pipe1.flowModel.m_flow_small(quantity = \"MassFlowRate\", unit = \"kg/s\") = system.m_flow_small;
//   protected parameter Real n7835.n8346.n8308(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = 1.0, fixed = false, nominal = 100000.0);
//   protected final parameter Boolean n7835.n8346.n8407 = false;
//   protected final parameter Boolean n7835.n8346.n8409 = false;
//   protected Real n7835.n8346.n8410[1](quantity = \"Length\", unit = \"m\");
//   protected Real n7835.n8346.n8410[2](quantity = \"Length\", unit = \"m\");
//   protected Real n7835.n8346.n8410[3](quantity = \"Length\", unit = \"m\");
//   protected Real n7835.n8346.n8410[4](quantity = \"Length\", unit = \"m\");
//   protected Real n7835.n8346.n8410[5](quantity = \"Length\", unit = \"m\");
//   protected Real n7835.n8346.n8410[6](quantity = \"Length\", unit = \"m\");
//   protected Real n7835.n8346.n8411(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = n1.n7656.n102.n8149.n7835.n8346.n7663.n8412(pipe1.flowModel.m_flow_nominal / pipe1.flowModel.nParallel, n7835.n8346.n8135, n7835.n8346.n8135, n7835.n8346.n8390, n7835.n8346.n8390, pipe1.flowModel.pathLengths_internal[1], n7835.n8346.n8410[1], (pipe1.flowModel.crossAreas[1] + pipe1.flowModel.crossAreas[2]) / 2.0, (pipe1.flowModel.roughnesses[1] + pipe1.flowModel.roughnesses[2]) / 2.0, pipe1.flowModel.m_flow_small / pipe1.flowModel.nParallel, pipe1.flowModel.Res_turbulent_internal[1]) + n1.n7656.n102.n8149.n7835.n8346.n7663.n8412(pipe1.flowModel.m_flow_nominal / pipe1.flowModel.nParallel, n7835.n8346.n8135, n7835.n8346.n8135, n7835.n8346.n8390, n7835.n8346.n8390, pipe1.flowModel.pathLengths_internal[2], n7835.n8346.n8410[2], (pipe1.flowModel.crossAreas[2] + pipe1.flowModel.crossAreas[3]) / 2.0, (pipe1.flowModel.roughnesses[2] + pipe1.flowModel.roughnesses[3]) / 2.0, pipe1.flowModel.m_flow_small / pipe1.flowModel.nParallel, pipe1.flowModel.Res_turbulent_internal[2]) + n1.n7656.n102.n8149.n7835.n8346.n7663.n8412(pipe1.flowModel.m_flow_nominal / pipe1.flowModel.nParallel, n7835.n8346.n8135, n7835.n8346.n8135, n7835.n8346.n8390, n7835.n8346.n8390, pipe1.flowModel.pathLengths_internal[3], n7835.n8346.n8410[3], (pipe1.flowModel.crossAreas[3] + pipe1.flowModel.crossAreas[4]) / 2.0, (pipe1.flowModel.roughnesses[3] + pipe1.flowModel.roughnesses[4]) / 2.0, pipe1.flowModel.m_flow_small / pipe1.flowModel.nParallel, pipe1.flowModel.Res_turbulent_internal[3]) + n1.n7656.n102.n8149.n7835.n8346.n7663.n8412(pipe1.flowModel.m_flow_nominal / pipe1.flowModel.nParallel, n7835.n8346.n8135, n7835.n8346.n8135, n7835.n8346.n8390, n7835.n8346.n8390, pipe1.flowModel.pathLengths_internal[4], n7835.n8346.n8410[4], (pipe1.flowModel.crossAreas[4] + pipe1.flowModel.crossAreas[5]) / 2.0, (pipe1.flowModel.roughnesses[4] + pipe1.flowModel.roughnesses[5]) / 2.0, pipe1.flowModel.m_flow_small / pipe1.flowModel.nParallel, pipe1.flowModel.Res_turbulent_internal[4]) + n1.n7656.n102.n8149.n7835.n8346.n7663.n8412(pipe1.flowModel.m_flow_nominal / pipe1.flowModel.nParallel, n7835.n8346.n8135, n7835.n8346.n8135, n7835.n8346.n8390, n7835.n8346.n8390, pipe1.flowModel.pathLengths_internal[5], n7835.n8346.n8410[5], (pipe1.flowModel.crossAreas[5] + pipe1.flowModel.crossAreas[6]) / 2.0, (pipe1.flowModel.roughnesses[5] + pipe1.flowModel.roughnesses[6]) / 2.0, pipe1.flowModel.m_flow_small / pipe1.flowModel.nParallel, pipe1.flowModel.Res_turbulent_internal[5]) + n1.n7656.n102.n8149.n7835.n8346.n7663.n8412(pipe1.flowModel.m_flow_nominal / pipe1.flowModel.nParallel, n7835.n8346.n8135, n7835.n8346.n8135, n7835.n8346.n8390, n7835.n8346.n8390, pipe1.flowModel.pathLengths_internal[6], n7835.n8346.n8410[6], (pipe1.flowModel.crossAreas[6] + pipe1.flowModel.crossAreas[7]) / 2.0, (pipe1.flowModel.roughnesses[6] + pipe1.flowModel.roughnesses[7]) / 2.0, pipe1.flowModel.m_flow_small / pipe1.flowModel.nParallel, pipe1.flowModel.Res_turbulent_internal[6]);
//   Real pipe1.m_flows[1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.02);
//   Real pipe1.m_flows[2](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.02);
//   Real pipe1.m_flows[3](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.02);
//   Real pipe1.m_flows[4](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.02);
//   Real pipe1.m_flows[5](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.02);
//   Real pipe1.m_flows[6](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.02);
//   Real pipe1.mXi_flows[1,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe1.mXi_flows[2,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe1.mXi_flows[3,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe1.mXi_flows[4,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe1.mXi_flows[5,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe1.mXi_flows[6,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe1.H_flows[1](quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0);
//   Real pipe1.H_flows[2](quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0);
//   Real pipe1.H_flows[3](quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0);
//   Real pipe1.H_flows[4](quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0);
//   Real pipe1.H_flows[5](quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0);
//   Real pipe1.H_flows[6](quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0);
//   Real pipe1.vs[1](quantity = \"Velocity\", unit = \"m/s\");
//   Real pipe1.vs[2](quantity = \"Velocity\", unit = \"m/s\");
//   Real pipe1.vs[3](quantity = \"Velocity\", unit = \"m/s\");
//   Real pipe1.vs[4](quantity = \"Velocity\", unit = \"m/s\");
//   Real pipe1.vs[5](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real n7835.n8348[1](quantity = \"Length\", unit = \"m\");
//   protected Real n7835.n8348[2](quantity = \"Length\", unit = \"m\");
//   protected Real n7835.n8348[3](quantity = \"Length\", unit = \"m\");
//   protected Real n7835.n8348[4](quantity = \"Length\", unit = \"m\");
//   protected Real n7835.n8348[5](quantity = \"Length\", unit = \"m\");
//   protected Real n7835.n8348[6](quantity = \"Length\", unit = \"m\");
//   protected Real n7835.n8373[1](quantity = \"Length\", unit = \"m\");
//   protected Real n7835.n8373[2](quantity = \"Length\", unit = \"m\");
//   protected Real n7835.n8373[3](quantity = \"Length\", unit = \"m\");
//   protected Real n7835.n8373[4](quantity = \"Length\", unit = \"m\");
//   protected Real n7835.n8373[5](quantity = \"Length\", unit = \"m\");
//   protected Real n7835.n8373[6](quantity = \"Length\", unit = \"m\");
//   protected Real n7835.n8370[1](quantity = \"Area\", unit = \"m2\");
//   protected Real n7835.n8370[2](quantity = \"Area\", unit = \"m2\");
//   protected Real n7835.n8370[3](quantity = \"Area\", unit = \"m2\");
//   protected Real n7835.n8370[4](quantity = \"Area\", unit = \"m2\");
//   protected Real n7835.n8370[5](quantity = \"Area\", unit = \"m2\");
//   protected Real n7835.n8370[6](quantity = \"Area\", unit = \"m2\");
//   protected Real n7835.n8370[7](quantity = \"Area\", unit = \"m2\");
//   protected Real n7835.n8369[1](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real n7835.n8369[2](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real n7835.n8369[3](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real n7835.n8369[4](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real n7835.n8369[5](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real n7835.n8369[6](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real n7835.n8369[7](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real n7835.n8371[1](quantity = \"Length\", unit = \"m\");
//   protected Real n7835.n8371[2](quantity = \"Length\", unit = \"m\");
//   protected Real n7835.n8371[3](quantity = \"Length\", unit = \"m\");
//   protected Real n7835.n8371[4](quantity = \"Length\", unit = \"m\");
//   protected Real n7835.n8371[5](quantity = \"Length\", unit = \"m\");
//   protected Real n7835.n8371[6](quantity = \"Length\", unit = \"m\");
//   protected Real n7835.n8371[7](quantity = \"Length\", unit = \"m\");
//   protected Real n7835.n8372[1](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   protected Real n7835.n8372[2](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   protected Real n7835.n8372[3](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   protected Real n7835.n8372[4](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   protected Real n7835.n8372[5](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   protected Real n7835.n8372[6](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   protected Real n7835.n8372[7](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final parameter Boolean pipe1.use_HeatTransfer = false;
//   final parameter Integer pipe1.heatTransfer.n = 5;
//   final Real pipe1.heatTransfer.states[1].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe1.mediums[1].state.p;
//   final Real pipe1.heatTransfer.states[1].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe1.mediums[1].state.T;
//   final Real pipe1.heatTransfer.states[1].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe1.heatTransfer.states[1].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe1.heatTransfer.states[2].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe1.mediums[2].state.p;
//   final Real pipe1.heatTransfer.states[2].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe1.mediums[2].state.T;
//   final Real pipe1.heatTransfer.states[2].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe1.heatTransfer.states[2].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe1.heatTransfer.states[3].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe1.mediums[3].state.p;
//   final Real pipe1.heatTransfer.states[3].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe1.mediums[3].state.T;
//   final Real pipe1.heatTransfer.states[3].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe1.heatTransfer.states[3].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe1.heatTransfer.states[4].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe1.mediums[4].state.p;
//   final Real pipe1.heatTransfer.states[4].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe1.mediums[4].state.T;
//   final Real pipe1.heatTransfer.states[4].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe1.heatTransfer.states[4].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe1.heatTransfer.states[5].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe1.mediums[5].state.p;
//   final Real pipe1.heatTransfer.states[5].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe1.mediums[5].state.T;
//   final Real pipe1.heatTransfer.states[5].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe1.heatTransfer.states[5].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe1.heatTransfer.surfaceAreas[1](quantity = \"Area\", unit = \"m2\");
//   final Real pipe1.heatTransfer.surfaceAreas[2](quantity = \"Area\", unit = \"m2\");
//   final Real pipe1.heatTransfer.surfaceAreas[3](quantity = \"Area\", unit = \"m2\");
//   final Real pipe1.heatTransfer.surfaceAreas[4](quantity = \"Area\", unit = \"m2\");
//   final Real pipe1.heatTransfer.surfaceAreas[5](quantity = \"Area\", unit = \"m2\");
//   Real pipe1.heatTransfer.Q_flows[1](quantity = \"Power\", unit = \"W\");
//   Real pipe1.heatTransfer.Q_flows[2](quantity = \"Power\", unit = \"W\");
//   Real pipe1.heatTransfer.Q_flows[3](quantity = \"Power\", unit = \"W\");
//   Real pipe1.heatTransfer.Q_flows[4](quantity = \"Power\", unit = \"W\");
//   Real pipe1.heatTransfer.Q_flows[5](quantity = \"Power\", unit = \"W\");
//   final parameter Boolean pipe1.heatTransfer.use_k = false;
//   final parameter Real pipe1.heatTransfer.k(quantity = \"CoefficientOfHeatTransfer\", unit = \"W/(m2.K)\") = 0.0;
//   parameter Real pipe1.heatTransfer.T_ambient(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = system.T_ambient;
//   Real pipe1.heatTransfer.heatPorts[1].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe1.heatTransfer.heatPorts[1].Q_flow(quantity = \"Power\", unit = \"W\");
//   Real pipe1.heatTransfer.heatPorts[2].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe1.heatTransfer.heatPorts[2].Q_flow(quantity = \"Power\", unit = \"W\");
//   Real pipe1.heatTransfer.heatPorts[3].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe1.heatTransfer.heatPorts[3].Q_flow(quantity = \"Power\", unit = \"W\");
//   Real pipe1.heatTransfer.heatPorts[4].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe1.heatTransfer.heatPorts[4].Q_flow(quantity = \"Power\", unit = \"W\");
//   Real pipe1.heatTransfer.heatPorts[5].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe1.heatTransfer.heatPorts[5].Q_flow(quantity = \"Power\", unit = \"W\");
//   Real pipe1.heatTransfer.Ts[1](quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe1.heatTransfer.Ts[2](quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe1.heatTransfer.Ts[3](quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe1.heatTransfer.Ts[4](quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe1.heatTransfer.Ts[5](quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   final Real pipe1.heatTransfer.vs[1](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe1.heatTransfer.vs[2](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe1.heatTransfer.vs[3](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe1.heatTransfer.vs[4](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe1.heatTransfer.vs[5](quantity = \"Velocity\", unit = \"m/s\");
//   final parameter Real pipe1.heatTransfer.nParallel = pipe1.nParallel;
//   final Real pipe1.heatTransfer.lengths[1](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.heatTransfer.lengths[2](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.heatTransfer.lengths[3](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.heatTransfer.lengths[4](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.heatTransfer.lengths[5](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.heatTransfer.dimensions[1](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.heatTransfer.dimensions[2](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.heatTransfer.dimensions[3](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.heatTransfer.dimensions[4](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.heatTransfer.dimensions[5](quantity = \"Length\", unit = \"m\");
//   final Real pipe1.heatTransfer.roughnesses[1](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe1.heatTransfer.roughnesses[2](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe1.heatTransfer.roughnesses[3](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe1.heatTransfer.roughnesses[4](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe1.heatTransfer.roughnesses[5](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final parameter Real pipe1.dxs[1] = 0.2;
//   final parameter Real pipe1.dxs[2] = 0.2;
//   final parameter Real pipe1.dxs[3] = 0.2;
//   final parameter Real pipe1.dxs[4] = 0.2;
//   final parameter Real pipe1.dxs[5] = 0.2;
//   final parameter Boolean pipe2.allowFlowReversal = true;
//   Real pipe2.port_a.m_flow(quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0);
//   Real pipe2.port_a.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe2.port_a.h_outflow(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
//   Real pipe2.port_a.Xi_outflow[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real pipe2.port_b.m_flow(quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 9.999999999999999e+59);
//   Real pipe2.port_b.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe2.port_b.h_outflow(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
//   Real pipe2.port_b.Xi_outflow[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected final parameter Boolean n7836.n7805 = true;
//   protected final parameter Boolean n7836.n7806 = true;
//   protected parameter Boolean n7836.n8767 = true;
//   parameter Real pipe2.nParallel(min = 1.0) = 1.0;
//   final parameter Real pipe2.length(quantity = \"Length\", unit = \"m\") = 50.0;
//   parameter Boolean pipe2.isCircular = true;
//   parameter Real pipe2.diameter(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0254;
//   parameter Real pipe2.crossArea(quantity = \"Area\", unit = \"m2\") = 3.141592653589793 * pipe2.diameter * pipe2.diameter / 4.0;
//   parameter Real pipe2.perimeter(quantity = \"Length\", unit = \"m\", min = 0.0) = 3.141592653589793 * pipe2.diameter;
//   parameter Real pipe2.roughness(quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = 2.5e-05;
//   final parameter Real pipe2.V(quantity = \"Volume\", unit = \"m3\") = pipe2.crossArea * 50.0 * pipe2.nParallel;
//   final parameter Real pipe2.height_ab(quantity = \"Length\", unit = \"m\") = 25.0;
//   final parameter Integer pipe2.n = 5;
//   final Real pipe2.fluidVolumes[1](quantity = \"Volume\", unit = \"m3\");
//   final Real pipe2.fluidVolumes[2](quantity = \"Volume\", unit = \"m3\");
//   final Real pipe2.fluidVolumes[3](quantity = \"Volume\", unit = \"m3\");
//   final Real pipe2.fluidVolumes[4](quantity = \"Volume\", unit = \"m3\");
//   final Real pipe2.fluidVolumes[5](quantity = \"Volume\", unit = \"m3\");
//   final parameter enumeration(n8305, n7697, n7751, n117) pipe2.energyDynamics = n1.n7656.n31.n7696.n7751;
//   final parameter enumeration(n8305, n7697, n7751, n117) pipe2.massDynamics = n1.n7656.n31.n7696.n7751;
//   final parameter enumeration(n8305, n7697, n7751, n117) pipe2.substanceDynamics = n1.n7656.n31.n7696.n7751;
//   final parameter enumeration(n8305, n7697, n7751, n117) pipe2.traceDynamics = n1.n7656.n31.n7696.n7751;
//   parameter Real pipe2.p_a_start(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = 130000.0;
//   parameter Real pipe2.p_b_start(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = 120000.0;
//   final parameter Real pipe2.ps_start[1](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe2.p_a_start;
//   final parameter Real pipe2.ps_start[2](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe2.p_a_start + (pipe2.p_b_start - pipe2.p_a_start) / 4.0;
//   final parameter Real pipe2.ps_start[3](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe2.p_a_start + (pipe2.p_b_start - pipe2.p_a_start) * 2.0 / 4.0;
//   final parameter Real pipe2.ps_start[4](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe2.p_a_start + (pipe2.p_b_start - pipe2.p_a_start) * 3.0 / 4.0;
//   final parameter Real pipe2.ps_start[5](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe2.p_a_start + (pipe2.p_b_start - pipe2.p_a_start) * 4.0 / 4.0;
//   final parameter Boolean pipe2.use_T_start = true;
//   parameter Real pipe2.T_start(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = system.T_start;
//   parameter Real pipe2.h_start(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0) = n1.n7656.n102.n8149.n7836.n7670.n7957((pipe2.p_a_start + pipe2.p_b_start) / 2.0, pipe2.T_start, pipe2.X_start);
//   parameter Real pipe2.X_start[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = 0.01;
//   parameter Real pipe2.X_start[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = 0.99;
//   Real pipe2.Us[1](quantity = \"Energy\", unit = \"J\");
//   Real pipe2.Us[2](quantity = \"Energy\", unit = \"J\");
//   Real pipe2.Us[3](quantity = \"Energy\", unit = \"J\");
//   Real pipe2.Us[4](quantity = \"Energy\", unit = \"J\");
//   Real pipe2.Us[5](quantity = \"Energy\", unit = \"J\");
//   Real pipe2.ms[1](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe2.ms[2](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe2.ms[3](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe2.ms[4](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe2.ms[5](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe2.mXis[1,1](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe2.mXis[2,1](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe2.mXis[3,1](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe2.mXis[4,1](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe2.mXis[5,1](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe2.mediums[1].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = pipe2.ps_start[1], nominal = 100000.0, stateSelect = StateSelect.prefer);
//   Real pipe2.mediums[1].Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = pipe2.X_start[1], stateSelect = StateSelect.prefer);
//   Real pipe2.mediums[1].h(quantity = \"SpecificEnergy\", unit = \"J/kg\", start = pipe2.h_start);
//   Real pipe2.mediums[1].d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe2.mediums[1].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = pipe2.T_start, nominal = 300.0, stateSelect = StateSelect.prefer);
//   Real pipe2.mediums[1].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe2.mediums[1].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe2.mediums[1].u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real pipe2.mediums[1].R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real pipe2.mediums[1].MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real pipe2.mediums[1].state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe2.mediums[1].state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe2.mediums[1].state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe2.mediums[1].state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean pipe2.mediums[1].preferredMediumStates = true;
//   final parameter Boolean pipe2.mediums[1].standardOrderComponents = true;
//   Real pipe2.mediums[1].T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = n1.n101.n946.n949(pipe2.mediums[1].T);
//   Real pipe2.mediums[1].p_bar(quantity = \"Pressure\", unit = \"bar\") = n1.n101.n946.n993(pipe2.mediums[1].p);
//   Real pipe2.mediums[1].x_water(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real pipe2.mediums[1].phi;
//   protected Real n7836.n8256[1].n10105(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7836.n8256[1].n10106(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7836.n8256[1].n10107(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7836.n8256[1].n10108(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7836.n8256[1].n10109(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7836.n8256[1].n10110(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe2.mediums[2].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = pipe2.ps_start[2], nominal = 100000.0, stateSelect = StateSelect.prefer);
//   Real pipe2.mediums[2].Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = pipe2.X_start[1], stateSelect = StateSelect.prefer);
//   Real pipe2.mediums[2].h(quantity = \"SpecificEnergy\", unit = \"J/kg\", start = pipe2.h_start);
//   Real pipe2.mediums[2].d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe2.mediums[2].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = pipe2.T_start, nominal = 300.0, stateSelect = StateSelect.prefer);
//   Real pipe2.mediums[2].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe2.mediums[2].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe2.mediums[2].u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real pipe2.mediums[2].R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real pipe2.mediums[2].MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real pipe2.mediums[2].state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe2.mediums[2].state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe2.mediums[2].state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe2.mediums[2].state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean pipe2.mediums[2].preferredMediumStates = true;
//   final parameter Boolean pipe2.mediums[2].standardOrderComponents = true;
//   Real pipe2.mediums[2].T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = n1.n101.n946.n949(pipe2.mediums[2].T);
//   Real pipe2.mediums[2].p_bar(quantity = \"Pressure\", unit = \"bar\") = n1.n101.n946.n993(pipe2.mediums[2].p);
//   Real pipe2.mediums[2].x_water(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real pipe2.mediums[2].phi;
//   protected Real n7836.n8256[2].n10105(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7836.n8256[2].n10106(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7836.n8256[2].n10107(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7836.n8256[2].n10108(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7836.n8256[2].n10109(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7836.n8256[2].n10110(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe2.mediums[3].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = pipe2.ps_start[3], nominal = 100000.0, stateSelect = StateSelect.prefer);
//   Real pipe2.mediums[3].Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = pipe2.X_start[1], stateSelect = StateSelect.prefer);
//   Real pipe2.mediums[3].h(quantity = \"SpecificEnergy\", unit = \"J/kg\", start = pipe2.h_start);
//   Real pipe2.mediums[3].d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe2.mediums[3].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = pipe2.T_start, nominal = 300.0, stateSelect = StateSelect.prefer);
//   Real pipe2.mediums[3].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe2.mediums[3].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe2.mediums[3].u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real pipe2.mediums[3].R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real pipe2.mediums[3].MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real pipe2.mediums[3].state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe2.mediums[3].state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe2.mediums[3].state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe2.mediums[3].state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean pipe2.mediums[3].preferredMediumStates = true;
//   final parameter Boolean pipe2.mediums[3].standardOrderComponents = true;
//   Real pipe2.mediums[3].T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = n1.n101.n946.n949(pipe2.mediums[3].T);
//   Real pipe2.mediums[3].p_bar(quantity = \"Pressure\", unit = \"bar\") = n1.n101.n946.n993(pipe2.mediums[3].p);
//   Real pipe2.mediums[3].x_water(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real pipe2.mediums[3].phi;
//   protected Real n7836.n8256[3].n10105(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7836.n8256[3].n10106(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7836.n8256[3].n10107(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7836.n8256[3].n10108(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7836.n8256[3].n10109(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7836.n8256[3].n10110(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe2.mediums[4].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = pipe2.ps_start[4], nominal = 100000.0, stateSelect = StateSelect.prefer);
//   Real pipe2.mediums[4].Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = pipe2.X_start[1], stateSelect = StateSelect.prefer);
//   Real pipe2.mediums[4].h(quantity = \"SpecificEnergy\", unit = \"J/kg\", start = pipe2.h_start);
//   Real pipe2.mediums[4].d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe2.mediums[4].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = pipe2.T_start, nominal = 300.0, stateSelect = StateSelect.prefer);
//   Real pipe2.mediums[4].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe2.mediums[4].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe2.mediums[4].u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real pipe2.mediums[4].R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real pipe2.mediums[4].MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real pipe2.mediums[4].state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe2.mediums[4].state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe2.mediums[4].state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe2.mediums[4].state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean pipe2.mediums[4].preferredMediumStates = true;
//   final parameter Boolean pipe2.mediums[4].standardOrderComponents = true;
//   Real pipe2.mediums[4].T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = n1.n101.n946.n949(pipe2.mediums[4].T);
//   Real pipe2.mediums[4].p_bar(quantity = \"Pressure\", unit = \"bar\") = n1.n101.n946.n993(pipe2.mediums[4].p);
//   Real pipe2.mediums[4].x_water(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real pipe2.mediums[4].phi;
//   protected Real n7836.n8256[4].n10105(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7836.n8256[4].n10106(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7836.n8256[4].n10107(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7836.n8256[4].n10108(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7836.n8256[4].n10109(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7836.n8256[4].n10110(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe2.mediums[5].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = pipe2.ps_start[5], nominal = 100000.0, stateSelect = StateSelect.prefer);
//   Real pipe2.mediums[5].Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = pipe2.X_start[1], stateSelect = StateSelect.prefer);
//   Real pipe2.mediums[5].h(quantity = \"SpecificEnergy\", unit = \"J/kg\", start = pipe2.h_start);
//   Real pipe2.mediums[5].d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe2.mediums[5].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = pipe2.T_start, nominal = 300.0, stateSelect = StateSelect.prefer);
//   Real pipe2.mediums[5].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe2.mediums[5].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe2.mediums[5].u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real pipe2.mediums[5].R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real pipe2.mediums[5].MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real pipe2.mediums[5].state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe2.mediums[5].state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe2.mediums[5].state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe2.mediums[5].state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean pipe2.mediums[5].preferredMediumStates = true;
//   final parameter Boolean pipe2.mediums[5].standardOrderComponents = true;
//   Real pipe2.mediums[5].T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = n1.n101.n946.n949(pipe2.mediums[5].T);
//   Real pipe2.mediums[5].p_bar(quantity = \"Pressure\", unit = \"bar\") = n1.n101.n946.n993(pipe2.mediums[5].p);
//   Real pipe2.mediums[5].x_water(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real pipe2.mediums[5].phi;
//   protected Real n7836.n8256[5].n10105(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7836.n8256[5].n10106(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7836.n8256[5].n10107(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7836.n8256[5].n10108(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7836.n8256[5].n10109(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7836.n8256[5].n10110(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe2.mb_flows[1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe2.mb_flows[2](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe2.mb_flows[3](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe2.mb_flows[4](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe2.mb_flows[5](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe2.mbXi_flows[1,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe2.mbXi_flows[2,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe2.mbXi_flows[3,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe2.mbXi_flows[4,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe2.mbXi_flows[5,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe2.Hb_flows[1](quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   Real pipe2.Hb_flows[2](quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   Real pipe2.Hb_flows[3](quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   Real pipe2.Hb_flows[4](quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   Real pipe2.Hb_flows[5](quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   Real pipe2.Qb_flows[1](quantity = \"Power\", unit = \"W\");
//   Real pipe2.Qb_flows[2](quantity = \"Power\", unit = \"W\");
//   Real pipe2.Qb_flows[3](quantity = \"Power\", unit = \"W\");
//   Real pipe2.Qb_flows[4](quantity = \"Power\", unit = \"W\");
//   Real pipe2.Qb_flows[5](quantity = \"Power\", unit = \"W\");
//   Real pipe2.Wb_flows[1](quantity = \"Power\", unit = \"W\");
//   Real pipe2.Wb_flows[2](quantity = \"Power\", unit = \"W\");
//   Real pipe2.Wb_flows[3](quantity = \"Power\", unit = \"W\");
//   Real pipe2.Wb_flows[4](quantity = \"Power\", unit = \"W\");
//   Real pipe2.Wb_flows[5](quantity = \"Power\", unit = \"W\");
//   protected final parameter Boolean n7836.n8082 = true;
//   final parameter Real pipe2.lengths[1](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter Real pipe2.lengths[2](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter Real pipe2.lengths[3](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter Real pipe2.lengths[4](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter Real pipe2.lengths[5](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter Real pipe2.crossAreas[1](quantity = \"Area\", unit = \"m2\") = pipe2.crossArea;
//   final parameter Real pipe2.crossAreas[2](quantity = \"Area\", unit = \"m2\") = pipe2.crossArea;
//   final parameter Real pipe2.crossAreas[3](quantity = \"Area\", unit = \"m2\") = pipe2.crossArea;
//   final parameter Real pipe2.crossAreas[4](quantity = \"Area\", unit = \"m2\") = pipe2.crossArea;
//   final parameter Real pipe2.crossAreas[5](quantity = \"Area\", unit = \"m2\") = pipe2.crossArea;
//   final parameter Real pipe2.dimensions[1](quantity = \"Length\", unit = \"m\") = 4.0 * pipe2.crossArea / pipe2.perimeter;
//   final parameter Real pipe2.dimensions[2](quantity = \"Length\", unit = \"m\") = 4.0 * pipe2.crossArea / pipe2.perimeter;
//   final parameter Real pipe2.dimensions[3](quantity = \"Length\", unit = \"m\") = 4.0 * pipe2.crossArea / pipe2.perimeter;
//   final parameter Real pipe2.dimensions[4](quantity = \"Length\", unit = \"m\") = 4.0 * pipe2.crossArea / pipe2.perimeter;
//   final parameter Real pipe2.dimensions[5](quantity = \"Length\", unit = \"m\") = 4.0 * pipe2.crossArea / pipe2.perimeter;
//   final parameter Real pipe2.roughnesses[1](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = pipe2.roughness;
//   final parameter Real pipe2.roughnesses[2](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = pipe2.roughness;
//   final parameter Real pipe2.roughnesses[3](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = pipe2.roughness;
//   final parameter Real pipe2.roughnesses[4](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = pipe2.roughness;
//   final parameter Real pipe2.roughnesses[5](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = pipe2.roughness;
//   final parameter Real pipe2.dheights[1](quantity = \"Length\", unit = \"m\") = 5.0;
//   final parameter Real pipe2.dheights[2](quantity = \"Length\", unit = \"m\") = 5.0;
//   final parameter Real pipe2.dheights[3](quantity = \"Length\", unit = \"m\") = 5.0;
//   final parameter Real pipe2.dheights[4](quantity = \"Length\", unit = \"m\") = 5.0;
//   final parameter Real pipe2.dheights[5](quantity = \"Length\", unit = \"m\") = 5.0;
//   final parameter enumeration(n8305, n7697, n7751, n117) pipe2.momentumDynamics = n1.n7656.n31.n7696.n7751;
//   final parameter Real pipe2.m_flow_start(quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0) = 0.01;
//   final parameter Integer pipe2.nNodes(min = 1) = 5;
//   final parameter enumeration(n8127, n7761, n8187, n8189) pipe2.modelStructure = n1.n7656.n31.n7760.n8127;
//   final parameter Boolean pipe2.useLumpedPressure = false;
//   final parameter Integer pipe2.nFM = 4;
//   final parameter Integer pipe2.nFMDistributed = 4;
//   final parameter Integer pipe2.nFMLumped = 1;
//   final parameter Integer pipe2.iLumped = 3;
//   final parameter Boolean pipe2.useInnerPortProperties = false;
//   Real pipe2.state_a.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe2.state_a.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe2.state_a.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe2.state_a.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe2.state_b.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe2.state_b.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe2.state_b.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe2.state_b.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe2.statesFM[1].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe2.statesFM[1].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe2.statesFM[1].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe2.statesFM[1].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe2.statesFM[2].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe2.statesFM[2].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe2.statesFM[2].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe2.statesFM[2].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe2.statesFM[3].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe2.statesFM[3].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe2.statesFM[3].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe2.statesFM[3].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe2.statesFM[4].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe2.statesFM[4].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe2.statesFM[4].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe2.statesFM[4].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe2.statesFM[5].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe2.statesFM[5].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe2.statesFM[5].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe2.statesFM[5].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean pipe2.flowModel.from_dp = true;
//   final parameter Integer pipe2.flowModel.n = 5;
//   final Real pipe2.flowModel.states[1].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe2.statesFM[1].p;
//   final Real pipe2.flowModel.states[1].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe2.statesFM[1].T;
//   final Real pipe2.flowModel.states[1].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe2.flowModel.states[1].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe2.flowModel.states[2].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe2.statesFM[2].p;
//   final Real pipe2.flowModel.states[2].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe2.statesFM[2].T;
//   final Real pipe2.flowModel.states[2].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe2.flowModel.states[2].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe2.flowModel.states[3].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe2.statesFM[3].p;
//   final Real pipe2.flowModel.states[3].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe2.statesFM[3].T;
//   final Real pipe2.flowModel.states[3].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe2.flowModel.states[3].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe2.flowModel.states[4].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe2.statesFM[4].p;
//   final Real pipe2.flowModel.states[4].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe2.statesFM[4].T;
//   final Real pipe2.flowModel.states[4].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe2.flowModel.states[4].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe2.flowModel.states[5].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe2.statesFM[5].p;
//   final Real pipe2.flowModel.states[5].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe2.statesFM[5].T;
//   final Real pipe2.flowModel.states[5].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe2.flowModel.states[5].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe2.flowModel.vs[1](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe2.flowModel.vs[2](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe2.flowModel.vs[3](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe2.flowModel.vs[4](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe2.flowModel.vs[5](quantity = \"Velocity\", unit = \"m/s\");
//   final parameter Real pipe2.flowModel.nParallel = pipe2.nParallel;
//   final Real pipe2.flowModel.crossAreas[1](quantity = \"Area\", unit = \"m2\");
//   final Real pipe2.flowModel.crossAreas[2](quantity = \"Area\", unit = \"m2\");
//   final Real pipe2.flowModel.crossAreas[3](quantity = \"Area\", unit = \"m2\");
//   final Real pipe2.flowModel.crossAreas[4](quantity = \"Area\", unit = \"m2\");
//   final Real pipe2.flowModel.crossAreas[5](quantity = \"Area\", unit = \"m2\");
//   final Real pipe2.flowModel.dimensions[1](quantity = \"Length\", unit = \"m\");
//   final Real pipe2.flowModel.dimensions[2](quantity = \"Length\", unit = \"m\");
//   final Real pipe2.flowModel.dimensions[3](quantity = \"Length\", unit = \"m\");
//   final Real pipe2.flowModel.dimensions[4](quantity = \"Length\", unit = \"m\");
//   final Real pipe2.flowModel.dimensions[5](quantity = \"Length\", unit = \"m\");
//   final Real pipe2.flowModel.roughnesses[1](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe2.flowModel.roughnesses[2](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe2.flowModel.roughnesses[3](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe2.flowModel.roughnesses[4](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe2.flowModel.roughnesses[5](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe2.flowModel.dheights[1](quantity = \"Length\", unit = \"m\");
//   final Real pipe2.flowModel.dheights[2](quantity = \"Length\", unit = \"m\");
//   final Real pipe2.flowModel.dheights[3](quantity = \"Length\", unit = \"m\");
//   final Real pipe2.flowModel.dheights[4](quantity = \"Length\", unit = \"m\");
//   final parameter Real pipe2.flowModel.g(quantity = \"Acceleration\", unit = \"m/s2\") = system.g;
//   final parameter Boolean pipe2.flowModel.allowFlowReversal = true;
//   final parameter enumeration(n8305, n7697, n7751, n117) pipe2.flowModel.momentumDynamics = n1.n7656.n31.n7696.n7751;
//   final parameter Real pipe2.flowModel.m_flow_start(quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0) = 0.01;
//   final parameter Real pipe2.flowModel.p_a_start(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe2.p_a_start;
//   final parameter Real pipe2.flowModel.p_b_start(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe2.p_b_start;
//   final parameter Integer pipe2.flowModel.m = 4;
//   final Real pipe2.flowModel.pathLengths[1](quantity = \"Length\", unit = \"m\");
//   final Real pipe2.flowModel.pathLengths[2](quantity = \"Length\", unit = \"m\");
//   final Real pipe2.flowModel.pathLengths[3](quantity = \"Length\", unit = \"m\");
//   final Real pipe2.flowModel.pathLengths[4](quantity = \"Length\", unit = \"m\");
//   Real pipe2.flowModel.m_flows[1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.01, stateSelect = StateSelect.prefer);
//   Real pipe2.flowModel.m_flows[2](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.01, stateSelect = StateSelect.prefer);
//   Real pipe2.flowModel.m_flows[3](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.01, stateSelect = StateSelect.prefer);
//   Real pipe2.flowModel.m_flows[4](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.01, stateSelect = StateSelect.prefer);
//   Real pipe2.flowModel.Is[1](quantity = \"Momentum\", unit = \"kg.m/s\");
//   Real pipe2.flowModel.Is[2](quantity = \"Momentum\", unit = \"kg.m/s\");
//   Real pipe2.flowModel.Is[3](quantity = \"Momentum\", unit = \"kg.m/s\");
//   Real pipe2.flowModel.Is[4](quantity = \"Momentum\", unit = \"kg.m/s\");
//   Real pipe2.flowModel.Ib_flows[1](quantity = \"Force\", unit = \"N\");
//   Real pipe2.flowModel.Ib_flows[2](quantity = \"Force\", unit = \"N\");
//   Real pipe2.flowModel.Ib_flows[3](quantity = \"Force\", unit = \"N\");
//   Real pipe2.flowModel.Ib_flows[4](quantity = \"Force\", unit = \"N\");
//   Real pipe2.flowModel.Fs_p[1](quantity = \"Force\", unit = \"N\");
//   Real pipe2.flowModel.Fs_p[2](quantity = \"Force\", unit = \"N\");
//   Real pipe2.flowModel.Fs_p[3](quantity = \"Force\", unit = \"N\");
//   Real pipe2.flowModel.Fs_p[4](quantity = \"Force\", unit = \"N\");
//   Real pipe2.flowModel.Fs_fg[1](quantity = \"Force\", unit = \"N\");
//   Real pipe2.flowModel.Fs_fg[2](quantity = \"Force\", unit = \"N\");
//   Real pipe2.flowModel.Fs_fg[3](quantity = \"Force\", unit = \"N\");
//   Real pipe2.flowModel.Fs_fg[4](quantity = \"Force\", unit = \"N\");
//   final parameter Boolean pipe2.flowModel.useUpstreamScheme = true;
//   final parameter Boolean pipe2.flowModel.use_Ib_flows = true;
//   Real pipe2.flowModel.rhos[1](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe2.flowModel.rhos[2](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe2.flowModel.rhos[3](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe2.flowModel.rhos[4](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe2.flowModel.rhos[5](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe2.flowModel.rhos_act[1](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe2.flowModel.rhos_act[2](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe2.flowModel.rhos_act[3](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe2.flowModel.rhos_act[4](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe2.flowModel.mus[1](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe2.flowModel.mus[2](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe2.flowModel.mus[3](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe2.flowModel.mus[4](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe2.flowModel.mus[5](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe2.flowModel.mus_act[1](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe2.flowModel.mus_act[2](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe2.flowModel.mus_act[3](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe2.flowModel.mus_act[4](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe2.flowModel.dps_fg[1](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", start = (pipe2.flowModel.p_a_start - pipe2.flowModel.p_b_start) / 4.0);
//   Real pipe2.flowModel.dps_fg[2](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", start = (pipe2.flowModel.p_a_start - pipe2.flowModel.p_b_start) / 4.0);
//   Real pipe2.flowModel.dps_fg[3](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", start = (pipe2.flowModel.p_a_start - pipe2.flowModel.p_b_start) / 4.0);
//   Real pipe2.flowModel.dps_fg[4](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", start = (pipe2.flowModel.p_a_start - pipe2.flowModel.p_b_start) / 4.0);
//   final parameter Real pipe2.flowModel.Re_turbulent(quantity = \"ReynoldsNumber\", unit = \"1\") = 4000.0;
//   final parameter Boolean pipe2.flowModel.show_Res = false;
//   protected final parameter Boolean n7836.n8346.n8385 = false;
//   protected parameter Real n7836.n8346.n8135(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 1.196838693581092;
//   protected final parameter Boolean n7836.n8346.n8389 = false;
//   protected parameter Real n7836.n8346.n8390(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0) = 1.823286547365138e-05;
//   Real pipe2.flowModel.pathLengths_internal[1](quantity = \"Length\", unit = \"m\");
//   Real pipe2.flowModel.pathLengths_internal[2](quantity = \"Length\", unit = \"m\");
//   Real pipe2.flowModel.pathLengths_internal[3](quantity = \"Length\", unit = \"m\");
//   Real pipe2.flowModel.pathLengths_internal[4](quantity = \"Length\", unit = \"m\");
//   Real pipe2.flowModel.Res_turbulent_internal[1](quantity = \"ReynoldsNumber\", unit = \"1\");
//   Real pipe2.flowModel.Res_turbulent_internal[2](quantity = \"ReynoldsNumber\", unit = \"1\");
//   Real pipe2.flowModel.Res_turbulent_internal[3](quantity = \"ReynoldsNumber\", unit = \"1\");
//   Real pipe2.flowModel.Res_turbulent_internal[4](quantity = \"ReynoldsNumber\", unit = \"1\");
//   parameter Real pipe2.flowModel.dp_nominal(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = 1.0, fixed = false, nominal = 100000.0);
//   parameter Real pipe2.flowModel.m_flow_nominal(quantity = \"MassFlowRate\", unit = \"kg/s\") = 100.0 * pipe2.flowModel.m_flow_small;
//   parameter Real pipe2.flowModel.m_flow_small(quantity = \"MassFlowRate\", unit = \"kg/s\") = system.m_flow_small;
//   protected parameter Real n7836.n8346.n8308(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = 1.0, fixed = false, nominal = 100000.0);
//   protected final parameter Boolean n7836.n8346.n8407 = false;
//   protected final parameter Boolean n7836.n8346.n8409 = false;
//   protected Real n7836.n8346.n8410[1](quantity = \"Length\", unit = \"m\");
//   protected Real n7836.n8346.n8410[2](quantity = \"Length\", unit = \"m\");
//   protected Real n7836.n8346.n8410[3](quantity = \"Length\", unit = \"m\");
//   protected Real n7836.n8346.n8410[4](quantity = \"Length\", unit = \"m\");
//   protected Real n7836.n8346.n8411(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = n1.n7656.n102.n8149.n7836.n8346.n7663.n8412(pipe2.flowModel.m_flow_nominal / pipe2.flowModel.nParallel, n7836.n8346.n8135, n7836.n8346.n8135, n7836.n8346.n8390, n7836.n8346.n8390, pipe2.flowModel.pathLengths_internal[1], n7836.n8346.n8410[1], (pipe2.flowModel.crossAreas[1] + pipe2.flowModel.crossAreas[2]) / 2.0, (pipe2.flowModel.roughnesses[1] + pipe2.flowModel.roughnesses[2]) / 2.0, pipe2.flowModel.m_flow_small / pipe2.flowModel.nParallel, pipe2.flowModel.Res_turbulent_internal[1]) + n1.n7656.n102.n8149.n7836.n8346.n7663.n8412(pipe2.flowModel.m_flow_nominal / pipe2.flowModel.nParallel, n7836.n8346.n8135, n7836.n8346.n8135, n7836.n8346.n8390, n7836.n8346.n8390, pipe2.flowModel.pathLengths_internal[2], n7836.n8346.n8410[2], (pipe2.flowModel.crossAreas[2] + pipe2.flowModel.crossAreas[3]) / 2.0, (pipe2.flowModel.roughnesses[2] + pipe2.flowModel.roughnesses[3]) / 2.0, pipe2.flowModel.m_flow_small / pipe2.flowModel.nParallel, pipe2.flowModel.Res_turbulent_internal[2]) + n1.n7656.n102.n8149.n7836.n8346.n7663.n8412(pipe2.flowModel.m_flow_nominal / pipe2.flowModel.nParallel, n7836.n8346.n8135, n7836.n8346.n8135, n7836.n8346.n8390, n7836.n8346.n8390, pipe2.flowModel.pathLengths_internal[3], n7836.n8346.n8410[3], (pipe2.flowModel.crossAreas[3] + pipe2.flowModel.crossAreas[4]) / 2.0, (pipe2.flowModel.roughnesses[3] + pipe2.flowModel.roughnesses[4]) / 2.0, pipe2.flowModel.m_flow_small / pipe2.flowModel.nParallel, pipe2.flowModel.Res_turbulent_internal[3]) + n1.n7656.n102.n8149.n7836.n8346.n7663.n8412(pipe2.flowModel.m_flow_nominal / pipe2.flowModel.nParallel, n7836.n8346.n8135, n7836.n8346.n8135, n7836.n8346.n8390, n7836.n8346.n8390, pipe2.flowModel.pathLengths_internal[4], n7836.n8346.n8410[4], (pipe2.flowModel.crossAreas[4] + pipe2.flowModel.crossAreas[5]) / 2.0, (pipe2.flowModel.roughnesses[4] + pipe2.flowModel.roughnesses[5]) / 2.0, pipe2.flowModel.m_flow_small / pipe2.flowModel.nParallel, pipe2.flowModel.Res_turbulent_internal[4]);
//   Real pipe2.m_flows[1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.01);
//   Real pipe2.m_flows[2](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.01);
//   Real pipe2.m_flows[3](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.01);
//   Real pipe2.m_flows[4](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.01);
//   Real pipe2.m_flows[5](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.01);
//   Real pipe2.m_flows[6](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.01);
//   Real pipe2.mXi_flows[1,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe2.mXi_flows[2,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe2.mXi_flows[3,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe2.mXi_flows[4,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe2.mXi_flows[5,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe2.mXi_flows[6,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe2.H_flows[1](quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0);
//   Real pipe2.H_flows[2](quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0);
//   Real pipe2.H_flows[3](quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0);
//   Real pipe2.H_flows[4](quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0);
//   Real pipe2.H_flows[5](quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0);
//   Real pipe2.H_flows[6](quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0);
//   Real pipe2.vs[1](quantity = \"Velocity\", unit = \"m/s\");
//   Real pipe2.vs[2](quantity = \"Velocity\", unit = \"m/s\");
//   Real pipe2.vs[3](quantity = \"Velocity\", unit = \"m/s\");
//   Real pipe2.vs[4](quantity = \"Velocity\", unit = \"m/s\");
//   Real pipe2.vs[5](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real n7836.n8348[1](quantity = \"Length\", unit = \"m\");
//   protected Real n7836.n8348[2](quantity = \"Length\", unit = \"m\");
//   protected Real n7836.n8348[3](quantity = \"Length\", unit = \"m\");
//   protected Real n7836.n8348[4](quantity = \"Length\", unit = \"m\");
//   protected Real n7836.n8373[1](quantity = \"Length\", unit = \"m\");
//   protected Real n7836.n8373[2](quantity = \"Length\", unit = \"m\");
//   protected Real n7836.n8373[3](quantity = \"Length\", unit = \"m\");
//   protected Real n7836.n8373[4](quantity = \"Length\", unit = \"m\");
//   protected Real n7836.n8370[1](quantity = \"Area\", unit = \"m2\");
//   protected Real n7836.n8370[2](quantity = \"Area\", unit = \"m2\");
//   protected Real n7836.n8370[3](quantity = \"Area\", unit = \"m2\");
//   protected Real n7836.n8370[4](quantity = \"Area\", unit = \"m2\");
//   protected Real n7836.n8370[5](quantity = \"Area\", unit = \"m2\");
//   protected Real n7836.n8369[1](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real n7836.n8369[2](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real n7836.n8369[3](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real n7836.n8369[4](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real n7836.n8369[5](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real n7836.n8371[1](quantity = \"Length\", unit = \"m\");
//   protected Real n7836.n8371[2](quantity = \"Length\", unit = \"m\");
//   protected Real n7836.n8371[3](quantity = \"Length\", unit = \"m\");
//   protected Real n7836.n8371[4](quantity = \"Length\", unit = \"m\");
//   protected Real n7836.n8371[5](quantity = \"Length\", unit = \"m\");
//   protected Real n7836.n8372[1](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   protected Real n7836.n8372[2](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   protected Real n7836.n8372[3](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   protected Real n7836.n8372[4](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   protected Real n7836.n8372[5](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final parameter Boolean pipe2.use_HeatTransfer = true;
//   Real pipe2.heatPorts[1].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe2.heatPorts[1].Q_flow(quantity = \"Power\", unit = \"W\");
//   Real pipe2.heatPorts[2].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe2.heatPorts[2].Q_flow(quantity = \"Power\", unit = \"W\");
//   Real pipe2.heatPorts[3].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe2.heatPorts[3].Q_flow(quantity = \"Power\", unit = \"W\");
//   Real pipe2.heatPorts[4].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe2.heatPorts[4].Q_flow(quantity = \"Power\", unit = \"W\");
//   Real pipe2.heatPorts[5].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe2.heatPorts[5].Q_flow(quantity = \"Power\", unit = \"W\");
//   final parameter Integer pipe2.heatTransfer.n = 5;
//   final Real pipe2.heatTransfer.states[1].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe2.mediums[1].state.p;
//   final Real pipe2.heatTransfer.states[1].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe2.mediums[1].state.T;
//   final Real pipe2.heatTransfer.states[1].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe2.heatTransfer.states[1].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe2.heatTransfer.states[2].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe2.mediums[2].state.p;
//   final Real pipe2.heatTransfer.states[2].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe2.mediums[2].state.T;
//   final Real pipe2.heatTransfer.states[2].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe2.heatTransfer.states[2].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe2.heatTransfer.states[3].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe2.mediums[3].state.p;
//   final Real pipe2.heatTransfer.states[3].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe2.mediums[3].state.T;
//   final Real pipe2.heatTransfer.states[3].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe2.heatTransfer.states[3].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe2.heatTransfer.states[4].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe2.mediums[4].state.p;
//   final Real pipe2.heatTransfer.states[4].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe2.mediums[4].state.T;
//   final Real pipe2.heatTransfer.states[4].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe2.heatTransfer.states[4].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe2.heatTransfer.states[5].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe2.mediums[5].state.p;
//   final Real pipe2.heatTransfer.states[5].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe2.mediums[5].state.T;
//   final Real pipe2.heatTransfer.states[5].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe2.heatTransfer.states[5].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe2.heatTransfer.surfaceAreas[1](quantity = \"Area\", unit = \"m2\");
//   final Real pipe2.heatTransfer.surfaceAreas[2](quantity = \"Area\", unit = \"m2\");
//   final Real pipe2.heatTransfer.surfaceAreas[3](quantity = \"Area\", unit = \"m2\");
//   final Real pipe2.heatTransfer.surfaceAreas[4](quantity = \"Area\", unit = \"m2\");
//   final Real pipe2.heatTransfer.surfaceAreas[5](quantity = \"Area\", unit = \"m2\");
//   Real pipe2.heatTransfer.Q_flows[1](quantity = \"Power\", unit = \"W\");
//   Real pipe2.heatTransfer.Q_flows[2](quantity = \"Power\", unit = \"W\");
//   Real pipe2.heatTransfer.Q_flows[3](quantity = \"Power\", unit = \"W\");
//   Real pipe2.heatTransfer.Q_flows[4](quantity = \"Power\", unit = \"W\");
//   Real pipe2.heatTransfer.Q_flows[5](quantity = \"Power\", unit = \"W\");
//   final parameter Boolean pipe2.heatTransfer.use_k = true;
//   final parameter Real pipe2.heatTransfer.k(quantity = \"CoefficientOfHeatTransfer\", unit = \"W/(m2.K)\") = 0.0;
//   parameter Real pipe2.heatTransfer.T_ambient(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = system.T_ambient;
//   Real pipe2.heatTransfer.heatPorts[1].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe2.heatTransfer.heatPorts[1].Q_flow(quantity = \"Power\", unit = \"W\");
//   Real pipe2.heatTransfer.heatPorts[2].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe2.heatTransfer.heatPorts[2].Q_flow(quantity = \"Power\", unit = \"W\");
//   Real pipe2.heatTransfer.heatPorts[3].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe2.heatTransfer.heatPorts[3].Q_flow(quantity = \"Power\", unit = \"W\");
//   Real pipe2.heatTransfer.heatPorts[4].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe2.heatTransfer.heatPorts[4].Q_flow(quantity = \"Power\", unit = \"W\");
//   Real pipe2.heatTransfer.heatPorts[5].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe2.heatTransfer.heatPorts[5].Q_flow(quantity = \"Power\", unit = \"W\");
//   Real pipe2.heatTransfer.Ts[1](quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe2.heatTransfer.Ts[2](quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe2.heatTransfer.Ts[3](quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe2.heatTransfer.Ts[4](quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe2.heatTransfer.Ts[5](quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   final Real pipe2.heatTransfer.vs[1](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe2.heatTransfer.vs[2](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe2.heatTransfer.vs[3](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe2.heatTransfer.vs[4](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe2.heatTransfer.vs[5](quantity = \"Velocity\", unit = \"m/s\");
//   final parameter Real pipe2.heatTransfer.nParallel = pipe2.nParallel;
//   final Real pipe2.heatTransfer.lengths[1](quantity = \"Length\", unit = \"m\");
//   final Real pipe2.heatTransfer.lengths[2](quantity = \"Length\", unit = \"m\");
//   final Real pipe2.heatTransfer.lengths[3](quantity = \"Length\", unit = \"m\");
//   final Real pipe2.heatTransfer.lengths[4](quantity = \"Length\", unit = \"m\");
//   final Real pipe2.heatTransfer.lengths[5](quantity = \"Length\", unit = \"m\");
//   final Real pipe2.heatTransfer.dimensions[1](quantity = \"Length\", unit = \"m\");
//   final Real pipe2.heatTransfer.dimensions[2](quantity = \"Length\", unit = \"m\");
//   final Real pipe2.heatTransfer.dimensions[3](quantity = \"Length\", unit = \"m\");
//   final Real pipe2.heatTransfer.dimensions[4](quantity = \"Length\", unit = \"m\");
//   final Real pipe2.heatTransfer.dimensions[5](quantity = \"Length\", unit = \"m\");
//   final Real pipe2.heatTransfer.roughnesses[1](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe2.heatTransfer.roughnesses[2](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe2.heatTransfer.roughnesses[3](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe2.heatTransfer.roughnesses[4](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe2.heatTransfer.roughnesses[5](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   parameter Real pipe2.heatTransfer.alpha0(quantity = \"CoefficientOfHeatTransfer\", unit = \"W/(m2.K)\") = 100.0;
//   Real pipe2.heatTransfer.alphas[1](quantity = \"CoefficientOfHeatTransfer\", unit = \"W/(m2.K)\", start = pipe2.heatTransfer.alpha0);
//   Real pipe2.heatTransfer.alphas[2](quantity = \"CoefficientOfHeatTransfer\", unit = \"W/(m2.K)\", start = pipe2.heatTransfer.alpha0);
//   Real pipe2.heatTransfer.alphas[3](quantity = \"CoefficientOfHeatTransfer\", unit = \"W/(m2.K)\", start = pipe2.heatTransfer.alpha0);
//   Real pipe2.heatTransfer.alphas[4](quantity = \"CoefficientOfHeatTransfer\", unit = \"W/(m2.K)\", start = pipe2.heatTransfer.alpha0);
//   Real pipe2.heatTransfer.alphas[5](quantity = \"CoefficientOfHeatTransfer\", unit = \"W/(m2.K)\", start = pipe2.heatTransfer.alpha0);
//   Real pipe2.heatTransfer.Res[1];
//   Real pipe2.heatTransfer.Res[2];
//   Real pipe2.heatTransfer.Res[3];
//   Real pipe2.heatTransfer.Res[4];
//   Real pipe2.heatTransfer.Res[5];
//   Real pipe2.heatTransfer.Prs[1];
//   Real pipe2.heatTransfer.Prs[2];
//   Real pipe2.heatTransfer.Prs[3];
//   Real pipe2.heatTransfer.Prs[4];
//   Real pipe2.heatTransfer.Prs[5];
//   Real pipe2.heatTransfer.Nus[1];
//   Real pipe2.heatTransfer.Nus[2];
//   Real pipe2.heatTransfer.Nus[3];
//   Real pipe2.heatTransfer.Nus[4];
//   Real pipe2.heatTransfer.Nus[5];
//   Real pipe2.heatTransfer.ds[1](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe2.heatTransfer.ds[2](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe2.heatTransfer.ds[3](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe2.heatTransfer.ds[4](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe2.heatTransfer.ds[5](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe2.heatTransfer.mus[1](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe2.heatTransfer.mus[2](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe2.heatTransfer.mus[3](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe2.heatTransfer.mus[4](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe2.heatTransfer.mus[5](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe2.heatTransfer.lambdas[1](quantity = \"ThermalConductivity\", unit = \"W/(m.K)\", min = 0.0, max = 500.0, start = 1.0, nominal = 1.0);
//   Real pipe2.heatTransfer.lambdas[2](quantity = \"ThermalConductivity\", unit = \"W/(m.K)\", min = 0.0, max = 500.0, start = 1.0, nominal = 1.0);
//   Real pipe2.heatTransfer.lambdas[3](quantity = \"ThermalConductivity\", unit = \"W/(m.K)\", min = 0.0, max = 500.0, start = 1.0, nominal = 1.0);
//   Real pipe2.heatTransfer.lambdas[4](quantity = \"ThermalConductivity\", unit = \"W/(m.K)\", min = 0.0, max = 500.0, start = 1.0, nominal = 1.0);
//   Real pipe2.heatTransfer.lambdas[5](quantity = \"ThermalConductivity\", unit = \"W/(m.K)\", min = 0.0, max = 500.0, start = 1.0, nominal = 1.0);
//   Real pipe2.heatTransfer.diameters[1](quantity = \"Length\", unit = \"m\");
//   Real pipe2.heatTransfer.diameters[2](quantity = \"Length\", unit = \"m\");
//   Real pipe2.heatTransfer.diameters[3](quantity = \"Length\", unit = \"m\");
//   Real pipe2.heatTransfer.diameters[4](quantity = \"Length\", unit = \"m\");
//   Real pipe2.heatTransfer.diameters[5](quantity = \"Length\", unit = \"m\");
//   protected Real n7836.n7988.n8431[1];
//   protected Real n7836.n7988.n8431[2];
//   protected Real n7836.n7988.n8431[3];
//   protected Real n7836.n7988.n8431[4];
//   protected Real n7836.n7988.n8431[5];
//   protected Real n7836.n7988.n8432[1];
//   protected Real n7836.n7988.n8432[2];
//   protected Real n7836.n7988.n8432[3];
//   protected Real n7836.n7988.n8432[4];
//   protected Real n7836.n7988.n8432[5];
//   protected Real n7836.n7988.n8433;
//   protected Real n7836.n7988.n8434[1];
//   protected Real n7836.n7988.n8434[2];
//   protected Real n7836.n7988.n8434[3];
//   protected Real n7836.n7988.n8434[4];
//   protected Real n7836.n7988.n8434[5];
//   protected Real n7836.n7988.n8435[1];
//   protected Real n7836.n7988.n8435[2];
//   protected Real n7836.n7988.n8435[3];
//   protected Real n7836.n7988.n8435[4];
//   protected Real n7836.n7988.n8435[5];
//   final parameter Real pipe2.dxs[1] = 0.2;
//   final parameter Real pipe2.dxs[2] = 0.2;
//   final parameter Real pipe2.dxs[3] = 0.2;
//   final parameter Real pipe2.dxs[4] = 0.2;
//   final parameter Real pipe2.dxs[5] = 0.2;
//   final parameter Boolean pipe3.allowFlowReversal = true;
//   Real pipe3.port_a.m_flow(quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0);
//   Real pipe3.port_a.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe3.port_a.h_outflow(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
//   Real pipe3.port_a.Xi_outflow[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real pipe3.port_b.m_flow(quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 9.999999999999999e+59);
//   Real pipe3.port_b.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe3.port_b.h_outflow(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
//   Real pipe3.port_b.Xi_outflow[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected final parameter Boolean n7837.n7805 = false;
//   protected final parameter Boolean n7837.n7806 = false;
//   protected parameter Boolean n7837.n8767 = true;
//   parameter Real pipe3.nParallel(min = 1.0) = 1.0;
//   final parameter Real pipe3.length(quantity = \"Length\", unit = \"m\") = 25.0;
//   parameter Boolean pipe3.isCircular = true;
//   parameter Real pipe3.diameter(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0254;
//   parameter Real pipe3.crossArea(quantity = \"Area\", unit = \"m2\") = 3.141592653589793 * pipe3.diameter * pipe3.diameter / 4.0;
//   parameter Real pipe3.perimeter(quantity = \"Length\", unit = \"m\", min = 0.0) = 3.141592653589793 * pipe3.diameter;
//   parameter Real pipe3.roughness(quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = 2.5e-05;
//   final parameter Real pipe3.V(quantity = \"Volume\", unit = \"m3\") = pipe3.crossArea * 25.0 * pipe3.nParallel;
//   final parameter Real pipe3.height_ab(quantity = \"Length\", unit = \"m\") = 25.0;
//   final parameter Integer pipe3.n = 5;
//   final Real pipe3.fluidVolumes[1](quantity = \"Volume\", unit = \"m3\");
//   final Real pipe3.fluidVolumes[2](quantity = \"Volume\", unit = \"m3\");
//   final Real pipe3.fluidVolumes[3](quantity = \"Volume\", unit = \"m3\");
//   final Real pipe3.fluidVolumes[4](quantity = \"Volume\", unit = \"m3\");
//   final Real pipe3.fluidVolumes[5](quantity = \"Volume\", unit = \"m3\");
//   final parameter enumeration(n8305, n7697, n7751, n117) pipe3.energyDynamics = n1.n7656.n31.n7696.n7751;
//   final parameter enumeration(n8305, n7697, n7751, n117) pipe3.massDynamics = n1.n7656.n31.n7696.n7751;
//   final parameter enumeration(n8305, n7697, n7751, n117) pipe3.substanceDynamics = n1.n7656.n31.n7696.n7751;
//   final parameter enumeration(n8305, n7697, n7751, n117) pipe3.traceDynamics = n1.n7656.n31.n7696.n7751;
//   parameter Real pipe3.p_a_start(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = 130000.0;
//   parameter Real pipe3.p_b_start(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = 120000.0;
//   final parameter Real pipe3.ps_start[1](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe3.p_a_start;
//   final parameter Real pipe3.ps_start[2](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe3.p_a_start + (pipe3.p_b_start - pipe3.p_a_start) / 4.0;
//   final parameter Real pipe3.ps_start[3](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe3.p_a_start + (pipe3.p_b_start - pipe3.p_a_start) * 2.0 / 4.0;
//   final parameter Real pipe3.ps_start[4](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe3.p_a_start + (pipe3.p_b_start - pipe3.p_a_start) * 3.0 / 4.0;
//   final parameter Real pipe3.ps_start[5](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe3.p_a_start + (pipe3.p_b_start - pipe3.p_a_start) * 4.0 / 4.0;
//   final parameter Boolean pipe3.use_T_start = true;
//   parameter Real pipe3.T_start(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = system.T_start;
//   parameter Real pipe3.h_start(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0) = n1.n7656.n102.n8149.n7837.n7670.n7957((pipe3.p_a_start + pipe3.p_b_start) / 2.0, pipe3.T_start, pipe3.X_start);
//   parameter Real pipe3.X_start[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = 0.01;
//   parameter Real pipe3.X_start[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = 0.99;
//   Real pipe3.Us[1](quantity = \"Energy\", unit = \"J\");
//   Real pipe3.Us[2](quantity = \"Energy\", unit = \"J\");
//   Real pipe3.Us[3](quantity = \"Energy\", unit = \"J\");
//   Real pipe3.Us[4](quantity = \"Energy\", unit = \"J\");
//   Real pipe3.Us[5](quantity = \"Energy\", unit = \"J\");
//   Real pipe3.ms[1](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe3.ms[2](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe3.ms[3](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe3.ms[4](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe3.ms[5](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe3.mXis[1,1](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe3.mXis[2,1](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe3.mXis[3,1](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe3.mXis[4,1](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe3.mXis[5,1](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe3.mediums[1].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = pipe3.ps_start[1], nominal = 100000.0, stateSelect = StateSelect.prefer);
//   Real pipe3.mediums[1].Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = pipe3.X_start[1], stateSelect = StateSelect.prefer);
//   Real pipe3.mediums[1].h(quantity = \"SpecificEnergy\", unit = \"J/kg\", start = pipe3.h_start);
//   Real pipe3.mediums[1].d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe3.mediums[1].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = pipe3.T_start, nominal = 300.0, stateSelect = StateSelect.prefer);
//   Real pipe3.mediums[1].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe3.mediums[1].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe3.mediums[1].u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real pipe3.mediums[1].R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real pipe3.mediums[1].MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real pipe3.mediums[1].state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe3.mediums[1].state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe3.mediums[1].state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe3.mediums[1].state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean pipe3.mediums[1].preferredMediumStates = true;
//   final parameter Boolean pipe3.mediums[1].standardOrderComponents = true;
//   Real pipe3.mediums[1].T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = n1.n101.n946.n949(pipe3.mediums[1].T);
//   Real pipe3.mediums[1].p_bar(quantity = \"Pressure\", unit = \"bar\") = n1.n101.n946.n993(pipe3.mediums[1].p);
//   Real pipe3.mediums[1].x_water(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real pipe3.mediums[1].phi;
//   protected Real n7837.n8256[1].n10105(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7837.n8256[1].n10106(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7837.n8256[1].n10107(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7837.n8256[1].n10108(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7837.n8256[1].n10109(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7837.n8256[1].n10110(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe3.mediums[2].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = pipe3.ps_start[2], nominal = 100000.0, stateSelect = StateSelect.prefer);
//   Real pipe3.mediums[2].Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = pipe3.X_start[1], stateSelect = StateSelect.prefer);
//   Real pipe3.mediums[2].h(quantity = \"SpecificEnergy\", unit = \"J/kg\", start = pipe3.h_start);
//   Real pipe3.mediums[2].d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe3.mediums[2].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = pipe3.T_start, nominal = 300.0, stateSelect = StateSelect.prefer);
//   Real pipe3.mediums[2].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe3.mediums[2].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe3.mediums[2].u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real pipe3.mediums[2].R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real pipe3.mediums[2].MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real pipe3.mediums[2].state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe3.mediums[2].state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe3.mediums[2].state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe3.mediums[2].state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean pipe3.mediums[2].preferredMediumStates = true;
//   final parameter Boolean pipe3.mediums[2].standardOrderComponents = true;
//   Real pipe3.mediums[2].T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = n1.n101.n946.n949(pipe3.mediums[2].T);
//   Real pipe3.mediums[2].p_bar(quantity = \"Pressure\", unit = \"bar\") = n1.n101.n946.n993(pipe3.mediums[2].p);
//   Real pipe3.mediums[2].x_water(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real pipe3.mediums[2].phi;
//   protected Real n7837.n8256[2].n10105(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7837.n8256[2].n10106(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7837.n8256[2].n10107(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7837.n8256[2].n10108(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7837.n8256[2].n10109(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7837.n8256[2].n10110(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe3.mediums[3].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = pipe3.ps_start[3], nominal = 100000.0, stateSelect = StateSelect.prefer);
//   Real pipe3.mediums[3].Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = pipe3.X_start[1], stateSelect = StateSelect.prefer);
//   Real pipe3.mediums[3].h(quantity = \"SpecificEnergy\", unit = \"J/kg\", start = pipe3.h_start);
//   Real pipe3.mediums[3].d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe3.mediums[3].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = pipe3.T_start, nominal = 300.0, stateSelect = StateSelect.prefer);
//   Real pipe3.mediums[3].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe3.mediums[3].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe3.mediums[3].u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real pipe3.mediums[3].R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real pipe3.mediums[3].MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real pipe3.mediums[3].state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe3.mediums[3].state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe3.mediums[3].state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe3.mediums[3].state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean pipe3.mediums[3].preferredMediumStates = true;
//   final parameter Boolean pipe3.mediums[3].standardOrderComponents = true;
//   Real pipe3.mediums[3].T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = n1.n101.n946.n949(pipe3.mediums[3].T);
//   Real pipe3.mediums[3].p_bar(quantity = \"Pressure\", unit = \"bar\") = n1.n101.n946.n993(pipe3.mediums[3].p);
//   Real pipe3.mediums[3].x_water(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real pipe3.mediums[3].phi;
//   protected Real n7837.n8256[3].n10105(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7837.n8256[3].n10106(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7837.n8256[3].n10107(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7837.n8256[3].n10108(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7837.n8256[3].n10109(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7837.n8256[3].n10110(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe3.mediums[4].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = pipe3.ps_start[4], nominal = 100000.0, stateSelect = StateSelect.prefer);
//   Real pipe3.mediums[4].Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = pipe3.X_start[1], stateSelect = StateSelect.prefer);
//   Real pipe3.mediums[4].h(quantity = \"SpecificEnergy\", unit = \"J/kg\", start = pipe3.h_start);
//   Real pipe3.mediums[4].d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe3.mediums[4].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = pipe3.T_start, nominal = 300.0, stateSelect = StateSelect.prefer);
//   Real pipe3.mediums[4].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe3.mediums[4].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe3.mediums[4].u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real pipe3.mediums[4].R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real pipe3.mediums[4].MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real pipe3.mediums[4].state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe3.mediums[4].state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe3.mediums[4].state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe3.mediums[4].state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean pipe3.mediums[4].preferredMediumStates = true;
//   final parameter Boolean pipe3.mediums[4].standardOrderComponents = true;
//   Real pipe3.mediums[4].T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = n1.n101.n946.n949(pipe3.mediums[4].T);
//   Real pipe3.mediums[4].p_bar(quantity = \"Pressure\", unit = \"bar\") = n1.n101.n946.n993(pipe3.mediums[4].p);
//   Real pipe3.mediums[4].x_water(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real pipe3.mediums[4].phi;
//   protected Real n7837.n8256[4].n10105(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7837.n8256[4].n10106(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7837.n8256[4].n10107(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7837.n8256[4].n10108(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7837.n8256[4].n10109(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7837.n8256[4].n10110(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe3.mediums[5].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = pipe3.ps_start[5], nominal = 100000.0, stateSelect = StateSelect.prefer);
//   Real pipe3.mediums[5].Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = pipe3.X_start[1], stateSelect = StateSelect.prefer);
//   Real pipe3.mediums[5].h(quantity = \"SpecificEnergy\", unit = \"J/kg\", start = pipe3.h_start);
//   Real pipe3.mediums[5].d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe3.mediums[5].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = pipe3.T_start, nominal = 300.0, stateSelect = StateSelect.prefer);
//   Real pipe3.mediums[5].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe3.mediums[5].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe3.mediums[5].u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real pipe3.mediums[5].R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real pipe3.mediums[5].MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real pipe3.mediums[5].state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe3.mediums[5].state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe3.mediums[5].state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe3.mediums[5].state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean pipe3.mediums[5].preferredMediumStates = true;
//   final parameter Boolean pipe3.mediums[5].standardOrderComponents = true;
//   Real pipe3.mediums[5].T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = n1.n101.n946.n949(pipe3.mediums[5].T);
//   Real pipe3.mediums[5].p_bar(quantity = \"Pressure\", unit = \"bar\") = n1.n101.n946.n993(pipe3.mediums[5].p);
//   Real pipe3.mediums[5].x_water(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real pipe3.mediums[5].phi;
//   protected Real n7837.n8256[5].n10105(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7837.n8256[5].n10106(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7837.n8256[5].n10107(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7837.n8256[5].n10108(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7837.n8256[5].n10109(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n7837.n8256[5].n10110(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe3.mb_flows[1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe3.mb_flows[2](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe3.mb_flows[3](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe3.mb_flows[4](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe3.mb_flows[5](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe3.mbXi_flows[1,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe3.mbXi_flows[2,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe3.mbXi_flows[3,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe3.mbXi_flows[4,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe3.mbXi_flows[5,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe3.Hb_flows[1](quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   Real pipe3.Hb_flows[2](quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   Real pipe3.Hb_flows[3](quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   Real pipe3.Hb_flows[4](quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   Real pipe3.Hb_flows[5](quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   Real pipe3.Qb_flows[1](quantity = \"Power\", unit = \"W\");
//   Real pipe3.Qb_flows[2](quantity = \"Power\", unit = \"W\");
//   Real pipe3.Qb_flows[3](quantity = \"Power\", unit = \"W\");
//   Real pipe3.Qb_flows[4](quantity = \"Power\", unit = \"W\");
//   Real pipe3.Qb_flows[5](quantity = \"Power\", unit = \"W\");
//   Real pipe3.Wb_flows[1](quantity = \"Power\", unit = \"W\");
//   Real pipe3.Wb_flows[2](quantity = \"Power\", unit = \"W\");
//   Real pipe3.Wb_flows[3](quantity = \"Power\", unit = \"W\");
//   Real pipe3.Wb_flows[4](quantity = \"Power\", unit = \"W\");
//   Real pipe3.Wb_flows[5](quantity = \"Power\", unit = \"W\");
//   protected final parameter Boolean n7837.n8082 = true;
//   final parameter Real pipe3.lengths[1](quantity = \"Length\", unit = \"m\") = 5.0;
//   final parameter Real pipe3.lengths[2](quantity = \"Length\", unit = \"m\") = 5.0;
//   final parameter Real pipe3.lengths[3](quantity = \"Length\", unit = \"m\") = 5.0;
//   final parameter Real pipe3.lengths[4](quantity = \"Length\", unit = \"m\") = 5.0;
//   final parameter Real pipe3.lengths[5](quantity = \"Length\", unit = \"m\") = 5.0;
//   final parameter Real pipe3.crossAreas[1](quantity = \"Area\", unit = \"m2\") = pipe3.crossArea;
//   final parameter Real pipe3.crossAreas[2](quantity = \"Area\", unit = \"m2\") = pipe3.crossArea;
//   final parameter Real pipe3.crossAreas[3](quantity = \"Area\", unit = \"m2\") = pipe3.crossArea;
//   final parameter Real pipe3.crossAreas[4](quantity = \"Area\", unit = \"m2\") = pipe3.crossArea;
//   final parameter Real pipe3.crossAreas[5](quantity = \"Area\", unit = \"m2\") = pipe3.crossArea;
//   final parameter Real pipe3.dimensions[1](quantity = \"Length\", unit = \"m\") = 4.0 * pipe3.crossArea / pipe3.perimeter;
//   final parameter Real pipe3.dimensions[2](quantity = \"Length\", unit = \"m\") = 4.0 * pipe3.crossArea / pipe3.perimeter;
//   final parameter Real pipe3.dimensions[3](quantity = \"Length\", unit = \"m\") = 4.0 * pipe3.crossArea / pipe3.perimeter;
//   final parameter Real pipe3.dimensions[4](quantity = \"Length\", unit = \"m\") = 4.0 * pipe3.crossArea / pipe3.perimeter;
//   final parameter Real pipe3.dimensions[5](quantity = \"Length\", unit = \"m\") = 4.0 * pipe3.crossArea / pipe3.perimeter;
//   final parameter Real pipe3.roughnesses[1](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = pipe3.roughness;
//   final parameter Real pipe3.roughnesses[2](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = pipe3.roughness;
//   final parameter Real pipe3.roughnesses[3](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = pipe3.roughness;
//   final parameter Real pipe3.roughnesses[4](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = pipe3.roughness;
//   final parameter Real pipe3.roughnesses[5](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = pipe3.roughness;
//   final parameter Real pipe3.dheights[1](quantity = \"Length\", unit = \"m\") = 5.0;
//   final parameter Real pipe3.dheights[2](quantity = \"Length\", unit = \"m\") = 5.0;
//   final parameter Real pipe3.dheights[3](quantity = \"Length\", unit = \"m\") = 5.0;
//   final parameter Real pipe3.dheights[4](quantity = \"Length\", unit = \"m\") = 5.0;
//   final parameter Real pipe3.dheights[5](quantity = \"Length\", unit = \"m\") = 5.0;
//   final parameter enumeration(n8305, n7697, n7751, n117) pipe3.momentumDynamics = n1.n7656.n31.n7696.n7751;
//   final parameter Real pipe3.m_flow_start(quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0) = 0.01;
//   final parameter Integer pipe3.nNodes(min = 1) = 5;
//   final parameter enumeration(n8127, n7761, n8187, n8189) pipe3.modelStructure = n1.n7656.n31.n7760.n7761;
//   final parameter Boolean pipe3.useLumpedPressure = false;
//   final parameter Integer pipe3.nFM = 6;
//   final parameter Integer pipe3.nFMDistributed = 6;
//   final parameter Integer pipe3.nFMLumped = 2;
//   final parameter Integer pipe3.iLumped = 3;
//   final parameter Boolean pipe3.useInnerPortProperties = false;
//   Real pipe3.state_a.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe3.state_a.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe3.state_a.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe3.state_a.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe3.state_b.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe3.state_b.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe3.state_b.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe3.state_b.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe3.statesFM[1].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe3.statesFM[1].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe3.statesFM[1].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe3.statesFM[1].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe3.statesFM[2].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe3.statesFM[2].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe3.statesFM[2].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe3.statesFM[2].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe3.statesFM[3].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe3.statesFM[3].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe3.statesFM[3].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe3.statesFM[3].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe3.statesFM[4].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe3.statesFM[4].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe3.statesFM[4].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe3.statesFM[4].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe3.statesFM[5].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe3.statesFM[5].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe3.statesFM[5].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe3.statesFM[5].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe3.statesFM[6].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe3.statesFM[6].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe3.statesFM[6].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe3.statesFM[6].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe3.statesFM[7].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe3.statesFM[7].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe3.statesFM[7].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe3.statesFM[7].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean pipe3.flowModel.from_dp = true;
//   final parameter Integer pipe3.flowModel.n = 7;
//   final Real pipe3.flowModel.states[1].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe3.statesFM[1].p;
//   final Real pipe3.flowModel.states[1].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe3.statesFM[1].T;
//   final Real pipe3.flowModel.states[1].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe3.flowModel.states[1].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe3.flowModel.states[2].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe3.statesFM[2].p;
//   final Real pipe3.flowModel.states[2].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe3.statesFM[2].T;
//   final Real pipe3.flowModel.states[2].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe3.flowModel.states[2].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe3.flowModel.states[3].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe3.statesFM[3].p;
//   final Real pipe3.flowModel.states[3].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe3.statesFM[3].T;
//   final Real pipe3.flowModel.states[3].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe3.flowModel.states[3].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe3.flowModel.states[4].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe3.statesFM[4].p;
//   final Real pipe3.flowModel.states[4].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe3.statesFM[4].T;
//   final Real pipe3.flowModel.states[4].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe3.flowModel.states[4].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe3.flowModel.states[5].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe3.statesFM[5].p;
//   final Real pipe3.flowModel.states[5].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe3.statesFM[5].T;
//   final Real pipe3.flowModel.states[5].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe3.flowModel.states[5].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe3.flowModel.states[6].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe3.statesFM[6].p;
//   final Real pipe3.flowModel.states[6].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe3.statesFM[6].T;
//   final Real pipe3.flowModel.states[6].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe3.flowModel.states[6].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe3.flowModel.states[7].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe3.statesFM[7].p;
//   final Real pipe3.flowModel.states[7].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe3.statesFM[7].T;
//   final Real pipe3.flowModel.states[7].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe3.flowModel.states[7].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe3.flowModel.vs[1](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe3.flowModel.vs[2](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe3.flowModel.vs[3](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe3.flowModel.vs[4](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe3.flowModel.vs[5](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe3.flowModel.vs[6](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe3.flowModel.vs[7](quantity = \"Velocity\", unit = \"m/s\");
//   final parameter Real pipe3.flowModel.nParallel = pipe3.nParallel;
//   final Real pipe3.flowModel.crossAreas[1](quantity = \"Area\", unit = \"m2\");
//   final Real pipe3.flowModel.crossAreas[2](quantity = \"Area\", unit = \"m2\");
//   final Real pipe3.flowModel.crossAreas[3](quantity = \"Area\", unit = \"m2\");
//   final Real pipe3.flowModel.crossAreas[4](quantity = \"Area\", unit = \"m2\");
//   final Real pipe3.flowModel.crossAreas[5](quantity = \"Area\", unit = \"m2\");
//   final Real pipe3.flowModel.crossAreas[6](quantity = \"Area\", unit = \"m2\");
//   final Real pipe3.flowModel.crossAreas[7](quantity = \"Area\", unit = \"m2\");
//   final Real pipe3.flowModel.dimensions[1](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.flowModel.dimensions[2](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.flowModel.dimensions[3](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.flowModel.dimensions[4](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.flowModel.dimensions[5](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.flowModel.dimensions[6](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.flowModel.dimensions[7](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.flowModel.roughnesses[1](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe3.flowModel.roughnesses[2](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe3.flowModel.roughnesses[3](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe3.flowModel.roughnesses[4](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe3.flowModel.roughnesses[5](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe3.flowModel.roughnesses[6](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe3.flowModel.roughnesses[7](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe3.flowModel.dheights[1](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.flowModel.dheights[2](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.flowModel.dheights[3](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.flowModel.dheights[4](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.flowModel.dheights[5](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.flowModel.dheights[6](quantity = \"Length\", unit = \"m\");
//   final parameter Real pipe3.flowModel.g(quantity = \"Acceleration\", unit = \"m/s2\") = system.g;
//   final parameter Boolean pipe3.flowModel.allowFlowReversal = true;
//   final parameter enumeration(n8305, n7697, n7751, n117) pipe3.flowModel.momentumDynamics = n1.n7656.n31.n7696.n7751;
//   final parameter Real pipe3.flowModel.m_flow_start(quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0) = 0.01;
//   final parameter Real pipe3.flowModel.p_a_start(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe3.p_a_start;
//   final parameter Real pipe3.flowModel.p_b_start(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe3.p_b_start;
//   final parameter Integer pipe3.flowModel.m = 6;
//   final Real pipe3.flowModel.pathLengths[1](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.flowModel.pathLengths[2](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.flowModel.pathLengths[3](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.flowModel.pathLengths[4](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.flowModel.pathLengths[5](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.flowModel.pathLengths[6](quantity = \"Length\", unit = \"m\");
//   Real pipe3.flowModel.m_flows[1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.01, stateSelect = StateSelect.prefer);
//   Real pipe3.flowModel.m_flows[2](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.01, stateSelect = StateSelect.prefer);
//   Real pipe3.flowModel.m_flows[3](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.01, stateSelect = StateSelect.prefer);
//   Real pipe3.flowModel.m_flows[4](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.01, stateSelect = StateSelect.prefer);
//   Real pipe3.flowModel.m_flows[5](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.01, stateSelect = StateSelect.prefer);
//   Real pipe3.flowModel.m_flows[6](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.01, stateSelect = StateSelect.prefer);
//   Real pipe3.flowModel.Is[1](quantity = \"Momentum\", unit = \"kg.m/s\");
//   Real pipe3.flowModel.Is[2](quantity = \"Momentum\", unit = \"kg.m/s\");
//   Real pipe3.flowModel.Is[3](quantity = \"Momentum\", unit = \"kg.m/s\");
//   Real pipe3.flowModel.Is[4](quantity = \"Momentum\", unit = \"kg.m/s\");
//   Real pipe3.flowModel.Is[5](quantity = \"Momentum\", unit = \"kg.m/s\");
//   Real pipe3.flowModel.Is[6](quantity = \"Momentum\", unit = \"kg.m/s\");
//   Real pipe3.flowModel.Ib_flows[1](quantity = \"Force\", unit = \"N\");
//   Real pipe3.flowModel.Ib_flows[2](quantity = \"Force\", unit = \"N\");
//   Real pipe3.flowModel.Ib_flows[3](quantity = \"Force\", unit = \"N\");
//   Real pipe3.flowModel.Ib_flows[4](quantity = \"Force\", unit = \"N\");
//   Real pipe3.flowModel.Ib_flows[5](quantity = \"Force\", unit = \"N\");
//   Real pipe3.flowModel.Ib_flows[6](quantity = \"Force\", unit = \"N\");
//   Real pipe3.flowModel.Fs_p[1](quantity = \"Force\", unit = \"N\");
//   Real pipe3.flowModel.Fs_p[2](quantity = \"Force\", unit = \"N\");
//   Real pipe3.flowModel.Fs_p[3](quantity = \"Force\", unit = \"N\");
//   Real pipe3.flowModel.Fs_p[4](quantity = \"Force\", unit = \"N\");
//   Real pipe3.flowModel.Fs_p[5](quantity = \"Force\", unit = \"N\");
//   Real pipe3.flowModel.Fs_p[6](quantity = \"Force\", unit = \"N\");
//   Real pipe3.flowModel.Fs_fg[1](quantity = \"Force\", unit = \"N\");
//   Real pipe3.flowModel.Fs_fg[2](quantity = \"Force\", unit = \"N\");
//   Real pipe3.flowModel.Fs_fg[3](quantity = \"Force\", unit = \"N\");
//   Real pipe3.flowModel.Fs_fg[4](quantity = \"Force\", unit = \"N\");
//   Real pipe3.flowModel.Fs_fg[5](quantity = \"Force\", unit = \"N\");
//   Real pipe3.flowModel.Fs_fg[6](quantity = \"Force\", unit = \"N\");
//   final parameter Boolean pipe3.flowModel.useUpstreamScheme = true;
//   final parameter Boolean pipe3.flowModel.use_Ib_flows = true;
//   Real pipe3.flowModel.rhos[1](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe3.flowModel.rhos[2](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe3.flowModel.rhos[3](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe3.flowModel.rhos[4](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe3.flowModel.rhos[5](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe3.flowModel.rhos[6](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe3.flowModel.rhos[7](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe3.flowModel.rhos_act[1](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe3.flowModel.rhos_act[2](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe3.flowModel.rhos_act[3](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe3.flowModel.rhos_act[4](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe3.flowModel.rhos_act[5](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe3.flowModel.rhos_act[6](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe3.flowModel.mus[1](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe3.flowModel.mus[2](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe3.flowModel.mus[3](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe3.flowModel.mus[4](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe3.flowModel.mus[5](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe3.flowModel.mus[6](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe3.flowModel.mus[7](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe3.flowModel.mus_act[1](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe3.flowModel.mus_act[2](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe3.flowModel.mus_act[3](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe3.flowModel.mus_act[4](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe3.flowModel.mus_act[5](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe3.flowModel.mus_act[6](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe3.flowModel.dps_fg[1](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", start = (pipe3.flowModel.p_a_start - pipe3.flowModel.p_b_start) / 6.0);
//   Real pipe3.flowModel.dps_fg[2](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", start = (pipe3.flowModel.p_a_start - pipe3.flowModel.p_b_start) / 6.0);
//   Real pipe3.flowModel.dps_fg[3](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", start = (pipe3.flowModel.p_a_start - pipe3.flowModel.p_b_start) / 6.0);
//   Real pipe3.flowModel.dps_fg[4](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", start = (pipe3.flowModel.p_a_start - pipe3.flowModel.p_b_start) / 6.0);
//   Real pipe3.flowModel.dps_fg[5](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", start = (pipe3.flowModel.p_a_start - pipe3.flowModel.p_b_start) / 6.0);
//   Real pipe3.flowModel.dps_fg[6](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", start = (pipe3.flowModel.p_a_start - pipe3.flowModel.p_b_start) / 6.0);
//   final parameter Real pipe3.flowModel.Re_turbulent(quantity = \"ReynoldsNumber\", unit = \"1\") = 4000.0;
//   final parameter Boolean pipe3.flowModel.show_Res = false;
//   protected final parameter Boolean n7837.n8346.n8385 = false;
//   protected parameter Real n7837.n8346.n8135(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 1.196838693581092;
//   protected final parameter Boolean n7837.n8346.n8389 = false;
//   protected parameter Real n7837.n8346.n8390(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0) = 1.823286547365138e-05;
//   Real pipe3.flowModel.pathLengths_internal[1](quantity = \"Length\", unit = \"m\");
//   Real pipe3.flowModel.pathLengths_internal[2](quantity = \"Length\", unit = \"m\");
//   Real pipe3.flowModel.pathLengths_internal[3](quantity = \"Length\", unit = \"m\");
//   Real pipe3.flowModel.pathLengths_internal[4](quantity = \"Length\", unit = \"m\");
//   Real pipe3.flowModel.pathLengths_internal[5](quantity = \"Length\", unit = \"m\");
//   Real pipe3.flowModel.pathLengths_internal[6](quantity = \"Length\", unit = \"m\");
//   Real pipe3.flowModel.Res_turbulent_internal[1](quantity = \"ReynoldsNumber\", unit = \"1\");
//   Real pipe3.flowModel.Res_turbulent_internal[2](quantity = \"ReynoldsNumber\", unit = \"1\");
//   Real pipe3.flowModel.Res_turbulent_internal[3](quantity = \"ReynoldsNumber\", unit = \"1\");
//   Real pipe3.flowModel.Res_turbulent_internal[4](quantity = \"ReynoldsNumber\", unit = \"1\");
//   Real pipe3.flowModel.Res_turbulent_internal[5](quantity = \"ReynoldsNumber\", unit = \"1\");
//   Real pipe3.flowModel.Res_turbulent_internal[6](quantity = \"ReynoldsNumber\", unit = \"1\");
//   parameter Real pipe3.flowModel.dp_nominal(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = 1.0, fixed = false, nominal = 100000.0);
//   parameter Real pipe3.flowModel.m_flow_nominal(quantity = \"MassFlowRate\", unit = \"kg/s\") = 100.0 * pipe3.flowModel.m_flow_small;
//   parameter Real pipe3.flowModel.m_flow_small(quantity = \"MassFlowRate\", unit = \"kg/s\") = system.m_flow_small;
//   protected parameter Real n7837.n8346.n8308(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = 1.0, fixed = false, nominal = 100000.0);
//   protected final parameter Boolean n7837.n8346.n8407 = false;
//   protected final parameter Boolean n7837.n8346.n8409 = false;
//   protected Real n7837.n8346.n8410[1](quantity = \"Length\", unit = \"m\");
//   protected Real n7837.n8346.n8410[2](quantity = \"Length\", unit = \"m\");
//   protected Real n7837.n8346.n8410[3](quantity = \"Length\", unit = \"m\");
//   protected Real n7837.n8346.n8410[4](quantity = \"Length\", unit = \"m\");
//   protected Real n7837.n8346.n8410[5](quantity = \"Length\", unit = \"m\");
//   protected Real n7837.n8346.n8410[6](quantity = \"Length\", unit = \"m\");
//   protected Real n7837.n8346.n8411(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = n1.n7656.n102.n8149.n7837.n8346.n7663.n8412(pipe3.flowModel.m_flow_nominal / pipe3.flowModel.nParallel, n7837.n8346.n8135, n7837.n8346.n8135, n7837.n8346.n8390, n7837.n8346.n8390, pipe3.flowModel.pathLengths_internal[1], n7837.n8346.n8410[1], (pipe3.flowModel.crossAreas[1] + pipe3.flowModel.crossAreas[2]) / 2.0, (pipe3.flowModel.roughnesses[1] + pipe3.flowModel.roughnesses[2]) / 2.0, pipe3.flowModel.m_flow_small / pipe3.flowModel.nParallel, pipe3.flowModel.Res_turbulent_internal[1]) + n1.n7656.n102.n8149.n7837.n8346.n7663.n8412(pipe3.flowModel.m_flow_nominal / pipe3.flowModel.nParallel, n7837.n8346.n8135, n7837.n8346.n8135, n7837.n8346.n8390, n7837.n8346.n8390, pipe3.flowModel.pathLengths_internal[2], n7837.n8346.n8410[2], (pipe3.flowModel.crossAreas[2] + pipe3.flowModel.crossAreas[3]) / 2.0, (pipe3.flowModel.roughnesses[2] + pipe3.flowModel.roughnesses[3]) / 2.0, pipe3.flowModel.m_flow_small / pipe3.flowModel.nParallel, pipe3.flowModel.Res_turbulent_internal[2]) + n1.n7656.n102.n8149.n7837.n8346.n7663.n8412(pipe3.flowModel.m_flow_nominal / pipe3.flowModel.nParallel, n7837.n8346.n8135, n7837.n8346.n8135, n7837.n8346.n8390, n7837.n8346.n8390, pipe3.flowModel.pathLengths_internal[3], n7837.n8346.n8410[3], (pipe3.flowModel.crossAreas[3] + pipe3.flowModel.crossAreas[4]) / 2.0, (pipe3.flowModel.roughnesses[3] + pipe3.flowModel.roughnesses[4]) / 2.0, pipe3.flowModel.m_flow_small / pipe3.flowModel.nParallel, pipe3.flowModel.Res_turbulent_internal[3]) + n1.n7656.n102.n8149.n7837.n8346.n7663.n8412(pipe3.flowModel.m_flow_nominal / pipe3.flowModel.nParallel, n7837.n8346.n8135, n7837.n8346.n8135, n7837.n8346.n8390, n7837.n8346.n8390, pipe3.flowModel.pathLengths_internal[4], n7837.n8346.n8410[4], (pipe3.flowModel.crossAreas[4] + pipe3.flowModel.crossAreas[5]) / 2.0, (pipe3.flowModel.roughnesses[4] + pipe3.flowModel.roughnesses[5]) / 2.0, pipe3.flowModel.m_flow_small / pipe3.flowModel.nParallel, pipe3.flowModel.Res_turbulent_internal[4]) + n1.n7656.n102.n8149.n7837.n8346.n7663.n8412(pipe3.flowModel.m_flow_nominal / pipe3.flowModel.nParallel, n7837.n8346.n8135, n7837.n8346.n8135, n7837.n8346.n8390, n7837.n8346.n8390, pipe3.flowModel.pathLengths_internal[5], n7837.n8346.n8410[5], (pipe3.flowModel.crossAreas[5] + pipe3.flowModel.crossAreas[6]) / 2.0, (pipe3.flowModel.roughnesses[5] + pipe3.flowModel.roughnesses[6]) / 2.0, pipe3.flowModel.m_flow_small / pipe3.flowModel.nParallel, pipe3.flowModel.Res_turbulent_internal[5]) + n1.n7656.n102.n8149.n7837.n8346.n7663.n8412(pipe3.flowModel.m_flow_nominal / pipe3.flowModel.nParallel, n7837.n8346.n8135, n7837.n8346.n8135, n7837.n8346.n8390, n7837.n8346.n8390, pipe3.flowModel.pathLengths_internal[6], n7837.n8346.n8410[6], (pipe3.flowModel.crossAreas[6] + pipe3.flowModel.crossAreas[7]) / 2.0, (pipe3.flowModel.roughnesses[6] + pipe3.flowModel.roughnesses[7]) / 2.0, pipe3.flowModel.m_flow_small / pipe3.flowModel.nParallel, pipe3.flowModel.Res_turbulent_internal[6]);
//   Real pipe3.m_flows[1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.01);
//   Real pipe3.m_flows[2](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.01);
//   Real pipe3.m_flows[3](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.01);
//   Real pipe3.m_flows[4](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.01);
//   Real pipe3.m_flows[5](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.01);
//   Real pipe3.m_flows[6](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.01);
//   Real pipe3.mXi_flows[1,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe3.mXi_flows[2,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe3.mXi_flows[3,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe3.mXi_flows[4,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe3.mXi_flows[5,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe3.mXi_flows[6,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe3.H_flows[1](quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0);
//   Real pipe3.H_flows[2](quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0);
//   Real pipe3.H_flows[3](quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0);
//   Real pipe3.H_flows[4](quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0);
//   Real pipe3.H_flows[5](quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0);
//   Real pipe3.H_flows[6](quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0);
//   Real pipe3.vs[1](quantity = \"Velocity\", unit = \"m/s\");
//   Real pipe3.vs[2](quantity = \"Velocity\", unit = \"m/s\");
//   Real pipe3.vs[3](quantity = \"Velocity\", unit = \"m/s\");
//   Real pipe3.vs[4](quantity = \"Velocity\", unit = \"m/s\");
//   Real pipe3.vs[5](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real n7837.n8348[1](quantity = \"Length\", unit = \"m\");
//   protected Real n7837.n8348[2](quantity = \"Length\", unit = \"m\");
//   protected Real n7837.n8348[3](quantity = \"Length\", unit = \"m\");
//   protected Real n7837.n8348[4](quantity = \"Length\", unit = \"m\");
//   protected Real n7837.n8348[5](quantity = \"Length\", unit = \"m\");
//   protected Real n7837.n8348[6](quantity = \"Length\", unit = \"m\");
//   protected Real n7837.n8373[1](quantity = \"Length\", unit = \"m\");
//   protected Real n7837.n8373[2](quantity = \"Length\", unit = \"m\");
//   protected Real n7837.n8373[3](quantity = \"Length\", unit = \"m\");
//   protected Real n7837.n8373[4](quantity = \"Length\", unit = \"m\");
//   protected Real n7837.n8373[5](quantity = \"Length\", unit = \"m\");
//   protected Real n7837.n8373[6](quantity = \"Length\", unit = \"m\");
//   protected Real n7837.n8370[1](quantity = \"Area\", unit = \"m2\");
//   protected Real n7837.n8370[2](quantity = \"Area\", unit = \"m2\");
//   protected Real n7837.n8370[3](quantity = \"Area\", unit = \"m2\");
//   protected Real n7837.n8370[4](quantity = \"Area\", unit = \"m2\");
//   protected Real n7837.n8370[5](quantity = \"Area\", unit = \"m2\");
//   protected Real n7837.n8370[6](quantity = \"Area\", unit = \"m2\");
//   protected Real n7837.n8370[7](quantity = \"Area\", unit = \"m2\");
//   protected Real n7837.n8369[1](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real n7837.n8369[2](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real n7837.n8369[3](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real n7837.n8369[4](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real n7837.n8369[5](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real n7837.n8369[6](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real n7837.n8369[7](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real n7837.n8371[1](quantity = \"Length\", unit = \"m\");
//   protected Real n7837.n8371[2](quantity = \"Length\", unit = \"m\");
//   protected Real n7837.n8371[3](quantity = \"Length\", unit = \"m\");
//   protected Real n7837.n8371[4](quantity = \"Length\", unit = \"m\");
//   protected Real n7837.n8371[5](quantity = \"Length\", unit = \"m\");
//   protected Real n7837.n8371[6](quantity = \"Length\", unit = \"m\");
//   protected Real n7837.n8371[7](quantity = \"Length\", unit = \"m\");
//   protected Real n7837.n8372[1](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   protected Real n7837.n8372[2](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   protected Real n7837.n8372[3](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   protected Real n7837.n8372[4](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   protected Real n7837.n8372[5](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   protected Real n7837.n8372[6](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   protected Real n7837.n8372[7](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final parameter Boolean pipe3.use_HeatTransfer = false;
//   final parameter Integer pipe3.heatTransfer.n = 5;
//   final Real pipe3.heatTransfer.states[1].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe3.mediums[1].state.p;
//   final Real pipe3.heatTransfer.states[1].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe3.mediums[1].state.T;
//   final Real pipe3.heatTransfer.states[1].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe3.heatTransfer.states[1].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe3.heatTransfer.states[2].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe3.mediums[2].state.p;
//   final Real pipe3.heatTransfer.states[2].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe3.mediums[2].state.T;
//   final Real pipe3.heatTransfer.states[2].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe3.heatTransfer.states[2].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe3.heatTransfer.states[3].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe3.mediums[3].state.p;
//   final Real pipe3.heatTransfer.states[3].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe3.mediums[3].state.T;
//   final Real pipe3.heatTransfer.states[3].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe3.heatTransfer.states[3].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe3.heatTransfer.states[4].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe3.mediums[4].state.p;
//   final Real pipe3.heatTransfer.states[4].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe3.mediums[4].state.T;
//   final Real pipe3.heatTransfer.states[4].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe3.heatTransfer.states[4].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe3.heatTransfer.states[5].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe3.mediums[5].state.p;
//   final Real pipe3.heatTransfer.states[5].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe3.mediums[5].state.T;
//   final Real pipe3.heatTransfer.states[5].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe3.heatTransfer.states[5].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe3.heatTransfer.surfaceAreas[1](quantity = \"Area\", unit = \"m2\");
//   final Real pipe3.heatTransfer.surfaceAreas[2](quantity = \"Area\", unit = \"m2\");
//   final Real pipe3.heatTransfer.surfaceAreas[3](quantity = \"Area\", unit = \"m2\");
//   final Real pipe3.heatTransfer.surfaceAreas[4](quantity = \"Area\", unit = \"m2\");
//   final Real pipe3.heatTransfer.surfaceAreas[5](quantity = \"Area\", unit = \"m2\");
//   Real pipe3.heatTransfer.Q_flows[1](quantity = \"Power\", unit = \"W\");
//   Real pipe3.heatTransfer.Q_flows[2](quantity = \"Power\", unit = \"W\");
//   Real pipe3.heatTransfer.Q_flows[3](quantity = \"Power\", unit = \"W\");
//   Real pipe3.heatTransfer.Q_flows[4](quantity = \"Power\", unit = \"W\");
//   Real pipe3.heatTransfer.Q_flows[5](quantity = \"Power\", unit = \"W\");
//   final parameter Boolean pipe3.heatTransfer.use_k = false;
//   final parameter Real pipe3.heatTransfer.k(quantity = \"CoefficientOfHeatTransfer\", unit = \"W/(m2.K)\") = 0.0;
//   parameter Real pipe3.heatTransfer.T_ambient(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = system.T_ambient;
//   Real pipe3.heatTransfer.heatPorts[1].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe3.heatTransfer.heatPorts[1].Q_flow(quantity = \"Power\", unit = \"W\");
//   Real pipe3.heatTransfer.heatPorts[2].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe3.heatTransfer.heatPorts[2].Q_flow(quantity = \"Power\", unit = \"W\");
//   Real pipe3.heatTransfer.heatPorts[3].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe3.heatTransfer.heatPorts[3].Q_flow(quantity = \"Power\", unit = \"W\");
//   Real pipe3.heatTransfer.heatPorts[4].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe3.heatTransfer.heatPorts[4].Q_flow(quantity = \"Power\", unit = \"W\");
//   Real pipe3.heatTransfer.heatPorts[5].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe3.heatTransfer.heatPorts[5].Q_flow(quantity = \"Power\", unit = \"W\");
//   Real pipe3.heatTransfer.Ts[1](quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe3.heatTransfer.Ts[2](quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe3.heatTransfer.Ts[3](quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe3.heatTransfer.Ts[4](quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe3.heatTransfer.Ts[5](quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   final Real pipe3.heatTransfer.vs[1](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe3.heatTransfer.vs[2](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe3.heatTransfer.vs[3](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe3.heatTransfer.vs[4](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe3.heatTransfer.vs[5](quantity = \"Velocity\", unit = \"m/s\");
//   final parameter Real pipe3.heatTransfer.nParallel = pipe3.nParallel;
//   final Real pipe3.heatTransfer.lengths[1](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.heatTransfer.lengths[2](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.heatTransfer.lengths[3](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.heatTransfer.lengths[4](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.heatTransfer.lengths[5](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.heatTransfer.dimensions[1](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.heatTransfer.dimensions[2](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.heatTransfer.dimensions[3](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.heatTransfer.dimensions[4](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.heatTransfer.dimensions[5](quantity = \"Length\", unit = \"m\");
//   final Real pipe3.heatTransfer.roughnesses[1](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe3.heatTransfer.roughnesses[2](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe3.heatTransfer.roughnesses[3](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe3.heatTransfer.roughnesses[4](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe3.heatTransfer.roughnesses[5](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final parameter Real pipe3.dxs[1] = 0.2;
//   final parameter Real pipe3.dxs[2] = 0.2;
//   final parameter Real pipe3.dxs[3] = 0.2;
//   final parameter Real pipe3.dxs[4] = 0.2;
//   final parameter Real pipe3.dxs[5] = 0.2;
//   final parameter Boolean pipe4.allowFlowReversal = true;
//   Real pipe4.port_a.m_flow(quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0);
//   Real pipe4.port_a.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe4.port_a.h_outflow(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
//   Real pipe4.port_a.Xi_outflow[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real pipe4.port_b.m_flow(quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 9.999999999999999e+59);
//   Real pipe4.port_b.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe4.port_b.h_outflow(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
//   Real pipe4.port_b.Xi_outflow[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected final parameter Boolean n8133.n7805 = false;
//   protected final parameter Boolean n8133.n7806 = false;
//   protected parameter Boolean n8133.n8767 = true;
//   parameter Real pipe4.nParallel(min = 1.0) = 1.0;
//   final parameter Real pipe4.length(quantity = \"Length\", unit = \"m\") = 50.0;
//   parameter Boolean pipe4.isCircular = true;
//   parameter Real pipe4.diameter(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0254;
//   parameter Real pipe4.crossArea(quantity = \"Area\", unit = \"m2\") = 3.141592653589793 * pipe4.diameter * pipe4.diameter / 4.0;
//   parameter Real pipe4.perimeter(quantity = \"Length\", unit = \"m\", min = 0.0) = 3.141592653589793 * pipe4.diameter;
//   parameter Real pipe4.roughness(quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = 2.5e-05;
//   final parameter Real pipe4.V(quantity = \"Volume\", unit = \"m3\") = pipe4.crossArea * 50.0 * pipe4.nParallel;
//   final parameter Real pipe4.height_ab(quantity = \"Length\", unit = \"m\") = 50.0;
//   final parameter Integer pipe4.n = 5;
//   final Real pipe4.fluidVolumes[1](quantity = \"Volume\", unit = \"m3\");
//   final Real pipe4.fluidVolumes[2](quantity = \"Volume\", unit = \"m3\");
//   final Real pipe4.fluidVolumes[3](quantity = \"Volume\", unit = \"m3\");
//   final Real pipe4.fluidVolumes[4](quantity = \"Volume\", unit = \"m3\");
//   final Real pipe4.fluidVolumes[5](quantity = \"Volume\", unit = \"m3\");
//   final parameter enumeration(n8305, n7697, n7751, n117) pipe4.energyDynamics = n1.n7656.n31.n7696.n7751;
//   final parameter enumeration(n8305, n7697, n7751, n117) pipe4.massDynamics = n1.n7656.n31.n7696.n7751;
//   final parameter enumeration(n8305, n7697, n7751, n117) pipe4.substanceDynamics = n1.n7656.n31.n7696.n7751;
//   final parameter enumeration(n8305, n7697, n7751, n117) pipe4.traceDynamics = n1.n7656.n31.n7696.n7751;
//   parameter Real pipe4.p_a_start(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = 120000.0;
//   parameter Real pipe4.p_b_start(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = 100000.0;
//   final parameter Real pipe4.ps_start[1](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe4.p_a_start;
//   final parameter Real pipe4.ps_start[2](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe4.p_a_start + (pipe4.p_b_start - pipe4.p_a_start) / 4.0;
//   final parameter Real pipe4.ps_start[3](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe4.p_a_start + (pipe4.p_b_start - pipe4.p_a_start) * 2.0 / 4.0;
//   final parameter Real pipe4.ps_start[4](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe4.p_a_start + (pipe4.p_b_start - pipe4.p_a_start) * 3.0 / 4.0;
//   final parameter Real pipe4.ps_start[5](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe4.p_a_start + (pipe4.p_b_start - pipe4.p_a_start) * 4.0 / 4.0;
//   final parameter Boolean pipe4.use_T_start = true;
//   parameter Real pipe4.T_start(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = system.T_start;
//   parameter Real pipe4.h_start(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0) = n1.n7656.n102.n8149.n8133.n7670.n7957((pipe4.p_a_start + pipe4.p_b_start) / 2.0, pipe4.T_start, pipe4.X_start);
//   parameter Real pipe4.X_start[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = 0.01;
//   parameter Real pipe4.X_start[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = 0.99;
//   Real pipe4.Us[1](quantity = \"Energy\", unit = \"J\");
//   Real pipe4.Us[2](quantity = \"Energy\", unit = \"J\");
//   Real pipe4.Us[3](quantity = \"Energy\", unit = \"J\");
//   Real pipe4.Us[4](quantity = \"Energy\", unit = \"J\");
//   Real pipe4.Us[5](quantity = \"Energy\", unit = \"J\");
//   Real pipe4.ms[1](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe4.ms[2](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe4.ms[3](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe4.ms[4](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe4.ms[5](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe4.mXis[1,1](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe4.mXis[2,1](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe4.mXis[3,1](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe4.mXis[4,1](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe4.mXis[5,1](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real pipe4.mediums[1].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = pipe4.ps_start[1], nominal = 100000.0, stateSelect = StateSelect.prefer);
//   Real pipe4.mediums[1].Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = pipe4.X_start[1], stateSelect = StateSelect.prefer);
//   Real pipe4.mediums[1].h(quantity = \"SpecificEnergy\", unit = \"J/kg\", start = pipe4.h_start);
//   Real pipe4.mediums[1].d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe4.mediums[1].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = pipe4.T_start, nominal = 300.0, stateSelect = StateSelect.prefer);
//   Real pipe4.mediums[1].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe4.mediums[1].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe4.mediums[1].u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real pipe4.mediums[1].R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real pipe4.mediums[1].MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real pipe4.mediums[1].state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe4.mediums[1].state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe4.mediums[1].state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe4.mediums[1].state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean pipe4.mediums[1].preferredMediumStates = true;
//   final parameter Boolean pipe4.mediums[1].standardOrderComponents = true;
//   Real pipe4.mediums[1].T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = n1.n101.n946.n949(pipe4.mediums[1].T);
//   Real pipe4.mediums[1].p_bar(quantity = \"Pressure\", unit = \"bar\") = n1.n101.n946.n993(pipe4.mediums[1].p);
//   Real pipe4.mediums[1].x_water(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real pipe4.mediums[1].phi;
//   protected Real n8133.n8256[1].n10105(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n8133.n8256[1].n10106(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n8133.n8256[1].n10107(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n8133.n8256[1].n10108(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n8133.n8256[1].n10109(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n8133.n8256[1].n10110(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe4.mediums[2].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = pipe4.ps_start[2], nominal = 100000.0, stateSelect = StateSelect.prefer);
//   Real pipe4.mediums[2].Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = pipe4.X_start[1], stateSelect = StateSelect.prefer);
//   Real pipe4.mediums[2].h(quantity = \"SpecificEnergy\", unit = \"J/kg\", start = pipe4.h_start);
//   Real pipe4.mediums[2].d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe4.mediums[2].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = pipe4.T_start, nominal = 300.0, stateSelect = StateSelect.prefer);
//   Real pipe4.mediums[2].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe4.mediums[2].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe4.mediums[2].u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real pipe4.mediums[2].R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real pipe4.mediums[2].MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real pipe4.mediums[2].state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe4.mediums[2].state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe4.mediums[2].state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe4.mediums[2].state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean pipe4.mediums[2].preferredMediumStates = true;
//   final parameter Boolean pipe4.mediums[2].standardOrderComponents = true;
//   Real pipe4.mediums[2].T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = n1.n101.n946.n949(pipe4.mediums[2].T);
//   Real pipe4.mediums[2].p_bar(quantity = \"Pressure\", unit = \"bar\") = n1.n101.n946.n993(pipe4.mediums[2].p);
//   Real pipe4.mediums[2].x_water(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real pipe4.mediums[2].phi;
//   protected Real n8133.n8256[2].n10105(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n8133.n8256[2].n10106(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n8133.n8256[2].n10107(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n8133.n8256[2].n10108(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n8133.n8256[2].n10109(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n8133.n8256[2].n10110(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe4.mediums[3].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = pipe4.ps_start[3], nominal = 100000.0, stateSelect = StateSelect.prefer);
//   Real pipe4.mediums[3].Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = pipe4.X_start[1], stateSelect = StateSelect.prefer);
//   Real pipe4.mediums[3].h(quantity = \"SpecificEnergy\", unit = \"J/kg\", start = pipe4.h_start);
//   Real pipe4.mediums[3].d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe4.mediums[3].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = pipe4.T_start, nominal = 300.0, stateSelect = StateSelect.prefer);
//   Real pipe4.mediums[3].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe4.mediums[3].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe4.mediums[3].u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real pipe4.mediums[3].R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real pipe4.mediums[3].MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real pipe4.mediums[3].state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe4.mediums[3].state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe4.mediums[3].state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe4.mediums[3].state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean pipe4.mediums[3].preferredMediumStates = true;
//   final parameter Boolean pipe4.mediums[3].standardOrderComponents = true;
//   Real pipe4.mediums[3].T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = n1.n101.n946.n949(pipe4.mediums[3].T);
//   Real pipe4.mediums[3].p_bar(quantity = \"Pressure\", unit = \"bar\") = n1.n101.n946.n993(pipe4.mediums[3].p);
//   Real pipe4.mediums[3].x_water(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real pipe4.mediums[3].phi;
//   protected Real n8133.n8256[3].n10105(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n8133.n8256[3].n10106(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n8133.n8256[3].n10107(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n8133.n8256[3].n10108(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n8133.n8256[3].n10109(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n8133.n8256[3].n10110(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe4.mediums[4].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = pipe4.ps_start[4], nominal = 100000.0, stateSelect = StateSelect.prefer);
//   Real pipe4.mediums[4].Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = pipe4.X_start[1], stateSelect = StateSelect.prefer);
//   Real pipe4.mediums[4].h(quantity = \"SpecificEnergy\", unit = \"J/kg\", start = pipe4.h_start);
//   Real pipe4.mediums[4].d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe4.mediums[4].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = pipe4.T_start, nominal = 300.0, stateSelect = StateSelect.prefer);
//   Real pipe4.mediums[4].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe4.mediums[4].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe4.mediums[4].u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real pipe4.mediums[4].R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real pipe4.mediums[4].MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real pipe4.mediums[4].state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe4.mediums[4].state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe4.mediums[4].state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe4.mediums[4].state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean pipe4.mediums[4].preferredMediumStates = true;
//   final parameter Boolean pipe4.mediums[4].standardOrderComponents = true;
//   Real pipe4.mediums[4].T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = n1.n101.n946.n949(pipe4.mediums[4].T);
//   Real pipe4.mediums[4].p_bar(quantity = \"Pressure\", unit = \"bar\") = n1.n101.n946.n993(pipe4.mediums[4].p);
//   Real pipe4.mediums[4].x_water(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real pipe4.mediums[4].phi;
//   protected Real n8133.n8256[4].n10105(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n8133.n8256[4].n10106(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n8133.n8256[4].n10107(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n8133.n8256[4].n10108(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n8133.n8256[4].n10109(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n8133.n8256[4].n10110(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe4.mediums[5].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = pipe4.ps_start[5], nominal = 100000.0, stateSelect = StateSelect.prefer);
//   Real pipe4.mediums[5].Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = pipe4.X_start[1], stateSelect = StateSelect.prefer);
//   Real pipe4.mediums[5].h(quantity = \"SpecificEnergy\", unit = \"J/kg\", start = pipe4.h_start);
//   Real pipe4.mediums[5].d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe4.mediums[5].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = pipe4.T_start, nominal = 300.0, stateSelect = StateSelect.prefer);
//   Real pipe4.mediums[5].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe4.mediums[5].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe4.mediums[5].u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real pipe4.mediums[5].R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real pipe4.mediums[5].MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real pipe4.mediums[5].state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe4.mediums[5].state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe4.mediums[5].state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe4.mediums[5].state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean pipe4.mediums[5].preferredMediumStates = true;
//   final parameter Boolean pipe4.mediums[5].standardOrderComponents = true;
//   Real pipe4.mediums[5].T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = n1.n101.n946.n949(pipe4.mediums[5].T);
//   Real pipe4.mediums[5].p_bar(quantity = \"Pressure\", unit = \"bar\") = n1.n101.n946.n993(pipe4.mediums[5].p);
//   Real pipe4.mediums[5].x_water(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real pipe4.mediums[5].phi;
//   protected Real n8133.n8256[5].n10105(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n8133.n8256[5].n10106(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n8133.n8256[5].n10107(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n8133.n8256[5].n10108(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n8133.n8256[5].n10109(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n8133.n8256[5].n10110(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe4.mb_flows[1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe4.mb_flows[2](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe4.mb_flows[3](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe4.mb_flows[4](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe4.mb_flows[5](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe4.mbXi_flows[1,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe4.mbXi_flows[2,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe4.mbXi_flows[3,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe4.mbXi_flows[4,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe4.mbXi_flows[5,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe4.Hb_flows[1](quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   Real pipe4.Hb_flows[2](quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   Real pipe4.Hb_flows[3](quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   Real pipe4.Hb_flows[4](quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   Real pipe4.Hb_flows[5](quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   Real pipe4.Qb_flows[1](quantity = \"Power\", unit = \"W\");
//   Real pipe4.Qb_flows[2](quantity = \"Power\", unit = \"W\");
//   Real pipe4.Qb_flows[3](quantity = \"Power\", unit = \"W\");
//   Real pipe4.Qb_flows[4](quantity = \"Power\", unit = \"W\");
//   Real pipe4.Qb_flows[5](quantity = \"Power\", unit = \"W\");
//   Real pipe4.Wb_flows[1](quantity = \"Power\", unit = \"W\");
//   Real pipe4.Wb_flows[2](quantity = \"Power\", unit = \"W\");
//   Real pipe4.Wb_flows[3](quantity = \"Power\", unit = \"W\");
//   Real pipe4.Wb_flows[4](quantity = \"Power\", unit = \"W\");
//   Real pipe4.Wb_flows[5](quantity = \"Power\", unit = \"W\");
//   protected final parameter Boolean n8133.n8082 = true;
//   final parameter Real pipe4.lengths[1](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter Real pipe4.lengths[2](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter Real pipe4.lengths[3](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter Real pipe4.lengths[4](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter Real pipe4.lengths[5](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter Real pipe4.crossAreas[1](quantity = \"Area\", unit = \"m2\") = pipe4.crossArea;
//   final parameter Real pipe4.crossAreas[2](quantity = \"Area\", unit = \"m2\") = pipe4.crossArea;
//   final parameter Real pipe4.crossAreas[3](quantity = \"Area\", unit = \"m2\") = pipe4.crossArea;
//   final parameter Real pipe4.crossAreas[4](quantity = \"Area\", unit = \"m2\") = pipe4.crossArea;
//   final parameter Real pipe4.crossAreas[5](quantity = \"Area\", unit = \"m2\") = pipe4.crossArea;
//   final parameter Real pipe4.dimensions[1](quantity = \"Length\", unit = \"m\") = 4.0 * pipe4.crossArea / pipe4.perimeter;
//   final parameter Real pipe4.dimensions[2](quantity = \"Length\", unit = \"m\") = 4.0 * pipe4.crossArea / pipe4.perimeter;
//   final parameter Real pipe4.dimensions[3](quantity = \"Length\", unit = \"m\") = 4.0 * pipe4.crossArea / pipe4.perimeter;
//   final parameter Real pipe4.dimensions[4](quantity = \"Length\", unit = \"m\") = 4.0 * pipe4.crossArea / pipe4.perimeter;
//   final parameter Real pipe4.dimensions[5](quantity = \"Length\", unit = \"m\") = 4.0 * pipe4.crossArea / pipe4.perimeter;
//   final parameter Real pipe4.roughnesses[1](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = pipe4.roughness;
//   final parameter Real pipe4.roughnesses[2](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = pipe4.roughness;
//   final parameter Real pipe4.roughnesses[3](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = pipe4.roughness;
//   final parameter Real pipe4.roughnesses[4](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = pipe4.roughness;
//   final parameter Real pipe4.roughnesses[5](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0) = pipe4.roughness;
//   final parameter Real pipe4.dheights[1](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter Real pipe4.dheights[2](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter Real pipe4.dheights[3](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter Real pipe4.dheights[4](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter Real pipe4.dheights[5](quantity = \"Length\", unit = \"m\") = 10.0;
//   final parameter enumeration(n8305, n7697, n7751, n117) pipe4.momentumDynamics = n1.n7656.n31.n7696.n7751;
//   final parameter Real pipe4.m_flow_start(quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0) = 0.02;
//   final parameter Integer pipe4.nNodes(min = 1) = 5;
//   final parameter enumeration(n8127, n7761, n8187, n8189) pipe4.modelStructure = n1.n7656.n31.n7760.n7761;
//   final parameter Boolean pipe4.useLumpedPressure = false;
//   final parameter Integer pipe4.nFM = 6;
//   final parameter Integer pipe4.nFMDistributed = 6;
//   final parameter Integer pipe4.nFMLumped = 2;
//   final parameter Integer pipe4.iLumped = 3;
//   final parameter Boolean pipe4.useInnerPortProperties = false;
//   Real pipe4.state_a.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe4.state_a.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe4.state_a.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe4.state_a.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe4.state_b.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe4.state_b.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe4.state_b.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe4.state_b.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe4.statesFM[1].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe4.statesFM[1].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe4.statesFM[1].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe4.statesFM[1].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe4.statesFM[2].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe4.statesFM[2].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe4.statesFM[2].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe4.statesFM[2].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe4.statesFM[3].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe4.statesFM[3].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe4.statesFM[3].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe4.statesFM[3].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe4.statesFM[4].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe4.statesFM[4].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe4.statesFM[4].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe4.statesFM[4].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe4.statesFM[5].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe4.statesFM[5].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe4.statesFM[5].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe4.statesFM[5].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe4.statesFM[6].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe4.statesFM[6].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe4.statesFM[6].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe4.statesFM[6].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real pipe4.statesFM[7].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real pipe4.statesFM[7].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real pipe4.statesFM[7].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real pipe4.statesFM[7].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean pipe4.flowModel.from_dp = true;
//   final parameter Integer pipe4.flowModel.n = 7;
//   final Real pipe4.flowModel.states[1].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe4.statesFM[1].p;
//   final Real pipe4.flowModel.states[1].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe4.statesFM[1].T;
//   final Real pipe4.flowModel.states[1].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe4.flowModel.states[1].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe4.flowModel.states[2].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe4.statesFM[2].p;
//   final Real pipe4.flowModel.states[2].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe4.statesFM[2].T;
//   final Real pipe4.flowModel.states[2].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe4.flowModel.states[2].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe4.flowModel.states[3].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe4.statesFM[3].p;
//   final Real pipe4.flowModel.states[3].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe4.statesFM[3].T;
//   final Real pipe4.flowModel.states[3].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe4.flowModel.states[3].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe4.flowModel.states[4].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe4.statesFM[4].p;
//   final Real pipe4.flowModel.states[4].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe4.statesFM[4].T;
//   final Real pipe4.flowModel.states[4].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe4.flowModel.states[4].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe4.flowModel.states[5].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe4.statesFM[5].p;
//   final Real pipe4.flowModel.states[5].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe4.statesFM[5].T;
//   final Real pipe4.flowModel.states[5].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe4.flowModel.states[5].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe4.flowModel.states[6].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe4.statesFM[6].p;
//   final Real pipe4.flowModel.states[6].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe4.statesFM[6].T;
//   final Real pipe4.flowModel.states[6].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe4.flowModel.states[6].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe4.flowModel.states[7].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe4.statesFM[7].p;
//   final Real pipe4.flowModel.states[7].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe4.statesFM[7].T;
//   final Real pipe4.flowModel.states[7].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe4.flowModel.states[7].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe4.flowModel.vs[1](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe4.flowModel.vs[2](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe4.flowModel.vs[3](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe4.flowModel.vs[4](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe4.flowModel.vs[5](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe4.flowModel.vs[6](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe4.flowModel.vs[7](quantity = \"Velocity\", unit = \"m/s\");
//   final parameter Real pipe4.flowModel.nParallel = pipe4.nParallel;
//   final Real pipe4.flowModel.crossAreas[1](quantity = \"Area\", unit = \"m2\");
//   final Real pipe4.flowModel.crossAreas[2](quantity = \"Area\", unit = \"m2\");
//   final Real pipe4.flowModel.crossAreas[3](quantity = \"Area\", unit = \"m2\");
//   final Real pipe4.flowModel.crossAreas[4](quantity = \"Area\", unit = \"m2\");
//   final Real pipe4.flowModel.crossAreas[5](quantity = \"Area\", unit = \"m2\");
//   final Real pipe4.flowModel.crossAreas[6](quantity = \"Area\", unit = \"m2\");
//   final Real pipe4.flowModel.crossAreas[7](quantity = \"Area\", unit = \"m2\");
//   final Real pipe4.flowModel.dimensions[1](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.flowModel.dimensions[2](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.flowModel.dimensions[3](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.flowModel.dimensions[4](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.flowModel.dimensions[5](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.flowModel.dimensions[6](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.flowModel.dimensions[7](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.flowModel.roughnesses[1](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe4.flowModel.roughnesses[2](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe4.flowModel.roughnesses[3](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe4.flowModel.roughnesses[4](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe4.flowModel.roughnesses[5](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe4.flowModel.roughnesses[6](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe4.flowModel.roughnesses[7](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe4.flowModel.dheights[1](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.flowModel.dheights[2](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.flowModel.dheights[3](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.flowModel.dheights[4](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.flowModel.dheights[5](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.flowModel.dheights[6](quantity = \"Length\", unit = \"m\");
//   final parameter Real pipe4.flowModel.g(quantity = \"Acceleration\", unit = \"m/s2\") = system.g;
//   final parameter Boolean pipe4.flowModel.allowFlowReversal = true;
//   final parameter enumeration(n8305, n7697, n7751, n117) pipe4.flowModel.momentumDynamics = n1.n7656.n31.n7696.n7751;
//   final parameter Real pipe4.flowModel.m_flow_start(quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0) = 0.02;
//   final parameter Real pipe4.flowModel.p_a_start(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe4.p_a_start;
//   final parameter Real pipe4.flowModel.p_b_start(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe4.p_b_start;
//   final parameter Integer pipe4.flowModel.m = 6;
//   final Real pipe4.flowModel.pathLengths[1](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.flowModel.pathLengths[2](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.flowModel.pathLengths[3](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.flowModel.pathLengths[4](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.flowModel.pathLengths[5](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.flowModel.pathLengths[6](quantity = \"Length\", unit = \"m\");
//   Real pipe4.flowModel.m_flows[1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.02, stateSelect = StateSelect.prefer);
//   Real pipe4.flowModel.m_flows[2](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.02, stateSelect = StateSelect.prefer);
//   Real pipe4.flowModel.m_flows[3](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.02, stateSelect = StateSelect.prefer);
//   Real pipe4.flowModel.m_flows[4](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.02, stateSelect = StateSelect.prefer);
//   Real pipe4.flowModel.m_flows[5](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.02, stateSelect = StateSelect.prefer);
//   Real pipe4.flowModel.m_flows[6](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.02, stateSelect = StateSelect.prefer);
//   Real pipe4.flowModel.Is[1](quantity = \"Momentum\", unit = \"kg.m/s\");
//   Real pipe4.flowModel.Is[2](quantity = \"Momentum\", unit = \"kg.m/s\");
//   Real pipe4.flowModel.Is[3](quantity = \"Momentum\", unit = \"kg.m/s\");
//   Real pipe4.flowModel.Is[4](quantity = \"Momentum\", unit = \"kg.m/s\");
//   Real pipe4.flowModel.Is[5](quantity = \"Momentum\", unit = \"kg.m/s\");
//   Real pipe4.flowModel.Is[6](quantity = \"Momentum\", unit = \"kg.m/s\");
//   Real pipe4.flowModel.Ib_flows[1](quantity = \"Force\", unit = \"N\");
//   Real pipe4.flowModel.Ib_flows[2](quantity = \"Force\", unit = \"N\");
//   Real pipe4.flowModel.Ib_flows[3](quantity = \"Force\", unit = \"N\");
//   Real pipe4.flowModel.Ib_flows[4](quantity = \"Force\", unit = \"N\");
//   Real pipe4.flowModel.Ib_flows[5](quantity = \"Force\", unit = \"N\");
//   Real pipe4.flowModel.Ib_flows[6](quantity = \"Force\", unit = \"N\");
//   Real pipe4.flowModel.Fs_p[1](quantity = \"Force\", unit = \"N\");
//   Real pipe4.flowModel.Fs_p[2](quantity = \"Force\", unit = \"N\");
//   Real pipe4.flowModel.Fs_p[3](quantity = \"Force\", unit = \"N\");
//   Real pipe4.flowModel.Fs_p[4](quantity = \"Force\", unit = \"N\");
//   Real pipe4.flowModel.Fs_p[5](quantity = \"Force\", unit = \"N\");
//   Real pipe4.flowModel.Fs_p[6](quantity = \"Force\", unit = \"N\");
//   Real pipe4.flowModel.Fs_fg[1](quantity = \"Force\", unit = \"N\");
//   Real pipe4.flowModel.Fs_fg[2](quantity = \"Force\", unit = \"N\");
//   Real pipe4.flowModel.Fs_fg[3](quantity = \"Force\", unit = \"N\");
//   Real pipe4.flowModel.Fs_fg[4](quantity = \"Force\", unit = \"N\");
//   Real pipe4.flowModel.Fs_fg[5](quantity = \"Force\", unit = \"N\");
//   Real pipe4.flowModel.Fs_fg[6](quantity = \"Force\", unit = \"N\");
//   final parameter Boolean pipe4.flowModel.useUpstreamScheme = true;
//   final parameter Boolean pipe4.flowModel.use_Ib_flows = true;
//   Real pipe4.flowModel.rhos[1](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe4.flowModel.rhos[2](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe4.flowModel.rhos[3](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe4.flowModel.rhos[4](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe4.flowModel.rhos[5](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe4.flowModel.rhos[6](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe4.flowModel.rhos[7](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe4.flowModel.rhos_act[1](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe4.flowModel.rhos_act[2](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe4.flowModel.rhos_act[3](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe4.flowModel.rhos_act[4](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe4.flowModel.rhos_act[5](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe4.flowModel.rhos_act[6](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real pipe4.flowModel.mus[1](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe4.flowModel.mus[2](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe4.flowModel.mus[3](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe4.flowModel.mus[4](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe4.flowModel.mus[5](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe4.flowModel.mus[6](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe4.flowModel.mus[7](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe4.flowModel.mus_act[1](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe4.flowModel.mus_act[2](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe4.flowModel.mus_act[3](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe4.flowModel.mus_act[4](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe4.flowModel.mus_act[5](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe4.flowModel.mus_act[6](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001);
//   Real pipe4.flowModel.dps_fg[1](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", start = (pipe4.flowModel.p_a_start - pipe4.flowModel.p_b_start) / 6.0);
//   Real pipe4.flowModel.dps_fg[2](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", start = (pipe4.flowModel.p_a_start - pipe4.flowModel.p_b_start) / 6.0);
//   Real pipe4.flowModel.dps_fg[3](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", start = (pipe4.flowModel.p_a_start - pipe4.flowModel.p_b_start) / 6.0);
//   Real pipe4.flowModel.dps_fg[4](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", start = (pipe4.flowModel.p_a_start - pipe4.flowModel.p_b_start) / 6.0);
//   Real pipe4.flowModel.dps_fg[5](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", start = (pipe4.flowModel.p_a_start - pipe4.flowModel.p_b_start) / 6.0);
//   Real pipe4.flowModel.dps_fg[6](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", start = (pipe4.flowModel.p_a_start - pipe4.flowModel.p_b_start) / 6.0);
//   final parameter Real pipe4.flowModel.Re_turbulent(quantity = \"ReynoldsNumber\", unit = \"1\") = 4000.0;
//   final parameter Boolean pipe4.flowModel.show_Res = false;
//   protected final parameter Boolean n8133.n8346.n8385 = false;
//   protected parameter Real n8133.n8346.n8135(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 1.196838693581092;
//   protected final parameter Boolean n8133.n8346.n8389 = false;
//   protected parameter Real n8133.n8346.n8390(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0) = 1.823286547365138e-05;
//   Real pipe4.flowModel.pathLengths_internal[1](quantity = \"Length\", unit = \"m\");
//   Real pipe4.flowModel.pathLengths_internal[2](quantity = \"Length\", unit = \"m\");
//   Real pipe4.flowModel.pathLengths_internal[3](quantity = \"Length\", unit = \"m\");
//   Real pipe4.flowModel.pathLengths_internal[4](quantity = \"Length\", unit = \"m\");
//   Real pipe4.flowModel.pathLengths_internal[5](quantity = \"Length\", unit = \"m\");
//   Real pipe4.flowModel.pathLengths_internal[6](quantity = \"Length\", unit = \"m\");
//   Real pipe4.flowModel.Res_turbulent_internal[1](quantity = \"ReynoldsNumber\", unit = \"1\");
//   Real pipe4.flowModel.Res_turbulent_internal[2](quantity = \"ReynoldsNumber\", unit = \"1\");
//   Real pipe4.flowModel.Res_turbulent_internal[3](quantity = \"ReynoldsNumber\", unit = \"1\");
//   Real pipe4.flowModel.Res_turbulent_internal[4](quantity = \"ReynoldsNumber\", unit = \"1\");
//   Real pipe4.flowModel.Res_turbulent_internal[5](quantity = \"ReynoldsNumber\", unit = \"1\");
//   Real pipe4.flowModel.Res_turbulent_internal[6](quantity = \"ReynoldsNumber\", unit = \"1\");
//   parameter Real pipe4.flowModel.dp_nominal(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = 1.0, fixed = false, nominal = 100000.0);
//   parameter Real pipe4.flowModel.m_flow_nominal(quantity = \"MassFlowRate\", unit = \"kg/s\") = 100.0 * pipe4.flowModel.m_flow_small;
//   parameter Real pipe4.flowModel.m_flow_small(quantity = \"MassFlowRate\", unit = \"kg/s\") = system.m_flow_small;
//   protected parameter Real n8133.n8346.n8308(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = 1.0, fixed = false, nominal = 100000.0);
//   protected final parameter Boolean n8133.n8346.n8407 = false;
//   protected final parameter Boolean n8133.n8346.n8409 = false;
//   protected Real n8133.n8346.n8410[1](quantity = \"Length\", unit = \"m\");
//   protected Real n8133.n8346.n8410[2](quantity = \"Length\", unit = \"m\");
//   protected Real n8133.n8346.n8410[3](quantity = \"Length\", unit = \"m\");
//   protected Real n8133.n8346.n8410[4](quantity = \"Length\", unit = \"m\");
//   protected Real n8133.n8346.n8410[5](quantity = \"Length\", unit = \"m\");
//   protected Real n8133.n8346.n8410[6](quantity = \"Length\", unit = \"m\");
//   protected Real n8133.n8346.n8411(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0) = n1.n7656.n102.n8149.n8133.n8346.n7663.n8412(pipe4.flowModel.m_flow_nominal / pipe4.flowModel.nParallel, n8133.n8346.n8135, n8133.n8346.n8135, n8133.n8346.n8390, n8133.n8346.n8390, pipe4.flowModel.pathLengths_internal[1], n8133.n8346.n8410[1], (pipe4.flowModel.crossAreas[1] + pipe4.flowModel.crossAreas[2]) / 2.0, (pipe4.flowModel.roughnesses[1] + pipe4.flowModel.roughnesses[2]) / 2.0, pipe4.flowModel.m_flow_small / pipe4.flowModel.nParallel, pipe4.flowModel.Res_turbulent_internal[1]) + n1.n7656.n102.n8149.n8133.n8346.n7663.n8412(pipe4.flowModel.m_flow_nominal / pipe4.flowModel.nParallel, n8133.n8346.n8135, n8133.n8346.n8135, n8133.n8346.n8390, n8133.n8346.n8390, pipe4.flowModel.pathLengths_internal[2], n8133.n8346.n8410[2], (pipe4.flowModel.crossAreas[2] + pipe4.flowModel.crossAreas[3]) / 2.0, (pipe4.flowModel.roughnesses[2] + pipe4.flowModel.roughnesses[3]) / 2.0, pipe4.flowModel.m_flow_small / pipe4.flowModel.nParallel, pipe4.flowModel.Res_turbulent_internal[2]) + n1.n7656.n102.n8149.n8133.n8346.n7663.n8412(pipe4.flowModel.m_flow_nominal / pipe4.flowModel.nParallel, n8133.n8346.n8135, n8133.n8346.n8135, n8133.n8346.n8390, n8133.n8346.n8390, pipe4.flowModel.pathLengths_internal[3], n8133.n8346.n8410[3], (pipe4.flowModel.crossAreas[3] + pipe4.flowModel.crossAreas[4]) / 2.0, (pipe4.flowModel.roughnesses[3] + pipe4.flowModel.roughnesses[4]) / 2.0, pipe4.flowModel.m_flow_small / pipe4.flowModel.nParallel, pipe4.flowModel.Res_turbulent_internal[3]) + n1.n7656.n102.n8149.n8133.n8346.n7663.n8412(pipe4.flowModel.m_flow_nominal / pipe4.flowModel.nParallel, n8133.n8346.n8135, n8133.n8346.n8135, n8133.n8346.n8390, n8133.n8346.n8390, pipe4.flowModel.pathLengths_internal[4], n8133.n8346.n8410[4], (pipe4.flowModel.crossAreas[4] + pipe4.flowModel.crossAreas[5]) / 2.0, (pipe4.flowModel.roughnesses[4] + pipe4.flowModel.roughnesses[5]) / 2.0, pipe4.flowModel.m_flow_small / pipe4.flowModel.nParallel, pipe4.flowModel.Res_turbulent_internal[4]) + n1.n7656.n102.n8149.n8133.n8346.n7663.n8412(pipe4.flowModel.m_flow_nominal / pipe4.flowModel.nParallel, n8133.n8346.n8135, n8133.n8346.n8135, n8133.n8346.n8390, n8133.n8346.n8390, pipe4.flowModel.pathLengths_internal[5], n8133.n8346.n8410[5], (pipe4.flowModel.crossAreas[5] + pipe4.flowModel.crossAreas[6]) / 2.0, (pipe4.flowModel.roughnesses[5] + pipe4.flowModel.roughnesses[6]) / 2.0, pipe4.flowModel.m_flow_small / pipe4.flowModel.nParallel, pipe4.flowModel.Res_turbulent_internal[5]) + n1.n7656.n102.n8149.n8133.n8346.n7663.n8412(pipe4.flowModel.m_flow_nominal / pipe4.flowModel.nParallel, n8133.n8346.n8135, n8133.n8346.n8135, n8133.n8346.n8390, n8133.n8346.n8390, pipe4.flowModel.pathLengths_internal[6], n8133.n8346.n8410[6], (pipe4.flowModel.crossAreas[6] + pipe4.flowModel.crossAreas[7]) / 2.0, (pipe4.flowModel.roughnesses[6] + pipe4.flowModel.roughnesses[7]) / 2.0, pipe4.flowModel.m_flow_small / pipe4.flowModel.nParallel, pipe4.flowModel.Res_turbulent_internal[6]);
//   Real pipe4.m_flows[1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.02);
//   Real pipe4.m_flows[2](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.02);
//   Real pipe4.m_flows[3](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.02);
//   Real pipe4.m_flows[4](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.02);
//   Real pipe4.m_flows[5](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.02);
//   Real pipe4.m_flows[6](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 100000.0, start = 0.02);
//   Real pipe4.mXi_flows[1,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe4.mXi_flows[2,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe4.mXi_flows[3,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe4.mXi_flows[4,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe4.mXi_flows[5,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe4.mXi_flows[6,1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0);
//   Real pipe4.H_flows[1](quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0);
//   Real pipe4.H_flows[2](quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0);
//   Real pipe4.H_flows[3](quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0);
//   Real pipe4.H_flows[4](quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0);
//   Real pipe4.H_flows[5](quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0);
//   Real pipe4.H_flows[6](quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0);
//   Real pipe4.vs[1](quantity = \"Velocity\", unit = \"m/s\");
//   Real pipe4.vs[2](quantity = \"Velocity\", unit = \"m/s\");
//   Real pipe4.vs[3](quantity = \"Velocity\", unit = \"m/s\");
//   Real pipe4.vs[4](quantity = \"Velocity\", unit = \"m/s\");
//   Real pipe4.vs[5](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real n8133.n8348[1](quantity = \"Length\", unit = \"m\");
//   protected Real n8133.n8348[2](quantity = \"Length\", unit = \"m\");
//   protected Real n8133.n8348[3](quantity = \"Length\", unit = \"m\");
//   protected Real n8133.n8348[4](quantity = \"Length\", unit = \"m\");
//   protected Real n8133.n8348[5](quantity = \"Length\", unit = \"m\");
//   protected Real n8133.n8348[6](quantity = \"Length\", unit = \"m\");
//   protected Real n8133.n8373[1](quantity = \"Length\", unit = \"m\");
//   protected Real n8133.n8373[2](quantity = \"Length\", unit = \"m\");
//   protected Real n8133.n8373[3](quantity = \"Length\", unit = \"m\");
//   protected Real n8133.n8373[4](quantity = \"Length\", unit = \"m\");
//   protected Real n8133.n8373[5](quantity = \"Length\", unit = \"m\");
//   protected Real n8133.n8373[6](quantity = \"Length\", unit = \"m\");
//   protected Real n8133.n8370[1](quantity = \"Area\", unit = \"m2\");
//   protected Real n8133.n8370[2](quantity = \"Area\", unit = \"m2\");
//   protected Real n8133.n8370[3](quantity = \"Area\", unit = \"m2\");
//   protected Real n8133.n8370[4](quantity = \"Area\", unit = \"m2\");
//   protected Real n8133.n8370[5](quantity = \"Area\", unit = \"m2\");
//   protected Real n8133.n8370[6](quantity = \"Area\", unit = \"m2\");
//   protected Real n8133.n8370[7](quantity = \"Area\", unit = \"m2\");
//   protected Real n8133.n8369[1](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real n8133.n8369[2](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real n8133.n8369[3](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real n8133.n8369[4](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real n8133.n8369[5](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real n8133.n8369[6](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real n8133.n8369[7](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real n8133.n8371[1](quantity = \"Length\", unit = \"m\");
//   protected Real n8133.n8371[2](quantity = \"Length\", unit = \"m\");
//   protected Real n8133.n8371[3](quantity = \"Length\", unit = \"m\");
//   protected Real n8133.n8371[4](quantity = \"Length\", unit = \"m\");
//   protected Real n8133.n8371[5](quantity = \"Length\", unit = \"m\");
//   protected Real n8133.n8371[6](quantity = \"Length\", unit = \"m\");
//   protected Real n8133.n8371[7](quantity = \"Length\", unit = \"m\");
//   protected Real n8133.n8372[1](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   protected Real n8133.n8372[2](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   protected Real n8133.n8372[3](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   protected Real n8133.n8372[4](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   protected Real n8133.n8372[5](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   protected Real n8133.n8372[6](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   protected Real n8133.n8372[7](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final parameter Boolean pipe4.use_HeatTransfer = false;
//   final parameter Integer pipe4.heatTransfer.n = 5;
//   final Real pipe4.heatTransfer.states[1].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe4.mediums[1].state.p;
//   final Real pipe4.heatTransfer.states[1].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe4.mediums[1].state.T;
//   final Real pipe4.heatTransfer.states[1].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe4.heatTransfer.states[1].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe4.heatTransfer.states[2].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe4.mediums[2].state.p;
//   final Real pipe4.heatTransfer.states[2].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe4.mediums[2].state.T;
//   final Real pipe4.heatTransfer.states[2].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe4.heatTransfer.states[2].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe4.heatTransfer.states[3].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe4.mediums[3].state.p;
//   final Real pipe4.heatTransfer.states[3].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe4.mediums[3].state.T;
//   final Real pipe4.heatTransfer.states[3].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe4.heatTransfer.states[3].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe4.heatTransfer.states[4].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe4.mediums[4].state.p;
//   final Real pipe4.heatTransfer.states[4].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe4.mediums[4].state.T;
//   final Real pipe4.heatTransfer.states[4].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe4.heatTransfer.states[4].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe4.heatTransfer.states[5].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = pipe4.mediums[5].state.p;
//   final Real pipe4.heatTransfer.states[5].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = pipe4.mediums[5].state.T;
//   final Real pipe4.heatTransfer.states[5].X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   final Real pipe4.heatTransfer.states[5].X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final Real pipe4.heatTransfer.surfaceAreas[1](quantity = \"Area\", unit = \"m2\");
//   final Real pipe4.heatTransfer.surfaceAreas[2](quantity = \"Area\", unit = \"m2\");
//   final Real pipe4.heatTransfer.surfaceAreas[3](quantity = \"Area\", unit = \"m2\");
//   final Real pipe4.heatTransfer.surfaceAreas[4](quantity = \"Area\", unit = \"m2\");
//   final Real pipe4.heatTransfer.surfaceAreas[5](quantity = \"Area\", unit = \"m2\");
//   Real pipe4.heatTransfer.Q_flows[1](quantity = \"Power\", unit = \"W\");
//   Real pipe4.heatTransfer.Q_flows[2](quantity = \"Power\", unit = \"W\");
//   Real pipe4.heatTransfer.Q_flows[3](quantity = \"Power\", unit = \"W\");
//   Real pipe4.heatTransfer.Q_flows[4](quantity = \"Power\", unit = \"W\");
//   Real pipe4.heatTransfer.Q_flows[5](quantity = \"Power\", unit = \"W\");
//   final parameter Boolean pipe4.heatTransfer.use_k = false;
//   final parameter Real pipe4.heatTransfer.k(quantity = \"CoefficientOfHeatTransfer\", unit = \"W/(m2.K)\") = 0.0;
//   parameter Real pipe4.heatTransfer.T_ambient(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = system.T_ambient;
//   Real pipe4.heatTransfer.heatPorts[1].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe4.heatTransfer.heatPorts[1].Q_flow(quantity = \"Power\", unit = \"W\");
//   Real pipe4.heatTransfer.heatPorts[2].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe4.heatTransfer.heatPorts[2].Q_flow(quantity = \"Power\", unit = \"W\");
//   Real pipe4.heatTransfer.heatPorts[3].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe4.heatTransfer.heatPorts[3].Q_flow(quantity = \"Power\", unit = \"W\");
//   Real pipe4.heatTransfer.heatPorts[4].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe4.heatTransfer.heatPorts[4].Q_flow(quantity = \"Power\", unit = \"W\");
//   Real pipe4.heatTransfer.heatPorts[5].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe4.heatTransfer.heatPorts[5].Q_flow(quantity = \"Power\", unit = \"W\");
//   Real pipe4.heatTransfer.Ts[1](quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe4.heatTransfer.Ts[2](quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe4.heatTransfer.Ts[3](quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe4.heatTransfer.Ts[4](quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real pipe4.heatTransfer.Ts[5](quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   final Real pipe4.heatTransfer.vs[1](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe4.heatTransfer.vs[2](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe4.heatTransfer.vs[3](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe4.heatTransfer.vs[4](quantity = \"Velocity\", unit = \"m/s\");
//   final Real pipe4.heatTransfer.vs[5](quantity = \"Velocity\", unit = \"m/s\");
//   final parameter Real pipe4.heatTransfer.nParallel = pipe4.nParallel;
//   final Real pipe4.heatTransfer.lengths[1](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.heatTransfer.lengths[2](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.heatTransfer.lengths[3](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.heatTransfer.lengths[4](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.heatTransfer.lengths[5](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.heatTransfer.dimensions[1](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.heatTransfer.dimensions[2](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.heatTransfer.dimensions[3](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.heatTransfer.dimensions[4](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.heatTransfer.dimensions[5](quantity = \"Length\", unit = \"m\");
//   final Real pipe4.heatTransfer.roughnesses[1](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe4.heatTransfer.roughnesses[2](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe4.heatTransfer.roughnesses[3](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe4.heatTransfer.roughnesses[4](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final Real pipe4.heatTransfer.roughnesses[5](quantity = \"Length\", unit = \"m\", displayUnit = \"mm\", min = 0.0);
//   final parameter Real pipe4.dxs[1] = 0.2;
//   final parameter Real pipe4.dxs[2] = 0.2;
//   final parameter Real pipe4.dxs[3] = 0.2;
//   final parameter Real pipe4.dxs[4] = 0.2;
//   final parameter Real pipe4.dxs[5] = 0.2;
//   final parameter Integer boundary4.nPorts = 1;
//   Real boundary4.medium.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0, stateSelect = StateSelect.default);
//   Real boundary4.medium.Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = 0.01, stateSelect = StateSelect.default);
//   Real boundary4.medium.h(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   Real boundary4.medium.d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real boundary4.medium.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0, stateSelect = StateSelect.default);
//   Real boundary4.medium.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real boundary4.medium.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   Real boundary4.medium.u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real boundary4.medium.R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real boundary4.medium.MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real boundary4.medium.state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real boundary4.medium.state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0);
//   Real boundary4.medium.state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real boundary4.medium.state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.99, nominal = 0.1);
//   final parameter Boolean boundary4.medium.preferredMediumStates = false;
//   final parameter Boolean boundary4.medium.standardOrderComponents = true;
//   Real boundary4.medium.T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = n1.n101.n946.n949(boundary4.medium.T);
//   Real boundary4.medium.p_bar(quantity = \"Pressure\", unit = \"bar\") = n1.n101.n946.n993(boundary4.medium.p);
//   Real boundary4.medium.x_water(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real boundary4.medium.phi;
//   protected Real n8155.n7931.n10105(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n8155.n7931.n10106(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n8155.n7931.n10107(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n8155.n7931.n10108(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n8155.n7931.n10109(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real n8155.n7931.n10110(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real boundary4.ports[1].m_flow(quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -9.999999999999999e+59, max = 9.999999999999999e+59);
//   Real boundary4.ports[1].p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real boundary4.ports[1].h_outflow(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0);
//   Real boundary4.ports[1].Xi_outflow[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected final parameter enumeration(n8710, n8711, n8714) n8155.n8745 = n1.n7656.n31.n8708.n8714;
//   final parameter Boolean boundary4.use_p_in = true;
//   final parameter Boolean boundary4.use_T_in = false;
//   final parameter Boolean boundary4.use_X_in = false;
//   final parameter Boolean boundary4.use_C_in = false;
//   parameter Real boundary4.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = 100000.0;
//   parameter Real boundary4.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 190.0, max = 647.0, start = 288.15, nominal = 300.0) = 293.15;
//   parameter Real boundary4.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = 0.01;
//   parameter Real boundary4.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = 0.99;
//   Real boundary4.p_in;
//   protected Real n8155.n8735;
//   protected Real n8155.n8736;
//   protected Real n8155.n8737[1];
//   protected Real n8155.n8737[2];
//   parameter Real ramp1.height = 100000.0;
//   parameter Real ramp1.duration(quantity = \"Time\", unit = \"s\", min = 0.0, start = 2.0) = 0.0;
//   Real ramp1.y;
//   parameter Real ramp1.offset = 100000.0;
//   parameter Real ramp1.startTime(quantity = \"Time\", unit = \"s\") = 2.0;
//   parameter Real heat2[1].Q_flow(quantity = \"Power\", unit = \"W\") = 40.0;
//   parameter Real heat2[1].T_ref(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 293.15;
//   parameter Real heat2[1].alpha(quantity = \"LinearTemperatureCoefficient\", unit = \"1/K\") = -0.01;
//   Real heat2[1].port.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real heat2[1].port.Q_flow(quantity = \"Power\", unit = \"W\");
//   parameter Real heat2[2].Q_flow(quantity = \"Power\", unit = \"W\") = 40.0;
//   parameter Real heat2[2].T_ref(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 293.15;
//   parameter Real heat2[2].alpha(quantity = \"LinearTemperatureCoefficient\", unit = \"1/K\") = -0.01;
//   Real heat2[2].port.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real heat2[2].port.Q_flow(quantity = \"Power\", unit = \"W\");
//   parameter Real heat2[3].Q_flow(quantity = \"Power\", unit = \"W\") = 40.0;
//   parameter Real heat2[3].T_ref(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 293.15;
//   parameter Real heat2[3].alpha(quantity = \"LinearTemperatureCoefficient\", unit = \"1/K\") = -0.01;
//   Real heat2[3].port.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real heat2[3].port.Q_flow(quantity = \"Power\", unit = \"W\");
//   parameter Real heat2[4].Q_flow(quantity = \"Power\", unit = \"W\") = 40.0;
//   parameter Real heat2[4].T_ref(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 293.15;
//   parameter Real heat2[4].alpha(quantity = \"LinearTemperatureCoefficient\", unit = \"1/K\") = -0.01;
//   Real heat2[4].port.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real heat2[4].port.Q_flow(quantity = \"Power\", unit = \"W\");
//   parameter Real heat2[5].Q_flow(quantity = \"Power\", unit = \"W\") = 40.0;
//   parameter Real heat2[5].T_ref(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 293.15;
//   parameter Real heat2[5].alpha(quantity = \"LinearTemperatureCoefficient\", unit = \"1/K\") = -0.01;
//   Real heat2[5].port.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real heat2[5].port.Q_flow(quantity = \"Power\", unit = \"W\");
// initial equation
//   pipe1.flowModel.dp_nominal = 1000.0 * n7835.n8346.n8308;
//   n7835.n8346.n8308 = system.dp_small;
//   der(pipe1.flowModel.m_flows[1]) = 0.0;
//   der(pipe1.flowModel.m_flows[2]) = 0.0;
//   der(pipe1.flowModel.m_flows[3]) = 0.0;
//   der(pipe1.flowModel.m_flows[4]) = 0.0;
//   der(pipe1.flowModel.m_flows[5]) = 0.0;
//   der(pipe1.flowModel.m_flows[6]) = 0.0;
//   der(pipe1.mediums[1].T) = 0.0;
//   der(pipe1.mediums[2].T) = 0.0;
//   der(pipe1.mediums[3].T) = 0.0;
//   der(pipe1.mediums[4].T) = 0.0;
//   der(pipe1.mediums[5].T) = 0.0;
//   der(pipe1.mediums[1].p) = 0.0;
//   der(pipe1.mediums[2].p) = 0.0;
//   der(pipe1.mediums[3].p) = 0.0;
//   der(pipe1.mediums[4].p) = 0.0;
//   der(pipe1.mediums[5].p) = 0.0;
//   der(pipe1.mediums[1].Xi[1]) = 0.0;
//   der(pipe1.mediums[2].Xi[1]) = 0.0;
//   der(pipe1.mediums[3].Xi[1]) = 0.0;
//   der(pipe1.mediums[4].Xi[1]) = 0.0;
//   der(pipe1.mediums[5].Xi[1]) = 0.0;
//   pipe2.flowModel.dp_nominal = 1000.0 * n7836.n8346.n8308;
//   n7836.n8346.n8308 = system.dp_small;
//   der(pipe2.flowModel.m_flows[1]) = 0.0;
//   der(pipe2.flowModel.m_flows[2]) = 0.0;
//   der(pipe2.flowModel.m_flows[3]) = 0.0;
//   der(pipe2.flowModel.m_flows[4]) = 0.0;
//   der(pipe2.mediums[1].T) = 0.0;
//   der(pipe2.mediums[2].T) = 0.0;
//   der(pipe2.mediums[3].T) = 0.0;
//   der(pipe2.mediums[4].T) = 0.0;
//   der(pipe2.mediums[5].T) = 0.0;
//   der(pipe2.mediums[1].p) = 0.0;
//   der(pipe2.mediums[2].p) = 0.0;
//   der(pipe2.mediums[3].p) = 0.0;
//   der(pipe2.mediums[4].p) = 0.0;
//   der(pipe2.mediums[5].p) = 0.0;
//   der(pipe2.mediums[1].Xi[1]) = 0.0;
//   der(pipe2.mediums[2].Xi[1]) = 0.0;
//   der(pipe2.mediums[3].Xi[1]) = 0.0;
//   der(pipe2.mediums[4].Xi[1]) = 0.0;
//   der(pipe2.mediums[5].Xi[1]) = 0.0;
//   pipe3.flowModel.dp_nominal = 1000.0 * n7837.n8346.n8308;
//   n7837.n8346.n8308 = system.dp_small;
//   der(pipe3.flowModel.m_flows[1]) = 0.0;
//   der(pipe3.flowModel.m_flows[2]) = 0.0;
//   der(pipe3.flowModel.m_flows[3]) = 0.0;
//   der(pipe3.flowModel.m_flows[4]) = 0.0;
//   der(pipe3.flowModel.m_flows[5]) = 0.0;
//   der(pipe3.flowModel.m_flows[6]) = 0.0;
//   der(pipe3.mediums[1].T) = 0.0;
//   der(pipe3.mediums[2].T) = 0.0;
//   der(pipe3.mediums[3].T) = 0.0;
//   der(pipe3.mediums[4].T) = 0.0;
//   der(pipe3.mediums[5].T) = 0.0;
//   der(pipe3.mediums[1].p) = 0.0;
//   der(pipe3.mediums[2].p) = 0.0;
//   der(pipe3.mediums[3].p) = 0.0;
//   der(pipe3.mediums[4].p) = 0.0;
//   der(pipe3.mediums[5].p) = 0.0;
//   der(pipe3.mediums[1].Xi[1]) = 0.0;
//   der(pipe3.mediums[2].Xi[1]) = 0.0;
//   der(pipe3.mediums[3].Xi[1]) = 0.0;
//   der(pipe3.mediums[4].Xi[1]) = 0.0;
//   der(pipe3.mediums[5].Xi[1]) = 0.0;
//   pipe4.flowModel.dp_nominal = 1000.0 * n8133.n8346.n8308;
//   n8133.n8346.n8308 = system.dp_small;
//   der(pipe4.flowModel.m_flows[1]) = 0.0;
//   der(pipe4.flowModel.m_flows[2]) = 0.0;
//   der(pipe4.flowModel.m_flows[3]) = 0.0;
//   der(pipe4.flowModel.m_flows[4]) = 0.0;
//   der(pipe4.flowModel.m_flows[5]) = 0.0;
//   der(pipe4.flowModel.m_flows[6]) = 0.0;
//   der(pipe4.mediums[1].T) = 0.0;
//   der(pipe4.mediums[2].T) = 0.0;
//   der(pipe4.mediums[3].T) = 0.0;
//   der(pipe4.mediums[4].T) = 0.0;
//   der(pipe4.mediums[5].T) = 0.0;
//   der(pipe4.mediums[1].p) = 0.0;
//   der(pipe4.mediums[2].p) = 0.0;
//   der(pipe4.mediums[3].p) = 0.0;
//   der(pipe4.mediums[4].p) = 0.0;
//   der(pipe4.mediums[5].p) = 0.0;
//   der(pipe4.mediums[1].Xi[1]) = 0.0;
//   der(pipe4.mediums[2].Xi[1]) = 0.0;
//   der(pipe4.mediums[3].Xi[1]) = 0.0;
//   der(pipe4.mediums[4].Xi[1]) = 0.0;
//   der(pipe4.mediums[5].Xi[1]) = 0.0;
// equation
//   pipe2.heatPorts[1].T = pipe2.heatTransfer.heatPorts[1].T;
//   pipe2.heatTransfer.heatPorts[1].Q_flow - pipe2.heatPorts[1].Q_flow = 0.0;
//   pipe2.heatPorts[2].T = pipe2.heatTransfer.heatPorts[2].T;
//   pipe2.heatTransfer.heatPorts[2].Q_flow - pipe2.heatPorts[2].Q_flow = 0.0;
//   pipe2.heatPorts[3].T = pipe2.heatTransfer.heatPorts[3].T;
//   pipe2.heatTransfer.heatPorts[3].Q_flow - pipe2.heatPorts[3].Q_flow = 0.0;
//   pipe2.heatPorts[4].T = pipe2.heatTransfer.heatPorts[4].T;
//   pipe2.heatTransfer.heatPorts[4].Q_flow - pipe2.heatPorts[4].Q_flow = 0.0;
//   pipe2.heatPorts[5].T = pipe2.heatTransfer.heatPorts[5].T;
//   pipe2.heatTransfer.heatPorts[5].Q_flow - pipe2.heatPorts[5].Q_flow = 0.0;
//   boundary4.p_in = n8155.n8735;
//   ramp1.y = boundary4.p_in;
//   boundary1.ports[1].p = pipe1.port_a.p;
//   pipe1.port_b.p = pipe3.port_a.p;
//   pipe1.port_b.p = pipe2.port_a.p;
//   pipe3.port_b.p = pipe4.port_a.p;
//   pipe3.port_b.p = pipe2.port_b.p;
//   pipe4.port_b.p = boundary4.ports[1].p;
//   heat2[1].port.T = pipe2.heatPorts[1].T;
//   heat2[2].port.T = pipe2.heatPorts[2].T;
//   heat2[3].port.T = pipe2.heatPorts[3].T;
//   heat2[4].port.T = pipe2.heatPorts[4].T;
//   heat2[5].port.T = pipe2.heatPorts[5].T;
//   pipe1.port_a.m_flow + boundary1.ports[1].m_flow = 0.0;
//   pipe1.heatTransfer.heatPorts[1].Q_flow = 0.0;
//   pipe1.heatTransfer.heatPorts[2].Q_flow = 0.0;
//   pipe1.heatTransfer.heatPorts[3].Q_flow = 0.0;
//   pipe1.heatTransfer.heatPorts[4].Q_flow = 0.0;
//   pipe1.heatTransfer.heatPorts[5].Q_flow = 0.0;
//   pipe3.port_a.m_flow + pipe2.port_a.m_flow + pipe1.port_b.m_flow = 0.0;
//   pipe4.port_a.m_flow + pipe3.port_b.m_flow + pipe2.port_b.m_flow = 0.0;
//   pipe3.heatTransfer.heatPorts[1].Q_flow = 0.0;
//   pipe3.heatTransfer.heatPorts[2].Q_flow = 0.0;
//   pipe3.heatTransfer.heatPorts[3].Q_flow = 0.0;
//   pipe3.heatTransfer.heatPorts[4].Q_flow = 0.0;
//   pipe3.heatTransfer.heatPorts[5].Q_flow = 0.0;
//   boundary4.ports[1].m_flow + pipe4.port_b.m_flow = 0.0;
//   pipe4.heatTransfer.heatPorts[1].Q_flow = 0.0;
//   pipe4.heatTransfer.heatPorts[2].Q_flow = 0.0;
//   pipe4.heatTransfer.heatPorts[3].Q_flow = 0.0;
//   pipe4.heatTransfer.heatPorts[4].Q_flow = 0.0;
//   pipe4.heatTransfer.heatPorts[5].Q_flow = 0.0;
//   heat2[1].port.Q_flow + pipe2.heatPorts[1].Q_flow = 0.0;
//   heat2[2].port.Q_flow + pipe2.heatPorts[2].Q_flow = 0.0;
//   heat2[3].port.Q_flow + pipe2.heatPorts[3].Q_flow = 0.0;
//   heat2[4].port.Q_flow + pipe2.heatPorts[4].Q_flow = 0.0;
//   heat2[5].port.Q_flow + pipe2.heatPorts[5].Q_flow = 0.0;
//   assert(boundary1.medium.T >= 190.0 and boundary1.medium.T <= 647.0, \"assert message 315810245365667762\");
//   boundary1.medium.MM = 1.0 / (boundary1.medium.Xi[1] / 0.01801528 + (1.0 - boundary1.medium.Xi[1]) / 0.0289651159);
//   n8153.n7931.n10110 = min(n1.n7656.n102.n8149.n8153.n7670.n8562(boundary1.medium.T), 0.999 * boundary1.medium.p);
//   n8153.n7931.n10108 = min(n8153.n7931.n10110 * 0.6219647130774989 / max(1e-13, boundary1.medium.p - n8153.n7931.n10110) * (1.0 - boundary1.medium.Xi[1]), 1.0);
//   n8153.n7931.n10105 = max(boundary1.medium.Xi[1] - n8153.n7931.n10108, 0.0);
//   n8153.n7931.n10106 = boundary1.medium.Xi[1] - n8153.n7931.n10105;
//   n8153.n7931.n10107 = 1.0 - boundary1.medium.Xi[1];
//   boundary1.medium.h = n1.n7656.n102.n8149.n8153.n7670.n7957(boundary1.medium.p, boundary1.medium.T, boundary1.medium.Xi);
//   boundary1.medium.R = 287.0512249529787 * n8153.n7931.n10107 / (1.0 - n8153.n7931.n10105) + 461.5233290850878 * n8153.n7931.n10106 / (1.0 - n8153.n7931.n10105);
//   boundary1.medium.u = boundary1.medium.h - boundary1.medium.R * boundary1.medium.T;
//   boundary1.medium.d = boundary1.medium.p / (boundary1.medium.R * boundary1.medium.T);
//   boundary1.medium.state.p = boundary1.medium.p;
//   boundary1.medium.state.T = boundary1.medium.T;
//   boundary1.medium.state.X[1] = boundary1.medium.X[1];
//   boundary1.medium.state.X[2] = boundary1.medium.X[2];
//   n8153.n7931.n10109 = 0.6219647130774989 * n8153.n7931.n10110 / max(1e-13, boundary1.medium.p - n8153.n7931.n10110);
//   boundary1.medium.x_water = boundary1.medium.Xi[1] / max(n8153.n7931.n10107, 1e-13);
//   boundary1.medium.phi = boundary1.medium.p / n8153.n7931.n10110 * boundary1.medium.Xi[1] / (boundary1.medium.Xi[1] + 0.6219647130774989 * n8153.n7931.n10107);
//   boundary1.medium.Xi[1] = boundary1.medium.X[1];
//   boundary1.medium.X[2] = 1.0 - boundary1.medium.Xi[1];
//   assert(boundary1.medium.X[1] >= -1e-05 and boundary1.medium.X[1] <= 1.00001, \"assert message 1370699107527140891\");
//   assert(boundary1.medium.X[2] >= -1e-05 and boundary1.medium.X[2] <= 1.00001, \"assert message 1370699107527140891\");
//   assert(boundary1.medium.p >= 0.0, \"assert message 2590312994638120201\");
//   n1.n7656.n11.n8727(\"Moist air\", {\"water\", \"air\"}, false, true, n8153.n8737, \"Boundary_pT\");
//   n8153.n8735 = boundary1.p;
//   n8153.n8736 = boundary1.T;
//   n8153.n8737[1] = boundary1.X[1];
//   n8153.n8737[2] = boundary1.X[2];
//   boundary1.medium.p = n8153.n8735;
//   boundary1.medium.T = n8153.n8736;
//   boundary1.medium.Xi[1] = n8153.n8737[1];
//   boundary1.ports[1].p = boundary1.medium.p;
//   boundary1.ports[1].h_outflow = boundary1.medium.h;
//   boundary1.ports[1].Xi_outflow[1] = boundary1.medium.Xi[1];
//   pipe1.fluidVolumes = array(pipe1.crossAreas[i] * {10.0, 10.0, 10.0, 10.0, 10.0}[i] for n49 in 1:5) * pipe1.nParallel;
//   assert(pipe1.mediums[1].T >= 190.0 and pipe1.mediums[1].T <= 647.0, \"assert message 315810245365667762\");
//   pipe1.mediums[1].MM = 1.0 / (pipe1.mediums[1].Xi[1] / 0.01801528 + (1.0 - pipe1.mediums[1].Xi[1]) / 0.0289651159);
//   n7835.n8256[1].n10110 = min(n1.n7656.n102.n8149.n7835.n7670.n8562(pipe1.mediums[1].T), 0.999 * pipe1.mediums[1].p);
//   n7835.n8256[1].n10108 = min(n7835.n8256[1].n10110 * 0.6219647130774989 / max(1e-13, pipe1.mediums[1].p - n7835.n8256[1].n10110) * (1.0 - pipe1.mediums[1].Xi[1]), 1.0);
//   n7835.n8256[1].n10105 = max(pipe1.mediums[1].Xi[1] - n7835.n8256[1].n10108, 0.0);
//   n7835.n8256[1].n10106 = pipe1.mediums[1].Xi[1] - n7835.n8256[1].n10105;
//   n7835.n8256[1].n10107 = 1.0 - pipe1.mediums[1].Xi[1];
//   pipe1.mediums[1].h = n1.n7656.n102.n8149.n7835.n7670.n7957(pipe1.mediums[1].p, pipe1.mediums[1].T, pipe1.mediums[1].Xi);
//   pipe1.mediums[1].R = 287.0512249529787 * n7835.n8256[1].n10107 / (1.0 - n7835.n8256[1].n10105) + 461.5233290850878 * n7835.n8256[1].n10106 / (1.0 - n7835.n8256[1].n10105);
//   pipe1.mediums[1].u = pipe1.mediums[1].h - pipe1.mediums[1].R * pipe1.mediums[1].T;
//   pipe1.mediums[1].d = pipe1.mediums[1].p / (pipe1.mediums[1].R * pipe1.mediums[1].T);
//   pipe1.mediums[1].state.p = pipe1.mediums[1].p;
//   pipe1.mediums[1].state.T = pipe1.mediums[1].T;
//   pipe1.mediums[1].state.X[1] = pipe1.mediums[1].X[1];
//   pipe1.mediums[1].state.X[2] = pipe1.mediums[1].X[2];
//   n7835.n8256[1].n10109 = 0.6219647130774989 * n7835.n8256[1].n10110 / max(1e-13, pipe1.mediums[1].p - n7835.n8256[1].n10110);
//   pipe1.mediums[1].x_water = pipe1.mediums[1].Xi[1] / max(n7835.n8256[1].n10107, 1e-13);
//   pipe1.mediums[1].phi = pipe1.mediums[1].p / n7835.n8256[1].n10110 * pipe1.mediums[1].Xi[1] / (pipe1.mediums[1].Xi[1] + 0.6219647130774989 * n7835.n8256[1].n10107);
//   pipe1.mediums[1].Xi[1] = pipe1.mediums[1].X[1];
//   pipe1.mediums[1].X[2] = 1.0 - pipe1.mediums[1].Xi[1];
//   assert(pipe1.mediums[1].X[1] >= -1e-05 and pipe1.mediums[1].X[1] <= 1.00001, \"assert message 1370699107527140891\");
//   assert(pipe1.mediums[1].X[2] >= -1e-05 and pipe1.mediums[1].X[2] <= 1.00001, \"assert message 1370699107527140891\");
//   assert(pipe1.mediums[1].p >= 0.0, \"assert message 2590312994638120201\");
//   assert(pipe1.mediums[2].T >= 190.0 and pipe1.mediums[2].T <= 647.0, \"assert message 315810245365667762\");
//   pipe1.mediums[2].MM = 1.0 / (pipe1.mediums[2].Xi[1] / 0.01801528 + (1.0 - pipe1.mediums[2].Xi[1]) / 0.0289651159);
//   n7835.n8256[2].n10110 = min(n1.n7656.n102.n8149.n7835.n7670.n8562(pipe1.mediums[2].T), 0.999 * pipe1.mediums[2].p);
//   n7835.n8256[2].n10108 = min(n7835.n8256[2].n10110 * 0.6219647130774989 / max(1e-13, pipe1.mediums[2].p - n7835.n8256[2].n10110) * (1.0 - pipe1.mediums[2].Xi[1]), 1.0);
//   n7835.n8256[2].n10105 = max(pipe1.mediums[2].Xi[1] - n7835.n8256[2].n10108, 0.0);
//   n7835.n8256[2].n10106 = pipe1.mediums[2].Xi[1] - n7835.n8256[2].n10105;
//   n7835.n8256[2].n10107 = 1.0 - pipe1.mediums[2].Xi[1];
//   pipe1.mediums[2].h = n1.n7656.n102.n8149.n7835.n7670.n7957(pipe1.mediums[2].p, pipe1.mediums[2].T, pipe1.mediums[2].Xi);
//   pipe1.mediums[2].R = 287.0512249529787 * n7835.n8256[2].n10107 / (1.0 - n7835.n8256[2].n10105) + 461.5233290850878 * n7835.n8256[2].n10106 / (1.0 - n7835.n8256[2].n10105);
//   pipe1.mediums[2].u = pipe1.mediums[2].h - pipe1.mediums[2].R * pipe1.mediums[2].T;
//   pipe1.mediums[2].d = pipe1.mediums[2].p / (pipe1.mediums[2].R * pipe1.mediums[2].T);
//   pipe1.mediums[2].state.p = pipe1.mediums[2].p;
//   pipe1.mediums[2].state.T = pipe1.mediums[2].T;
//   pipe1.mediums[2].state.X[1] = pipe1.mediums[2].X[1];
//   pipe1.mediums[2].state.X[2] = pipe1.mediums[2].X[2];
//   n7835.n8256[2].n10109 = 0.6219647130774989 * n7835.n8256[2].n10110 / max(1e-13, pipe1.mediums[2].p - n7835.n8256[2].n10110);
//   pipe1.mediums[2].x_water = pipe1.mediums[2].Xi[1] / max(n7835.n8256[2].n10107, 1e-13);
//   pipe1.mediums[2].phi = pipe1.mediums[2].p / n7835.n8256[2].n10110 * pipe1.mediums[2].Xi[1] / (pipe1.mediums[2].Xi[1] + 0.6219647130774989 * n7835.n8256[2].n10107);
//   pipe1.mediums[2].Xi[1] = pipe1.mediums[2].X[1];
//   pipe1.mediums[2].X[2] = 1.0 - pipe1.mediums[2].Xi[1];
//   assert(pipe1.mediums[2].X[1] >= -1e-05 and pipe1.mediums[2].X[1] <= 1.00001, \"assert message 1370699107527140891\");
//   assert(pipe1.mediums[2].X[2] >= -1e-05 and pipe1.mediums[2].X[2] <= 1.00001, \"assert message 1370699107527140891\");
//   assert(pipe1.mediums[2].p >= 0.0, \"assert message 2590312994638120201\");
//   assert(pipe1.mediums[3].T >= 190.0 and pipe1.mediums[3].T <= 647.0, \"assert message 315810245365667762\");
//   pipe1.mediums[3].MM = 1.0 / (pipe1.mediums[3].Xi[1] / 0.01801528 + (1.0 - pipe1.mediums[3].Xi[1]) / 0.0289651159);
//   n7835.n8256[3].n10110 = min(n1.n7656.n102.n8149.n7835.n7670.n8562(pipe1.mediums[3].T), 0.999 * pipe1.mediums[3].p);
//   n7835.n8256[3].n10108 = min(n7835.n8256[3].n10110 * 0.6219647130774989 / max(1e-13, pipe1.mediums[3].p - n7835.n8256[3].n10110) * (1.0 - pipe1.mediums[3].Xi[1]), 1.0);
//   n7835.n8256[3].n10105 = max(pipe1.mediums[3].Xi[1] - n7835.n8256[3].n10108, 0.0);
//   n7835.n8256[3].n10106 = pipe1.mediums[3].Xi[1] - n7835.n8256[3].n10105;
//   n7835.n8256[3].n10107 = 1.0 - pipe1.mediums[3].Xi[1];
//   pipe1.mediums[3].h = n1.n7656.n102.n8149.n7835.n7670.n7957(pipe1.mediums[3].p, pipe1.mediums[3].T, pipe1.mediums[3].Xi);
//   pipe1.mediums[3].R = 287.0512249529787 * n7835.n8256[3].n10107 / (1.0 - n7835.n8256[3].n10105) + 461.5233290850878 * n7835.n8256[3].n10106 / (1.0 - n7835.n8256[3].n10105);
//   pipe1.mediums[3].u = pipe1.mediums[3].h - pipe1.mediums[3].R * pipe1.mediums[3].T;
//   pipe1.mediums[3].d = pipe1.mediums[3].p / (pipe1.mediums[3].R * pipe1.mediums[3].T);
//   pipe1.mediums[3].state.p = pipe1.mediums[3].p;
//   pipe1.mediums[3].state.T = pipe1.mediums[3].T;
//   pipe1.mediums[3].state.X[1] = pipe1.mediums[3].X[1];
//   pipe1.mediums[3].state.X[2] = pipe1.mediums[3].X[2];
//   n7835.n8256[3].n10109 = 0.6219647130774989 * n7835.n8256[3].n10110 / max(1e-13, pipe1.mediums[3].p - n7835.n8256[3].n10110);
//   pipe1.mediums[3].x_water = pipe1.mediums[3].Xi[1] / max(n7835.n8256[3].n10107, 1e-13);
//   pipe1.mediums[3].phi = pipe1.mediums[3].p / n7835.n8256[3].n10110 * pipe1.mediums[3].Xi[1] / (pipe1.mediums[3].Xi[1] + 0.6219647130774989 * n7835.n8256[3].n10107);
//   pipe1.mediums[3].Xi[1] = pipe1.mediums[3].X[1];
//   pipe1.mediums[3].X[2] = 1.0 - pipe1.mediums[3].Xi[1];
//   assert(pipe1.mediums[3].X[1] >= -1e-05 and pipe1.mediums[3].X[1] <= 1.00001, \"assert message 1370699107527140891\");
//   assert(pipe1.mediums[3].X[2] >= -1e-05 and pipe1.mediums[3].X[2] <= 1.00001, \"assert message 1370699107527140891\");
//   assert(pipe1.mediums[3].p >= 0.0, \"assert message 2590312994638120201\");
//   assert(pipe1.mediums[4].T >= 190.0 and pipe1.mediums[4].T <= 647.0, \"assert message 315810245365667762\");
//   pipe1.mediums[4].MM = 1.0 / (pipe1.mediums[4].Xi[1] / 0.01801528 + (1.0 - pipe1.mediums[4].Xi[1]) / 0.0289651159);
//   n7835.n8256[4].n10110 = min(n1.n7656.n102.n8149.n7835.n7670.n8562(pipe1.mediums[4].T), 0.999 * pipe1.mediums[4].p);
//   n7835.n8256[4].n10108 = min(n7835.n8256[4].n10110 * 0.6219647130774989 / max(1e-13, pipe1.mediums[4].p - n7835.n8256[4].n10110) * (1.0 - pipe1.mediums[4].Xi[1]), 1.0);
//   n7835.n8256[4].n10105 = max(pipe1.mediums[4].Xi[1] - n7835.n8256[4].n10108, 0.0);
//   n7835.n8256[4].n10106 = pipe1.mediums[4].Xi[1] - n7835.n8256[4].n10105;
//   n7835.n8256[4].n10107 = 1.0 - pipe1.mediums[4].Xi[1];
//   pipe1.mediums[4].h = n1.n7656.n102.n8149.n7835.n7670.n7957(pipe1.mediums[4].p, pipe1.mediums[4].T, pipe1.mediums[4].Xi);
//   pipe1.mediums[4].R = 287.0512249529787 * n7835.n8256[4].n10107 / (1.0 - n7835.n8256[4].n10105) + 461.5233290850878 * n7835.n8256[4].n10106 / (1.0 - n7835.n8256[4].n10105);
//   pipe1.mediums[4].u = pipe1.mediums[4].h - pipe1.mediums[4].R * pipe1.mediums[4].T;
//   pipe1.mediums[4].d = pipe1.mediums[4].p / (pipe1.mediums[4].R * pipe1.mediums[4].T);
//   pipe1.mediums[4].state.p = pipe1.mediums[4].p;
//   pipe1.mediums[4].state.T = pipe1.mediums[4].T;
//   pipe1.mediums[4].state.X[1] = pipe1.mediums[4].X[1];
//   pipe1.mediums[4].state.X[2] = pipe1.mediums[4].X[2];
//   n7835.n8256[4].n10109 = 0.6219647130774989 * n7835.n8256[4].n10110 / max(1e-13, pipe1.mediums[4].p - n7835.n8256[4].n10110);
//   pipe1.mediums[4].x_water = pipe1.mediums[4].Xi[1] / max(n7835.n8256[4].n10107, 1e-13);
//   pipe1.mediums[4].phi = pipe1.mediums[4].p / n7835.n8256[4].n10110 * pipe1.mediums[4].Xi[1] / (pipe1.mediums[4].Xi[1] + 0.6219647130774989 * n7835.n8256[4].n10107);
//   pipe1.mediums[4].Xi[1] = pipe1.mediums[4].X[1];
//   pipe1.mediums[4].X[2] = 1.0 - pipe1.mediums[4].Xi[1];
//   assert(pipe1.mediums[4].X[1] >= -1e-05 and pipe1.mediums[4].X[1] <= 1.00001, \"assert message 1370699107527140891\");
//   assert(pipe1.mediums[4].X[2] >= -1e-05 and pipe1.mediums[4].X[2] <= 1.00001, \"assert message 1370699107527140891\");
//   assert(pipe1.mediums[4].p >= 0.0, \"assert message 2590312994638120201\");
//   assert(pipe1.mediums[5].T >= 190.0 and pipe1.mediums[5].T <= 647.0, \"assert message 315810245365667762\");
//   pipe1.mediums[5].MM = 1.0 / (pipe1.mediums[5].Xi[1] / 0.01801528 + (1.0 - pipe1.mediums[5].Xi[1]) / 0.0289651159);
//   n7835.n8256[5].n10110 = min(n1.n7656.n102.n8149.n7835.n7670.n8562(pipe1.mediums[5].T), 0.999 * pipe1.mediums[5].p);
//   n7835.n8256[5].n10108 = min(n7835.n8256[5].n10110 * 0.6219647130774989 / max(1e-13, pipe1.mediums[5].p - n7835.n8256[5].n10110) * (1.0 - pipe1.mediums[5].Xi[1]), 1.0);
//   n7835.n8256[5].n10105 = max(pipe1.mediums[5].Xi[1] - n7835.n8256[5].n10108, 0.0);
//   n7835.n8256[5].n10106 = pipe1.mediums[5].Xi[1] - n7835.n8256[5].n10105;
//   n7835.n8256[5].n10107 = 1.0 - pipe1.mediums[5].Xi[1];
//   pipe1.mediums[5].h = n1.n7656.n102.n8149.n7835.n7670.n7957(pipe1.mediums[5].p, pipe1.mediums[5].T, pipe1.mediums[5].Xi);
//   pipe1.mediums[5].R = 287.0512249529787 * n7835.n8256[5].n10107 / (1.0 - n7835.n8256[5].n10105) + 461.5233290850878 * n7835.n8256[5].n10106 / (1.0 - n7835.n8256[5].n10105);
//   pipe1.mediums[5].u = pipe1.mediums[5].h - pipe1.mediums[5].R * pipe1.mediums[5].T;
//   pipe1.mediums[5].d = pipe1.mediums[5].p / (pipe1.mediums[5].R * pipe1.mediums[5].T);
//   pipe1.mediums[5].state.p = pipe1.mediums[5].p;
//   pipe1.mediums[5].state.T = pipe1.mediums[5].T;
//   pipe1.mediums[5].state.X[1] = pipe1.mediums[5].X[1];
//   pipe1.mediums[5].state.X[2] = pipe1.mediums[5].X[2];
//   n7835.n8256[5].n10109 = 0.6219647130774989 * n7835.n8256[5].n10110 / max(1e-13, pipe1.mediums[5].p - n7835.n8256[5].n10110);
//   pipe1.mediums[5].x_water = pipe1.mediums[5].Xi[1] / max(n7835.n8256[5].n10107, 1e-13);
//   pipe1.mediums[5].phi = pipe1.mediums[5].p / n7835.n8256[5].n10110 * pipe1.mediums[5].Xi[1] / (pipe1.mediums[5].Xi[1] + 0.6219647130774989 * n7835.n8256[5].n10107);
//   pipe1.mediums[5].Xi[1] = pipe1.mediums[5].X[1];
//   pipe1.mediums[5].X[2] = 1.0 - pipe1.mediums[5].Xi[1];
//   assert(pipe1.mediums[5].X[1] >= -1e-05 and pipe1.mediums[5].X[1] <= 1.00001, \"assert message 1370699107527140891\");
//   assert(pipe1.mediums[5].X[2] >= -1e-05 and pipe1.mediums[5].X[2] <= 1.00001, \"assert message 1370699107527140891\");
//   assert(pipe1.mediums[5].p >= 0.0, \"assert message 2590312994638120201\");
//   pipe1.flowModel.states[1].X = pipe1.statesFM[1].X;
//   pipe1.flowModel.states[2].X = pipe1.statesFM[2].X;
//   pipe1.flowModel.states[3].X = pipe1.statesFM[3].X;
//   pipe1.flowModel.states[4].X = pipe1.statesFM[4].X;
//   pipe1.flowModel.states[5].X = pipe1.statesFM[5].X;
//   pipe1.flowModel.states[6].X = pipe1.statesFM[6].X;
//   pipe1.flowModel.states[7].X = pipe1.statesFM[7].X;
//   pipe1.flowModel.vs = n7835.n8369;
//   pipe1.flowModel.crossAreas = n7835.n8370;
//   pipe1.flowModel.dimensions = n7835.n8371;
//   pipe1.flowModel.roughnesses = n7835.n8372;
//   pipe1.flowModel.dheights = n7835.n8373;
//   pipe1.flowModel.pathLengths = n7835.n8348;
//   pipe1.flowModel.rhos = array(n1.n7656.n102.n8149.n7835.n8346.n7670.n523(pipe1.flowModel.states[$i1]) for $i1 in 1:7);
//   pipe1.flowModel.mus = array(n1.n7656.n102.n8149.n7835.n8346.n7670.n8340(pipe1.flowModel.states[$i1]) for $i1 in 1:7);
//   pipe1.flowModel.pathLengths_internal = pipe1.flowModel.pathLengths;
//   pipe1.flowModel.Res_turbulent_internal = {pipe1.flowModel.Re_turbulent, pipe1.flowModel.Re_turbulent, pipe1.flowModel.Re_turbulent, pipe1.flowModel.Re_turbulent, pipe1.flowModel.Re_turbulent, pipe1.flowModel.Re_turbulent};
//   n7835.n8346.n8410 = {0.5 * (pipe1.flowModel.dimensions[1] + pipe1.flowModel.dimensions[2]), 0.5 * (pipe1.flowModel.dimensions[2] + pipe1.flowModel.dimensions[3]), 0.5 * (pipe1.flowModel.dimensions[3] + pipe1.flowModel.dimensions[4]), 0.5 * (pipe1.flowModel.dimensions[4] + pipe1.flowModel.dimensions[5]), 0.5 * (pipe1.flowModel.dimensions[5] + pipe1.flowModel.dimensions[6]), 0.5 * (pipe1.flowModel.dimensions[6] + pipe1.flowModel.dimensions[7])};
//   pipe1.flowModel.m_flows = array(homotopy((array(n1.n7656.n102.n8149.n7835.n8346.n7663.n8415(pipe1.flowModel.dps_fg[$i1], pipe1.flowModel.rhos[(1:6)[$i1]], pipe1.flowModel.rhos[(2:7)[$i1]], pipe1.flowModel.mus[(1:6)[$i1]], pipe1.flowModel.mus[(2:7)[$i1]], pipe1.flowModel.pathLengths_internal[$i1], n7835.n8346.n8410[$i1], {pipe1.flowModel.g * pipe1.flowModel.dheights[1], pipe1.flowModel.g * pipe1.flowModel.dheights[2], pipe1.flowModel.g * pipe1.flowModel.dheights[3], pipe1.flowModel.g * pipe1.flowModel.dheights[4], pipe1.flowModel.g * pipe1.flowModel.dheights[5], pipe1.flowModel.g * pipe1.flowModel.dheights[6]}[$i1], {(pipe1.flowModel.crossAreas[1] + pipe1.flowModel.crossAreas[2]) / 2.0, (pipe1.flowModel.crossAreas[2] + pipe1.flowModel.crossAreas[3]) / 2.0, (pipe1.flowModel.crossAreas[3] + pipe1.flowModel.crossAreas[4]) / 2.0, (pipe1.flowModel.crossAreas[4] + pipe1.flowModel.crossAreas[5]) / 2.0, (pipe1.flowModel.crossAreas[5] + pipe1.flowModel.crossAreas[6]) / 2.0, (pipe1.flowModel.crossAreas[6] + pipe1.flowModel.crossAreas[7]) / 2.0}[$i1], {(pipe1.flowModel.roughnesses[1] + pipe1.flowModel.roughnesses[2]) / 2.0, (pipe1.flowModel.roughnesses[2] + pipe1.flowModel.roughnesses[3]) / 2.0, (pipe1.flowModel.roughnesses[3] + pipe1.flowModel.roughnesses[4]) / 2.0, (pipe1.flowModel.roughnesses[4] + pipe1.flowModel.roughnesses[5]) / 2.0, (pipe1.flowModel.roughnesses[5] + pipe1.flowModel.roughnesses[6]) / 2.0, (pipe1.flowModel.roughnesses[6] + pipe1.flowModel.roughnesses[7]) / 2.0}[$i1], n7835.n8346.n8308 / 6.0, pipe1.flowModel.Res_turbulent_internal[$i1]) for $i1 in 1:6) * pipe1.flowModel.nParallel)[$i1], {pipe1.flowModel.m_flow_nominal / pipe1.flowModel.dp_nominal * (pipe1.flowModel.dps_fg[1] - pipe1.flowModel.g * pipe1.flowModel.dheights[1] * n7835.n8346.n8135), pipe1.flowModel.m_flow_nominal / pipe1.flowModel.dp_nominal * (pipe1.flowModel.dps_fg[2] - pipe1.flowModel.g * pipe1.flowModel.dheights[2] * n7835.n8346.n8135), pipe1.flowModel.m_flow_nominal / pipe1.flowModel.dp_nominal * (pipe1.flowModel.dps_fg[3] - pipe1.flowModel.g * pipe1.flowModel.dheights[3] * n7835.n8346.n8135), pipe1.flowModel.m_flow_nominal / pipe1.flowModel.dp_nominal * (pipe1.flowModel.dps_fg[4] - pipe1.flowModel.g * pipe1.flowModel.dheights[4] * n7835.n8346.n8135), pipe1.flowModel.m_flow_nominal / pipe1.flowModel.dp_nominal * (pipe1.flowModel.dps_fg[5] - pipe1.flowModel.g * pipe1.flowModel.dheights[5] * n7835.n8346.n8135), pipe1.flowModel.m_flow_nominal / pipe1.flowModel.dp_nominal * (pipe1.flowModel.dps_fg[6] - pipe1.flowModel.g * pipe1.flowModel.dheights[6] * n7835.n8346.n8135)}[$i1]) for $i1 in 1:6);
//   pipe1.flowModel.rhos_act[1] = noEvent(if pipe1.flowModel.m_flows[1] > 0.0 then pipe1.flowModel.rhos[1] else pipe1.flowModel.rhos[2]);
//   pipe1.flowModel.mus_act[1] = noEvent(if pipe1.flowModel.m_flows[1] > 0.0 then pipe1.flowModel.mus[1] else pipe1.flowModel.mus[2]);
//   pipe1.flowModel.rhos_act[2] = noEvent(if pipe1.flowModel.m_flows[2] > 0.0 then pipe1.flowModel.rhos[2] else pipe1.flowModel.rhos[3]);
//   pipe1.flowModel.mus_act[2] = noEvent(if pipe1.flowModel.m_flows[2] > 0.0 then pipe1.flowModel.mus[2] else pipe1.flowModel.mus[3]);
//   pipe1.flowModel.rhos_act[3] = noEvent(if pipe1.flowModel.m_flows[3] > 0.0 then pipe1.flowModel.rhos[3] else pipe1.flowModel.rhos[4]);
//   pipe1.flowModel.mus_act[3] = noEvent(if pipe1.flowModel.m_flows[3] > 0.0 then pipe1.flowModel.mus[3] else pipe1.flowModel.mus[4]);
//   pipe1.flowModel.rhos_act[4] = noEvent(if pipe1.flowModel.m_flows[4] > 0.0 then pipe1.flowModel.rhos[4] else pipe1.flowModel.rhos[5]);
//   pipe1.flowModel.mus_act[4] = noEvent(if pipe1.flowModel.m_flows[4] > 0.0 then pipe1.flowModel.mus[4] else pipe1.flowModel.mus[5]);
//   pipe1.flowModel.rhos_act[5] = noEvent(if pipe1.flowModel.m_flows[5] > 0.0 then pipe1.flowModel.rhos[5] else pipe1.flowModel.rhos[6]);
//   pipe1.flowModel.mus_act[5] = noEvent(if pipe1.flowModel.m_flows[5] > 0.0 then pipe1.flowModel.mus[5] else pipe1.flowModel.mus[6]);
//   pipe1.flowModel.rhos_act[6] = noEvent(if pipe1.flowModel.m_flows[6] > 0.0 then pipe1.flowModel.rhos[6] else pipe1.flowModel.rhos[7]);
//   pipe1.flowModel.mus_act[6] = noEvent(if pipe1.flowModel.m_flows[6] > 0.0 then pipe1.flowModel.mus[6] else pipe1.flowModel.mus[7]);
//   pipe1.flowModel.Ib_flows = array(pipe1.flowModel.rhos[i] * pipe1.flowModel.vs[i] * pipe1.flowModel.vs[i] * pipe1.flowModel.crossAreas[i] - pipe1.flowModel.rhos[i + 1] * pipe1.flowModel.vs[i + 1] * pipe1.flowModel.vs[i + 1] * pipe1.flowModel.crossAreas[i + 1] for n49 in 1:6) * pipe1.flowModel.nParallel;
//   pipe1.flowModel.Fs_p = array(0.5 * (pipe1.flowModel.crossAreas[i] + pipe1.flowModel.crossAreas[i + 1]) * (n1.n7656.n102.n8149.n7835.n8346.n7670.n7786(pipe1.flowModel.states[i + 1]) - n1.n7656.n102.n8149.n7835.n8346.n7670.n7786(pipe1.flowModel.states[i])) for n49 in 1:6) * pipe1.flowModel.nParallel;
//   pipe1.flowModel.dps_fg = array(pipe1.flowModel.Fs_fg[i] / pipe1.flowModel.nParallel * 2.0 / (pipe1.flowModel.crossAreas[i] + pipe1.flowModel.crossAreas[i + 1]) for n49 in 1:6);
//   pipe1.flowModel.Is = array(pipe1.flowModel.m_flows[i] * pipe1.flowModel.pathLengths[i] for n49 in 1:6);
//   der(pipe1.flowModel.Is[1]) = pipe1.flowModel.Ib_flows[1] - pipe1.flowModel.Fs_p[1] - pipe1.flowModel.Fs_fg[1];
//   der(pipe1.flowModel.Is[2]) = pipe1.flowModel.Ib_flows[2] - pipe1.flowModel.Fs_p[2] - pipe1.flowModel.Fs_fg[2];
//   der(pipe1.flowModel.Is[3]) = pipe1.flowModel.Ib_flows[3] - pipe1.flowModel.Fs_p[3] - pipe1.flowModel.Fs_fg[3];
//   der(pipe1.flowModel.Is[4]) = pipe1.flowModel.Ib_flows[4] - pipe1.flowModel.Fs_p[4] - pipe1.flowModel.Fs_fg[4];
//   der(pipe1.flowModel.Is[5]) = pipe1.flowModel.Ib_flows[5] - pipe1.flowModel.Fs_p[5] - pipe1.flowModel.Fs_fg[5];
//   der(pipe1.flowModel.Is[6]) = pipe1.flowModel.Ib_flows[6] - pipe1.flowModel.Fs_p[6] - pipe1.flowModel.Fs_fg[6];
//   pipe1.vs = array(0.5 * (pipe1.m_flows[i] + pipe1.m_flows[i + 1]) / pipe1.mediums[i].d / pipe1.crossAreas[i] for n49 in 1:5) / pipe1.nParallel;
//   pipe1.heatTransfer.states[1].X = pipe1.mediums[1].state.X;
//   pipe1.heatTransfer.states[2].X = pipe1.mediums[2].state.X;
//   pipe1.heatTransfer.states[3].X = pipe1.mediums[3].state.X;
//   pipe1.heatTransfer.states[4].X = pipe1.mediums[4].state.X;
//   pipe1.heatTransfer.states[5].X = pipe1.mediums[5].state.X;
//   pipe1.heatTransfer.surfaceAreas = {pipe1.perimeter * 10.0, pipe1.perimeter * 10.0, pipe1.perimeter * 10.0, pipe1.perimeter * 10.0, pipe1.perimeter * 10.0};
//   pipe1.heatTransfer.Ts = array(n1.n7656.n102.n8149.n7835.n7988.n7670.n7785(pipe1.heatTransfer.states[$i1]) for $i1 in 1:5);
//   pipe1.heatTransfer.vs = pipe1.vs;
//   pipe1.heatTransfer.lengths = {10.0, 10.0, 10.0, 10.0, 10.0};
//   pipe1.heatTransfer.dimensions = pipe1.dimensions;
//   pipe1.heatTransfer.roughnesses = pipe1.roughnesses;
//   pipe1.heatTransfer.Ts[1] = pipe1.heatTransfer.heatPorts[1].T;
//   pipe1.heatTransfer.Ts[2] = pipe1.heatTransfer.heatPorts[2].T;
//   pipe1.heatTransfer.Ts[3] = pipe1.heatTransfer.heatPorts[3].T;
//   pipe1.heatTransfer.Ts[4] = pipe1.heatTransfer.heatPorts[4].T;
//   pipe1.heatTransfer.Ts[5] = pipe1.heatTransfer.heatPorts[5].T;
//   pipe1.heatTransfer.Q_flows[1] = pipe1.heatTransfer.heatPorts[1].Q_flow;
//   pipe1.heatTransfer.Q_flows[2] = pipe1.heatTransfer.heatPorts[2].Q_flow;
//   pipe1.heatTransfer.Q_flows[3] = pipe1.heatTransfer.heatPorts[3].Q_flow;
//   pipe1.heatTransfer.Q_flows[4] = pipe1.heatTransfer.heatPorts[4].Q_flow;
//   pipe1.heatTransfer.Q_flows[5] = pipe1.heatTransfer.heatPorts[5].Q_flow;
//   pipe1.Qb_flows[1] = pipe1.heatTransfer.Q_flows[1];
//   pipe1.Qb_flows[2] = pipe1.heatTransfer.Q_flows[2];
//   pipe1.Qb_flows[3] = pipe1.heatTransfer.Q_flows[3];
//   pipe1.Qb_flows[4] = pipe1.heatTransfer.Q_flows[4];
//   pipe1.Qb_flows[5] = pipe1.heatTransfer.Q_flows[5];
//   pipe1.Wb_flows[2:4] = array(pipe1.vs[i] * pipe1.crossAreas[i] * ((pipe1.mediums[i + 1].p - pipe1.mediums[i - 1].p) / 2.0 + (pipe1.flowModel.dps_fg[i] + pipe1.flowModel.dps_fg[i + 1]) / 2.0 - system.g * {10.0, 10.0, 10.0, 10.0, 10.0}[i] * pipe1.mediums[i].d) for n49 in 2:4) * pipe1.nParallel;
//   pipe1.Wb_flows[1] = pipe1.vs[1] * pipe1.crossAreas[1] * ((pipe1.mediums[2].p - pipe1.port_a.p) / 1.5 + pipe1.flowModel.dps_fg[1] + pipe1.flowModel.dps_fg[2] / 2.0 - system.g * 10.0 * pipe1.mediums[1].d) * pipe1.nParallel;
//   pipe1.Wb_flows[5] = pipe1.vs[5] * pipe1.crossAreas[5] * ((pipe1.port_b.p - pipe1.mediums[4].p) / 1.5 + pipe1.flowModel.dps_fg[5] / 2.0 + pipe1.flowModel.dps_fg[6] - system.g * 10.0 * pipe1.mediums[5].d) * pipe1.nParallel;
//   n7835.n8348[1] = 5.0;
//   n7835.n8348[2] = 10.0;
//   n7835.n8348[3] = 10.0;
//   n7835.n8348[4] = 10.0;
//   n7835.n8348[5] = 10.0;
//   n7835.n8348[6] = 5.0;
//   n7835.n8373[1] = 5.0;
//   n7835.n8373[2] = 10.0;
//   n7835.n8373[3] = 10.0;
//   n7835.n8373[4] = 10.0;
//   n7835.n8373[5] = 10.0;
//   n7835.n8373[6] = 5.0;
//   n7835.n8370[1] = pipe1.crossAreas[1];
//   n7835.n8370[2] = pipe1.crossAreas[1];
//   n7835.n8370[3] = pipe1.crossAreas[2];
//   n7835.n8370[4] = pipe1.crossAreas[3];
//   n7835.n8370[5] = pipe1.crossAreas[4];
//   n7835.n8370[6] = pipe1.crossAreas[5];
//   n7835.n8370[7] = pipe1.crossAreas[5];
//   n7835.n8371[1] = pipe1.dimensions[1];
//   n7835.n8371[2] = pipe1.dimensions[1];
//   n7835.n8371[3] = pipe1.dimensions[2];
//   n7835.n8371[4] = pipe1.dimensions[3];
//   n7835.n8371[5] = pipe1.dimensions[4];
//   n7835.n8371[6] = pipe1.dimensions[5];
//   n7835.n8371[7] = pipe1.dimensions[5];
//   n7835.n8372[1] = pipe1.roughnesses[1];
//   n7835.n8372[2] = pipe1.roughnesses[1];
//   n7835.n8372[3] = pipe1.roughnesses[2];
//   n7835.n8372[4] = pipe1.roughnesses[3];
//   n7835.n8372[5] = pipe1.roughnesses[4];
//   n7835.n8372[6] = pipe1.roughnesses[5];
//   n7835.n8372[7] = pipe1.roughnesses[5];
//   pipe1.mb_flows[1] = pipe1.m_flows[1] - pipe1.m_flows[2];
//   pipe1.mbXi_flows[1,1] = pipe1.mXi_flows[1,1] - pipe1.mXi_flows[2,1];
//   pipe1.Hb_flows[1] = pipe1.H_flows[1] - pipe1.H_flows[2];
//   pipe1.mb_flows[2] = pipe1.m_flows[2] - pipe1.m_flows[3];
//   pipe1.mbXi_flows[2,1] = pipe1.mXi_flows[2,1] - pipe1.mXi_flows[3,1];
//   pipe1.Hb_flows[2] = pipe1.H_flows[2] - pipe1.H_flows[3];
//   pipe1.mb_flows[3] = pipe1.m_flows[3] - pipe1.m_flows[4];
//   pipe1.mbXi_flows[3,1] = pipe1.mXi_flows[3,1] - pipe1.mXi_flows[4,1];
//   pipe1.Hb_flows[3] = pipe1.H_flows[3] - pipe1.H_flows[4];
//   pipe1.mb_flows[4] = pipe1.m_flows[4] - pipe1.m_flows[5];
//   pipe1.mbXi_flows[4,1] = pipe1.mXi_flows[4,1] - pipe1.mXi_flows[5,1];
//   pipe1.Hb_flows[4] = pipe1.H_flows[4] - pipe1.H_flows[5];
//   pipe1.mb_flows[5] = pipe1.m_flows[5] - pipe1.m_flows[6];
//   pipe1.mbXi_flows[5,1] = pipe1.mXi_flows[5,1] - pipe1.mXi_flows[6,1];
//   pipe1.Hb_flows[5] = pipe1.H_flows[5] - pipe1.H_flows[6];
//   pipe1.H_flows[2] = semiLinear(pipe1.m_flows[2], pipe1.mediums[1].h, pipe1.mediums[2].h);
//   pipe1.mXi_flows[2,1] = semiLinear(pipe1.m_flows[2], pipe1.mediums[1].Xi[1], pipe1.mediums[2].Xi[1]);
//   pipe1.H_flows[3] = semiLinear(pipe1.m_flows[3], pipe1.mediums[2].h, pipe1.mediums[3].h);
//   pipe1.mXi_flows[3,1] = semiLinear(pipe1.m_flows[3], pipe1.mediums[2].Xi[1], pipe1.mediums[3].Xi[1]);
//   pipe1.H_flows[4] = semiLinear(pipe1.m_flows[4], pipe1.mediums[3].h, pipe1.mediums[4].h);
//   pipe1.mXi_flows[4,1] = semiLinear(pipe1.m_flows[4], pipe1.mediums[3].Xi[1], pipe1.mediums[4].Xi[1]);
//   pipe1.H_flows[5] = semiLinear(pipe1.m_flows[5], pipe1.mediums[4].h, pipe1.mediums[5].h);
//   pipe1.mXi_flows[5,1] = semiLinear(pipe1.m_flows[5], pipe1.mediums[4].Xi[1], pipe1.mediums[5].Xi[1]);
//   pipe1.H_flows[1] = semiLinear(pipe1.port_a.m_flow, boundary1.ports[1].h_outflow, pipe1.mediums[1].h);
//   pipe1.H_flows[6] = -semiLinear(pipe1.port_b.m_flow, ($OMC$PositiveMax(-pipe2.port_a.m_flow, 1e-07) * pipe2.port_a.h_outflow + $OMC$PositiveMax(-pipe3.port_a.m_flow, 1e-07) * pipe3.port_a.h_outflow) / ($OMC$PositiveMax(-pipe2.port_a.m_flow, 1e-07) + $OMC$PositiveMax(-pipe3.port_a.m_flow, 1e-07)), pipe1.mediums[5].h);
//   pipe1.mXi_flows[1,1] = semiLinear(pipe1.port_a.m_flow, boundary1.ports[1].Xi_outflow[1], pipe1.mediums[1].Xi[1]);
//   pipe1.mXi_flows[6,1] = -semiLinear(pipe1.port_b.m_flow, ($OMC$PositiveMax(-pipe2.port_a.m_flow, 1e-07) * pipe2.port_a.Xi_outflow[1] + $OMC$PositiveMax(-pipe3.port_a.m_flow, 1e-07) * pipe3.port_a.Xi_outflow[1]) / ($OMC$PositiveMax(-pipe2.port_a.m_flow, 1e-07) + $OMC$PositiveMax(-pipe3.port_a.m_flow, 1e-07)), pipe1.mediums[5].Xi[1]);
//   pipe1.port_a.m_flow = pipe1.m_flows[1];
//   pipe1.port_b.m_flow = -pipe1.m_flows[6];
//   pipe1.port_a.h_outflow = pipe1.mediums[1].h;
//   pipe1.port_b.h_outflow = pipe1.mediums[5].h;
//   pipe1.port_a.Xi_outflow[1] = pipe1.mediums[1].Xi[1];
//   pipe1.port_b.Xi_outflow[1] = pipe1.mediums[5].Xi[1];
//   pipe1.state_a = n1.n7656.n102.n8149.n7835.n7670.n8338(pipe1.port_a.p, boundary1.ports[1].h_outflow, {boundary1.ports[1].Xi_outflow[1]});
//   pipe1.state_b = n1.n7656.n102.n8149.n7835.n7670.n8338(pipe1.port_b.p, ($OMC$PositiveMax(-pipe2.port_a.m_flow, 1e-07) * pipe2.port_a.h_outflow + $OMC$PositiveMax(-pipe3.port_a.m_flow, 1e-07) * pipe3.port_a.h_outflow) / ($OMC$PositiveMax(-pipe2.port_a.m_flow, 1e-07) + $OMC$PositiveMax(-pipe3.port_a.m_flow, 1e-07)), {($OMC$PositiveMax(-pipe2.port_a.m_flow, 1e-07) * pipe2.port_a.Xi_outflow[1] + $OMC$PositiveMax(-pipe3.port_a.m_flow, 1e-07) * pipe3.port_a.Xi_outflow[1]) / ($OMC$PositiveMax(-pipe2.port_a.m_flow, 1e-07) + $OMC$PositiveMax(-pipe3.port_a.m_flow, 1e-07))});
//   pipe1.statesFM[1] = pipe1.state_a;
//   pipe1.statesFM[2] = pipe1.mediums[1].state;
//   pipe1.statesFM[3] = pipe1.mediums[2].state;
//   pipe1.statesFM[4] = pipe1.mediums[3].state;
//   pipe1.statesFM[5] = pipe1.mediums[4].state;
//   pipe1.statesFM[6] = pipe1.mediums[5].state;
//   pipe1.statesFM[7] = pipe1.state_b;
//   pipe1.m_flows[1] = pipe1.flowModel.m_flows[1];
//   pipe1.m_flows[2] = pipe1.flowModel.m_flows[2];
//   pipe1.m_flows[3] = pipe1.flowModel.m_flows[3];
//   pipe1.m_flows[4] = pipe1.flowModel.m_flows[4];
//   pipe1.m_flows[5] = pipe1.flowModel.m_flows[5];
//   pipe1.m_flows[6] = pipe1.flowModel.m_flows[6];
//   n7835.n8369[1] = pipe1.m_flows[1] / n1.n7656.n102.n8149.n7835.n7670.n523(pipe1.state_a) / pipe1.crossAreas[1] / pipe1.nParallel;
//   n7835.n8369[2] = pipe1.vs[1];
//   n7835.n8369[3] = pipe1.vs[2];
//   n7835.n8369[4] = pipe1.vs[3];
//   n7835.n8369[5] = pipe1.vs[4];
//   n7835.n8369[6] = pipe1.vs[5];
//   n7835.n8369[7] = pipe1.m_flows[6] / n1.n7656.n102.n8149.n7835.n7670.n523(pipe1.state_b) / pipe1.crossAreas[5] / pipe1.nParallel;
//   pipe1.ms[1] = pipe1.fluidVolumes[1] * pipe1.mediums[1].d;
//   pipe1.mXis[1,1] = pipe1.ms[1] * pipe1.mediums[1].Xi[1];
//   pipe1.Us[1] = pipe1.ms[1] * pipe1.mediums[1].u;
//   pipe1.ms[2] = pipe1.fluidVolumes[2] * pipe1.mediums[2].d;
//   pipe1.mXis[2,1] = pipe1.ms[2] * pipe1.mediums[2].Xi[1];
//   pipe1.Us[2] = pipe1.ms[2] * pipe1.mediums[2].u;
//   pipe1.ms[3] = pipe1.fluidVolumes[3] * pipe1.mediums[3].d;
//   pipe1.mXis[3,1] = pipe1.ms[3] * pipe1.mediums[3].Xi[1];
//   pipe1.Us[3] = pipe1.ms[3] * pipe1.mediums[3].u;
//   pipe1.ms[4] = pipe1.fluidVolumes[4] * pipe1.mediums[4].d;
//   pipe1.mXis[4,1] = pipe1.ms[4] * pipe1.mediums[4].Xi[1];
//   pipe1.Us[4] = pipe1.ms[4] * pipe1.mediums[4].u;
//   pipe1.ms[5] = pipe1.fluidVolumes[5] * pipe1.mediums[5].d;
//   pipe1.mXis[5,1] = pipe1.ms[5] * pipe1.mediums[5].Xi[1];
//   pipe1.Us[5] = pipe1.ms[5] * pipe1.mediums[5].u;
//   der(pipe1.Us[1]) = pipe1.Hb_flows[1] + pipe1.Wb_flows[1] + pipe1.Qb_flows[1];
//   der(pipe1.Us[2]) = pipe1.Hb_flows[2] + pipe1.Wb_flows[2] + pipe1.Qb_flows[2];
//   der(pipe1.Us[3]) = pipe1.Hb_flows[3] + pipe1.Wb_flows[3] + pipe1.Qb_flows[3];
//   der(pipe1.Us[4]) = pipe1.Hb_flows[4] + pipe1.Wb_flows[4] + pipe1.Qb_flows[4];
//   der(pipe1.Us[5]) = pipe1.Hb_flows[5] + pipe1.Wb_flows[5] + pipe1.Qb_flows[5];
//   der(pipe1.ms[1]) = pipe1.mb_flows[1];
//   der(pipe1.ms[2]) = pipe1.mb_flows[2];
//   der(pipe1.ms[3]) = pipe1.mb_flows[3];
//   der(pipe1.ms[4]) = pipe1.mb_flows[4];
//   der(pipe1.ms[5]) = pipe1.mb_flows[5];
//   der(pipe1.mXis[1,1]) = pipe1.mbXi_flows[1,1];
//   der(pipe1.mXis[2,1]) = pipe1.mbXi_flows[2,1];
//   der(pipe1.mXis[3,1]) = pipe1.mbXi_flows[3,1];
//   der(pipe1.mXis[4,1]) = pipe1.mbXi_flows[4,1];
//   der(pipe1.mXis[5,1]) = pipe1.mbXi_flows[5,1];
//   pipe2.fluidVolumes = array(pipe2.crossAreas[i] * {10.0, 10.0, 10.0, 10.0, 10.0}[i] for n49 in 1:5) * pipe2.nParallel;
//   assert(pipe2.mediums[1].T >= 190.0 and pipe2.mediums[1].T <= 647.0, \"assert message 315810245365667762\");
//   pipe2.mediums[1].MM = 1.0 / (pipe2.mediums[1].Xi[1] / 0.01801528 + (1.0 - pipe2.mediums[1].Xi[1]) / 0.0289651159);
//   n7836.n8256[1].n10110 = min(n1.n7656.n102.n8149.n7836.n7670.n8562(pipe2.mediums[1].T), 0.999 * pipe2.mediums[1].p);
//   n7836.n8256[1].n10108 = min(n7836.n8256[1].n10110 * 0.6219647130774989 / max(1e-13, pipe2.mediums[1].p - n7836.n8256[1].n10110) * (1.0 - pipe2.mediums[1].Xi[1]), 1.0);
//   n7836.n8256[1].n10105 = max(pipe2.mediums[1].Xi[1] - n7836.n8256[1].n10108, 0.0);
//   n7836.n8256[1].n10106 = pipe2.mediums[1].Xi[1] - n7836.n8256[1].n10105;
//   n7836.n8256[1].n10107 = 1.0 - pipe2.mediums[1].Xi[1];
//   pipe2.mediums[1].h = n1.n7656.n102.n8149.n7836.n7670.n7957(pipe2.mediums[1].p, pipe2.mediums[1].T, pipe2.mediums[1].Xi);
//   pipe2.mediums[1].R = 287.0512249529787 * n7836.n8256[1].n10107 / (1.0 - n7836.n8256[1].n10105) + 461.5233290850878 * n7836.n8256[1].n10106 / (1.0 - n7836.n8256[1].n10105);
//   pipe2.mediums[1].u = pipe2.mediums[1].h - pipe2.mediums[1].R * pipe2.mediums[1].T;
//   pipe2.mediums[1].d = pipe2.mediums[1].p / (pipe2.mediums[1].R * pipe2.mediums[1].T);
//   pipe2.mediums[1].state.p = pipe2.mediums[1].p;
//   pipe2.mediums[1].state.T = pipe2.mediums[1].T;
//   pipe2.mediums[1].state.X[1] = pipe2.mediums[1].X[1];
//   pipe2.mediums[1].state.X[2] = pipe2.mediums[1].X[2];
//   n7836.n8256[1].n10109 = 0.6219647130774989 * n7836.n8256[1].n10110 / max(1e-13, pipe2.mediums[1].p - n7836.n8256[1].n10110);
//   pipe2.mediums[1].x_water = pipe2.mediums[1].Xi[1] / max(n7836.n8256[1].n10107, 1e-13);
//   pipe2.mediums[1].phi = pipe2.mediums[1].p / n7836.n8256[1].n10110 * pipe2.mediums[1].Xi[1] / (pipe2.mediums[1].Xi[1] + 0.6219647130774989 * n7836.n8256[1].n10107);
//   pipe2.mediums[1].Xi[1] = pipe2.mediums[1].X[1];
//   pipe2.mediums[1].X[2] = 1.0 - pipe2.mediums[1].Xi[1];
//   assert(pipe2.mediums[1].X[1] >= -1e-05 and pipe2.mediums[1].X[1] <= 1.00001, \"assert message 1370699107527140891\");
//   assert(pipe2.mediums[1].X[2] >= -1e-05 and pipe2.mediums[1].X[2] <= 1.00001, \"assert message 1370699107527140891\");
//   assert(pipe2.mediums[1].p >= 0.0, \"assert message 2590312994638120201\");
//   assert(pipe2.mediums[2].T >= 190.0 and pipe2.mediums[2].T <= 647.0, \"assert message 315810245365667762\");
//   pipe2.mediums[2].MM = 1.0 / (pipe2.mediums[2].Xi[1] / 0.01801528 + (1.0 - pipe2.mediums[2].Xi[1]) / 0.0289651159);
//   n7836.n8256[2].n10110 = min(n1.n7656.n102.n8149.n7836.n7670.n8562(pipe2.mediums[2].T), 0.999 * pipe2.mediums[2].p);
//   n7836.n8256[2].n10108 = min(n7836.n8256[2].n10110 * 0.6219647130774989 / max(1e-13, pipe2.mediums[2].p - n7836.n8256[2].n10110) * (1.0 - pipe2.mediums[2].Xi[1]), 1.0);
//   n7836.n8256[2].n10105 = max(pipe2.mediums[2].Xi[1] - n7836.n8256[2].n10108, 0.0);
//   n7836.n8256[2].n10106 = pipe2.mediums[2].Xi[1] - n7836.n8256[2].n10105;
//   n7836.n8256[2].n10107 = 1.0 - pipe2.mediums[2].Xi[1];
//   pipe2.mediums[2].h = n1.n7656.n102.n8149.n7836.n7670.n7957(pipe2.mediums[2].p, pipe2.mediums[2].T, pipe2.mediums[2].Xi);
//   pipe2.mediums[2].R = 287.0512249529787 * n7836.n8256[2].n10107 / (1.0 - n7836.n8256[2].n10105) + 461.5233290850878 * n7836.n8256[2].n10106 / (1.0 - n7836.n8256[2].n10105);
//   pipe2.mediums[2].u = pipe2.mediums[2].h - pipe2.mediums[2].R * pipe2.mediums[2].T;
//   pipe2.mediums[2].d = pipe2.mediums[2].p / (pipe2.mediums[2].R * pipe2.mediums[2].T);
//   pipe2.mediums[2].state.p = pipe2.mediums[2].p;
//   pipe2.mediums[2].state.T = pipe2.mediums[2].T;
//   pipe2.mediums[2].state.X[1] = pipe2.mediums[2].X[1];
//   pipe2.mediums[2].state.X[2] = pipe2.mediums[2].X[2];
//   n7836.n8256[2].n10109 = 0.6219647130774989 * n7836.n8256[2].n10110 / max(1e-13, pipe2.mediums[2].p - n7836.n8256[2].n10110);
//   pipe2.mediums[2].x_water = pipe2.mediums[2].Xi[1] / max(n7836.n8256[2].n10107, 1e-13);
//   pipe2.mediums[2].phi = pipe2.mediums[2].p / n7836.n8256[2].n10110 * pipe2.mediums[2].Xi[1] / (pipe2.mediums[2].Xi[1] + 0.6219647130774989 * n7836.n8256[2].n10107);
//   pipe2.mediums[2].Xi[1] = pipe2.mediums[2].X[1];
//   pipe2.mediums[2].X[2] = 1.0 - pipe2.mediums[2].Xi[1];
//   assert(pipe2.mediums[2].X[1] >= -1e-05 and pipe2.mediums[2].X[1] <= 1.00001, \"assert message 1370699107527140891\");
//   assert(pipe2.mediums[2].X[2] >= -1e-05 and pipe2.mediums[2].X[2] <= 1.00001, \"assert message 1370699107527140891\");
//   assert(pipe2.mediums[2].p >= 0.0, \"assert message 2590312994638120201\");
//   assert(pipe2.mediums[3].T >= 190.0 and pipe2.mediums[3].T <= 647.0, \"assert message 315810245365667762\");
//   pipe2.mediums[3].MM = 1.0 / (pipe2.mediums[3].Xi[1] / 0.01801528 + (1.0 - pipe2.mediums[3].Xi[1]) / 0.0289651159);
//   n7836.n8256[3].n10110 = min(n1.n7656.n102.n8149.n7836.n7670.n8562(pipe2.mediums[3].T), 0.999 * pipe2.mediums[3].p);
//   n7836.n8256[3].n10108 = min(n7836.n8256[3].n10110 * 0.6219647130774989 / max(1e-13, pipe2.mediums[3].p - n7836.n8256[3].n10110) * (1.0 - pipe2.mediums[3].Xi[1]), 1.0);
//   n7836.n8256[3].n10105 = max(pipe2.mediums[3].Xi[1] - n7836.n8256[3].n10108, 0.0);
//   n7836.n8256[3].n10106 = pipe2.mediums[3].Xi[1] - n7836.n8256[3].n10105;
//   n7836.n8256[3].n10107 = 1.0 - pipe2.mediums[3].Xi[1];
//   pipe2.mediums[3].h = n1.n7656.n102.n8149.n7836.n7670.n7957(pipe2.mediums[3].p, pipe2.mediums[3].T, pipe2.mediums[3].Xi);
//   pipe2.mediums[3].R = 287.0512249529787 * n7836.n8256[3].n10107 / (1.0 - n7836.n8256[3].n10105) + 461.5233290850878 * n7836.n8256[3].n10106 / (1.0 - n7836.n8256[3].n10105);
//   pipe2.mediums[3].u = pipe2.mediums[3].h - pipe2.mediums[3].R * pipe2.mediums[3].T;
//   pipe2.mediums[3].d = pipe2.mediums[3].p / (pipe2.mediums[3].R * pipe2.mediums[3].T);
//   pipe2.mediums[3].state.p = pipe2.mediums[3].p;
//   pipe2.mediums[3].state.T = pipe2.mediums[3].T;
//   pipe2.mediums[3].state.X[1] = pipe2.mediums[3].X[1];
//   pipe2.mediums[3].state.X[2] = pipe2.mediums[3].X[2];
//   n7836.n8256[3].n10109 = 0.6219647130774989 * n7836.n8256[3].n10110 / max(1e-13, pipe2.mediums[3].p - n7836.n8256[3].n10110);
//   pipe2.mediums[3].x_water = pipe2.mediums[3].Xi[1] / max(n7836.n8256[3].n10107, 1e-13);
//   pipe2.mediums[3].phi = pipe2.mediums[3].p / n7836.n8256[3].n10110 * pipe2.mediums[3].Xi[1] / (pipe2.mediums[3].Xi[1] + 0.6219647130774989 * n7836.n8256[3].n10107);
//   pipe2.mediums[3].Xi[1] = pipe2.mediums[3].X[1];
//   pipe2.mediums[3].X[2] = 1.0 - pipe2.mediums[3].Xi[1];
//   assert(pipe2.mediums[3].X[1] >= -1e-05 and pipe2.mediums[3].X[1] <= 1.00001, \"assert message 1370699107527140891\");
//   assert(pipe2.mediums[3].X[2] >= -1e-05 and pipe2.mediums[3].X[2] <= 1.00001, \"assert message 1370699107527140891\");
//   assert(pipe2.mediums[3].p >= 0.0, \"assert message 2590312994638120201\");
//   assert(pipe2.mediums[4].T >= 190.0 and pipe2.mediums[4].T <= 647.0, \"assert message 315810245365667762\");
//   pipe2.mediums[4].MM = 1.0 / (pipe2.mediums[4].Xi[1] / 0.01801528 + (1.0 - pipe2.mediums[4].Xi[1]) / 0.0289651159);
//   n7836.n8256[4].n10110 = min(n1.n7656.n102.n8149.n7836.n7670.n8562(pipe2.mediums[4].T), 0.999 * pipe2.mediums[4].p);
//   n7836.n8256[4].n10108 = min(n7836.n8256[4].n10110 * 0.6219647130774989 / max(1e-13, pipe2.mediums[4].p - n7836.n8256[4].n10110) * (1.0 - pipe2.mediums[4].Xi[1]), 1.0);
//   n7836.n8256[4].n10105 = max(pipe2.mediums[4].Xi[1] - n7836.n8256[4].n10108, 0.0);
//   n7836.n8256[4].n10106 = pipe2.mediums[4].Xi[1] - n7836.n8256[4].n10105;
//   n7836.n8256[4].n10107 = 1.0 - pipe2.mediums[4].Xi[1];
//   pipe2.mediums[4].h = n1.n7656.n102.n8149.n7836.n7670.n7957(pipe2.mediums[4].p, pipe2.mediums[4].T, pipe2.mediums[4].Xi);
//   pipe2.mediums[4].R = 287.0512249529787 * n7836.n8256[4].n10107 / (1.0 - n7836.n8256[4].n10105) + 461.5233290850878 * n7836.n8256[4].n10106 / (1.0 - n7836.n8256[4].n10105);
//   pipe2.mediums[4].u = pipe2.mediums[4].h - pipe2.mediums[4].R * pipe2.mediums[4].T;
//   pipe2.mediums[4].d = pipe2.mediums[4].p / (pipe2.mediums[4].R * pipe2.mediums[4].T);
//   pipe2.mediums[4].state.p = pipe2.mediums[4].p;
//   pipe2.mediums[4].state.T = pipe2.mediums[4].T;
//   pipe2.mediums[4].state.X[1] = pipe2.mediums[4].X[1];
//   pipe2.mediums[4].state.X[2] = pipe2.mediums[4].X[2];
//   n7836.n8256[4].n10109 = 0.6219647130774989 * n7836.n8256[4].n10110 / max(1e-13, pipe2.mediums[4].p - n7836.n8256[4].n10110);
//   pipe2.mediums[4].x_water = pipe2.mediums[4].Xi[1] / max(n7836.n8256[4].n10107, 1e-13);
//   pipe2.mediums[4].phi = pipe2.mediums[4].p / n7836.n8256[4].n10110 * pipe2.mediums[4].Xi[1] / (pipe2.mediums[4].Xi[1] + 0.6219647130774989 * n7836.n8256[4].n10107);
//   pipe2.mediums[4].Xi[1] = pipe2.mediums[4].X[1];
//   pipe2.mediums[4].X[2] = 1.0 - pipe2.mediums[4].Xi[1];
//   assert(pipe2.mediums[4].X[1] >= -1e-05 and pipe2.mediums[4].X[1] <= 1.00001, \"assert message 1370699107527140891\");
//   assert(pipe2.mediums[4].X[2] >= -1e-05 and pipe2.mediums[4].X[2] <= 1.00001, \"assert message 1370699107527140891\");
//   assert(pipe2.mediums[4].p >= 0.0, \"assert message 2590312994638120201\");
//   assert(pipe2.mediums[5].T >= 190.0 and pipe2.mediums[5].T <= 647.0, \"assert message 315810245365667762\");
//   pipe2.mediums[5].MM = 1.0 / (pipe2.mediums[5].Xi[1] / 0.01801528 + (1.0 - pipe2.mediums[5].Xi[1]) / 0.0289651159);
//   n7836.n8256[5].n10110 = min(n1.n7656.n102.n8149.n7836.n7670.n8562(pipe2.mediums[5].T), 0.999 * pipe2.mediums[5].p);
//   n7836.n8256[5].n10108 = min(n7836.n8256[5].n10110 * 0.6219647130774989 / max(1e-13, pipe2.mediums[5].p - n7836.n8256[5].n10110) * (1.0 - pipe2.mediums[5].Xi[1]), 1.0);
//   n7836.n8256[5].n10105 = max(pipe2.mediums[5].Xi[1] - n7836.n8256[5].n10108, 0.0);
//   n7836.n8256[5].n10106 = pipe2.mediums[5].Xi[1] - n7836.n8256[5].n10105;
//   n7836.n8256[5].n10107 = 1.0 - pipe2.mediums[5].Xi[1];
//   pipe2.mediums[5].h = n1.n7656.n102.n8149.n7836.n7670.n7957(pipe2.mediums[5].p, pipe2.mediums[5].T, pipe2.mediums[5].Xi);
//   pipe2.mediums[5].R = 287.0512249529787 * n7836.n8256[5].n10107 / (1.0 - n7836.n8256[5].n10105) + 461.5233290850878 * n7836.n8256[5].n10106 / (1.0 - n7836.n8256[5].n10105);
//   pipe2.mediums[5].u = pipe2.mediums[5].h - pipe2.mediums[5].R * pipe2.mediums[5].T;
//   pipe2.mediums[5].d = pipe2.mediums[5].p / (pipe2.mediums[5].R * pipe2.mediums[5].T);
//   pipe2.mediums[5].state.p = pipe2.mediums[5].p;
//   pipe2.mediums[5].state.T = pipe2.mediums[5].T;
//   pipe2.mediums[5].state.X[1] = pipe2.mediums[5].X[1];
//   pipe2.mediums[5].state.X[2] = pipe2.mediums[5].X[2];
//   n7836.n8256[5].n10109 = 0.6219647130774989 * n7836.n8256[5].n10110 / max(1e-13, pipe2.mediums[5].p - n7836.n8256[5].n10110);
//   pipe2.mediums[5].x_water = pipe2.mediums[5].Xi[1] / max(n7836.n8256[5].n10107, 1e-13);
//   pipe2.mediums[5].phi = pipe2.mediums[5].p / n7836.n8256[5].n10110 * pipe2.mediums[5].Xi[1] / (pipe2.mediums[5].Xi[1] + 0.6219647130774989 * n7836.n8256[5].n10107);
//   pipe2.mediums[5].Xi[1] = pipe2.mediums[5].X[1];
//   pipe2.mediums[5].X[2] = 1.0 - pipe2.mediums[5].Xi[1];
//   assert(pipe2.mediums[5].X[1] >= -1e-05 and pipe2.mediums[5].X[1] <= 1.00001, \"assert message 1370699107527140891\");
//   assert(pipe2.mediums[5].X[2] >= -1e-05 and pipe2.mediums[5].X[2] <= 1.00001, \"assert message 1370699107527140891\");
//   assert(pipe2.mediums[5].p >= 0.0, \"assert message 2590312994638120201\");
//   pipe2.flowModel.states[1].X = pipe2.statesFM[1].X;
//   pipe2.flowModel.states[2].X = pipe2.statesFM[2].X;
//   pipe2.flowModel.states[3].X = pipe2.statesFM[3].X;
//   pipe2.flowModel.states[4].X = pipe2.statesFM[4].X;
//   pipe2.flowModel.states[5].X = pipe2.statesFM[5].X;
//   pipe2.flowModel.vs = n7836.n8369;
//   pipe2.flowModel.crossAreas = n7836.n8370;
//   pipe2.flowModel.dimensions = n7836.n8371;
//   pipe2.flowModel.roughnesses = n7836.n8372;
//   pipe2.flowModel.dheights = n7836.n8373;
//   pipe2.flowModel.pathLengths = n7836.n8348;
//   pipe2.flowModel.rhos = array(n1.n7656.n102.n8149.n7836.n8346.n7670.n523(pipe2.flowModel.states[$i1]) for $i1 in 1:5);
//   pipe2.flowModel.mus = array(n1.n7656.n102.n8149.n7836.n8346.n7670.n8340(pipe2.flowModel.states[$i1]) for $i1 in 1:5);
//   pipe2.flowModel.pathLengths_internal = pipe2.flowModel.pathLengths;
//   pipe2.flowModel.Res_turbulent_internal = {pipe2.flowModel.Re_turbulent, pipe2.flowModel.Re_turbulent, pipe2.flowModel.Re_turbulent, pipe2.flowModel.Re_turbulent};
//   n7836.n8346.n8410 = {0.5 * (pipe2.flowModel.dimensions[1] + pipe2.flowModel.dimensions[2]), 0.5 * (pipe2.flowModel.dimensions[2] + pipe2.flowModel.dimensions[3]), 0.5 * (pipe2.flowModel.dimensions[3] + pipe2.flowModel.dimensions[4]), 0.5 * (pipe2.flowModel.dimensions[4] + pipe2.flowModel.dimensions[5])};
//   pipe2.flowModel.m_flows = array(homotopy((array(n1.n7656.n102.n8149.n7836.n8346.n7663.n8415(pipe2.flowModel.dps_fg[$i1], pipe2.flowModel.rhos[(1:4)[$i1]], pipe2.flowModel.rhos[(2:5)[$i1]], pipe2.flowModel.mus[(1:4)[$i1]], pipe2.flowModel.mus[(2:5)[$i1]], pipe2.flowModel.pathLengths_internal[$i1], n7836.n8346.n8410[$i1], {pipe2.flowModel.g * pipe2.flowModel.dheights[1], pipe2.flowModel.g * pipe2.flowModel.dheights[2], pipe2.flowModel.g * pipe2.flowModel.dheights[3], pipe2.flowModel.g * pipe2.flowModel.dheights[4]}[$i1], {(pipe2.flowModel.crossAreas[1] + pipe2.flowModel.crossAreas[2]) / 2.0, (pipe2.flowModel.crossAreas[2] + pipe2.flowModel.crossAreas[3]) / 2.0, (pipe2.flowModel.crossAreas[3] + pipe2.flowModel.crossAreas[4]) / 2.0, (pipe2.flowModel.crossAreas[4] + pipe2.flowModel.crossAreas[5]) / 2.0}[$i1], {(pipe2.flowModel.roughnesses[1] + pipe2.flowModel.roughnesses[2]) / 2.0, (pipe2.flowModel.roughnesses[2] + pipe2.flowModel.roughnesses[3]) / 2.0, (pipe2.flowModel.roughnesses[3] + pipe2.flowModel.roughnesses[4]) / 2.0, (pipe2.flowModel.roughnesses[4] + pipe2.flowModel.roughnesses[5]) / 2.0}[$i1], n7836.n8346.n8308 / 4.0, pipe2.flowModel.Res_turbulent_internal[$i1]) for $i1 in 1:4) * pipe2.flowModel.nParallel)[$i1], {pipe2.flowModel.m_flow_nominal / pipe2.flowModel.dp_nominal * (pipe2.flowModel.dps_fg[1] - pipe2.flowModel.g * pipe2.flowModel.dheights[1] * n7836.n8346.n8135), pipe2.flowModel.m_flow_nominal / pipe2.flowModel.dp_nominal * (pipe2.flowModel.dps_fg[2] - pipe2.flowModel.g * pipe2.flowModel.dheights[2] * n7836.n8346.n8135), pipe2.flowModel.m_flow_nominal / pipe2.flowModel.dp_nominal * (pipe2.flowModel.dps_fg[3] - pipe2.flowModel.g * pipe2.flowModel.dheights[3] * n7836.n8346.n8135), pipe2.flowModel.m_flow_nominal / pipe2.flowModel.dp_nominal * (pipe2.flowModel.dps_fg[4] - pipe2.flowModel.g * pipe2.flowModel.dheights[4] * n7836.n8346.n8135)}[$i1]) for $i1 in 1:4);
//   pipe2.flowModel.rhos_act[1] = noEvent(if pipe2.flowModel.m_flows[1] > 0.0 then pipe2.flowModel.rhos[1] else pipe2.flowModel.rhos[2]);
//   pipe2.flowModel.mus_act[1] = noEvent(if pipe2.flowModel.m_flows[1] > 0.0 then pipe2.flowModel.mus[1] else pipe2.flowModel.mus[2]);
//   pipe2.flowModel.rhos_act[2] = noEvent(if pipe2.flowModel.m_flows[2] > 0.0 then pipe2.flowModel.rhos[2] else pipe2.flowModel.rhos[3]);
//   pipe2.flowModel.mus_act[2] = noEvent(if pipe2.flowModel.m_flows[2] > 0.0 then pipe2.flowModel.mus[2] else pipe2.flowModel.mus[3]);
//   pipe2.flowModel.rhos_act[3] = noEvent(if pipe2.flowModel.m_flows[3] > 0.0 then pipe2.flowModel.rhos[3] else pipe2.flowModel.rhos[4]);
//   pipe2.flowModel.mus_act[3] = noEvent(if pipe2.flowModel.m_flows[3] > 0.0 then pipe2.flowModel.mus[3] else pipe2.flowModel.mus[4]);
//   pipe2.flowModel.rhos_act[4] = noEvent(if pipe2.flowModel.m_flows[4] > 0.0 then pipe2.flowModel.rhos[4] else pipe2.flowModel.rhos[5]);
//   pipe2.flowModel.mus_act[4] = noEvent(if pipe2.flowModel.m_flows[4] > 0.0 then pipe2.flowModel.mus[4] else pipe2.flowModel.mus[5]);
//   pipe2.flowModel.Ib_flows = array(pipe2.flowModel.rhos[i] * pipe2.flowModel.vs[i] * pipe2.flowModel.vs[i] * pipe2.flowModel.crossAreas[i] - pipe2.flowModel.rhos[i + 1] * pipe2.flowModel.vs[i + 1] * pipe2.flowModel.vs[i + 1] * pipe2.flowModel.crossAreas[i + 1] for n49 in 1:4) * pipe2.flowModel.nParallel;
//   pipe2.flowModel.Fs_p = array(0.5 * (pipe2.flowModel.crossAreas[i] + pipe2.flowModel.crossAreas[i + 1]) * (n1.n7656.n102.n8149.n7836.n8346.n7670.n7786(pipe2.flowModel.states[i + 1]) - n1.n7656.n102.n8149.n7836.n8346.n7670.n7786(pipe2.flowModel.states[i])) for n49 in 1:4) * pipe2.flowModel.nParallel;
//   pipe2.flowModel.dps_fg = array(pipe2.flowModel.Fs_fg[i] / pipe2.flowModel.nParallel * 2.0 / (pipe2.flowModel.crossAreas[i] + pipe2.flowModel.crossAreas[i + 1]) for n49 in 1:4);
//   pipe2.flowModel.Is = array(pipe2.flowModel.m_flows[i] * pipe2.flowModel.pathLengths[i] for n49 in 1:4);
//   der(pipe2.flowModel.Is[1]) = pipe2.flowModel.Ib_flows[1] - pipe2.flowModel.Fs_p[1] - pipe2.flowModel.Fs_fg[1];
//   der(pipe2.flowModel.Is[2]) = pipe2.flowModel.Ib_flows[2] - pipe2.flowModel.Fs_p[2] - pipe2.flowModel.Fs_fg[2];
//   der(pipe2.flowModel.Is[3]) = pipe2.flowModel.Ib_flows[3] - pipe2.flowModel.Fs_p[3] - pipe2.flowModel.Fs_fg[3];
//   der(pipe2.flowModel.Is[4]) = pipe2.flowModel.Ib_flows[4] - pipe2.flowModel.Fs_p[4] - pipe2.flowModel.Fs_fg[4];
//   pipe2.vs = array(0.5 * (pipe2.m_flows[i] + pipe2.m_flows[i + 1]) / pipe2.mediums[i].d / pipe2.crossAreas[i] for n49 in 1:5) / pipe2.nParallel;
//   pipe2.heatTransfer.states[1].X = pipe2.mediums[1].state.X;
//   pipe2.heatTransfer.states[2].X = pipe2.mediums[2].state.X;
//   pipe2.heatTransfer.states[3].X = pipe2.mediums[3].state.X;
//   pipe2.heatTransfer.states[4].X = pipe2.mediums[4].state.X;
//   pipe2.heatTransfer.states[5].X = pipe2.mediums[5].state.X;
//   pipe2.heatTransfer.surfaceAreas = {pipe2.perimeter * 10.0, pipe2.perimeter * 10.0, pipe2.perimeter * 10.0, pipe2.perimeter * 10.0, pipe2.perimeter * 10.0};
//   pipe2.heatTransfer.Ts = array(n1.n7656.n102.n8149.n7836.n7988.n7670.n7785(pipe2.heatTransfer.states[$i1]) for $i1 in 1:5);
//   pipe2.heatTransfer.vs = pipe2.vs;
//   pipe2.heatTransfer.lengths = {10.0, 10.0, 10.0, 10.0, 10.0};
//   pipe2.heatTransfer.dimensions = pipe2.dimensions;
//   pipe2.heatTransfer.roughnesses = pipe2.roughnesses;
//   pipe2.heatTransfer.diameters = pipe2.heatTransfer.dimensions;
//   n7836.n7988.n8433 = 3.66;
//   n7836.n7988.n8431[1] = smooth(0, n7836.n7988.n8435[1] / 8.0 * abs(pipe2.heatTransfer.Res[1]) * pipe2.heatTransfer.Prs[1] / (1.0 + 12.7 * (n7836.n7988.n8435[1] / 8.0) ^ 0.5 * (pipe2.heatTransfer.Prs[1] ^ 0.6666666666666666 - 1.0)) * (1.0 + 0.3333333333333333 * (pipe2.heatTransfer.diameters[1] / pipe2.heatTransfer.lengths[1] / (if pipe2.heatTransfer.vs[1] >= 0.0 then 0.5 else 4.5)) ^ 0.6666666666666666));
//   n7836.n7988.n8435[1] = (1.8 * log10(max(1e-10, pipe2.heatTransfer.Res[1])) - 1.5) ^ (-2.0);
//   n7836.n7988.n8432[1] = (n7836.n7988.n8433 ^ 3.0 + 0.3429999999999999 + (n7836.n7988.n8434[1] - 0.7) ^ 3.0) ^ 0.3333333333333333;
//   n7836.n7988.n8434[1] = smooth(0, 1.077 * (abs(pipe2.heatTransfer.Res[1]) * pipe2.heatTransfer.Prs[1] * pipe2.heatTransfer.diameters[1] / pipe2.heatTransfer.lengths[1] / (if pipe2.heatTransfer.vs[1] >= 0.0 then 0.5 else 4.5)) ^ 0.3333333333333333);
//   pipe2.heatTransfer.Nus[1] = n1.n7671.n8150.n8151.n11.n8436(n7836.n7988.n8431[1], n7836.n7988.n8432[1], pipe2.heatTransfer.Res[1] - 6150.0, 3850.0);
//   n7836.n7988.n8431[2] = smooth(0, n7836.n7988.n8435[2] / 8.0 * abs(pipe2.heatTransfer.Res[2]) * pipe2.heatTransfer.Prs[2] / (1.0 + 12.7 * (n7836.n7988.n8435[2] / 8.0) ^ 0.5 * (pipe2.heatTransfer.Prs[2] ^ 0.6666666666666666 - 1.0)) * (1.0 + 0.3333333333333333 * (pipe2.heatTransfer.diameters[2] / pipe2.heatTransfer.lengths[2] / (if pipe2.heatTransfer.vs[2] >= 0.0 then 1.5 else 3.5)) ^ 0.6666666666666666));
//   n7836.n7988.n8435[2] = (1.8 * log10(max(1e-10, pipe2.heatTransfer.Res[2])) - 1.5) ^ (-2.0);
//   n7836.n7988.n8432[2] = (n7836.n7988.n8433 ^ 3.0 + 0.3429999999999999 + (n7836.n7988.n8434[2] - 0.7) ^ 3.0) ^ 0.3333333333333333;
//   n7836.n7988.n8434[2] = smooth(0, 1.077 * (abs(pipe2.heatTransfer.Res[2]) * pipe2.heatTransfer.Prs[2] * pipe2.heatTransfer.diameters[2] / pipe2.heatTransfer.lengths[2] / (if pipe2.heatTransfer.vs[2] >= 0.0 then 1.5 else 3.5)) ^ 0.3333333333333333);
//   pipe2.heatTransfer.Nus[2] = n1.n7671.n8150.n8151.n11.n8436(n7836.n7988.n8431[2], n7836.n7988.n8432[2], pipe2.heatTransfer.Res[2] - 6150.0, 3850.0);
//   n7836.n7988.n8431[3] = smooth(0, n7836.n7988.n8435[3] / 8.0 * abs(pipe2.heatTransfer.Res[3]) * pipe2.heatTransfer.Prs[3] / (1.0 + 12.7 * (n7836.n7988.n8435[3] / 8.0) ^ 0.5 * (pipe2.heatTransfer.Prs[3] ^ 0.6666666666666666 - 1.0)) * (1.0 + 0.3333333333333333 * (pipe2.heatTransfer.diameters[3] / pipe2.heatTransfer.lengths[3] / 2.5) ^ 0.6666666666666666));
//   n7836.n7988.n8435[3] = (1.8 * log10(max(1e-10, pipe2.heatTransfer.Res[3])) - 1.5) ^ (-2.0);
//   n7836.n7988.n8432[3] = (n7836.n7988.n8433 ^ 3.0 + 0.3429999999999999 + (n7836.n7988.n8434[3] - 0.7) ^ 3.0) ^ 0.3333333333333333;
//   n7836.n7988.n8434[3] = smooth(0, 1.077 * (abs(pipe2.heatTransfer.Res[3]) * pipe2.heatTransfer.Prs[3] * pipe2.heatTransfer.diameters[3] / pipe2.heatTransfer.lengths[3] / 2.5) ^ 0.3333333333333333);
//   pipe2.heatTransfer.Nus[3] = n1.n7671.n8150.n8151.n11.n8436(n7836.n7988.n8431[3], n7836.n7988.n8432[3], pipe2.heatTransfer.Res[3] - 6150.0, 3850.0);
//   n7836.n7988.n8431[4] = smooth(0, n7836.n7988.n8435[4] / 8.0 * abs(pipe2.heatTransfer.Res[4]) * pipe2.heatTransfer.Prs[4] / (1.0 + 12.7 * (n7836.n7988.n8435[4] / 8.0) ^ 0.5 * (pipe2.heatTransfer.Prs[4] ^ 0.6666666666666666 - 1.0)) * (1.0 + 0.3333333333333333 * (pipe2.heatTransfer.diameters[4] / pipe2.heatTransfer.lengths[4] / (if pipe2.heatTransfer.vs[4] >= 0.0 then 3.5 else 1.5)) ^ 0.6666666666666666));
//   n7836.n7988.n8435[4] = (1.8 * log10(max(1e-10, pipe2.heatTransfer.Res[4])) - 1.5) ^ (-2.0);
//   n7836.n7988.n8432[4] = (n7836.n7988.n8433 ^ 3.0 + 0.3429999999999999 + (n7836.n7988.n8434[4] - 0.7) ^ 3.0) ^ 0.3333333333333333;
//   n7836.n7988.n8434[4] = smooth(0, 1.077 * (abs(pipe2.heatTransfer.Res[4]) * pipe2.heatTransfer.Prs[4] * pipe2.heatTransfer.diameters[4] / pipe2.heatTransfer.lengths[4] / (if pipe2.heatTransfer.vs[4] >= 0.0 then 3.5 else 1.5)) ^ 0.3333333333333333);
//   pipe2.heatTransfer.Nus[4] = n1.n7671.n8150.n8151.n11.n8436(n7836.n7988.n8431[4], n7836.n7988.n8432[4], pipe2.heatTransfer.Res[4] - 6150.0, 3850.0);
//   n7836.n7988.n8431[5] = smooth(0, n7836.n7988.n8435[5] / 8.0 * abs(pipe2.heatTransfer.Res[5]) * pipe2.heatTransfer.Prs[5] / (1.0 + 12.7 * (n7836.n7988.n8435[5] / 8.0) ^ 0.5 * (pipe2.heatTransfer.Prs[5] ^ 0.6666666666666666 - 1.0)) * (1.0 + 0.3333333333333333 * (pipe2.heatTransfer.diameters[5] / pipe2.heatTransfer.lengths[5] / (if pipe2.heatTransfer.vs[5] >= 0.0 then 4.5 else 0.5)) ^ 0.6666666666666666));
//   n7836.n7988.n8435[5] = (1.8 * log10(max(1e-10, pipe2.heatTransfer.Res[5])) - 1.5) ^ (-2.0);
//   n7836.n7988.n8432[5] = (n7836.n7988.n8433 ^ 3.0 + 0.3429999999999999 + (n7836.n7988.n8434[5] - 0.7) ^ 3.0) ^ 0.3333333333333333;
//   n7836.n7988.n8434[5] = smooth(0, 1.077 * (abs(pipe2.heatTransfer.Res[5]) * pipe2.heatTransfer.Prs[5] * pipe2.heatTransfer.diameters[5] / pipe2.heatTransfer.lengths[5] / (if pipe2.heatTransfer.vs[5] >= 0.0 then 4.5 else 0.5)) ^ 0.3333333333333333);
//   pipe2.heatTransfer.Nus[5] = n1.n7671.n8150.n8151.n11.n8436(n7836.n7988.n8431[5], n7836.n7988.n8432[5], pipe2.heatTransfer.Res[5] - 6150.0, 3850.0);
//   pipe2.heatTransfer.ds = array(n1.n7656.n102.n8149.n7836.n7988.n7670.n523(pipe2.heatTransfer.states[$i1]) for $i1 in 1:5);
//   pipe2.heatTransfer.mus = array(n1.n7656.n102.n8149.n7836.n7988.n7670.n8340(pipe2.heatTransfer.states[$i1]) for $i1 in 1:5);
//   pipe2.heatTransfer.lambdas = array(n1.n7656.n102.n8149.n7836.n7988.n7670.n8428(pipe2.heatTransfer.states[$i1]) for $i1 in 1:5);
//   pipe2.heatTransfer.Prs = array(n1.n7656.n102.n8149.n7836.n7988.n7670.n8429(pipe2.heatTransfer.states[$i1]) for $i1 in 1:5);
//   pipe2.heatTransfer.Res = array(n1.n7656.n7680.n5984.n8393.n8329(pipe2.heatTransfer.vs[$i1], pipe2.heatTransfer.ds[$i1], pipe2.heatTransfer.mus[$i1], pipe2.heatTransfer.diameters[$i1]) for $i1 in 1:5);
//   pipe2.heatTransfer.Nus = array(n1.n7656.n7680.n5984.n8393.n8430(pipe2.heatTransfer.alphas[$i1], pipe2.heatTransfer.diameters[$i1], pipe2.heatTransfer.lambdas[$i1]) for $i1 in 1:5);
//   pipe2.heatTransfer.Q_flows = array(pipe2.heatTransfer.alphas[i] * pipe2.heatTransfer.surfaceAreas[i] * (pipe2.heatTransfer.heatPorts[i].T - pipe2.heatTransfer.Ts[i]) * pipe2.heatTransfer.nParallel for n49 in 1:5);
//   pipe2.heatTransfer.Q_flows = {pipe2.heatTransfer.heatPorts[1].Q_flow, pipe2.heatTransfer.heatPorts[2].Q_flow, pipe2.heatTransfer.heatPorts[3].Q_flow, pipe2.heatTransfer.heatPorts[4].Q_flow, pipe2.heatTransfer.heatPorts[5].Q_flow} + array(0.0 for n49 in 1:5);
//   pipe2.Qb_flows[1] = pipe2.heatTransfer.Q_flows[1];
//   pipe2.Qb_flows[2] = pipe2.heatTransfer.Q_flows[2];
//   pipe2.Qb_flows[3] = pipe2.heatTransfer.Q_flows[3];
//   pipe2.Qb_flows[4] = pipe2.heatTransfer.Q_flows[4];
//   pipe2.Qb_flows[5] = pipe2.heatTransfer.Q_flows[5];
//   pipe2.Wb_flows[2:4] = array(pipe2.vs[i] * pipe2.crossAreas[i] * ((pipe2.mediums[i + 1].p - pipe2.mediums[i - 1].p) / 2.0 + (pipe2.flowModel.dps_fg[i - 1] + pipe2.flowModel.dps_fg[i]) / 2.0 - system.g * {5.0, 5.0, 5.0, 5.0, 5.0}[i] * pipe2.mediums[i].d) for n49 in 2:4) * pipe2.nParallel;
//   pipe2.Wb_flows[1] = pipe2.vs[1] * pipe2.crossAreas[1] * ((pipe2.mediums[2].p - pipe2.mediums[1].p) / 2.0 + pipe2.flowModel.dps_fg[1] / 2.0 - system.g * 5.0 * pipe2.mediums[1].d) * pipe2.nParallel;
//   pipe2.Wb_flows[5] = pipe2.vs[5] * pipe2.crossAreas[5] * ((pipe2.mediums[5].p - pipe2.mediums[4].p) / 2.0 + pipe2.flowModel.dps_fg[4] / 2.0 - system.g * 5.0 * pipe2.mediums[5].d) * pipe2.nParallel;
//   n7836.n8348[1] = 15.0;
//   n7836.n8348[2] = 10.0;
//   n7836.n8348[3] = 10.0;
//   n7836.n8348[4] = 15.0;
//   n7836.n8373[1] = 7.5;
//   n7836.n8373[2] = 5.0;
//   n7836.n8373[3] = 5.0;
//   n7836.n8373[4] = 7.5;
//   n7836.n8370[1] = pipe2.crossAreas[1];
//   n7836.n8370[2] = pipe2.crossAreas[2];
//   n7836.n8370[3] = pipe2.crossAreas[3];
//   n7836.n8370[4] = pipe2.crossAreas[4];
//   n7836.n8370[5] = pipe2.crossAreas[5];
//   n7836.n8371[1] = pipe2.dimensions[1];
//   n7836.n8371[2] = pipe2.dimensions[2];
//   n7836.n8371[3] = pipe2.dimensions[3];
//   n7836.n8371[4] = pipe2.dimensions[4];
//   n7836.n8371[5] = pipe2.dimensions[5];
//   n7836.n8372[1] = pipe2.roughnesses[1];
//   n7836.n8372[2] = pipe2.roughnesses[2];
//   n7836.n8372[3] = pipe2.roughnesses[3];
//   n7836.n8372[4] = pipe2.roughnesses[4];
//   n7836.n8372[5] = pipe2.roughnesses[5];
//   pipe2.mb_flows[1] = pipe2.m_flows[1] - pipe2.m_flows[2];
//   pipe2.mbXi_flows[1,1] = pipe2.mXi_flows[1,1] - pipe2.mXi_flows[2,1];
//   pipe2.Hb_flows[1] = pipe2.H_flows[1] - pipe2.H_flows[2];
//   pipe2.mb_flows[2] = pipe2.m_flows[2] - pipe2.m_flows[3];
//   pipe2.mbXi_flows[2,1] = pipe2.mXi_flows[2,1] - pipe2.mXi_flows[3,1];
//   pipe2.Hb_flows[2] = pipe2.H_flows[2] - pipe2.H_flows[3];
//   pipe2.mb_flows[3] = pipe2.m_flows[3] - pipe2.m_flows[4];
//   pipe2.mbXi_flows[3,1] = pipe2.mXi_flows[3,1] - pipe2.mXi_flows[4,1];
//   pipe2.Hb_flows[3] = pipe2.H_flows[3] - pipe2.H_flows[4];
//   pipe2.mb_flows[4] = pipe2.m_flows[4] - pipe2.m_flows[5];
//   pipe2.mbXi_flows[4,1] = pipe2.mXi_flows[4,1] - pipe2.mXi_flows[5,1];
//   pipe2.Hb_flows[4] = pipe2.H_flows[4] - pipe2.H_flows[5];
//   pipe2.mb_flows[5] = pipe2.m_flows[5] - pipe2.m_flows[6];
//   pipe2.mbXi_flows[5,1] = pipe2.mXi_flows[5,1] - pipe2.mXi_flows[6,1];
//   pipe2.Hb_flows[5] = pipe2.H_flows[5] - pipe2.H_flows[6];
//   pipe2.H_flows[2] = semiLinear(pipe2.m_flows[2], pipe2.mediums[1].h, pipe2.mediums[2].h);
//   pipe2.mXi_flows[2,1] = semiLinear(pipe2.m_flows[2], pipe2.mediums[1].Xi[1], pipe2.mediums[2].Xi[1]);
//   pipe2.H_flows[3] = semiLinear(pipe2.m_flows[3], pipe2.mediums[2].h, pipe2.mediums[3].h);
//   pipe2.mXi_flows[3,1] = semiLinear(pipe2.m_flows[3], pipe2.mediums[2].Xi[1], pipe2.mediums[3].Xi[1]);
//   pipe2.H_flows[4] = semiLinear(pipe2.m_flows[4], pipe2.mediums[3].h, pipe2.mediums[4].h);
//   pipe2.mXi_flows[4,1] = semiLinear(pipe2.m_flows[4], pipe2.mediums[3].Xi[1], pipe2.mediums[4].Xi[1]);
//   pipe2.H_flows[5] = semiLinear(pipe2.m_flows[5], pipe2.mediums[4].h, pipe2.mediums[5].h);
//   pipe2.mXi_flows[5,1] = semiLinear(pipe2.m_flows[5], pipe2.mediums[4].Xi[1], pipe2.mediums[5].Xi[1]);
//   pipe2.H_flows[1] = semiLinear(pipe2.port_a.m_flow, ($OMC$PositiveMax(-pipe3.port_a.m_flow, 1e-07) * pipe3.port_a.h_outflow + $OMC$PositiveMax(-pipe1.port_b.m_flow, 1e-07) * pipe1.port_b.h_outflow) / ($OMC$PositiveMax(-pipe3.port_a.m_flow, 1e-07) + $OMC$PositiveMax(-pipe1.port_b.m_flow, 1e-07)), pipe2.mediums[1].h);
//   pipe2.H_flows[6] = -semiLinear(pipe2.port_b.m_flow, ($OMC$PositiveMax(-pipe4.port_a.m_flow, 1e-07) * pipe4.port_a.h_outflow + $OMC$PositiveMax(-pipe3.port_b.m_flow, 1e-07) * pipe3.port_b.h_outflow) / ($OMC$PositiveMax(-pipe4.port_a.m_flow, 1e-07) + $OMC$PositiveMax(-pipe3.port_b.m_flow, 1e-07)), pipe2.mediums[5].h);
//   pipe2.mXi_flows[1,1] = semiLinear(pipe2.port_a.m_flow, ($OMC$PositiveMax(-pipe3.port_a.m_flow, 1e-07) * pipe3.port_a.Xi_outflow[1] + $OMC$PositiveMax(-pipe1.port_b.m_flow, 1e-07) * pipe1.port_b.Xi_outflow[1]) / ($OMC$PositiveMax(-pipe3.port_a.m_flow, 1e-07) + $OMC$PositiveMax(-pipe1.port_b.m_flow, 1e-07)), pipe2.mediums[1].Xi[1]);
//   pipe2.mXi_flows[6,1] = -semiLinear(pipe2.port_b.m_flow, ($OMC$PositiveMax(-pipe4.port_a.m_flow, 1e-07) * pipe4.port_a.Xi_outflow[1] + $OMC$PositiveMax(-pipe3.port_b.m_flow, 1e-07) * pipe3.port_b.Xi_outflow[1]) / ($OMC$PositiveMax(-pipe4.port_a.m_flow, 1e-07) + $OMC$PositiveMax(-pipe3.port_b.m_flow, 1e-07)), pipe2.mediums[5].Xi[1]);
//   pipe2.port_a.m_flow = pipe2.m_flows[1];
//   pipe2.port_b.m_flow = -pipe2.m_flows[6];
//   pipe2.port_a.h_outflow = pipe2.mediums[1].h;
//   pipe2.port_b.h_outflow = pipe2.mediums[5].h;
//   pipe2.port_a.Xi_outflow[1] = pipe2.mediums[1].Xi[1];
//   pipe2.port_b.Xi_outflow[1] = pipe2.mediums[5].Xi[1];
//   pipe2.state_a = n1.n7656.n102.n8149.n7836.n7670.n8338(pipe2.port_a.p, ($OMC$PositiveMax(-pipe3.port_a.m_flow, 1e-07) * pipe3.port_a.h_outflow + $OMC$PositiveMax(-pipe1.port_b.m_flow, 1e-07) * pipe1.port_b.h_outflow) / ($OMC$PositiveMax(-pipe3.port_a.m_flow, 1e-07) + $OMC$PositiveMax(-pipe1.port_b.m_flow, 1e-07)), {($OMC$PositiveMax(-pipe3.port_a.m_flow, 1e-07) * pipe3.port_a.Xi_outflow[1] + $OMC$PositiveMax(-pipe1.port_b.m_flow, 1e-07) * pipe1.port_b.Xi_outflow[1]) / ($OMC$PositiveMax(-pipe3.port_a.m_flow, 1e-07) + $OMC$PositiveMax(-pipe1.port_b.m_flow, 1e-07))});
//   pipe2.state_b = n1.n7656.n102.n8149.n7836.n7670.n8338(pipe2.port_b.p, ($OMC$PositiveMax(-pipe4.port_a.m_flow, 1e-07) * pipe4.port_a.h_outflow + $OMC$PositiveMax(-pipe3.port_b.m_flow, 1e-07) * pipe3.port_b.h_outflow) / ($OMC$PositiveMax(-pipe4.port_a.m_flow, 1e-07) + $OMC$PositiveMax(-pipe3.port_b.m_flow, 1e-07)), {($OMC$PositiveMax(-pipe4.port_a.m_flow, 1e-07) * pipe4.port_a.Xi_outflow[1] + $OMC$PositiveMax(-pipe3.port_b.m_flow, 1e-07) * pipe3.port_b.Xi_outflow[1]) / ($OMC$PositiveMax(-pipe4.port_a.m_flow, 1e-07) + $OMC$PositiveMax(-pipe3.port_b.m_flow, 1e-07))});
//   pipe2.statesFM[1] = pipe2.mediums[1].state;
//   pipe2.statesFM[2] = pipe2.mediums[2].state;
//   pipe2.statesFM[3] = pipe2.mediums[3].state;
//   pipe2.statesFM[4] = pipe2.mediums[4].state;
//   pipe2.statesFM[5] = pipe2.mediums[5].state;
//   pipe2.m_flows[2] = pipe2.flowModel.m_flows[1];
//   pipe2.m_flows[3] = pipe2.flowModel.m_flows[2];
//   pipe2.m_flows[4] = pipe2.flowModel.m_flows[3];
//   pipe2.m_flows[5] = pipe2.flowModel.m_flows[4];
//   n7836.n8369[1] = pipe2.vs[1];
//   n7836.n8369[2] = pipe2.vs[2];
//   n7836.n8369[3] = pipe2.vs[3];
//   n7836.n8369[4] = pipe2.vs[4];
//   n7836.n8369[5] = pipe2.vs[5];
//   pipe2.port_a.p = pipe2.mediums[1].p;
//   pipe2.port_b.p = pipe2.mediums[5].p;
//   pipe2.ms[1] = pipe2.fluidVolumes[1] * pipe2.mediums[1].d;
//   pipe2.mXis[1,1] = pipe2.ms[1] * pipe2.mediums[1].Xi[1];
//   pipe2.Us[1] = pipe2.ms[1] * pipe2.mediums[1].u;
//   pipe2.ms[2] = pipe2.fluidVolumes[2] * pipe2.mediums[2].d;
//   pipe2.mXis[2,1] = pipe2.ms[2] * pipe2.mediums[2].Xi[1];
//   pipe2.Us[2] = pipe2.ms[2] * pipe2.mediums[2].u;
//   pipe2.ms[3] = pipe2.fluidVolumes[3] * pipe2.mediums[3].d;
//   pipe2.mXis[3,1] = pipe2.ms[3] * pipe2.mediums[3].Xi[1];
//   pipe2.Us[3] = pipe2.ms[3] * pipe2.mediums[3].u;
//   pipe2.ms[4] = pipe2.fluidVolumes[4] * pipe2.mediums[4].d;
//   pipe2.mXis[4,1] = pipe2.ms[4] * pipe2.mediums[4].Xi[1];
//   pipe2.Us[4] = pipe2.ms[4] * pipe2.mediums[4].u;
//   pipe2.ms[5] = pipe2.fluidVolumes[5] * pipe2.mediums[5].d;
//   pipe2.mXis[5,1] = pipe2.ms[5] * pipe2.mediums[5].Xi[1];
//   pipe2.Us[5] = pipe2.ms[5] * pipe2.mediums[5].u;
//   der(pipe2.Us[1]) = pipe2.Hb_flows[1] + pipe2.Wb_flows[1] + pipe2.Qb_flows[1];
//   der(pipe2.Us[2]) = pipe2.Hb_flows[2] + pipe2.Wb_flows[2] + pipe2.Qb_flows[2];
//   der(pipe2.Us[3]) = pipe2.Hb_flows[3] + pipe2.Wb_flows[3] + pipe2.Qb_flows[3];
//   der(pipe2.Us[4]) = pipe2.Hb_flows[4] + pipe2.Wb_flows[4] + pipe2.Qb_flows[4];
//   der(pipe2.Us[5]) = pipe2.Hb_flows[5] + pipe2.Wb_flows[5] + pipe2.Qb_flows[5];
//   der(pipe2.ms[1]) = pipe2.mb_flows[1];
//   der(pipe2.ms[2]) = pipe2.mb_flows[2];
//   der(pipe2.ms[3]) = pipe2.mb_flows[3];
//   der(pipe2.ms[4]) = pipe2.mb_flows[4];
//   der(pipe2.ms[5]) = pipe2.mb_flows[5];
//   der(pipe2.mXis[1,1]) = pipe2.mbXi_flows[1,1];
//   der(pipe2.mXis[2,1]) = pipe2.mbXi_flows[2,1];
//   der(pipe2.mXis[3,1]) = pipe2.mbXi_flows[3,1];
//   der(pipe2.mXis[4,1]) = pipe2.mbXi_flows[4,1];
//   der(pipe2.mXis[5,1]) = pipe2.mbXi_flows[5,1];
//   pipe3.fluidVolumes = array(pipe3.crossAreas[i] * {5.0, 5.0, 5.0, 5.0, 5.0}[i] for n49 in 1:5) * pipe3.nParallel;
//   assert(pipe3.mediums[1].T >= 190.0 and pipe3.mediums[1].T <= 647.0, \"assert message 315810245365667762\");
//   pipe3.mediums[1].MM = 1.0 / (pipe3.mediums[1].Xi[1] / 0.01801528 + (1.0 - pipe3.mediums[1].Xi[1]) / 0.0289651159);
//   n7837.n8256[1].n10110 = min(n1.n7656.n102.n8149.n7837.n7670.n8562(pipe3.mediums[1].T), 0.999 * pipe3.mediums[1].p);
//   n7837.n8256[1].n10108 = min(n7837.n8256[1].n10110 * 0.6219647130774989 / max(1e-13, pipe3.mediums[1].p - n7837.n8256[1].n10110) * (1.0 - pipe3.mediums[1].Xi[1]), 1.0);
//   n7837.n8256[1].n10105 = max(pipe3.mediums[1].Xi[1] - n7837.n8256[1].n10108, 0.0);
//   n7837.n8256[1].n10106 = pipe3.mediums[1].Xi[1] - n7837.n8256[1].n10105;
//   n7837.n8256[1].n10107 = 1.0 - pipe3.mediums[1].Xi[1];
//   pipe3.mediums[1].h = n1.n7656.n102.n8149.n7837.n7670.n7957(pipe3.mediums[1].p, pipe3.mediums[1].T, pipe3.mediums[1].Xi);
//   pipe3.mediums[1].R = 287.0512249529787 * n7837.n8256[1].n10107 / (1.0 - n7837.n8256[1].n10105) + 461.5233290850878 * n7837.n8256[1].n10106 / (1.0 - n7837.n8256[1].n10105);
//   pipe3.mediums[1].u = pipe3.mediums[1].h - pipe3.mediums[1].R * pipe3.mediums[1].T;
//   pipe3.mediums[1].d = pipe3.mediums[1].p / (pipe3.mediums[1].R * pipe3.mediums[1].T);
//   pipe3.mediums[1].state.p = pipe3.mediums[1].p;
//   pipe3.mediums[1].state.T = pipe3.mediums[1].T;
//   pipe3.mediums[1].state.X[1] = pipe3.mediums[1].X[1];
//   pipe3.mediums[1].state.X[2] = pipe3.mediums[1].X[2];
//   n7837.n8256[1].n10109 = 0.6219647130774989 * n7837.n8256[1].n10110 / max(1e-13, pipe3.mediums[1].p - n7837.n8256[1].n10110);
//   pipe3.mediums[1].x_water = pipe3.mediums[1].Xi[1] / max(n7837.n8256[1].n10107, 1e-13);
//   pipe3.mediums[1].phi = pipe3.mediums[1].p / n7837.n8256[1].n10110 * pipe3.mediums[1].Xi[1] / (pipe3.mediums[1].Xi[1] + 0.6219647130774989 * n7837.n8256[1].n10107);
//   pipe3.mediums[1].Xi[1] = pipe3.mediums[1].X[1];
//   pipe3.mediums[1].X[2] = 1.0 - pipe3.mediums[1].Xi[1];
//   assert(pipe3.mediums[1].X[1] >= -1e-05 and pipe3.mediums[1].X[1] <= 1.00001, \"assert message 1370699107527140891\");
//   assert(pipe3.mediums[1].X[2] >= -1e-05 and pipe3.mediums[1].X[2] <= 1.00001, \"assert message 1370699107527140891\");
//   assert(pipe3.mediums[1].p >= 0.0, \"assert message 2590312994638120201\");
//   assert(pipe3.mediums[2].T >= 190.0 and pipe3.mediums[2].T <= 647.0, \"assert message 315810245365667762\");
//   pipe3.mediums[2].MM = 1.0 / (pipe3.mediums[2].Xi[1] / 0.01801528 + (1.0 - pipe3.mediums[2].Xi[1]) / 0.0289651159);
//   n7837.n8256[2].n10110 = min(n1.n7656.n102.n8149.n7837.n7670.n8562(pipe3.mediums[2].T), 0.999 * pipe3.mediums[2].p);
//   n7837.n8256[2].n10108 = min(n7837.n8256[2].n10110 * 0.6219647130774989 / max(1e-13, pipe3.mediums[2].p - n7837.n8256[2].n10110) * (1.0 - pipe3.mediums[2].Xi[1]), 1.0);
//   n7837.n8256[2].n10105 = max(pipe3.mediums[2].Xi[1] - n7837.n8256[2].n10108, 0.0);
//   n7837.n8256[2].n10106 = pipe3.mediums[2].Xi[1] - n7837.n8256[2].n10105;
//   n7837.n8256[2].n10107 = 1.0 - pipe3.mediums[2].Xi[1];
//   pipe3.mediums[2].h = n1.n7656.n102.n8149.n7837.n7670.n7957(pipe3.mediums[2].p, pipe3.mediums[2].T, pipe3.mediums[2].Xi);
//   pipe3.mediums[2].R = 287.0512249529787 * n7837.n8256[2].n10107 / (1.0 - n7837.n8256[2].n10105) + 461.5233290850878 * n7837.n8256[2].n10106 / (1.0 - n7837.n8256[2].n10105);
//   pipe3.mediums[2].u = pipe3.mediums[2].h - pipe3.mediums[2].R * pipe3.mediums[2].T;
//   pipe3.mediums[2].d = pipe3.mediums[2].p / (pipe3.mediums[2].R * pipe3.mediums[2].T);
//   pipe3.mediums[2].state.p = pipe3.mediums[2].p;
//   pipe3.mediums[2].state.T = pipe3.mediums[2].T;
//   pipe3.mediums[2].state.X[1] = pipe3.mediums[2].X[1];
//   pipe3.mediums[2].state.X[2] = pipe3.mediums[2].X[2];
//   n7837.n8256[2].n10109 = 0.6219647130774989 * n7837.n8256[2].n10110 / max(1e-13, pipe3.mediums[2].p - n7837.n8256[2].n10110);
//   pipe3.mediums[2].x_water = pipe3.mediums[2].Xi[1] / max(n7837.n8256[2].n10107, 1e-13);
//   pipe3.mediums[2].phi = pipe3.mediums[2].p / n7837.n8256[2].n10110 * pipe3.mediums[2].Xi[1] / (pipe3.mediums[2].Xi[1] + 0.6219647130774989 * n7837.n8256[2].n10107);
//   pipe3.mediums[2].Xi[1] = pipe3.mediums[2].X[1];
//   pipe3.mediums[2].X[2] = 1.0 - pipe3.mediums[2].Xi[1];
//   assert(pipe3.mediums[2].X[1] >= -1e-05 and pipe3.mediums[2].X[1] <= 1.00001, \"assert message 1370699107527140891\");
//   assert(pipe3.mediums[2].X[2] >= -1e-05 and pipe3.mediums[2].X[2] <= 1.00001, \"assert message 1370699107527140891\");
//   assert(pipe3.mediums[2].p >= 0.0, \"assert message 2590312994638120201\");
//   assert(pipe3.mediums[3].T >= 190.0 and pipe3.mediums[3].T <= 647.0, \"assert message 315810245365667762\");
//   pipe3.mediums[3].MM = 1.0 / (pipe3.mediums[3].Xi[1] / 0.01801528 + (1.0 - pipe3.mediums[3].Xi[1]) / 0.0289651159);
//   n7837.n8256[3].n10110 = min(n1.n7656.n102.n8149.n7837.n7670.n8562(pipe3.mediums[3].T), 0.999 * pipe3.mediums[3].p);
//   n7837.n8256[3].n10108 = min(n7837.n8256[3].n10110 * 0.6219647130774989 / max(1e-13, pipe3.mediums[3].p - n7837.n8256[3].n10110) * (1.0 - pipe3.mediums[3].Xi[1]), 1.0);
//   n7837.n8256[3].n10105 = max(pipe3.mediums[3].Xi[1] - n7837.n8256[3].n10108, 0.0);
//   n7837.n8256[3].n10106 = pipe3.mediums[3].Xi[1] - n7837.n8256[3].n10105;
//   n7837.n8256[3].n10107 = 1.0 - pipe3.mediums[3].Xi[1];
//   pipe3.mediums[3].h = n1.n7656.n102.n8149.n7837.n7670.n7957(pipe3.mediums[3].p, pipe3.mediums[3].T, pipe3.mediums[3].Xi);
//   pipe3.mediums[3].R = 287.0512249529787 * n7837.n8256[3].n10107 / (1.0 - n7837.n8256[3].n10105) + 461.5233290850878 * n7837.n8256[3].n10106 / (1.0 - n7837.n8256[3].n10105);
//   pipe3.mediums[3].u = pipe3.mediums[3].h - pipe3.mediums[3].R * pipe3.mediums[3].T;
//   pipe3.mediums[3].d = pipe3.mediums[3].p / (pipe3.mediums[3].R * pipe3.mediums[3].T);
//   pipe3.mediums[3].state.p = pipe3.mediums[3].p;
//   pipe3.mediums[3].state.T = pipe3.mediums[3].T;
//   pipe3.mediums[3].state.X[1] = pipe3.mediums[3].X[1];
//   pipe3.mediums[3].state.X[2] = pipe3.mediums[3].X[2];
//   n7837.n8256[3].n10109 = 0.6219647130774989 * n7837.n8256[3].n10110 / max(1e-13, pipe3.mediums[3].p - n7837.n8256[3].n10110);
//   pipe3.mediums[3].x_water = pipe3.mediums[3].Xi[1] / max(n7837.n8256[3].n10107, 1e-13);
//   pipe3.mediums[3].phi = pipe3.mediums[3].p / n7837.n8256[3].n10110 * pipe3.mediums[3].Xi[1] / (pipe3.mediums[3].Xi[1] + 0.6219647130774989 * n7837.n8256[3].n10107);
//   pipe3.mediums[3].Xi[1] = pipe3.mediums[3].X[1];
//   pipe3.mediums[3].X[2] = 1.0 - pipe3.mediums[3].Xi[1];
//   assert(pipe3.mediums[3].X[1] >= -1e-05 and pipe3.mediums[3].X[1] <= 1.00001, \"assert message 1370699107527140891\");
//   assert(pipe3.mediums[3].X[2] >= -1e-05 and pipe3.mediums[3].X[2] <= 1.00001, \"assert message 1370699107527140891\");
//   assert(pipe3.mediums[3].p >= 0.0, \"assert message 2590312994638120201\");
//   assert(pipe3.mediums[4].T >= 190.0 and pipe3.mediums[4].T <= 647.0, \"assert message 315810245365667762\");
//   pipe3.mediums[4].MM = 1.0 / (pipe3.mediums[4].Xi[1] / 0.01801528 + (1.0 - pipe3.mediums[4].Xi[1]) / 0.0289651159);
//   n7837.n8256[4].n10110 = min(n1.n7656.n102.n8149.n7837.n7670.n8562(pipe3.mediums[4].T), 0.999 * pipe3.mediums[4].p);
//   n7837.n8256[4].n10108 = min(n7837.n8256[4].n10110 * 0.6219647130774989 / max(1e-13, pipe3.mediums[4].p - n7837.n8256[4].n10110) * (1.0 - pipe3.mediums[4].Xi[1]), 1.0);
//   n7837.n8256[4].n10105 = max(pipe3.mediums[4].Xi[1] - n7837.n8256[4].n10108, 0.0);
//   n7837.n8256[4].n10106 = pipe3.mediums[4].Xi[1] - n7837.n8256[4].n10105;
//   n7837.n8256[4].n10107 = 1.0 - pipe3.mediums[4].Xi[1];
//   pipe3.mediums[4].h = n1.n7656.n102.n8149.n7837.n7670.n7957(pipe3.mediums[4].p, pipe3.mediums[4].T, pipe3.mediums[4].Xi);
//   pipe3.mediums[4].R = 287.0512249529787 * n7837.n8256[4].n10107 / (1.0 - n7837.n8256[4].n10105) + 461.5233290850878 * n7837.n8256[4].n10106 / (1.0 - n7837.n8256[4].n10105);
//   pipe3.mediums[4].u = pipe3.mediums[4].h - pipe3.mediums[4].R * pipe3.mediums[4].T;
//   pipe3.mediums[4].d = pipe3.mediums[4].p / (pipe3.mediums[4].R * pipe3.mediums[4].T);
//   pipe3.mediums[4].state.p = pipe3.mediums[4].p;
//   pipe3.mediums[4].state.T = pipe3.mediums[4].T;
//   pipe3.mediums[4].state.X[1] = pipe3.mediums[4].X[1];
//   pipe3.mediums[4].state.X[2] = pipe3.mediums[4].X[2];
//   n7837.n8256[4].n10109 = 0.6219647130774989 * n7837.n8256[4].n10110 / max(1e-13, pipe3.mediums[4].p - n7837.n8256[4].n10110);
//   pipe3.mediums[4].x_water = pipe3.mediums[4].Xi[1] / max(n7837.n8256[4].n10107, 1e-13);
//   pipe3.mediums[4].phi = pipe3.mediums[4].p / n7837.n8256[4].n10110 * pipe3.mediums[4].Xi[1] / (pipe3.mediums[4].Xi[1] + 0.6219647130774989 * n7837.n8256[4].n10107);
//   pipe3.mediums[4].Xi[1] = pipe3.mediums[4].X[1];
//   pipe3.mediums[4].X[2] = 1.0 - pipe3.mediums[4].Xi[1];
//   assert(pipe3.mediums[4].X[1] >= -1e-05 and pipe3.mediums[4].X[1] <= 1.00001, \"assert message 1370699107527140891\");
//   assert(pipe3.mediums[4].X[2] >= -1e-05 and pipe3.mediums[4].X[2] <= 1.00001, \"assert message 1370699107527140891\");
//   assert(pipe3.mediums[4].p >= 0.0, \"assert message 2590312994638120201\");
//   assert(pipe3.mediums[5].T >= 190.0 and pipe3.mediums[5].T <= 647.0, \"assert message 315810245365667762\");
//   pipe3.mediums[5].MM = 1.0 / (pipe3.mediums[5].Xi[1] / 0.01801528 + (1.0 - pipe3.mediums[5].Xi[1]) / 0.0289651159);
//   n7837.n8256[5].n10110 = min(n1.n7656.n102.n8149.n7837.n7670.n8562(pipe3.mediums[5].T), 0.999 * pipe3.mediums[5].p);
//   n7837.n8256[5].n10108 = min(n7837.n8256[5].n10110 * 0.6219647130774989 / max(1e-13, pipe3.mediums[5].p - n7837.n8256[5].n10110) * (1.0 - pipe3.mediums[5].Xi[1]), 1.0);
//   n7837.n8256[5].n10105 = max(pipe3.mediums[5].Xi[1] - n7837.n8256[5].n10108, 0.0);
//   n7837.n8256[5].n10106 = pipe3.mediums[5].Xi[1] - n7837.n8256[5].n10105;
//   n7837.n8256[5].n10107 = 1.0 - pipe3.mediums[5].Xi[1];
//   pipe3.mediums[5].h = n1.n7656.n102.n8149.n7837.n7670.n7957(pipe3.mediums[5].p, pipe3.mediums[5].T, pipe3.mediums[5].Xi);
//   pipe3.mediums[5].R = 287.0512249529787 * n7837.n8256[5].n10107 / (1.0 - n7837.n8256[5].n10105) + 461.5233290850878 * n7837.n8256[5].n10106 / (1.0 - n7837.n8256[5].n10105);
//   pipe3.mediums[5].u = pipe3.mediums[5].h - pipe3.mediums[5].R * pipe3.mediums[5].T;
//   pipe3.mediums[5].d = pipe3.mediums[5].p / (pipe3.mediums[5].R * pipe3.mediums[5].T);
//   pipe3.mediums[5].state.p = pipe3.mediums[5].p;
//   pipe3.mediums[5].state.T = pipe3.mediums[5].T;
//   pipe3.mediums[5].state.X[1] = pipe3.mediums[5].X[1];
//   pipe3.mediums[5].state.X[2] = pipe3.mediums[5].X[2];
//   n7837.n8256[5].n10109 = 0.6219647130774989 * n7837.n8256[5].n10110 / max(1e-13, pipe3.mediums[5].p - n7837.n8256[5].n10110);
//   pipe3.mediums[5].x_water = pipe3.mediums[5].Xi[1] / max(n7837.n8256[5].n10107, 1e-13);
//   pipe3.mediums[5].phi = pipe3.mediums[5].p / n7837.n8256[5].n10110 * pipe3.mediums[5].Xi[1] / (pipe3.mediums[5].Xi[1] + 0.6219647130774989 * n7837.n8256[5].n10107);
//   pipe3.mediums[5].Xi[1] = pipe3.mediums[5].X[1];
//   pipe3.mediums[5].X[2] = 1.0 - pipe3.mediums[5].Xi[1];
//   assert(pipe3.mediums[5].X[1] >= -1e-05 and pipe3.mediums[5].X[1] <= 1.00001, \"assert message 1370699107527140891\");
//   assert(pipe3.mediums[5].X[2] >= -1e-05 and pipe3.mediums[5].X[2] <= 1.00001, \"assert message 1370699107527140891\");
//   assert(pipe3.mediums[5].p >= 0.0, \"assert message 2590312994638120201\");
//   pipe3.flowModel.states[1].X = pipe3.statesFM[1].X;
//   pipe3.flowModel.states[2].X = pipe3.statesFM[2].X;
//   pipe3.flowModel.states[3].X = pipe3.statesFM[3].X;
//   pipe3.flowModel.states[4].X = pipe3.statesFM[4].X;
//   pipe3.flowModel.states[5].X = pipe3.statesFM[5].X;
//   pipe3.flowModel.states[6].X = pipe3.statesFM[6].X;
//   pipe3.flowModel.states[7].X = pipe3.statesFM[7].X;
//   pipe3.flowModel.vs = n7837.n8369;
//   pipe3.flowModel.crossAreas = n7837.n8370;
//   pipe3.flowModel.dimensions = n7837.n8371;
//   pipe3.flowModel.roughnesses = n7837.n8372;
//   pipe3.flowModel.dheights = n7837.n8373;
//   pipe3.flowModel.pathLengths = n7837.n8348;
//   pipe3.flowModel.rhos = array(n1.n7656.n102.n8149.n7837.n8346.n7670.n523(pipe3.flowModel.states[$i1]) for $i1 in 1:7);
//   pipe3.flowModel.mus = array(n1.n7656.n102.n8149.n7837.n8346.n7670.n8340(pipe3.flowModel.states[$i1]) for $i1 in 1:7);
//   pipe3.flowModel.pathLengths_internal = pipe3.flowModel.pathLengths;
//   pipe3.flowModel.Res_turbulent_internal = {pipe3.flowModel.Re_turbulent, pipe3.flowModel.Re_turbulent, pipe3.flowModel.Re_turbulent, pipe3.flowModel.Re_turbulent, pipe3.flowModel.Re_turbulent, pipe3.flowModel.Re_turbulent};
//   n7837.n8346.n8410 = {0.5 * (pipe3.flowModel.dimensions[1] + pipe3.flowModel.dimensions[2]), 0.5 * (pipe3.flowModel.dimensions[2] + pipe3.flowModel.dimensions[3]), 0.5 * (pipe3.flowModel.dimensions[3] + pipe3.flowModel.dimensions[4]), 0.5 * (pipe3.flowModel.dimensions[4] + pipe3.flowModel.dimensions[5]), 0.5 * (pipe3.flowModel.dimensions[5] + pipe3.flowModel.dimensions[6]), 0.5 * (pipe3.flowModel.dimensions[6] + pipe3.flowModel.dimensions[7])};
//   pipe3.flowModel.m_flows = array(homotopy((array(n1.n7656.n102.n8149.n7837.n8346.n7663.n8415(pipe3.flowModel.dps_fg[$i1], pipe3.flowModel.rhos[(1:6)[$i1]], pipe3.flowModel.rhos[(2:7)[$i1]], pipe3.flowModel.mus[(1:6)[$i1]], pipe3.flowModel.mus[(2:7)[$i1]], pipe3.flowModel.pathLengths_internal[$i1], n7837.n8346.n8410[$i1], {pipe3.flowModel.g * pipe3.flowModel.dheights[1], pipe3.flowModel.g * pipe3.flowModel.dheights[2], pipe3.flowModel.g * pipe3.flowModel.dheights[3], pipe3.flowModel.g * pipe3.flowModel.dheights[4], pipe3.flowModel.g * pipe3.flowModel.dheights[5], pipe3.flowModel.g * pipe3.flowModel.dheights[6]}[$i1], {(pipe3.flowModel.crossAreas[1] + pipe3.flowModel.crossAreas[2]) / 2.0, (pipe3.flowModel.crossAreas[2] + pipe3.flowModel.crossAreas[3]) / 2.0, (pipe3.flowModel.crossAreas[3] + pipe3.flowModel.crossAreas[4]) / 2.0, (pipe3.flowModel.crossAreas[4] + pipe3.flowModel.crossAreas[5]) / 2.0, (pipe3.flowModel.crossAreas[5] + pipe3.flowModel.crossAreas[6]) / 2.0, (pipe3.flowModel.crossAreas[6] + pipe3.flowModel.crossAreas[7]) / 2.0}[$i1], {(pipe3.flowModel.roughnesses[1] + pipe3.flowModel.roughnesses[2]) / 2.0, (pipe3.flowModel.roughnesses[2] + pipe3.flowModel.roughnesses[3]) / 2.0, (pipe3.flowModel.roughnesses[3] + pipe3.flowModel.roughnesses[4]) / 2.0, (pipe3.flowModel.roughnesses[4] + pipe3.flowModel.roughnesses[5]) / 2.0, (pipe3.flowModel.roughnesses[5] + pipe3.flowModel.roughnesses[6]) / 2.0, (pipe3.flowModel.roughnesses[6] + pipe3.flowModel.roughnesses[7]) / 2.0}[$i1], n7837.n8346.n8308 / 6.0, pipe3.flowModel.Res_turbulent_internal[$i1]) for $i1 in 1:6) * pipe3.flowModel.nParallel)[$i1], {pipe3.flowModel.m_flow_nominal / pipe3.flowModel.dp_nominal * (pipe3.flowModel.dps_fg[1] - pipe3.flowModel.g * pipe3.flowModel.dheights[1] * n7837.n8346.n8135), pipe3.flowModel.m_flow_nominal / pipe3.flowModel.dp_nominal * (pipe3.flowModel.dps_fg[2] - pipe3.flowModel.g * pipe3.flowModel.dheights[2] * n7837.n8346.n8135), pipe3.flowModel.m_flow_nominal / pipe3.flowModel.dp_nominal * (pipe3.flowModel.dps_fg[3] - pipe3.flowModel.g * pipe3.flowModel.dheights[3] * n7837.n8346.n8135), pipe3.flowModel.m_flow_nominal / pipe3.flowModel.dp_nominal * (pipe3.flowModel.dps_fg[4] - pipe3.flowModel.g * pipe3.flowModel.dheights[4] * n7837.n8346.n8135), pipe3.flowModel.m_flow_nominal / pipe3.flowModel.dp_nominal * (pipe3.flowModel.dps_fg[5] - pipe3.flowModel.g * pipe3.flowModel.dheights[5] * n7837.n8346.n8135), pipe3.flowModel.m_flow_nominal / pipe3.flowModel.dp_nominal * (pipe3.flowModel.dps_fg[6] - pipe3.flowModel.g * pipe3.flowModel.dheights[6] * n7837.n8346.n8135)}[$i1]) for $i1 in 1:6);
//   pipe3.flowModel.rhos_act[1] = noEvent(if pipe3.flowModel.m_flows[1] > 0.0 then pipe3.flowModel.rhos[1] else pipe3.flowModel.rhos[2]);
//   pipe3.flowModel.mus_act[1] = noEvent(if pipe3.flowModel.m_flows[1] > 0.0 then pipe3.flowModel.mus[1] else pipe3.flowModel.mus[2]);
//   pipe3.flowModel.rhos_act[2] = noEvent(if pipe3.flowModel.m_flows[2] > 0.0 then pipe3.flowModel.rhos[2] else pipe3.flowModel.rhos[3]);
//   pipe3.flowModel.mus_act[2] = noEvent(if pipe3.flowModel.m_flows[2] > 0.0 then pipe3.flowModel.mus[2] else pipe3.flowModel.mus[3]);
//   pipe3.flowModel.rhos_act[3] = noEvent(if pipe3.flowModel.m_flows[3] > 0.0 then pipe3.flowModel.rhos[3] else pipe3.flowModel.rhos[4]);
//   pipe3.flowModel.mus_act[3] = noEvent(if pipe3.flowModel.m_flows[3] > 0.0 then pipe3.flowModel.mus[3] else pipe3.flowModel.mus[4]);
//   pipe3.flowModel.rhos_act[4] = noEvent(if pipe3.flowModel.m_flows[4] > 0.0 then pipe3.flowModel.rhos[4] else pipe3.flowModel.rhos[5]);
//   pipe3.flowModel.mus_act[4] = noEvent(if pipe3.flowModel.m_flows[4] > 0.0 then pipe3.flowModel.mus[4] else pipe3.flowModel.mus[5]);
//   pipe3.flowModel.rhos_act[5] = noEvent(if pipe3.flowModel.m_flows[5] > 0.0 then pipe3.flowModel.rhos[5] else pipe3.flowModel.rhos[6]);
//   pipe3.flowModel.mus_act[5] = noEvent(if pipe3.flowModel.m_flows[5] > 0.0 then pipe3.flowModel.mus[5] else pipe3.flowModel.mus[6]);
//   pipe3.flowModel.rhos_act[6] = noEvent(if pipe3.flowModel.m_flows[6] > 0.0 then pipe3.flowModel.rhos[6] else pipe3.flowModel.rhos[7]);
//   pipe3.flowModel.mus_act[6] = noEvent(if pipe3.flowModel.m_flows[6] > 0.0 then pipe3.flowModel.mus[6] else pipe3.flowModel.mus[7]);
//   pipe3.flowModel.Ib_flows = array(pipe3.flowModel.rhos[i] * pipe3.flowModel.vs[i] * pipe3.flowModel.vs[i] * pipe3.flowModel.crossAreas[i] - pipe3.flowModel.rhos[i + 1] * pipe3.flowModel.vs[i + 1] * pipe3.flowModel.vs[i + 1] * pipe3.flowModel.crossAreas[i + 1] for n49 in 1:6) * pipe3.flowModel.nParallel;
//   pipe3.flowModel.Fs_p = array(0.5 * (pipe3.flowModel.crossAreas[i] + pipe3.flowModel.crossAreas[i + 1]) * (n1.n7656.n102.n8149.n7837.n8346.n7670.n7786(pipe3.flowModel.states[i + 1]) - n1.n7656.n102.n8149.n7837.n8346.n7670.n7786(pipe3.flowModel.states[i])) for n49 in 1:6) * pipe3.flowModel.nParallel;
//   pipe3.flowModel.dps_fg = array(pipe3.flowModel.Fs_fg[i] / pipe3.flowModel.nParallel * 2.0 / (pipe3.flowModel.crossAreas[i] + pipe3.flowModel.crossAreas[i + 1]) for n49 in 1:6);
//   pipe3.flowModel.Is = array(pipe3.flowModel.m_flows[i] * pipe3.flowModel.pathLengths[i] for n49 in 1:6);
//   der(pipe3.flowModel.Is[1]) = pipe3.flowModel.Ib_flows[1] - pipe3.flowModel.Fs_p[1] - pipe3.flowModel.Fs_fg[1];
//   der(pipe3.flowModel.Is[2]) = pipe3.flowModel.Ib_flows[2] - pipe3.flowModel.Fs_p[2] - pipe3.flowModel.Fs_fg[2];
//   der(pipe3.flowModel.Is[3]) = pipe3.flowModel.Ib_flows[3] - pipe3.flowModel.Fs_p[3] - pipe3.flowModel.Fs_fg[3];
//   der(pipe3.flowModel.Is[4]) = pipe3.flowModel.Ib_flows[4] - pipe3.flowModel.Fs_p[4] - pipe3.flowModel.Fs_fg[4];
//   der(pipe3.flowModel.Is[5]) = pipe3.flowModel.Ib_flows[5] - pipe3.flowModel.Fs_p[5] - pipe3.flowModel.Fs_fg[5];
//   der(pipe3.flowModel.Is[6]) = pipe3.flowModel.Ib_flows[6] - pipe3.flowModel.Fs_p[6] - pipe3.flowModel.Fs_fg[6];
//   pipe3.vs = array(0.5 * (pipe3.m_flows[i] + pipe3.m_flows[i + 1]) / pipe3.mediums[i].d / pipe3.crossAreas[i] for n49 in 1:5) / pipe3.nParallel;
//   pipe3.heatTransfer.states[1].X = pipe3.mediums[1].state.X;
//   pipe3.heatTransfer.states[2].X = pipe3.mediums[2].state.X;
//   pipe3.heatTransfer.states[3].X = pipe3.mediums[3].state.X;
//   pipe3.heatTransfer.states[4].X = pipe3.mediums[4].state.X;
//   pipe3.heatTransfer.states[5].X = pipe3.mediums[5].state.X;
//   pipe3.heatTransfer.surfaceAreas = {pipe3.perimeter * 5.0, pipe3.perimeter * 5.0, pipe3.perimeter * 5.0, pipe3.perimeter * 5.0, pipe3.perimeter * 5.0};
//   pipe3.heatTransfer.Ts = array(n1.n7656.n102.n8149.n7837.n7988.n7670.n7785(pipe3.heatTransfer.states[$i1]) for $i1 in 1:5);
//   pipe3.heatTransfer.vs = pipe3.vs;
//   pipe3.heatTransfer.lengths = {5.0, 5.0, 5.0, 5.0, 5.0};
//   pipe3.heatTransfer.dimensions = pipe3.dimensions;
//   pipe3.heatTransfer.roughnesses = pipe3.roughnesses;
//   pipe3.heatTransfer.Ts[1] = pipe3.heatTransfer.heatPorts[1].T;
//   pipe3.heatTransfer.Ts[2] = pipe3.heatTransfer.heatPorts[2].T;
//   pipe3.heatTransfer.Ts[3] = pipe3.heatTransfer.heatPorts[3].T;
//   pipe3.heatTransfer.Ts[4] = pipe3.heatTransfer.heatPorts[4].T;
//   pipe3.heatTransfer.Ts[5] = pipe3.heatTransfer.heatPorts[5].T;
//   pipe3.heatTransfer.Q_flows[1] = pipe3.heatTransfer.heatPorts[1].Q_flow;
//   pipe3.heatTransfer.Q_flows[2] = pipe3.heatTransfer.heatPorts[2].Q_flow;
//   pipe3.heatTransfer.Q_flows[3] = pipe3.heatTransfer.heatPorts[3].Q_flow;
//   pipe3.heatTransfer.Q_flows[4] = pipe3.heatTransfer.heatPorts[4].Q_flow;
//   pipe3.heatTransfer.Q_flows[5] = pipe3.heatTransfer.heatPorts[5].Q_flow;
//   pipe3.Qb_flows[1] = pipe3.heatTransfer.Q_flows[1];
//   pipe3.Qb_flows[2] = pipe3.heatTransfer.Q_flows[2];
//   pipe3.Qb_flows[3] = pipe3.heatTransfer.Q_flows[3];
//   pipe3.Qb_flows[4] = pipe3.heatTransfer.Q_flows[4];
//   pipe3.Qb_flows[5] = pipe3.heatTransfer.Q_flows[5];
//   pipe3.Wb_flows[2:4] = array(pipe3.vs[i] * pipe3.crossAreas[i] * ((pipe3.mediums[i + 1].p - pipe3.mediums[i - 1].p) / 2.0 + (pipe3.flowModel.dps_fg[i] + pipe3.flowModel.dps_fg[i + 1]) / 2.0 - system.g * {5.0, 5.0, 5.0, 5.0, 5.0}[i] * pipe3.mediums[i].d) for n49 in 2:4) * pipe3.nParallel;
//   pipe3.Wb_flows[1] = pipe3.vs[1] * pipe3.crossAreas[1] * ((pipe3.mediums[2].p - pipe3.port_a.p) / 1.5 + pipe3.flowModel.dps_fg[1] + pipe3.flowModel.dps_fg[2] / 2.0 - system.g * 5.0 * pipe3.mediums[1].d) * pipe3.nParallel;
//   pipe3.Wb_flows[5] = pipe3.vs[5] * pipe3.crossAreas[5] * ((pipe3.port_b.p - pipe3.mediums[4].p) / 1.5 + pipe3.flowModel.dps_fg[5] / 2.0 + pipe3.flowModel.dps_fg[6] - system.g * 5.0 * pipe3.mediums[5].d) * pipe3.nParallel;
//   n7837.n8348[1] = 2.5;
//   n7837.n8348[2] = 5.0;
//   n7837.n8348[3] = 5.0;
//   n7837.n8348[4] = 5.0;
//   n7837.n8348[5] = 5.0;
//   n7837.n8348[6] = 2.5;
//   n7837.n8373[1] = 2.5;
//   n7837.n8373[2] = 5.0;
//   n7837.n8373[3] = 5.0;
//   n7837.n8373[4] = 5.0;
//   n7837.n8373[5] = 5.0;
//   n7837.n8373[6] = 2.5;
//   n7837.n8370[1] = pipe3.crossAreas[1];
//   n7837.n8370[2] = pipe3.crossAreas[1];
//   n7837.n8370[3] = pipe3.crossAreas[2];
//   n7837.n8370[4] = pipe3.crossAreas[3];
//   n7837.n8370[5] = pipe3.crossAreas[4];
//   n7837.n8370[6] = pipe3.crossAreas[5];
//   n7837.n8370[7] = pipe3.crossAreas[5];
//   n7837.n8371[1] = pipe3.dimensions[1];
//   n7837.n8371[2] = pipe3.dimensions[1];
//   n7837.n8371[3] = pipe3.dimensions[2];
//   n7837.n8371[4] = pipe3.dimensions[3];
//   n7837.n8371[5] = pipe3.dimensions[4];
//   n7837.n8371[6] = pipe3.dimensions[5];
//   n7837.n8371[7] = pipe3.dimensions[5];
//   n7837.n8372[1] = pipe3.roughnesses[1];
//   n7837.n8372[2] = pipe3.roughnesses[1];
//   n7837.n8372[3] = pipe3.roughnesses[2];
//   n7837.n8372[4] = pipe3.roughnesses[3];
//   n7837.n8372[5] = pipe3.roughnesses[4];
//   n7837.n8372[6] = pipe3.roughnesses[5];
//   n7837.n8372[7] = pipe3.roughnesses[5];
//   pipe3.mb_flows[1] = pipe3.m_flows[1] - pipe3.m_flows[2];
//   pipe3.mbXi_flows[1,1] = pipe3.mXi_flows[1,1] - pipe3.mXi_flows[2,1];
//   pipe3.Hb_flows[1] = pipe3.H_flows[1] - pipe3.H_flows[2];
//   pipe3.mb_flows[2] = pipe3.m_flows[2] - pipe3.m_flows[3];
//   pipe3.mbXi_flows[2,1] = pipe3.mXi_flows[2,1] - pipe3.mXi_flows[3,1];
//   pipe3.Hb_flows[2] = pipe3.H_flows[2] - pipe3.H_flows[3];
//   pipe3.mb_flows[3] = pipe3.m_flows[3] - pipe3.m_flows[4];
//   pipe3.mbXi_flows[3,1] = pipe3.mXi_flows[3,1] - pipe3.mXi_flows[4,1];
//   pipe3.Hb_flows[3] = pipe3.H_flows[3] - pipe3.H_flows[4];
//   pipe3.mb_flows[4] = pipe3.m_flows[4] - pipe3.m_flows[5];
//   pipe3.mbXi_flows[4,1] = pipe3.mXi_flows[4,1] - pipe3.mXi_flows[5,1];
//   pipe3.Hb_flows[4] = pipe3.H_flows[4] - pipe3.H_flows[5];
//   pipe3.mb_flows[5] = pipe3.m_flows[5] - pipe3.m_flows[6];
//   pipe3.mbXi_flows[5,1] = pipe3.mXi_flows[5,1] - pipe3.mXi_flows[6,1];
//   pipe3.Hb_flows[5] = pipe3.H_flows[5] - pipe3.H_flows[6];
//   pipe3.H_flows[2] = semiLinear(pipe3.m_flows[2], pipe3.mediums[1].h, pipe3.mediums[2].h);
//   pipe3.mXi_flows[2,1] = semiLinear(pipe3.m_flows[2], pipe3.mediums[1].Xi[1], pipe3.mediums[2].Xi[1]);
//   pipe3.H_flows[3] = semiLinear(pipe3.m_flows[3], pipe3.mediums[2].h, pipe3.mediums[3].h);
//   pipe3.mXi_flows[3,1] = semiLinear(pipe3.m_flows[3], pipe3.mediums[2].Xi[1], pipe3.mediums[3].Xi[1]);
//   pipe3.H_flows[4] = semiLinear(pipe3.m_flows[4], pipe3.mediums[3].h, pipe3.mediums[4].h);
//   pipe3.mXi_flows[4,1] = semiLinear(pipe3.m_flows[4], pipe3.mediums[3].Xi[1], pipe3.mediums[4].Xi[1]);
//   pipe3.H_flows[5] = semiLinear(pipe3.m_flows[5], pipe3.mediums[4].h, pipe3.mediums[5].h);
//   pipe3.mXi_flows[5,1] = semiLinear(pipe3.m_flows[5], pipe3.mediums[4].Xi[1], pipe3.mediums[5].Xi[1]);
//   pipe3.H_flows[1] = semiLinear(pipe3.port_a.m_flow, ($OMC$PositiveMax(-pipe2.port_a.m_flow, 1e-07) * pipe2.port_a.h_outflow + $OMC$PositiveMax(-pipe1.port_b.m_flow, 1e-07) * pipe1.port_b.h_outflow) / ($OMC$PositiveMax(-pipe2.port_a.m_flow, 1e-07) + $OMC$PositiveMax(-pipe1.port_b.m_flow, 1e-07)), pipe3.mediums[1].h);
//   pipe3.H_flows[6] = -semiLinear(pipe3.port_b.m_flow, ($OMC$PositiveMax(-pipe2.port_b.m_flow, 1e-07) * pipe2.port_b.h_outflow + $OMC$PositiveMax(-pipe4.port_a.m_flow, 1e-07) * pipe4.port_a.h_outflow) / ($OMC$PositiveMax(-pipe2.port_b.m_flow, 1e-07) + $OMC$PositiveMax(-pipe4.port_a.m_flow, 1e-07)), pipe3.mediums[5].h);
//   pipe3.mXi_flows[1,1] = semiLinear(pipe3.port_a.m_flow, ($OMC$PositiveMax(-pipe2.port_a.m_flow, 1e-07) * pipe2.port_a.Xi_outflow[1] + $OMC$PositiveMax(-pipe1.port_b.m_flow, 1e-07) * pipe1.port_b.Xi_outflow[1]) / ($OMC$PositiveMax(-pipe2.port_a.m_flow, 1e-07) + $OMC$PositiveMax(-pipe1.port_b.m_flow, 1e-07)), pipe3.mediums[1].Xi[1]);
//   pipe3.mXi_flows[6,1] = -semiLinear(pipe3.port_b.m_flow, ($OMC$PositiveMax(-pipe2.port_b.m_flow, 1e-07) * pipe2.port_b.Xi_outflow[1] + $OMC$PositiveMax(-pipe4.port_a.m_flow, 1e-07) * pipe4.port_a.Xi_outflow[1]) / ($OMC$PositiveMax(-pipe2.port_b.m_flow, 1e-07) + $OMC$PositiveMax(-pipe4.port_a.m_flow, 1e-07)), pipe3.mediums[5].Xi[1]);
//   pipe3.port_a.m_flow = pipe3.m_flows[1];
//   pipe3.port_b.m_flow = -pipe3.m_flows[6];
//   pipe3.port_a.h_outflow = pipe3.mediums[1].h;
//   pipe3.port_b.h_outflow = pipe3.mediums[5].h;
//   pipe3.port_a.Xi_outflow[1] = pipe3.mediums[1].Xi[1];
//   pipe3.port_b.Xi_outflow[1] = pipe3.mediums[5].Xi[1];
//   pipe3.state_a = n1.n7656.n102.n8149.n7837.n7670.n8338(pipe3.port_a.p, ($OMC$PositiveMax(-pipe2.port_a.m_flow, 1e-07) * pipe2.port_a.h_outflow + $OMC$PositiveMax(-pipe1.port_b.m_flow, 1e-07) * pipe1.port_b.h_outflow) / ($OMC$PositiveMax(-pipe2.port_a.m_flow, 1e-07) + $OMC$PositiveMax(-pipe1.port_b.m_flow, 1e-07)), {($OMC$PositiveMax(-pipe2.port_a.m_flow, 1e-07) * pipe2.port_a.Xi_outflow[1] + $OMC$PositiveMax(-pipe1.port_b.m_flow, 1e-07) * pipe1.port_b.Xi_outflow[1]) / ($OMC$PositiveMax(-pipe2.port_a.m_flow, 1e-07) + $OMC$PositiveMax(-pipe1.port_b.m_flow, 1e-07))});
//   pipe3.state_b = n1.n7656.n102.n8149.n7837.n7670.n8338(pipe3.port_b.p, ($OMC$PositiveMax(-pipe2.port_b.m_flow, 1e-07) * pipe2.port_b.h_outflow + $OMC$PositiveMax(-pipe4.port_a.m_flow, 1e-07) * pipe4.port_a.h_outflow) / ($OMC$PositiveMax(-pipe2.port_b.m_flow, 1e-07) + $OMC$PositiveMax(-pipe4.port_a.m_flow, 1e-07)), {($OMC$PositiveMax(-pipe2.port_b.m_flow, 1e-07) * pipe2.port_b.Xi_outflow[1] + $OMC$PositiveMax(-pipe4.port_a.m_flow, 1e-07) * pipe4.port_a.Xi_outflow[1]) / ($OMC$PositiveMax(-pipe2.port_b.m_flow, 1e-07) + $OMC$PositiveMax(-pipe4.port_a.m_flow, 1e-07))});
//   pipe3.statesFM[1] = pipe3.state_a;
//   pipe3.statesFM[2] = pipe3.mediums[1].state;
//   pipe3.statesFM[3] = pipe3.mediums[2].state;
//   pipe3.statesFM[4] = pipe3.mediums[3].state;
//   pipe3.statesFM[5] = pipe3.mediums[4].state;
//   pipe3.statesFM[6] = pipe3.mediums[5].state;
//   pipe3.statesFM[7] = pipe3.state_b;
//   pipe3.m_flows[1] = pipe3.flowModel.m_flows[1];
//   pipe3.m_flows[2] = pipe3.flowModel.m_flows[2];
//   pipe3.m_flows[3] = pipe3.flowModel.m_flows[3];
//   pipe3.m_flows[4] = pipe3.flowModel.m_flows[4];
//   pipe3.m_flows[5] = pipe3.flowModel.m_flows[5];
//   pipe3.m_flows[6] = pipe3.flowModel.m_flows[6];
//   n7837.n8369[1] = pipe3.m_flows[1] / n1.n7656.n102.n8149.n7837.n7670.n523(pipe3.state_a) / pipe3.crossAreas[1] / pipe3.nParallel;
//   n7837.n8369[2] = pipe3.vs[1];
//   n7837.n8369[3] = pipe3.vs[2];
//   n7837.n8369[4] = pipe3.vs[3];
//   n7837.n8369[5] = pipe3.vs[4];
//   n7837.n8369[6] = pipe3.vs[5];
//   n7837.n8369[7] = pipe3.m_flows[6] / n1.n7656.n102.n8149.n7837.n7670.n523(pipe3.state_b) / pipe3.crossAreas[5] / pipe3.nParallel;
//   pipe3.ms[1] = pipe3.fluidVolumes[1] * pipe3.mediums[1].d;
//   pipe3.mXis[1,1] = pipe3.ms[1] * pipe3.mediums[1].Xi[1];
//   pipe3.Us[1] = pipe3.ms[1] * pipe3.mediums[1].u;
//   pipe3.ms[2] = pipe3.fluidVolumes[2] * pipe3.mediums[2].d;
//   pipe3.mXis[2,1] = pipe3.ms[2] * pipe3.mediums[2].Xi[1];
//   pipe3.Us[2] = pipe3.ms[2] * pipe3.mediums[2].u;
//   pipe3.ms[3] = pipe3.fluidVolumes[3] * pipe3.mediums[3].d;
//   pipe3.mXis[3,1] = pipe3.ms[3] * pipe3.mediums[3].Xi[1];
//   pipe3.Us[3] = pipe3.ms[3] * pipe3.mediums[3].u;
//   pipe3.ms[4] = pipe3.fluidVolumes[4] * pipe3.mediums[4].d;
//   pipe3.mXis[4,1] = pipe3.ms[4] * pipe3.mediums[4].Xi[1];
//   pipe3.Us[4] = pipe3.ms[4] * pipe3.mediums[4].u;
//   pipe3.ms[5] = pipe3.fluidVolumes[5] * pipe3.mediums[5].d;
//   pipe3.mXis[5,1] = pipe3.ms[5] * pipe3.mediums[5].Xi[1];
//   pipe3.Us[5] = pipe3.ms[5] * pipe3.mediums[5].u;
//   der(pipe3.Us[1]) = pipe3.Hb_flows[1] + pipe3.Wb_flows[1] + pipe3.Qb_flows[1];
//   der(pipe3.Us[2]) = pipe3.Hb_flows[2] + pipe3.Wb_flows[2] + pipe3.Qb_flows[2];
//   der(pipe3.Us[3]) = pipe3.Hb_flows[3] + pipe3.Wb_flows[3] + pipe3.Qb_flows[3];
//   der(pipe3.Us[4]) = pipe3.Hb_flows[4] + pipe3.Wb_flows[4] + pipe3.Qb_flows[4];
//   der(pipe3.Us[5]) = pipe3.Hb_flows[5] + pipe3.Wb_flows[5] + pipe3.Qb_flows[5];
//   der(pipe3.ms[1]) = pipe3.mb_flows[1];
//   der(pipe3.ms[2]) = pipe3.mb_flows[2];
//   der(pipe3.ms[3]) = pipe3.mb_flows[3];
//   der(pipe3.ms[4]) = pipe3.mb_flows[4];
//   der(pipe3.ms[5]) = pipe3.mb_flows[5];
//   der(pipe3.mXis[1,1]) = pipe3.mbXi_flows[1,1];
//   der(pipe3.mXis[2,1]) = pipe3.mbXi_flows[2,1];
//   der(pipe3.mXis[3,1]) = pipe3.mbXi_flows[3,1];
//   der(pipe3.mXis[4,1]) = pipe3.mbXi_flows[4,1];
//   der(pipe3.mXis[5,1]) = pipe3.mbXi_flows[5,1];
//   pipe4.fluidVolumes = array(pipe4.crossAreas[i] * {10.0, 10.0, 10.0, 10.0, 10.0}[i] for n49 in 1:5) * pipe4.nParallel;
//   assert(pipe4.mediums[1].T >= 190.0 and pipe4.mediums[1].T <= 647.0, \"assert message 315810245365667762\");
//   pipe4.mediums[1].MM = 1.0 / (pipe4.mediums[1].Xi[1] / 0.01801528 + (1.0 - pipe4.mediums[1].Xi[1]) / 0.0289651159);
//   n8133.n8256[1].n10110 = min(n1.n7656.n102.n8149.n8133.n7670.n8562(pipe4.mediums[1].T), 0.999 * pipe4.mediums[1].p);
//   n8133.n8256[1].n10108 = min(n8133.n8256[1].n10110 * 0.6219647130774989 / max(1e-13, pipe4.mediums[1].p - n8133.n8256[1].n10110) * (1.0 - pipe4.mediums[1].Xi[1]), 1.0);
//   n8133.n8256[1].n10105 = max(pipe4.mediums[1].Xi[1] - n8133.n8256[1].n10108, 0.0);
//   n8133.n8256[1].n10106 = pipe4.mediums[1].Xi[1] - n8133.n8256[1].n10105;
//   n8133.n8256[1].n10107 = 1.0 - pipe4.mediums[1].Xi[1];
//   pipe4.mediums[1].h = n1.n7656.n102.n8149.n8133.n7670.n7957(pipe4.mediums[1].p, pipe4.mediums[1].T, pipe4.mediums[1].Xi);
//   pipe4.mediums[1].R = 287.0512249529787 * n8133.n8256[1].n10107 / (1.0 - n8133.n8256[1].n10105) + 461.5233290850878 * n8133.n8256[1].n10106 / (1.0 - n8133.n8256[1].n10105);
//   pipe4.mediums[1].u = pipe4.mediums[1].h - pipe4.mediums[1].R * pipe4.mediums[1].T;
//   pipe4.mediums[1].d = pipe4.mediums[1].p / (pipe4.mediums[1].R * pipe4.mediums[1].T);
//   pipe4.mediums[1].state.p = pipe4.mediums[1].p;
//   pipe4.mediums[1].state.T = pipe4.mediums[1].T;
//   pipe4.mediums[1].state.X[1] = pipe4.mediums[1].X[1];
//   pipe4.mediums[1].state.X[2] = pipe4.mediums[1].X[2];
//   n8133.n8256[1].n10109 = 0.6219647130774989 * n8133.n8256[1].n10110 / max(1e-13, pipe4.mediums[1].p - n8133.n8256[1].n10110);
//   pipe4.mediums[1].x_water = pipe4.mediums[1].Xi[1] / max(n8133.n8256[1].n10107, 1e-13);
//   pipe4.mediums[1].phi = pipe4.mediums[1].p / n8133.n8256[1].n10110 * pipe4.mediums[1].Xi[1] / (pipe4.mediums[1].Xi[1] + 0.6219647130774989 * n8133.n8256[1].n10107);
//   pipe4.mediums[1].Xi[1] = pipe4.mediums[1].X[1];
//   pipe4.mediums[1].X[2] = 1.0 - pipe4.mediums[1].Xi[1];
//   assert(pipe4.mediums[1].X[1] >= -1e-05 and pipe4.mediums[1].X[1] <= 1.00001, \"assert message 1370699107527140891\");
//   assert(pipe4.mediums[1].X[2] >= -1e-05 and pipe4.mediums[1].X[2] <= 1.00001, \"assert message 1370699107527140891\");
//   assert(pipe4.mediums[1].p >= 0.0, \"assert message 2590312994638120201\");
//   assert(pipe4.mediums[2].T >= 190.0 and pipe4.mediums[2].T <= 647.0, \"assert message 315810245365667762\");
//   pipe4.mediums[2].MM = 1.0 / (pipe4.mediums[2].Xi[1] / 0.01801528 + (1.0 - pipe4.mediums[2].Xi[1]) / 0.0289651159);
//   n8133.n8256[2].n10110 = min(n1.n7656.n102.n8149.n8133.n7670.n8562(pipe4.mediums[2].T), 0.999 * pipe4.mediums[2].p);
//   n8133.n8256[2].n10108 = min(n8133.n8256[2].n10110 * 0.6219647130774989 / max(1e-13, pipe4.mediums[2].p - n8133.n8256[2].n10110) * (1.0 - pipe4.mediums[2].Xi[1]), 1.0);
//   n8133.n8256[2].n10105 = max(pipe4.mediums[2].Xi[1] - n8133.n8256[2].n10108, 0.0);
//   n8133.n8256[2].n10106 = pipe4.mediums[2].Xi[1] - n8133.n8256[2].n10105;
//   n8133.n8256[2].n10107 = 1.0 - pipe4.mediums[2].Xi[1];
//   pipe4.mediums[2].h = n1.n7656.n102.n8149.n8133.n7670.n7957(pipe4.mediums[2].p, pipe4.mediums[2].T, pipe4.mediums[2].Xi);
//   pipe4.mediums[2].R = 287.0512249529787 * n8133.n8256[2].n10107 / (1.0 - n8133.n8256[2].n10105) + 461.5233290850878 * n8133.n8256[2].n10106 / (1.0 - n8133.n8256[2].n10105);
//   pipe4.mediums[2].u = pipe4.mediums[2].h - pipe4.mediums[2].R * pipe4.mediums[2].T;
//   pipe4.mediums[2].d = pipe4.mediums[2].p / (pipe4.mediums[2].R * pipe4.mediums[2].T);
//   pipe4.mediums[2].state.p = pipe4.mediums[2].p;
//   pipe4.mediums[2].state.T = pipe4.mediums[2].T;
//   pipe4.mediums[2].state.X[1] = pipe4.mediums[2].X[1];
//   pipe4.mediums[2].state.X[2] = pipe4.mediums[2].X[2];
//   n8133.n8256[2].n10109 = 0.6219647130774989 * n8133.n8256[2].n10110 / max(1e-13, pipe4.mediums[2].p - n8133.n8256[2].n10110);
//   pipe4.mediums[2].x_water = pipe4.mediums[2].Xi[1] / max(n8133.n8256[2].n10107, 1e-13);
//   pipe4.mediums[2].phi = pipe4.mediums[2].p / n8133.n8256[2].n10110 * pipe4.mediums[2].Xi[1] / (pipe4.mediums[2].Xi[1] + 0.6219647130774989 * n8133.n8256[2].n10107);
//   pipe4.mediums[2].Xi[1] = pipe4.mediums[2].X[1];
//   pipe4.mediums[2].X[2] = 1.0 - pipe4.mediums[2].Xi[1];
//   assert(pipe4.mediums[2].X[1] >= -1e-05 and pipe4.mediums[2].X[1] <= 1.00001, \"assert message 1370699107527140891\");
//   assert(pipe4.mediums[2].X[2] >= -1e-05 and pipe4.mediums[2].X[2] <= 1.00001, \"assert message 1370699107527140891\");
//   assert(pipe4.mediums[2].p >= 0.0, \"assert message 2590312994638120201\");
//   assert(pipe4.mediums[3].T >= 190.0 and pipe4.mediums[3].T <= 647.0, \"assert message 315810245365667762\");
//   pipe4.mediums[3].MM = 1.0 / (pipe4.mediums[3].Xi[1] / 0.01801528 + (1.0 - pipe4.mediums[3].Xi[1]) / 0.0289651159);
//   n8133.n8256[3].n10110 = min(n1.n7656.n102.n8149.n8133.n7670.n8562(pipe4.mediums[3].T), 0.999 * pipe4.mediums[3].p);
//   n8133.n8256[3].n10108 = min(n8133.n8256[3].n10110 * 0.6219647130774989 / max(1e-13, pipe4.mediums[3].p - n8133.n8256[3].n10110) * (1.0 - pipe4.mediums[3].Xi[1]), 1.0);
//   n8133.n8256[3].n10105 = max(pipe4.mediums[3].Xi[1] - n8133.n8256[3].n10108, 0.0);
//   n8133.n8256[3].n10106 = pipe4.mediums[3].Xi[1] - n8133.n8256[3].n10105;
//   n8133.n8256[3].n10107 = 1.0 - pipe4.mediums[3].Xi[1];
//   pipe4.mediums[3].h = n1.n7656.n102.n8149.n8133.n7670.n7957(pipe4.mediums[3].p, pipe4.mediums[3].T, pipe4.mediums[3].Xi);
//   pipe4.mediums[3].R = 287.0512249529787 * n8133.n8256[3].n10107 / (1.0 - n8133.n8256[3].n10105) + 461.5233290850878 * n8133.n8256[3].n10106 / (1.0 - n8133.n8256[3].n10105);
//   pipe4.mediums[3].u = pipe4.mediums[3].h - pipe4.mediums[3].R * pipe4.mediums[3].T;
//   pipe4.mediums[3].d = pipe4.mediums[3].p / (pipe4.mediums[3].R * pipe4.mediums[3].T);
//   pipe4.mediums[3].state.p = pipe4.mediums[3].p;
//   pipe4.mediums[3].state.T = pipe4.mediums[3].T;
//   pipe4.mediums[3].state.X[1] = pipe4.mediums[3].X[1];
//   pipe4.mediums[3].state.X[2] = pipe4.mediums[3].X[2];
//   n8133.n8256[3].n10109 = 0.6219647130774989 * n8133.n8256[3].n10110 / max(1e-13, pipe4.mediums[3].p - n8133.n8256[3].n10110);
//   pipe4.mediums[3].x_water = pipe4.mediums[3].Xi[1] / max(n8133.n8256[3].n10107, 1e-13);
//   pipe4.mediums[3].phi = pipe4.mediums[3].p / n8133.n8256[3].n10110 * pipe4.mediums[3].Xi[1] / (pipe4.mediums[3].Xi[1] + 0.6219647130774989 * n8133.n8256[3].n10107);
//   pipe4.mediums[3].Xi[1] = pipe4.mediums[3].X[1];
//   pipe4.mediums[3].X[2] = 1.0 - pipe4.mediums[3].Xi[1];
//   assert(pipe4.mediums[3].X[1] >= -1e-05 and pipe4.mediums[3].X[1] <= 1.00001, \"assert message 1370699107527140891\");
//   assert(pipe4.mediums[3].X[2] >= -1e-05 and pipe4.mediums[3].X[2] <= 1.00001, \"assert message 1370699107527140891\");
//   assert(pipe4.mediums[3].p >= 0.0, \"assert message 2590312994638120201\");
//   assert(pipe4.mediums[4].T >= 190.0 and pipe4.mediums[4].T <= 647.0, \"assert message 315810245365667762\");
//   pipe4.mediums[4].MM = 1.0 / (pipe4.mediums[4].Xi[1] / 0.01801528 + (1.0 - pipe4.mediums[4].Xi[1]) / 0.0289651159);
//   n8133.n8256[4].n10110 = min(n1.n7656.n102.n8149.n8133.n7670.n8562(pipe4.mediums[4].T), 0.999 * pipe4.mediums[4].p);
//   n8133.n8256[4].n10108 = min(n8133.n8256[4].n10110 * 0.6219647130774989 / max(1e-13, pipe4.mediums[4].p - n8133.n8256[4].n10110) * (1.0 - pipe4.mediums[4].Xi[1]), 1.0);
//   n8133.n8256[4].n10105 = max(pipe4.mediums[4].Xi[1] - n8133.n8256[4].n10108, 0.0);
//   n8133.n8256[4].n10106 = pipe4.mediums[4].Xi[1] - n8133.n8256[4].n10105;
//   n8133.n8256[4].n10107 = 1.0 - pipe4.mediums[4].Xi[1];
//   pipe4.mediums[4].h = n1.n7656.n102.n8149.n8133.n7670.n7957(pipe4.mediums[4].p, pipe4.mediums[4].T, pipe4.mediums[4].Xi);
//   pipe4.mediums[4].R = 287.0512249529787 * n8133.n8256[4].n10107 / (1.0 - n8133.n8256[4].n10105) + 461.5233290850878 * n8133.n8256[4].n10106 / (1.0 - n8133.n8256[4].n10105);
//   pipe4.mediums[4].u = pipe4.mediums[4].h - pipe4.mediums[4].R * pipe4.mediums[4].T;
//   pipe4.mediums[4].d = pipe4.mediums[4].p / (pipe4.mediums[4].R * pipe4.mediums[4].T);
//   pipe4.mediums[4].state.p = pipe4.mediums[4].p;
//   pipe4.mediums[4].state.T = pipe4.mediums[4].T;
//   pipe4.mediums[4].state.X[1] = pipe4.mediums[4].X[1];
//   pipe4.mediums[4].state.X[2] = pipe4.mediums[4].X[2];
//   n8133.n8256[4].n10109 = 0.6219647130774989 * n8133.n8256[4].n10110 / max(1e-13, pipe4.mediums[4].p - n8133.n8256[4].n10110);
//   pipe4.mediums[4].x_water = pipe4.mediums[4].Xi[1] / max(n8133.n8256[4].n10107, 1e-13);
//   pipe4.mediums[4].phi = pipe4.mediums[4].p / n8133.n8256[4].n10110 * pipe4.mediums[4].Xi[1] / (pipe4.mediums[4].Xi[1] + 0.6219647130774989 * n8133.n8256[4].n10107);
//   pipe4.mediums[4].Xi[1] = pipe4.mediums[4].X[1];
//   pipe4.mediums[4].X[2] = 1.0 - pipe4.mediums[4].Xi[1];
//   assert(pipe4.mediums[4].X[1] >= -1e-05 and pipe4.mediums[4].X[1] <= 1.00001, \"assert message 1370699107527140891\");
//   assert(pipe4.mediums[4].X[2] >= -1e-05 and pipe4.mediums[4].X[2] <= 1.00001, \"assert message 1370699107527140891\");
//   assert(pipe4.mediums[4].p >= 0.0, \"assert message 2590312994638120201\");
//   assert(pipe4.mediums[5].T >= 190.0 and pipe4.mediums[5].T <= 647.0, \"assert message 315810245365667762\");
//   pipe4.mediums[5].MM = 1.0 / (pipe4.mediums[5].Xi[1] / 0.01801528 + (1.0 - pipe4.mediums[5].Xi[1]) / 0.0289651159);
//   n8133.n8256[5].n10110 = min(n1.n7656.n102.n8149.n8133.n7670.n8562(pipe4.mediums[5].T), 0.999 * pipe4.mediums[5].p);
//   n8133.n8256[5].n10108 = min(n8133.n8256[5].n10110 * 0.6219647130774989 / max(1e-13, pipe4.mediums[5].p - n8133.n8256[5].n10110) * (1.0 - pipe4.mediums[5].Xi[1]), 1.0);
//   n8133.n8256[5].n10105 = max(pipe4.mediums[5].Xi[1] - n8133.n8256[5].n10108, 0.0);
//   n8133.n8256[5].n10106 = pipe4.mediums[5].Xi[1] - n8133.n8256[5].n10105;
//   n8133.n8256[5].n10107 = 1.0 - pipe4.mediums[5].Xi[1];
//   pipe4.mediums[5].h = n1.n7656.n102.n8149.n8133.n7670.n7957(pipe4.mediums[5].p, pipe4.mediums[5].T, pipe4.mediums[5].Xi);
//   pipe4.mediums[5].R = 287.0512249529787 * n8133.n8256[5].n10107 / (1.0 - n8133.n8256[5].n10105) + 461.5233290850878 * n8133.n8256[5].n10106 / (1.0 - n8133.n8256[5].n10105);
//   pipe4.mediums[5].u = pipe4.mediums[5].h - pipe4.mediums[5].R * pipe4.mediums[5].T;
//   pipe4.mediums[5].d = pipe4.mediums[5].p / (pipe4.mediums[5].R * pipe4.mediums[5].T);
//   pipe4.mediums[5].state.p = pipe4.mediums[5].p;
//   pipe4.mediums[5].state.T = pipe4.mediums[5].T;
//   pipe4.mediums[5].state.X[1] = pipe4.mediums[5].X[1];
//   pipe4.mediums[5].state.X[2] = pipe4.mediums[5].X[2];
//   n8133.n8256[5].n10109 = 0.6219647130774989 * n8133.n8256[5].n10110 / max(1e-13, pipe4.mediums[5].p - n8133.n8256[5].n10110);
//   pipe4.mediums[5].x_water = pipe4.mediums[5].Xi[1] / max(n8133.n8256[5].n10107, 1e-13);
//   pipe4.mediums[5].phi = pipe4.mediums[5].p / n8133.n8256[5].n10110 * pipe4.mediums[5].Xi[1] / (pipe4.mediums[5].Xi[1] + 0.6219647130774989 * n8133.n8256[5].n10107);
//   pipe4.mediums[5].Xi[1] = pipe4.mediums[5].X[1];
//   pipe4.mediums[5].X[2] = 1.0 - pipe4.mediums[5].Xi[1];
//   assert(pipe4.mediums[5].X[1] >= -1e-05 and pipe4.mediums[5].X[1] <= 1.00001, \"assert message 1370699107527140891\");
//   assert(pipe4.mediums[5].X[2] >= -1e-05 and pipe4.mediums[5].X[2] <= 1.00001, \"assert message 1370699107527140891\");
//   assert(pipe4.mediums[5].p >= 0.0, \"assert message 2590312994638120201\");
//   pipe4.flowModel.states[1].X = pipe4.statesFM[1].X;
//   pipe4.flowModel.states[2].X = pipe4.statesFM[2].X;
//   pipe4.flowModel.states[3].X = pipe4.statesFM[3].X;
//   pipe4.flowModel.states[4].X = pipe4.statesFM[4].X;
//   pipe4.flowModel.states[5].X = pipe4.statesFM[5].X;
//   pipe4.flowModel.states[6].X = pipe4.statesFM[6].X;
//   pipe4.flowModel.states[7].X = pipe4.statesFM[7].X;
//   pipe4.flowModel.vs = n8133.n8369;
//   pipe4.flowModel.crossAreas = n8133.n8370;
//   pipe4.flowModel.dimensions = n8133.n8371;
//   pipe4.flowModel.roughnesses = n8133.n8372;
//   pipe4.flowModel.dheights = n8133.n8373;
//   pipe4.flowModel.pathLengths = n8133.n8348;
//   pipe4.flowModel.rhos = array(n1.n7656.n102.n8149.n8133.n8346.n7670.n523(pipe4.flowModel.states[$i1]) for $i1 in 1:7);
//   pipe4.flowModel.mus = array(n1.n7656.n102.n8149.n8133.n8346.n7670.n8340(pipe4.flowModel.states[$i1]) for $i1 in 1:7);
//   pipe4.flowModel.pathLengths_internal = pipe4.flowModel.pathLengths;
//   pipe4.flowModel.Res_turbulent_internal = {pipe4.flowModel.Re_turbulent, pipe4.flowModel.Re_turbulent, pipe4.flowModel.Re_turbulent, pipe4.flowModel.Re_turbulent, pipe4.flowModel.Re_turbulent, pipe4.flowModel.Re_turbulent};
//   n8133.n8346.n8410 = {0.5 * (pipe4.flowModel.dimensions[1] + pipe4.flowModel.dimensions[2]), 0.5 * (pipe4.flowModel.dimensions[2] + pipe4.flowModel.dimensions[3]), 0.5 * (pipe4.flowModel.dimensions[3] + pipe4.flowModel.dimensions[4]), 0.5 * (pipe4.flowModel.dimensions[4] + pipe4.flowModel.dimensions[5]), 0.5 * (pipe4.flowModel.dimensions[5] + pipe4.flowModel.dimensions[6]), 0.5 * (pipe4.flowModel.dimensions[6] + pipe4.flowModel.dimensions[7])};
//   pipe4.flowModel.m_flows = array(homotopy((array(n1.n7656.n102.n8149.n8133.n8346.n7663.n8415(pipe4.flowModel.dps_fg[$i1], pipe4.flowModel.rhos[(1:6)[$i1]], pipe4.flowModel.rhos[(2:7)[$i1]], pipe4.flowModel.mus[(1:6)[$i1]], pipe4.flowModel.mus[(2:7)[$i1]], pipe4.flowModel.pathLengths_internal[$i1], n8133.n8346.n8410[$i1], {pipe4.flowModel.g * pipe4.flowModel.dheights[1], pipe4.flowModel.g * pipe4.flowModel.dheights[2], pipe4.flowModel.g * pipe4.flowModel.dheights[3], pipe4.flowModel.g * pipe4.flowModel.dheights[4], pipe4.flowModel.g * pipe4.flowModel.dheights[5], pipe4.flowModel.g * pipe4.flowModel.dheights[6]}[$i1], {(pipe4.flowModel.crossAreas[1] + pipe4.flowModel.crossAreas[2]) / 2.0, (pipe4.flowModel.crossAreas[2] + pipe4.flowModel.crossAreas[3]) / 2.0, (pipe4.flowModel.crossAreas[3] + pipe4.flowModel.crossAreas[4]) / 2.0, (pipe4.flowModel.crossAreas[4] + pipe4.flowModel.crossAreas[5]) / 2.0, (pipe4.flowModel.crossAreas[5] + pipe4.flowModel.crossAreas[6]) / 2.0, (pipe4.flowModel.crossAreas[6] + pipe4.flowModel.crossAreas[7]) / 2.0}[$i1], {(pipe4.flowModel.roughnesses[1] + pipe4.flowModel.roughnesses[2]) / 2.0, (pipe4.flowModel.roughnesses[2] + pipe4.flowModel.roughnesses[3]) / 2.0, (pipe4.flowModel.roughnesses[3] + pipe4.flowModel.roughnesses[4]) / 2.0, (pipe4.flowModel.roughnesses[4] + pipe4.flowModel.roughnesses[5]) / 2.0, (pipe4.flowModel.roughnesses[5] + pipe4.flowModel.roughnesses[6]) / 2.0, (pipe4.flowModel.roughnesses[6] + pipe4.flowModel.roughnesses[7]) / 2.0}[$i1], n8133.n8346.n8308 / 6.0, pipe4.flowModel.Res_turbulent_internal[$i1]) for $i1 in 1:6) * pipe4.flowModel.nParallel)[$i1], {pipe4.flowModel.m_flow_nominal / pipe4.flowModel.dp_nominal * (pipe4.flowModel.dps_fg[1] - pipe4.flowModel.g * pipe4.flowModel.dheights[1] * n8133.n8346.n8135), pipe4.flowModel.m_flow_nominal / pipe4.flowModel.dp_nominal * (pipe4.flowModel.dps_fg[2] - pipe4.flowModel.g * pipe4.flowModel.dheights[2] * n8133.n8346.n8135), pipe4.flowModel.m_flow_nominal / pipe4.flowModel.dp_nominal * (pipe4.flowModel.dps_fg[3] - pipe4.flowModel.g * pipe4.flowModel.dheights[3] * n8133.n8346.n8135), pipe4.flowModel.m_flow_nominal / pipe4.flowModel.dp_nominal * (pipe4.flowModel.dps_fg[4] - pipe4.flowModel.g * pipe4.flowModel.dheights[4] * n8133.n8346.n8135), pipe4.flowModel.m_flow_nominal / pipe4.flowModel.dp_nominal * (pipe4.flowModel.dps_fg[5] - pipe4.flowModel.g * pipe4.flowModel.dheights[5] * n8133.n8346.n8135), pipe4.flowModel.m_flow_nominal / pipe4.flowModel.dp_nominal * (pipe4.flowModel.dps_fg[6] - pipe4.flowModel.g * pipe4.flowModel.dheights[6] * n8133.n8346.n8135)}[$i1]) for $i1 in 1:6);
//   pipe4.flowModel.rhos_act[1] = noEvent(if pipe4.flowModel.m_flows[1] > 0.0 then pipe4.flowModel.rhos[1] else pipe4.flowModel.rhos[2]);
//   pipe4.flowModel.mus_act[1] = noEvent(if pipe4.flowModel.m_flows[1] > 0.0 then pipe4.flowModel.mus[1] else pipe4.flowModel.mus[2]);
//   pipe4.flowModel.rhos_act[2] = noEvent(if pipe4.flowModel.m_flows[2] > 0.0 then pipe4.flowModel.rhos[2] else pipe4.flowModel.rhos[3]);
//   pipe4.flowModel.mus_act[2] = noEvent(if pipe4.flowModel.m_flows[2] > 0.0 then pipe4.flowModel.mus[2] else pipe4.flowModel.mus[3]);
//   pipe4.flowModel.rhos_act[3] = noEvent(if pipe4.flowModel.m_flows[3] > 0.0 then pipe4.flowModel.rhos[3] else pipe4.flowModel.rhos[4]);
//   pipe4.flowModel.mus_act[3] = noEvent(if pipe4.flowModel.m_flows[3] > 0.0 then pipe4.flowModel.mus[3] else pipe4.flowModel.mus[4]);
//   pipe4.flowModel.rhos_act[4] = noEvent(if pipe4.flowModel.m_flows[4] > 0.0 then pipe4.flowModel.rhos[4] else pipe4.flowModel.rhos[5]);
//   pipe4.flowModel.mus_act[4] = noEvent(if pipe4.flowModel.m_flows[4] > 0.0 then pipe4.flowModel.mus[4] else pipe4.flowModel.mus[5]);
//   pipe4.flowModel.rhos_act[5] = noEvent(if pipe4.flowModel.m_flows[5] > 0.0 then pipe4.flowModel.rhos[5] else pipe4.flowModel.rhos[6]);
//   pipe4.flowModel.mus_act[5] = noEvent(if pipe4.flowModel.m_flows[5] > 0.0 then pipe4.flowModel.mus[5] else pipe4.flowModel.mus[6]);
//   pipe4.flowModel.rhos_act[6] = noEvent(if pipe4.flowModel.m_flows[6] > 0.0 then pipe4.flowModel.rhos[6] else pipe4.flowModel.rhos[7]);
//   pipe4.flowModel.mus_act[6] = noEvent(if pipe4.flowModel.m_flows[6] > 0.0 then pipe4.flowModel.mus[6] else pipe4.flowModel.mus[7]);
//   pipe4.flowModel.Ib_flows = array(pipe4.flowModel.rhos[i] * pipe4.flowModel.vs[i] * pipe4.flowModel.vs[i] * pipe4.flowModel.crossAreas[i] - pipe4.flowModel.rhos[i + 1] * pipe4.flowModel.vs[i + 1] * pipe4.flowModel.vs[i + 1] * pipe4.flowModel.crossAreas[i + 1] for n49 in 1:6) * pipe4.flowModel.nParallel;
//   pipe4.flowModel.Fs_p = array(0.5 * (pipe4.flowModel.crossAreas[i] + pipe4.flowModel.crossAreas[i + 1]) * (n1.n7656.n102.n8149.n8133.n8346.n7670.n7786(pipe4.flowModel.states[i + 1]) - n1.n7656.n102.n8149.n8133.n8346.n7670.n7786(pipe4.flowModel.states[i])) for n49 in 1:6) * pipe4.flowModel.nParallel;
//   pipe4.flowModel.dps_fg = array(pipe4.flowModel.Fs_fg[i] / pipe4.flowModel.nParallel * 2.0 / (pipe4.flowModel.crossAreas[i] + pipe4.flowModel.crossAreas[i + 1]) for n49 in 1:6);
//   pipe4.flowModel.Is = array(pipe4.flowModel.m_flows[i] * pipe4.flowModel.pathLengths[i] for n49 in 1:6);
//   der(pipe4.flowModel.Is[1]) = pipe4.flowModel.Ib_flows[1] - pipe4.flowModel.Fs_p[1] - pipe4.flowModel.Fs_fg[1];
//   der(pipe4.flowModel.Is[2]) = pipe4.flowModel.Ib_flows[2] - pipe4.flowModel.Fs_p[2] - pipe4.flowModel.Fs_fg[2];
//   der(pipe4.flowModel.Is[3]) = pipe4.flowModel.Ib_flows[3] - pipe4.flowModel.Fs_p[3] - pipe4.flowModel.Fs_fg[3];
//   der(pipe4.flowModel.Is[4]) = pipe4.flowModel.Ib_flows[4] - pipe4.flowModel.Fs_p[4] - pipe4.flowModel.Fs_fg[4];
//   der(pipe4.flowModel.Is[5]) = pipe4.flowModel.Ib_flows[5] - pipe4.flowModel.Fs_p[5] - pipe4.flowModel.Fs_fg[5];
//   der(pipe4.flowModel.Is[6]) = pipe4.flowModel.Ib_flows[6] - pipe4.flowModel.Fs_p[6] - pipe4.flowModel.Fs_fg[6];
//   pipe4.vs = array(0.5 * (pipe4.m_flows[i] + pipe4.m_flows[i + 1]) / pipe4.mediums[i].d / pipe4.crossAreas[i] for n49 in 1:5) / pipe4.nParallel;
//   pipe4.heatTransfer.states[1].X = pipe4.mediums[1].state.X;
//   pipe4.heatTransfer.states[2].X = pipe4.mediums[2].state.X;
//   pipe4.heatTransfer.states[3].X = pipe4.mediums[3].state.X;
//   pipe4.heatTransfer.states[4].X = pipe4.mediums[4].state.X;
//   pipe4.heatTransfer.states[5].X = pipe4.mediums[5].state.X;
//   pipe4.heatTransfer.surfaceAreas = {pipe4.perimeter * 10.0, pipe4.perimeter * 10.0, pipe4.perimeter * 10.0, pipe4.perimeter * 10.0, pipe4.perimeter * 10.0};
//   pipe4.heatTransfer.Ts = array(n1.n7656.n102.n8149.n8133.n7988.n7670.n7785(pipe4.heatTransfer.states[$i1]) for $i1 in 1:5);
//   pipe4.heatTransfer.vs = pipe4.vs;
//   pipe4.heatTransfer.lengths = {10.0, 10.0, 10.0, 10.0, 10.0};
//   pipe4.heatTransfer.dimensions = pipe4.dimensions;
//   pipe4.heatTransfer.roughnesses = pipe4.roughnesses;
//   pipe4.heatTransfer.Ts[1] = pipe4.heatTransfer.heatPorts[1].T;
//   pipe4.heatTransfer.Ts[2] = pipe4.heatTransfer.heatPorts[2].T;
//   pipe4.heatTransfer.Ts[3] = pipe4.heatTransfer.heatPorts[3].T;
//   pipe4.heatTransfer.Ts[4] = pipe4.heatTransfer.heatPorts[4].T;
//   pipe4.heatTransfer.Ts[5] = pipe4.heatTransfer.heatPorts[5].T;
//   pipe4.heatTransfer.Q_flows[1] = pipe4.heatTransfer.heatPorts[1].Q_flow;
//   pipe4.heatTransfer.Q_flows[2] = pipe4.heatTransfer.heatPorts[2].Q_flow;
//   pipe4.heatTransfer.Q_flows[3] = pipe4.heatTransfer.heatPorts[3].Q_flow;
//   pipe4.heatTransfer.Q_flows[4] = pipe4.heatTransfer.heatPorts[4].Q_flow;
//   pipe4.heatTransfer.Q_flows[5] = pipe4.heatTransfer.heatPorts[5].Q_flow;
//   pipe4.Qb_flows[1] = pipe4.heatTransfer.Q_flows[1];
//   pipe4.Qb_flows[2] = pipe4.heatTransfer.Q_flows[2];
//   pipe4.Qb_flows[3] = pipe4.heatTransfer.Q_flows[3];
//   pipe4.Qb_flows[4] = pipe4.heatTransfer.Q_flows[4];
//   pipe4.Qb_flows[5] = pipe4.heatTransfer.Q_flows[5];
//   pipe4.Wb_flows[2:4] = array(pipe4.vs[i] * pipe4.crossAreas[i] * ((pipe4.mediums[i + 1].p - pipe4.mediums[i - 1].p) / 2.0 + (pipe4.flowModel.dps_fg[i] + pipe4.flowModel.dps_fg[i + 1]) / 2.0 - system.g * {10.0, 10.0, 10.0, 10.0, 10.0}[i] * pipe4.mediums[i].d) for n49 in 2:4) * pipe4.nParallel;
//   pipe4.Wb_flows[1] = pipe4.vs[1] * pipe4.crossAreas[1] * ((pipe4.mediums[2].p - pipe4.port_a.p) / 1.5 + pipe4.flowModel.dps_fg[1] + pipe4.flowModel.dps_fg[2] / 2.0 - system.g * 10.0 * pipe4.mediums[1].d) * pipe4.nParallel;
//   pipe4.Wb_flows[5] = pipe4.vs[5] * pipe4.crossAreas[5] * ((pipe4.port_b.p - pipe4.mediums[4].p) / 1.5 + pipe4.flowModel.dps_fg[5] / 2.0 + pipe4.flowModel.dps_fg[6] - system.g * 10.0 * pipe4.mediums[5].d) * pipe4.nParallel;
//   n8133.n8348[1] = 5.0;
//   n8133.n8348[2] = 10.0;
//   n8133.n8348[3] = 10.0;
//   n8133.n8348[4] = 10.0;
//   n8133.n8348[5] = 10.0;
//   n8133.n8348[6] = 5.0;
//   n8133.n8373[1] = 5.0;
//   n8133.n8373[2] = 10.0;
//   n8133.n8373[3] = 10.0;
//   n8133.n8373[4] = 10.0;
//   n8133.n8373[5] = 10.0;
//   n8133.n8373[6] = 5.0;
//   n8133.n8370[1] = pipe4.crossAreas[1];
//   n8133.n8370[2] = pipe4.crossAreas[1];
//   n8133.n8370[3] = pipe4.crossAreas[2];
//   n8133.n8370[4] = pipe4.crossAreas[3];
//   n8133.n8370[5] = pipe4.crossAreas[4];
//   n8133.n8370[6] = pipe4.crossAreas[5];
//   n8133.n8370[7] = pipe4.crossAreas[5];
//   n8133.n8371[1] = pipe4.dimensions[1];
//   n8133.n8371[2] = pipe4.dimensions[1];
//   n8133.n8371[3] = pipe4.dimensions[2];
//   n8133.n8371[4] = pipe4.dimensions[3];
//   n8133.n8371[5] = pipe4.dimensions[4];
//   n8133.n8371[6] = pipe4.dimensions[5];
//   n8133.n8371[7] = pipe4.dimensions[5];
//   n8133.n8372[1] = pipe4.roughnesses[1];
//   n8133.n8372[2] = pipe4.roughnesses[1];
//   n8133.n8372[3] = pipe4.roughnesses[2];
//   n8133.n8372[4] = pipe4.roughnesses[3];
//   n8133.n8372[5] = pipe4.roughnesses[4];
//   n8133.n8372[6] = pipe4.roughnesses[5];
//   n8133.n8372[7] = pipe4.roughnesses[5];
//   pipe4.mb_flows[1] = pipe4.m_flows[1] - pipe4.m_flows[2];
//   pipe4.mbXi_flows[1,1] = pipe4.mXi_flows[1,1] - pipe4.mXi_flows[2,1];
//   pipe4.Hb_flows[1] = pipe4.H_flows[1] - pipe4.H_flows[2];
//   pipe4.mb_flows[2] = pipe4.m_flows[2] - pipe4.m_flows[3];
//   pipe4.mbXi_flows[2,1] = pipe4.mXi_flows[2,1] - pipe4.mXi_flows[3,1];
//   pipe4.Hb_flows[2] = pipe4.H_flows[2] - pipe4.H_flows[3];
//   pipe4.mb_flows[3] = pipe4.m_flows[3] - pipe4.m_flows[4];
//   pipe4.mbXi_flows[3,1] = pipe4.mXi_flows[3,1] - pipe4.mXi_flows[4,1];
//   pipe4.Hb_flows[3] = pipe4.H_flows[3] - pipe4.H_flows[4];
//   pipe4.mb_flows[4] = pipe4.m_flows[4] - pipe4.m_flows[5];
//   pipe4.mbXi_flows[4,1] = pipe4.mXi_flows[4,1] - pipe4.mXi_flows[5,1];
//   pipe4.Hb_flows[4] = pipe4.H_flows[4] - pipe4.H_flows[5];
//   pipe4.mb_flows[5] = pipe4.m_flows[5] - pipe4.m_flows[6];
//   pipe4.mbXi_flows[5,1] = pipe4.mXi_flows[5,1] - pipe4.mXi_flows[6,1];
//   pipe4.Hb_flows[5] = pipe4.H_flows[5] - pipe4.H_flows[6];
//   pipe4.H_flows[2] = semiLinear(pipe4.m_flows[2], pipe4.mediums[1].h, pipe4.mediums[2].h);
//   pipe4.mXi_flows[2,1] = semiLinear(pipe4.m_flows[2], pipe4.mediums[1].Xi[1], pipe4.mediums[2].Xi[1]);
//   pipe4.H_flows[3] = semiLinear(pipe4.m_flows[3], pipe4.mediums[2].h, pipe4.mediums[3].h);
//   pipe4.mXi_flows[3,1] = semiLinear(pipe4.m_flows[3], pipe4.mediums[2].Xi[1], pipe4.mediums[3].Xi[1]);
//   pipe4.H_flows[4] = semiLinear(pipe4.m_flows[4], pipe4.mediums[3].h, pipe4.mediums[4].h);
//   pipe4.mXi_flows[4,1] = semiLinear(pipe4.m_flows[4], pipe4.mediums[3].Xi[1], pipe4.mediums[4].Xi[1]);
//   pipe4.H_flows[5] = semiLinear(pipe4.m_flows[5], pipe4.mediums[4].h, pipe4.mediums[5].h);
//   pipe4.mXi_flows[5,1] = semiLinear(pipe4.m_flows[5], pipe4.mediums[4].Xi[1], pipe4.mediums[5].Xi[1]);
//   pipe4.H_flows[1] = semiLinear(pipe4.port_a.m_flow, ($OMC$PositiveMax(-pipe2.port_b.m_flow, 1e-07) * pipe2.port_b.h_outflow + $OMC$PositiveMax(-pipe3.port_b.m_flow, 1e-07) * pipe3.port_b.h_outflow) / ($OMC$PositiveMax(-pipe2.port_b.m_flow, 1e-07) + $OMC$PositiveMax(-pipe3.port_b.m_flow, 1e-07)), pipe4.mediums[1].h);
//   pipe4.H_flows[6] = -semiLinear(pipe4.port_b.m_flow, boundary4.ports[1].h_outflow, pipe4.mediums[5].h);
//   pipe4.mXi_flows[1,1] = semiLinear(pipe4.port_a.m_flow, ($OMC$PositiveMax(-pipe2.port_b.m_flow, 1e-07) * pipe2.port_b.Xi_outflow[1] + $OMC$PositiveMax(-pipe3.port_b.m_flow, 1e-07) * pipe3.port_b.Xi_outflow[1]) / ($OMC$PositiveMax(-pipe2.port_b.m_flow, 1e-07) + $OMC$PositiveMax(-pipe3.port_b.m_flow, 1e-07)), pipe4.mediums[1].Xi[1]);
//   pipe4.mXi_flows[6,1] = -semiLinear(pipe4.port_b.m_flow, boundary4.ports[1].Xi_outflow[1], pipe4.mediums[5].Xi[1]);
//   pipe4.port_a.m_flow = pipe4.m_flows[1];
//   pipe4.port_b.m_flow = -pipe4.m_flows[6];
//   pipe4.port_a.h_outflow = pipe4.mediums[1].h;
//   pipe4.port_b.h_outflow = pipe4.mediums[5].h;
//   pipe4.port_a.Xi_outflow[1] = pipe4.mediums[1].Xi[1];
//   pipe4.port_b.Xi_outflow[1] = pipe4.mediums[5].Xi[1];
//   pipe4.state_a = n1.n7656.n102.n8149.n8133.n7670.n8338(pipe4.port_a.p, ($OMC$PositiveMax(-pipe2.port_b.m_flow, 1e-07) * pipe2.port_b.h_outflow + $OMC$PositiveMax(-pipe3.port_b.m_flow, 1e-07) * pipe3.port_b.h_outflow) / ($OMC$PositiveMax(-pipe2.port_b.m_flow, 1e-07) + $OMC$PositiveMax(-pipe3.port_b.m_flow, 1e-07)), {($OMC$PositiveMax(-pipe2.port_b.m_flow, 1e-07) * pipe2.port_b.Xi_outflow[1] + $OMC$PositiveMax(-pipe3.port_b.m_flow, 1e-07) * pipe3.port_b.Xi_outflow[1]) / ($OMC$PositiveMax(-pipe2.port_b.m_flow, 1e-07) + $OMC$PositiveMax(-pipe3.port_b.m_flow, 1e-07))});
//   pipe4.state_b = n1.n7656.n102.n8149.n8133.n7670.n8338(pipe4.port_b.p, boundary4.ports[1].h_outflow, {boundary4.ports[1].Xi_outflow[1]});
//   pipe4.statesFM[1] = pipe4.state_a;
//   pipe4.statesFM[2] = pipe4.mediums[1].state;
//   pipe4.statesFM[3] = pipe4.mediums[2].state;
//   pipe4.statesFM[4] = pipe4.mediums[3].state;
//   pipe4.statesFM[5] = pipe4.mediums[4].state;
//   pipe4.statesFM[6] = pipe4.mediums[5].state;
//   pipe4.statesFM[7] = pipe4.state_b;
//   pipe4.m_flows[1] = pipe4.flowModel.m_flows[1];
//   pipe4.m_flows[2] = pipe4.flowModel.m_flows[2];
//   pipe4.m_flows[3] = pipe4.flowModel.m_flows[3];
//   pipe4.m_flows[4] = pipe4.flowModel.m_flows[4];
//   pipe4.m_flows[5] = pipe4.flowModel.m_flows[5];
//   pipe4.m_flows[6] = pipe4.flowModel.m_flows[6];
//   n8133.n8369[1] = pipe4.m_flows[1] / n1.n7656.n102.n8149.n8133.n7670.n523(pipe4.state_a) / pipe4.crossAreas[1] / pipe4.nParallel;
//   n8133.n8369[2] = pipe4.vs[1];
//   n8133.n8369[3] = pipe4.vs[2];
//   n8133.n8369[4] = pipe4.vs[3];
//   n8133.n8369[5] = pipe4.vs[4];
//   n8133.n8369[6] = pipe4.vs[5];
//   n8133.n8369[7] = pipe4.m_flows[6] / n1.n7656.n102.n8149.n8133.n7670.n523(pipe4.state_b) / pipe4.crossAreas[5] / pipe4.nParallel;
//   pipe4.ms[1] = pipe4.fluidVolumes[1] * pipe4.mediums[1].d;
//   pipe4.mXis[1,1] = pipe4.ms[1] * pipe4.mediums[1].Xi[1];
//   pipe4.Us[1] = pipe4.ms[1] * pipe4.mediums[1].u;
//   pipe4.ms[2] = pipe4.fluidVolumes[2] * pipe4.mediums[2].d;
//   pipe4.mXis[2,1] = pipe4.ms[2] * pipe4.mediums[2].Xi[1];
//   pipe4.Us[2] = pipe4.ms[2] * pipe4.mediums[2].u;
//   pipe4.ms[3] = pipe4.fluidVolumes[3] * pipe4.mediums[3].d;
//   pipe4.mXis[3,1] = pipe4.ms[3] * pipe4.mediums[3].Xi[1];
//   pipe4.Us[3] = pipe4.ms[3] * pipe4.mediums[3].u;
//   pipe4.ms[4] = pipe4.fluidVolumes[4] * pipe4.mediums[4].d;
//   pipe4.mXis[4,1] = pipe4.ms[4] * pipe4.mediums[4].Xi[1];
//   pipe4.Us[4] = pipe4.ms[4] * pipe4.mediums[4].u;
//   pipe4.ms[5] = pipe4.fluidVolumes[5] * pipe4.mediums[5].d;
//   pipe4.mXis[5,1] = pipe4.ms[5] * pipe4.mediums[5].Xi[1];
//   pipe4.Us[5] = pipe4.ms[5] * pipe4.mediums[5].u;
//   der(pipe4.Us[1]) = pipe4.Hb_flows[1] + pipe4.Wb_flows[1] + pipe4.Qb_flows[1];
//   der(pipe4.Us[2]) = pipe4.Hb_flows[2] + pipe4.Wb_flows[2] + pipe4.Qb_flows[2];
//   der(pipe4.Us[3]) = pipe4.Hb_flows[3] + pipe4.Wb_flows[3] + pipe4.Qb_flows[3];
//   der(pipe4.Us[4]) = pipe4.Hb_flows[4] + pipe4.Wb_flows[4] + pipe4.Qb_flows[4];
//   der(pipe4.Us[5]) = pipe4.Hb_flows[5] + pipe4.Wb_flows[5] + pipe4.Qb_flows[5];
//   der(pipe4.ms[1]) = pipe4.mb_flows[1];
//   der(pipe4.ms[2]) = pipe4.mb_flows[2];
//   der(pipe4.ms[3]) = pipe4.mb_flows[3];
//   der(pipe4.ms[4]) = pipe4.mb_flows[4];
//   der(pipe4.ms[5]) = pipe4.mb_flows[5];
//   der(pipe4.mXis[1,1]) = pipe4.mbXi_flows[1,1];
//   der(pipe4.mXis[2,1]) = pipe4.mbXi_flows[2,1];
//   der(pipe4.mXis[3,1]) = pipe4.mbXi_flows[3,1];
//   der(pipe4.mXis[4,1]) = pipe4.mbXi_flows[4,1];
//   der(pipe4.mXis[5,1]) = pipe4.mbXi_flows[5,1];
//   assert(boundary4.medium.T >= 190.0 and boundary4.medium.T <= 647.0, \"assert message 315810245365667762\");
//   boundary4.medium.MM = 1.0 / (boundary4.medium.Xi[1] / 0.01801528 + (1.0 - boundary4.medium.Xi[1]) / 0.0289651159);
//   n8155.n7931.n10110 = min(n1.n7656.n102.n8149.n8155.n7670.n8562(boundary4.medium.T), 0.999 * boundary4.medium.p);
//   n8155.n7931.n10108 = min(n8155.n7931.n10110 * 0.6219647130774989 / max(1e-13, boundary4.medium.p - n8155.n7931.n10110) * (1.0 - boundary4.medium.Xi[1]), 1.0);
//   n8155.n7931.n10105 = max(boundary4.medium.Xi[1] - n8155.n7931.n10108, 0.0);
//   n8155.n7931.n10106 = boundary4.medium.Xi[1] - n8155.n7931.n10105;
//   n8155.n7931.n10107 = 1.0 - boundary4.medium.Xi[1];
//   boundary4.medium.h = n1.n7656.n102.n8149.n8155.n7670.n7957(boundary4.medium.p, boundary4.medium.T, boundary4.medium.Xi);
//   boundary4.medium.R = 287.0512249529787 * n8155.n7931.n10107 / (1.0 - n8155.n7931.n10105) + 461.5233290850878 * n8155.n7931.n10106 / (1.0 - n8155.n7931.n10105);
//   boundary4.medium.u = boundary4.medium.h - boundary4.medium.R * boundary4.medium.T;
//   boundary4.medium.d = boundary4.medium.p / (boundary4.medium.R * boundary4.medium.T);
//   boundary4.medium.state.p = boundary4.medium.p;
//   boundary4.medium.state.T = boundary4.medium.T;
//   boundary4.medium.state.X[1] = boundary4.medium.X[1];
//   boundary4.medium.state.X[2] = boundary4.medium.X[2];
//   n8155.n7931.n10109 = 0.6219647130774989 * n8155.n7931.n10110 / max(1e-13, boundary4.medium.p - n8155.n7931.n10110);
//   boundary4.medium.x_water = boundary4.medium.Xi[1] / max(n8155.n7931.n10107, 1e-13);
//   boundary4.medium.phi = boundary4.medium.p / n8155.n7931.n10110 * boundary4.medium.Xi[1] / (boundary4.medium.Xi[1] + 0.6219647130774989 * n8155.n7931.n10107);
//   boundary4.medium.Xi[1] = boundary4.medium.X[1];
//   boundary4.medium.X[2] = 1.0 - boundary4.medium.Xi[1];
//   assert(boundary4.medium.X[1] >= -1e-05 and boundary4.medium.X[1] <= 1.00001, \"assert message 1370699107527140891\");
//   assert(boundary4.medium.X[2] >= -1e-05 and boundary4.medium.X[2] <= 1.00001, \"assert message 1370699107527140891\");
//   assert(boundary4.medium.p >= 0.0, \"assert message 2590312994638120201\");
//   n1.n7656.n11.n8727(\"Moist air\", {\"water\", \"air\"}, false, true, n8155.n8737, \"Boundary_pT\");
//   n8155.n8736 = boundary4.T;
//   n8155.n8737[1] = boundary4.X[1];
//   n8155.n8737[2] = boundary4.X[2];
//   boundary4.medium.p = n8155.n8735;
//   boundary4.medium.T = n8155.n8736;
//   boundary4.medium.Xi[1] = n8155.n8737[1];
//   boundary4.ports[1].p = boundary4.medium.p;
//   boundary4.ports[1].h_outflow = boundary4.medium.h;
//   boundary4.ports[1].Xi_outflow[1] = boundary4.medium.Xi[1];
//   ramp1.y = ramp1.offset + (if time < ramp1.startTime then 0.0 else if time < ramp1.startTime + ramp1.duration then (time - ramp1.startTime) * ramp1.height / ramp1.duration else ramp1.height);
//   heat2[1].port.Q_flow = -heat2[1].Q_flow * (1.0 + heat2[1].alpha * (heat2[1].port.T - heat2[1].T_ref));
//   heat2[2].port.Q_flow = -heat2[2].Q_flow * (1.0 + heat2[2].alpha * (heat2[2].port.T - heat2[2].T_ref));
//   heat2[3].port.Q_flow = -heat2[3].Q_flow * (1.0 + heat2[3].alpha * (heat2[3].port.T - heat2[3].T_ref));
//   heat2[4].port.Q_flow = -heat2[4].Q_flow * (1.0 + heat2[4].alpha * (heat2[4].port.T - heat2[4].T_ref));
//   heat2[5].port.Q_flow = -heat2[5].Q_flow * (1.0 + heat2[5].alpha * (heat2[5].port.T - heat2[5].T_ref));
// end n1.n7656.n102.n8149;
// "
// ""
// endResult
