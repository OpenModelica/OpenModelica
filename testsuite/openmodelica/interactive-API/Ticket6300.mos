// name: Ticket6300.mos
// keywords:
// status: correct
//
// Tests if -d=nfAPI will use the NF for getElementAnnotations
//

setCommandLineOptions("-d=nfAPI"); getErrorString();

loadModel(Modelica, {"3.2.3"}); getErrorString();
getElementAnnotations(Modelica.Mechanics.MultiBody.World); getErrorString();

// Result:
// true
// ""
// true
// ""
// {{Placement(true,-,-,84.0,-16.0,116.0,16.0,-,-,-,-,-,-,-,)},{},{Dialog("General","Parameters",true,false,false,-,-,-,-,"",false)},{Dialog("General","Parameters",true,false,false,-,-,-,-,"",false)},{Dialog("General","Parameters",true,false,false,-,-,-,-,"",false)},{},{},{Evaluate=true},{Dialog("General","Parameters",true,false,false,-,-,-,-,"",false)},{Evaluate=true, Dialog("General","Parameters",true,false,false,-,-,-,-,"",false)},{Dialog("General","Parameters",false,false,false,-,-,-,-,"",false)},{},{Dialog("Animation","if animateWorld = true",true,false,false,-,-,-,-,"",false)},{Dialog("Animation","if animateWorld = true",true,false,false,-,-,-,-,"",false)},{Dialog("Animation","if animateWorld = true",true,false,false,-,-,-,-,"",false)},{Dialog("Animation","if animateWorld = true",true,false,true,-,-,-,-,"",false)},{Dialog("Animation","if animateWorld = true",true,false,true,-,-,-,-,"",false)},{Dialog("Animation","if animateWorld = true",true,false,true,-,-,-,-,"",false)},{Dialog("Animation","if animateGravity = true and gravityType = UniformGravity",true,false,false,-,-,-,-,"",false)},{Dialog("Animation","if animateGravity = true and gravityType = UniformGravity",true,false,false,-,-,-,-,"",false)},{Dialog("Animation","if animateGravity = true and gravityType = UniformGravity",true,false,false,-,-,-,-,"",false)},{Dialog("Animation","if animateGravity = true and gravityType = UniformGravity",true,false,true,-,-,-,-,"",false)},{Dialog("Animation","if animateGravity = true and gravityType = PointGravity",false,false,false,-,-,-,-,"",false)},{Dialog("Animation","if animateGravity = true and gravityType = PointGravity",false,false,true,-,-,-,-,"",false)},{Dialog("Animation","if animateGround = true and gravityType = UniformGravity",false,false,false,-,-,-,-,"",false)},{Dialog("Animation","if animateGround = true and gravityType = UniformGravity",false,false,false,-,-,-,-,"",false)},{Dialog("Animation","if animateGround = true and gravityType = UniformGravity",false,false,false,-,-,-,-,"",false)},{Dialog("Animation","if animateGround = true and gravityType = UniformGravity",false,false,true,-,-,-,-,"",false)},{Dialog("Defaults","Parameters",true,false,false,-,-,-,-,"",false)},{Dialog("Defaults","Parameters",true,false,false,-,-,-,-,"",false)},{Dialog("Defaults","Parameters",true,false,false,-,-,-,-,"",false)},{Dialog("Defaults","Parameters",true,false,false,-,-,-,-,"",false)},{Dialog("Defaults","Parameters",true,false,false,-,-,-,-,"",false)},{Dialog("Defaults","Parameters",true,false,false,-,-,-,-,"",false)},{Dialog("Defaults","Parameters",true,false,false,-,-,-,-,"",false)},{Dialog("Defaults","Parameters",true,false,false,-,-,-,-,"",false)},{Dialog("Defaults","Parameters",true,false,false,-,-,-,-,"",false)},{Dialog("Defaults","Parameters",true,false,false,-,-,-,-,"",false)},{Dialog("Defaults","Parameters",true,false,false,-,-,-,-,"",false)},{Dialog("Defaults","Parameters",true,false,false,-,-,-,-,"",false)},{Dialog("Defaults","Parameters",true,false,false,-,-,-,-,"",false)},{choicesAllMatching=true, Dialog("General","Parameters",false,false,false,-,-,-,-,"",false), Documentation("<html>
// <p>Replaceable function to define the gravity field.
//    Default is function
//    <a href=\"modelica://Modelica.Mechanics.MultiBody.Forces.Internal.standardGravityAcceleration\">standardGravityAcceleration</a>
//    that provides some simple gravity fields (no gravity, constant parallel gravity field,
//    point gravity field).
//    By redeclaring this function, any type of gravity field can be defined, see example
//      <a href=\"modelica://Modelica.Mechanics.MultiBody.Examples.Elementary.UserDefinedGravityField\">Examples.Elementary.UserDefinedGravityField</a>.
// </p>
// </html>","")},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}}
// ""
// endResult
