// name:     testInitialEquationsFMI
// keywords: initialization, start values, initial equation, fmi
// status:   correct
// teardown_command: rm -rf initializationTestsFMI.initial_equation* initializationTestsFMI_initial_equation* output.log
//
//  test start values and initial equations
//

loadString("
within ;
package initializationTestsFMI
  model initial_equation1
    Real x;
    Real y;
  initial equation
    x = 5;
    y = 5;
  equation
    der(x) = 2*x*y-3*y;
    der(y) = 5*y-7*x*y;
  end initial_equation1;

  model initial_equation2
    Real x(start=5);
    Real y(start=5);
  equation
    der(x) = 2*x*y-3*y;
    der(y) = 5*y-7*x*y;
  end initial_equation2;

  model initial_equation3
    Real x(start=5);
    Real y(start=5);
  initial equation
    x = 3;
    y = 4;
  equation
    der(x) = 2*x*y-3*y;
    der(y) = 5*y-7*x*y;
  end initial_equation3;
end initializationTestsFMI;
"); getErrorString();

translateModelFMU(initializationTestsFMI.initial_equation1, version="2.0"); getErrorString();
importFMU("initializationTestsFMI.initial_equation1.fmu"); getErrorString();
loadFile("initializationTestsFMI_initial_equation1_me_FMU.mo"); getErrorString();
simulate(initializationTestsFMI_initial_equation1_me_FMU, stopTime=0.0); getErrorString();
val(x, 0.0);
val(y, 0.0);

translateModelFMU(initializationTestsFMI.initial_equation2, version="2.0"); getErrorString();
importFMU("initializationTestsFMI.initial_equation2.fmu"); getErrorString();
loadFile("initializationTestsFMI_initial_equation2_me_FMU.mo"); getErrorString();
simulate(initializationTestsFMI_initial_equation2_me_FMU, stopTime=0.0); getErrorString();
val(x, 0.0);
val(y, 0.0);

translateModelFMU(initializationTestsFMI.initial_equation3, version="2.0"); getErrorString();
importFMU("initializationTestsFMI.initial_equation3.fmu"); getErrorString();
loadFile("initializationTestsFMI_initial_equation3_me_FMU.mo"); getErrorString();
simulate(initializationTestsFMI_initial_equation3_me_FMU, stopTime=0.0); getErrorString();
val(x, 0.0);
val(y, 0.0);

// Result:
// true
// ""
// "initializationTestsFMI.initial_equation1.fmu"
// ""
// "initializationTestsFMI_initial_equation1_me_FMU.mo"
// ""
// true
// ""
// record SimulationResult
//     resultFile = "initializationTestsFMI_initial_equation1_me_FMU_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 0.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'initializationTestsFMI_initial_equation1_me_FMU', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// end SimulationResult;
// ""
// 5.0
// 5.0
// "initializationTestsFMI.initial_equation2.fmu"
// "Warning: The initial conditions are not fully specified. For more information set -d=initialization. In OMEdit Tools->Options->Simulation->OMCFlags, in OMNotebook call setCommandLineOptions(\"-d=initialization\").
// "
// "initializationTestsFMI_initial_equation2_me_FMU.mo"
// ""
// true
// ""
// record SimulationResult
//     resultFile = "initializationTestsFMI_initial_equation2_me_FMU_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 0.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'initializationTestsFMI_initial_equation2_me_FMU', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// end SimulationResult;
// ""
// 5.0
// 5.0
// "initializationTestsFMI.initial_equation3.fmu"
// ""
// "initializationTestsFMI_initial_equation3_me_FMU.mo"
// ""
// true
// ""
// record SimulationResult
//     resultFile = "initializationTestsFMI_initial_equation3_me_FMU_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 0.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'initializationTestsFMI_initial_equation3_me_FMU', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// end SimulationResult;
// ""
// 3.0
// 4.0
// endResult
