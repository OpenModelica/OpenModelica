// name:     ExportCvodeFmu_static
// keywords: fmu export simulation flags
// status: correct
// teardown_command: rm -rf *.fmu Pendulum* Pendulum-static* Pendulum_static* Pendulum_me_cs_systemCall.log Pendulum_flags_static.json
// cflags: -d=-newInst
//
// Export Pendulum as 2.0 CS FMU with CVODE solver

// Generate FMU
loadModel(Modelica, {"3.2.3"}); getErrorString();
loadString("model Pendulum
extends Modelica.Mechanics.MultiBody.Examples.Elementary.Pendulum;
end Pendulum;"); getErrorString();
setCommandLineOptions("--fmiFlags=s:cvode"); getErrorString();
translateModelFMU(Pendulum, version = "2.0", fmuType="me_cs"); getErrorString();

// Check _flags.json for simulation flags
system("unzip -cqq Pendulum.fmu resources/Pendulum_flags.json > Pendulum_flags_static.json"); getErrorString();
readFile("Pendulum_flags_static.json"); getErrorString();

// Simulate with OMSimulator
system(getInstallationDirectoryPath() + "/bin/OMSimulator Pendulum.fmu --mode=cs --tolerance=1e-6 --stopTime=1.0 --resultFile=\"Pendulum_static_res.mat\" --suppressPath=true --tempDir=\"Pendulum-static-tmp\"", "Pendulum_me_cs_systemCall.log"); getErrorString();
readFile("Pendulum_me_cs_systemCall.log"); getErrorString();

// Check results
// TODO: The results are wrong, but with the same error as when using euler.
val(rev.phi, 0.0, "Pendulum_static_res.mat"); getErrorString();
val(rev.w, 0.0, "Pendulum_static_res.mat"); getErrorString();
val(rev.phi, 1.0, "Pendulum_static_res.mat"); getErrorString();
val(rev.w, 1.0, "Pendulum_static_res.mat"); getErrorString();


// Result:
// true
// ""
// true
// ""
// true
// ""
// "Pendulum.fmu"
// ""
// 0
// ""
// "{
//   \"s\" : \"cvode\"
// }"
// ""
// 0
// ""
// "LOG_SOLVER        | info    | CVODE linear multistep method CV_BDF
// LOG_SOLVER        | info    | CVODE maximum integration order CV_ITER_NEWTON
// LOG_SOLVER        | info    | CVODE use equidistant time grid YES
// LOG_SOLVER        | info    | CVODE Using relative error tolerance 1.000000e-06
// LOG_SOLVER        | info    | CVODE Using dense internal linear solver SUNLinSol_Dense.
// LOG_SOLVER        | info    | CVODE Use internal dense numeric jacobian method.
// LOG_SOLVER        | info    | CVODE uses internal root finding method NO
// LOG_SOLVER        | info    | CVODE maximum absolut step size 0
// LOG_SOLVER        | info    | CVODE initial step size is set automatically
// LOG_SOLVER        | info    | CVODE maximum integration order 5
// LOG_SOLVER        | info    | CVODE maximum number of nonlinear convergence failures permitted during one step 10
// LOG_SOLVER        | info    | CVODE BDF stability limit detection algorithm OFF
// info:    Result file: Pendulum_static_res.mat (bufferSize=1)
// info:    Parameter model.root.Pendulum.world.label1 will not be stored in the result file, because the signal type is not supported
// info:    Parameter model.root.Pendulum.world.label2 will not be stored in the result file, because the signal type is not supported
// "
// ""
// 0.0
// ""
// 0.0
// ""
// -2.591643977798211
// ""
// 3.178793199957211
// ""
// endResult
