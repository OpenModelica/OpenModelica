// name: inlineArray3
// status: correct

// use new inline method
setCommandLineOptions("+inlineMethod=append");

loadString("
model foo
  function f
    input Real[5] x;
    output Real[7] y;
  protected
    Real sumx = exp(-sqrt(sum(x)));
	Real tmpy;
  algorithm
    y[1] := sumx^2;
	y[2] := 2*sumx^2;
	y[3] := 3*sumx^2;
	y[4] := 4*sumx^2;
	y[5] := 5*sumx^2;
	y[6] := 6*sumx^2;
	tmpy := 7*sumx^2;
	y[7] := exp(-sqrt(tmpy/sum(y[i] for i in 1:6))/tmpy);
    annotation(Inline=true); 
  end f;
  
  Real y(fixed = true, start = 1);
  Real v(fixed = true, start = -1);
  Real h(start = 0);
protected
  Real[5] a;
  Real c;
  Real d;

  Real[5] x;
  Real[:] z = {i*sin(time) + 1 for i in 1:10};
  Real[5] w = {z[i]^i/sum(z) for i in 1:5}; 
equation
   x[1] = a[1] + a[2] + w[1];
   x[2] = z[1] + a[1];
   x[3] = z[2] + a[3] + a[1] + 2*a[2] + sum(z);
   x[4] = z[2] + a[3] + a[1] + 2*a[2];
   x[5] = z[2] + x[3] + a[1] + 2*a[2] + cos(sum(a)) + w[2];
   a[1] = sum(f(x))/10;
   a[2] = sum(f(z[1:5]))/10;
   a[3] = sum(f(z[6:10]))/10;
   a[4] = sum(f(z[2:6]))/10;
   a[5] = sum(f(z[3:7]))/10;
   c = exp(-sum(f(a))) - sum(w);
   d = sum(w);
   der(y) = sin(c) - cos(sum(f(x))) + sum(a)/10;
   der(v) = y - d;
   
   when sample(0,0.1) then
     h = v + y + sum(f(z[1:5]))/10 + sum(f(z[6:10]))/10;
   end when;
end foo;
");
getErrorString();

setCommandLineOptions("+simplifyLoops=2");
//setCommandLineOptions("+d=backenddaeinfo");
getErrorString();
simulate(foo);
getErrorString();
val(h,{0,0.5,1.0}); // 0, -17.139

setCommandLineOptions("+inlineMethod=replace");
getErrorString();
simulate(foo);
getErrorString();
val(h,{0,0.5,1.0}); // 0, -17.139


// Result:
// true
// true
// ""
// true
// ""
// record SimulationResult
//     resultFile = "foo_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'foo', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// end SimulationResult;
// "Warning: The initial conditions are not fully specified. For more information set -d=initialization. In OMEdit Tools->Options->Simulation->OMCFlags, in OMNotebook call setCommandLineOptions(\"-d=initialization\").
// "
// {0.04812243429093915,-2.749810253792299,-24.0237961570759}
// true
// ""
// record SimulationResult
//     resultFile = "foo_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'foo', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// end SimulationResult;
// "Warning: The initial conditions are not fully specified. For more information set -d=initialization. In OMEdit Tools->Options->Simulation->OMCFlags, in OMNotebook call setCommandLineOptions(\"-d=initialization\").
// "
// {0.04812243429093915,-2.749810335170811,-24.02379626652536}
// endResult
