// name: inlineArray2
// status: correct
// cflags: -d=-newInst

// use new inline method
setCommandLineOptions("+inlineMethod=append");

loadString("
model foo
  function f
    input Real[5] x;
    output Real[7] y;
  protected 
    Real sumx = exp(-sqrt(sum(x)));
    Real tmpy;
  algorithm 
    y[1] := sumx^2;
    y[2] := 2*sumx^2;
    y[3] := 3*sumx^2;
    y[4] := 4*sumx^2;
    y[5] := 5*sumx^2;
    y[6] := 6*sumx^2;
    tmpy := 7*sumx^2;
    y[7] := exp(-sqrt(tmpy/sum(y[i] for i in 1:6))/tmpy);
    annotation(Inline=true);
  end f;

  function f1
    input Real[7] y;
    output Real[5] x;
  protected 
    Real[5] tmpx = {y[1] + y[2], y[2] + y[3], y[4] + y[5], y[6] + y[7], y[7]};
    Real[7] xx = f(tmpx);
  algorithm 
    x[1] := xx[1] + xx[6];
    x[2] := xx[2] + x[1];
    x[3] := xx[3] + x[2];
    x[4] := xx[4] + x[3];
    x[5] := xx[5] + x[4];
  end f1;

  Real y(fixed = true, start = 1);
  Real v(fixed = true, start = -1);
protected 
  Real[5] a;
  Real c;
  Real d;

  Real[5] x;
  Real[:] z = {i*sin(time) + 1 for i in 1:10};
  Real[5] w = f1(z[1:7]);
equation 
   x[1] = a[1] + a[2] + w[1];
   x[2] = z[1] + a[1];
   x[3] = z[2] + a[3] + a[1] + 2*a[2] + sum(z);
   x[4] = z[2] + a[3] + a[1] + 2*a[2];
   x[5] = z[2] + x[3] + a[1] + 2*a[2] + cos(sum(a)) + w[2];
   a[1] = sum(f(x))/10;
   a[2] = sum(f(z[1:5]))/10;
   a[3] = sum(f(z[6:10]))/10;
   a[4] = sum(f(z[2:6]))/10;
   a[5] = sum(f(z[3:7]))/10;
   c = exp(-sum(f(a))) - sum(w);
   d = sum(w);
   der(y) = (sin(c) - cos(sum(f(x))) + sum(a)/10)*der(v) + cos(time);
   der(v) = der(y)*d;
end foo;
");
getErrorString();

//setCommandLineOptions("+d=backenddaeinfo");
setCommandLineOptions("+simplifyLoops=2");
getErrorString();
simulate(foo);
getErrorString();
val(v,{0,0.5,1.0}); // -1, -0.986
val(y,{0,0.5,1.0}); // 1, 1.823

// Result:
// true
// true
// ""
// true
// ""
// record SimulationResult
//     resultFile = "foo_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'foo', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// end SimulationResult;
// ""
// {-1.0,-0.9862025310764797,-0.9859173056116497}
// {1.0,1.464675331140519,1.826435278620429}
// endResult
