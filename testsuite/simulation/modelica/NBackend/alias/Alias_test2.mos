// name: Alias_test2
// keywords: NewBackend, Alias
// status: correct
// function: Throws an error if there are non literal nominal values.

loadString("
  model Test2
    parameter Real p(fixed=false);
    Real y;                   // not simple
    Real x(nominal=2);
    Real z(nominal=p);        // regular simple
  equation
    x = -2*z;
    y = time + 3.0;
    z = sin(time);
  end Test2;
"); getErrorString();
setCommandLineOptions("--newBackend -d=dumprepl");
simulate(Test2); getErrorString();

// Result:
// true
// ""
// true
// =====================================
//   [dumprepl] Simulation Alias Sets:
// =====================================
//
// Alias Set 1:
// **************
// 	Constant/Parameter Binding: [SCAL] (1) y = 3.0 + time ($RES_SIM_1)
// 	###<No Set Equations>
//
// Alias Set 2:
// **************
// 	<No Constant/Parameter Binding>
// 	### Set Equations:
// 	[SCAL] (1) z = $FUN_1 ($RES_SIM_0)
// 	[SCAL] (1) x = -2.0 * z ($RES_SIM_2)
//
// record SimulationResult
//     resultFile = "",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-6, method = 'dassl', fileNamePrefix = 'Test2', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "Failed to build model: Test2"
// end SimulationResult;
// "Warning: NBAlias.checkNominalThreshold failed because non literal nominal values are not allowed.
// 	<No Constant/Parameter Binding>
// 	### Set Equations:
// 	[SCAL] (1) z = $FUN_1 ($RES_SIM_0)
// 	[SCAL] (1) x = -2.0 * z ($RES_SIM_2)
//
// 	Nominal map after replacements:
// 	(x, 2.0)
// 	(z, p)
// "
// endResult
