// name: simple_nested_for
// keywords: NewBackend
// status: correct

// kabdelhak: Only the fifth is tested, others are for debugging purposes!

loadString("
model simple_nested_for1
  Real x[10,10];
equation
  for i in 1:10 loop
    for j in 1:10 loop
      x[i,j] = i*sin(j*time);
    end for;
  end for;
end simple_nested_for1;

model simple_nested_for2
  parameter Integer s = 10;
  Real x[s,s];
  Real y[s,s];
equation
  for i in 1:s loop
    for j in 1:s loop
      x[i,j] = i*sin(j*time);
      y[j,i] = j + cos(time)^i;
    end for;
  end for;
end simple_nested_for2;

model simple_nested_for3
  parameter Integer s = 10;
  Real x[s,s];
  Real y[s];
equation
  for i in 1:s loop
    y[i] = i + cos(time);
    for j in 1:s loop
      x[i,j] = i*sin(j*time);
    end for;
  end for;
end simple_nested_for3;

model simple_nested_for4
  parameter Integer s = 10;
  Real x[s+1,s];
equation
  for i in 1:s, j in 1:s loop
    x[i,j] = x[i+1,j] + i*sin(j*time);
  end for;
  for i in 1:s loop
    x[s+1,i] = i*cos(time);
  end for;
end simple_nested_for4;

model simple_nested_for5
  Real x[4,3];
equation
  for i in 1:3, j in 1:3 loop
    x[i,j] = x[i+1,j] + i*sin(j*time);
  end for;
  for i in 1:3 loop
    x[4,i] = i*cos(time);
  end for;
end simple_nested_for5;

"); getErrorString();

setCommandLineOptions("--newBackend -d=bltdump");
simulate(simple_nested_for5); getErrorString();
val(x[2,1], 0.5);

// Result:
// true
// ""
// true
// #################################################
//
//     [ODE] Differential-Algebraic: (Causalize)
//
// #################################################
//
// ================================
//   (1) Continuous ODE Partition
// ================================
//
// BLOCK 1: Single Strong Component (status = Solve.UNPROCESSED)
// ---------------------------------------------------------------
// ### Variable:
// 	Real $FUN_2
// ### Equation:
// 	[SCAL] (1) $FUN_2 = cos(time) ($RES_$AUX_4)
//
// BLOCK 2: Sliced Component (status = Solve.UNPROCESSED)
// --------------------------------------------------------
// ### Variable:
// 	$FUN_1[$i2]
// ### Equation:
// 	[FOR-] (3) ($RES_$AUX_5)
// 	[----] for $i2 in 1:3 loop
// 	[----]   [SCAL] (1) $FUN_1[$i2] = sin($i2 * time) ($RES_$AUX_6)
// 	[----] end for;
// 	 slice: {2, 1, 0}
//
// BLOCK 3: Sliced Component (status = Solve.UNPROCESSED)
// --------------------------------------------------------
// ### Variable:
// 	x[4, $i1]
// ### Equation:
// 	[FOR-] (3) ($RES_SIM_0)
// 	[----] for $i1 in 1:3 loop
// 	[----]   [SCAL] (1) x[4, $i1] = $i1 * $FUN_2 ($RES_SIM_1)
// 	[----] end for;
// 	 slice: {2, 1, 0}
//
// BLOCK 4: Sliced Component (status = Solve.UNPROCESSED)
// --------------------------------------------------------
// ### Variable:
// 	x[$i1, $i2]
// ### Equation:
// 	[FOR-] (9) ($RES_SIM_2)
// 	[----] for {$i1 in 1:3, $i2 in 1:3} loop
// 	[----]   [SCAL] (1) x[$i1, $i2] = x[1 + $i1, $i2] + $i1 * $FUN_1[$i2] ($RES_SIM_3)
// 	[----] end for;
// 	 slice: {2, 5, 8, 1, 4, 7, 0, 3, 6}
//
// #################################################
//
//     [ODE] Differential-Algebraic: (Causalize)
//
// #################################################
//
// ================================
//   (1) Continuous ODE Partition
// ================================
//
// BLOCK 1: Single Strong Component (status = Solve.UNPROCESSED)
// ---------------------------------------------------------------
// ### Variable:
// 	Real $FUN_2
// ### Equation:
// 	[SCAL] (1) $FUN_2 = cos(time) ($RES_$AUX_4)
//
// BLOCK 2: Sliced Component (status = Solve.UNPROCESSED)
// --------------------------------------------------------
// ### Variable:
// 	$FUN_1[$i2]
// ### Equation:
// 	[FOR-] (3) ($RES_$AUX_5)
// 	[----] for $i2 in 1:3 loop
// 	[----]   [SCAL] (1) $FUN_1[$i2] = sin($i2 * time) ($RES_$AUX_6)
// 	[----] end for;
// 	 slice: {2, 1, 0}
//
// BLOCK 3: Sliced Component (status = Solve.UNPROCESSED)
// --------------------------------------------------------
// ### Variable:
// 	x[4, $i1]
// ### Equation:
// 	[FOR-] (3) ($RES_SIM_0)
// 	[----] for $i1 in 1:3 loop
// 	[----]   [SCAL] (1) x[4, $i1] = $i1 * $FUN_2 ($RES_SIM_1)
// 	[----] end for;
// 	 slice: {2, 1, 0}
//
// BLOCK 4: Sliced Component (status = Solve.UNPROCESSED)
// --------------------------------------------------------
// ### Variable:
// 	x[$i1, $i2]
// ### Equation:
// 	[FOR-] (9) ($RES_SIM_2)
// 	[----] for {$i1 in 1:3, $i2 in 1:3} loop
// 	[----]   [SCAL] (1) x[$i1, $i2] = x[1 + $i1, $i2] + $i1 * $FUN_1[$i2] ($RES_SIM_3)
// 	[----] end for;
// 	 slice: {2, 5, 8, 1, 4, 7, 0, 3, 6}
//
// #########################################
//
//     [INI] Initialization: (Causalize)
//
// #########################################
//
// ================================
//   (1) Continuous INI Partition
// ================================
//
// BLOCK 1: Single Strong Component (status = Solve.UNPROCESSED)
// ---------------------------------------------------------------
// ### Variable:
// 	Real $FUN_2
// ### Equation:
// 	[SCAL] (1) $FUN_2 = cos(time) ($RES_$AUX_4)
//
// BLOCK 2: Sliced Component (status = Solve.UNPROCESSED)
// --------------------------------------------------------
// ### Variable:
// 	x[4, $i1]
// ### Equation:
// 	[FOR-] (3) ($RES_SIM_0)
// 	[----] for $i1 in 1:3 loop
// 	[----]   [SCAL] (1) x[4, $i1] = $i1 * $FUN_2 ($RES_SIM_1)
// 	[----] end for;
// 	 slice: {2, 1, 0}
//
// BLOCK 3: Sliced Component (status = Solve.UNPROCESSED)
// --------------------------------------------------------
// ### Variable:
// 	$FUN_1[$i2]
// ### Equation:
// 	[FOR-] (3) ($RES_$AUX_5)
// 	[----] for $i2 in 1:3 loop
// 	[----]   [SCAL] (1) $FUN_1[$i2] = sin($i2 * time) ($RES_$AUX_6)
// 	[----] end for;
// 	 slice: {2, 1, 0}
//
// BLOCK 4: Sliced Component (status = Solve.UNPROCESSED)
// --------------------------------------------------------
// ### Variable:
// 	x[$i1, $i2]
// ### Equation:
// 	[FOR-] (9) ($RES_SIM_2)
// 	[----] for {$i1 in 1:3, $i2 in 1:3} loop
// 	[----]   [SCAL] (1) x[$i1, $i2] = x[1 + $i1, $i2] + $i1 * $FUN_1[$i2] ($RES_SIM_3)
// 	[----] end for;
// 	 slice: {2, 5, 8, 1, 4, 7, 0, 3, 6}
//
// ################################
//
//     [ALG] Algebraic: (Solve)
//
// ################################
//
// ================================
//   (1) Continuous ODE Partition
// ================================
//
// --- Alias of INI[1 | 1] ---
// BLOCK 1: Single Strong Component (status = Solve.EXPLICIT)
// ------------------------------------------------------------
// ### Variable:
// 	Real $FUN_2
// ### Equation:
// 	[SCAL] (1) $FUN_2 = cos(time) ($RES_$AUX_4)
//
// --- Alias of INI[1 | 3] ---
// BLOCK 2: Generic Component (status = Solve.EXPLICIT)
// ------------------------------------------------------
// ### Variable:
// 	$FUN_1[$i2]
// ### Equation:
// 	[FOR-] (3) ($RES_$AUX_5)
// 	[----] for $i2 in 1:3 loop
// 	[----]   [SCAL] (1) $FUN_1[$i2] = sin($i2 * time) ($RES_$AUX_6)
// 	[----] end for;
// 	 slice: {2, 1, 0}
//
// --- Alias of INI[1 | 2] ---
// BLOCK 3: Generic Component (status = Solve.EXPLICIT)
// ------------------------------------------------------
// ### Variable:
// 	x[4, $i1]
// ### Equation:
// 	[FOR-] (3) ($RES_SIM_0)
// 	[----] for $i1 in 1:3 loop
// 	[----]   [SCAL] (1) x[4, $i1] = $i1 * $FUN_2 ($RES_SIM_1)
// 	[----] end for;
// 	 slice: {2, 1, 0}
//
// --- Alias of INI[1 | 4] ---
// BLOCK 4: Generic Component (status = Solve.EXPLICIT)
// ------------------------------------------------------
// ### Variable:
// 	x[$i1, $i2]
// ### Equation:
// 	[FOR-] (9) ($RES_SIM_2)
// 	[----] for {$i1 in 1:3, $i2 in 1:3} loop
// 	[----]   [SCAL] (1) x[$i1, $i2] = x[1 + $i1, $i2] + $i1 * $FUN_1[$i2] ($RES_SIM_3)
// 	[----] end for;
// 	 slice: {2, 5, 8, 1, 4, 7, 0, 3, 6}
//
// #####################################
//
//     [INI] Initialization: (Solve)
//
// #####################################
//
// ================================
//   (1) Continuous INI Partition
// ================================
//
// BLOCK 1: Single Strong Component (status = Solve.EXPLICIT)
// ------------------------------------------------------------
// ### Variable:
// 	Real $FUN_2
// ### Equation:
// 	[SCAL] (1) $FUN_2 = cos(time) ($RES_$AUX_4)
//
// BLOCK 2: Generic Component (status = Solve.EXPLICIT)
// ------------------------------------------------------
// ### Variable:
// 	x[4, $i1]
// ### Equation:
// 	[FOR-] (3) ($RES_SIM_0)
// 	[----] for $i1 in 1:3 loop
// 	[----]   [SCAL] (1) x[4, $i1] = $i1 * $FUN_2 ($RES_SIM_1)
// 	[----] end for;
// 	 slice: {2, 1, 0}
//
// BLOCK 3: Generic Component (status = Solve.EXPLICIT)
// ------------------------------------------------------
// ### Variable:
// 	$FUN_1[$i2]
// ### Equation:
// 	[FOR-] (3) ($RES_$AUX_5)
// 	[----] for $i2 in 1:3 loop
// 	[----]   [SCAL] (1) $FUN_1[$i2] = sin($i2 * time) ($RES_$AUX_6)
// 	[----] end for;
// 	 slice: {2, 1, 0}
//
// BLOCK 4: Generic Component (status = Solve.EXPLICIT)
// ------------------------------------------------------
// ### Variable:
// 	x[$i1, $i2]
// ### Equation:
// 	[FOR-] (9) ($RES_SIM_2)
// 	[----] for {$i1 in 1:3, $i2 in 1:3} loop
// 	[----]   [SCAL] (1) x[$i1, $i2] = x[1 + $i1, $i2] + $i1 * $FUN_1[$i2] ($RES_SIM_3)
// 	[----] end for;
// 	 slice: {2, 5, 8, 1, 4, 7, 0, 3, 6}
//
// record SimulationResult
//     resultFile = "simple_nested_for5_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-6, method = 'dassl', fileNamePrefix = 'simple_nested_for5', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// end SimulationResult;
// ""
// 3.274710254911388
// endResult
