// name:     testVectorizedSolarSystem
// keywords: vectorized components, array equations, for loops
// status: correct
// teardown_command: rm -f *VectorizedSolarSystemTest*
// cflags: --newBackend

setCommandLineOptions("-d=bltdump"); getErrorString();
loadFile("../../../../openmodelica/cppruntime/VectorizedSolarSystem.mo"); getErrorString();

simulate(VectorizedSolarSystemTest); getErrorString();

val(grid.P_grid, 0.0);

// Result:
// true
// ""
// true
// "Notification: Automatically loaded package Modelica 4.0.0 due to uses annotation from Vectorized.
// Notification: Automatically loaded package Complex 4.0.0 due to uses annotation from Modelica.
// Notification: Automatically loaded package ModelicaServices 4.0.0 due to uses annotation from Modelica.
// "
// #################################################
//
//     [ODE] Differential-Algebraic: (Causalize)
//
// #################################################
//
// ================================
//   (1) Continuous ODE Partition
// ================================
//
// BLOCK 1: Single Strong Component (status = Solve.UNPROCESSED)
// ---------------------------------------------------------------
// ### Variable:
// 	Real[1000] plant.P_solar = 100.0:100.0:1e5
// ### Equation:
// 	[ARRY] (1000) plant.P_solar = 100.0:100.0:1e5 ($RES_BND_10)
//
// BLOCK 2: Resizable Component (status = Solve.UNPROCESSED)
// -----------------------------------------------------------
// ### Variable:
// 	plant[$i1].on
// ### Equation:
// 	[FOR-] (1000) ($RES_BND_8)
// [----] for $i1 in 1:1000 loop
// [----]   [SCAL] (1) plant[$i1].on = true ($RES_BND_9)
// [----] end for;
//
// BLOCK 3: Resizable Component (status = Solve.UNPROCESSED)
// -----------------------------------------------------------
// ### Variable:
// 	plant[$i1].term.v
// ### Equation:
// 	[FOR-] (1000) ($RES_SIM_1)
// [----] for $i1 in 1:1000 loop
// [----]   [SCAL] (1) plant[$i1].term.v = grid.V ($RES_SIM_2)
// [----] end for;
//
// BLOCK 4: Resizable Component (status = Solve.UNPROCESSED)
// -----------------------------------------------------------
// ### Variable:
// 	plant[$i1].term.i
// ### Equation:
// 	[FOR-] (1000) ($RES_SIM_3)
// [----] for $i1 in 1:1000 loop
// [----]   [SCAL] (1) plant[$i1].term.v * plant[$i1].term.i = if plant[$i1].on then plant[$i1].eta * plant[$i1].P_solar else 0.0 ($RES_SIM_4)
// [----] end for;
//
// BLOCK 5: Resizable Component (status = Solve.UNPROCESSED)
// -----------------------------------------------------------
// ### Variable:
// 	grid.terms[$i1].i
// ### Equation:
// 	[FOR-] (1000) ($RES_SIM_5)
// [----] for $i1 in 1:1000 loop
// [----]   [SCAL] (1) plant[$i1].term.i + grid.terms[$i1].i = 0.0 ($RES_SIM_6)
// [----] end for;
//
// BLOCK 6: Single Strong Component (status = Solve.UNPROCESSED)
// ---------------------------------------------------------------
// ### Variable:
// 	Real grid.P_grid
// ### Equation:
// 	[SCAL] (1) 0.0 = grid.P_grid + plant.term.v * grid.terms.i ($RES_SIM_0)
//
// #################################################
//
//     [ODE] Differential-Algebraic: (Causalize)
//
// #################################################
//
// ================================
//   (1) Continuous ODE Partition
// ================================
//
// BLOCK 1: Single Strong Component (status = Solve.UNPROCESSED)
// ---------------------------------------------------------------
// ### Variable:
// 	Real[1000] plant.P_solar = 100.0:100.0:1e5
// ### Equation:
// 	[ARRY] (1000) plant.P_solar = 100.0:100.0:1e5 ($RES_BND_10)
//
// BLOCK 2: Resizable Component (status = Solve.UNPROCESSED)
// -----------------------------------------------------------
// ### Variable:
// 	plant[$i1].on
// ### Equation:
// 	[FOR-] (1000) ($RES_BND_8)
// [----] for $i1 in 1:1000 loop
// [----]   [SCAL] (1) plant[$i1].on = true ($RES_BND_9)
// [----] end for;
//
// BLOCK 3: Resizable Component (status = Solve.UNPROCESSED)
// -----------------------------------------------------------
// ### Variable:
// 	plant[$i1].term.v
// ### Equation:
// 	[FOR-] (1000) ($RES_SIM_1)
// [----] for $i1 in 1:1000 loop
// [----]   [SCAL] (1) plant[$i1].term.v = grid.V ($RES_SIM_2)
// [----] end for;
//
// BLOCK 4: Resizable Component (status = Solve.UNPROCESSED)
// -----------------------------------------------------------
// ### Variable:
// 	plant[$i1].term.i
// ### Equation:
// 	[FOR-] (1000) ($RES_SIM_3)
// [----] for $i1 in 1:1000 loop
// [----]   [SCAL] (1) plant[$i1].term.v * plant[$i1].term.i = if plant[$i1].on then plant[$i1].eta * plant[$i1].P_solar else 0.0 ($RES_SIM_4)
// [----] end for;
//
// BLOCK 5: Resizable Component (status = Solve.UNPROCESSED)
// -----------------------------------------------------------
// ### Variable:
// 	grid.terms[$i1].i
// ### Equation:
// 	[FOR-] (1000) ($RES_SIM_5)
// [----] for $i1 in 1:1000 loop
// [----]   [SCAL] (1) plant[$i1].term.i + grid.terms[$i1].i = 0.0 ($RES_SIM_6)
// [----] end for;
//
// BLOCK 6: Single Strong Component (status = Solve.UNPROCESSED)
// ---------------------------------------------------------------
// ### Variable:
// 	Real grid.P_grid
// ### Equation:
// 	[SCAL] (1) 0.0 = grid.P_grid + plant.term.v * grid.terms.i ($RES_SIM_0)
//
// #########################################
//
//     [INI] Initialization: (Causalize)
//
// #########################################
//
// ================================
//   (1) Continuous INI Partition
// ================================
//
// BLOCK 1: Resizable Component (status = Solve.UNPROCESSED)
// -----------------------------------------------------------
// ### Variable:
// 	plant[$i1].on
// ### Equation:
// 	[FOR-] (1000) ($RES_BND_8)
// [----] for $i1 in 1:1000 loop
// [----]   [SCAL] (1) plant[$i1].on = true ($RES_BND_9)
// [----] end for;
//
// BLOCK 2: Single Strong Component (status = Solve.UNPROCESSED)
// ---------------------------------------------------------------
// ### Variable:
// 	Real[1000] plant.P_solar = 100.0:100.0:1e5
// ### Equation:
// 	[ARRY] (1000) plant.P_solar = 100.0:100.0:1e5 ($RES_BND_10)
//
// BLOCK 3: Resizable Component (status = Solve.UNPROCESSED)
// -----------------------------------------------------------
// ### Variable:
// 	plant[$i1].term.v
// ### Equation:
// 	[FOR-] (1000) ($RES_SIM_1)
// [----] for $i1 in 1:1000 loop
// [----]   [SCAL] (1) plant[$i1].term.v = grid.V ($RES_SIM_2)
// [----] end for;
//
// BLOCK 4: Resizable Component (status = Solve.UNPROCESSED)
// -----------------------------------------------------------
// ### Variable:
// 	plant[$i1].term.i
// ### Equation:
// 	[FOR-] (1000) ($RES_SIM_3)
// [----] for $i1 in 1:1000 loop
// [----]   [SCAL] (1) plant[$i1].term.v * plant[$i1].term.i = if plant[$i1].on then plant[$i1].eta * plant[$i1].P_solar else 0.0 ($RES_SIM_4)
// [----] end for;
//
// BLOCK 5: Resizable Component (status = Solve.UNPROCESSED)
// -----------------------------------------------------------
// ### Variable:
// 	grid.terms[$i1].i
// ### Equation:
// 	[FOR-] (1000) ($RES_SIM_5)
// [----] for $i1 in 1:1000 loop
// [----]   [SCAL] (1) plant[$i1].term.i + grid.terms[$i1].i = 0.0 ($RES_SIM_6)
// [----] end for;
//
// BLOCK 6: Single Strong Component (status = Solve.UNPROCESSED)
// ---------------------------------------------------------------
// ### Variable:
// 	Real grid.P_grid
// ### Equation:
// 	[SCAL] (1) 0.0 = grid.P_grid + plant.term.v * grid.terms.i ($RES_SIM_0)
//
// ###########################################
//
//     [ALG_EVENT] Event Handling: (Solve)
//
// ###########################################
//
// ================================
//   (1) Continuous ODE Partition
// ================================
//
// --- Alias of INI[1 | 2] ---
// BLOCK 1: Single Strong Component (status = Solve.EXPLICIT)
// ------------------------------------------------------------
// ### Variable:
// 	Real[1000] plant.P_solar = 100.0:100.0:1e5
// ### Equation:
// 	[ARRY] (1000) plant.P_solar = 100.0:100.0:1e5 ($RES_BND_10)
//
// --- Alias of INI[1 | 1] ---
// BLOCK 2: Resizable Component (status = Solve.EXPLICIT)
// --------------------------------------------------------
// ### Variable:
// 	plant[$i1].on
// ### Equation:
// 	[FOR-] (1000) ($RES_BND_8)
// [----] for $i1 in 1:1000 loop
// [----]   [SCAL] (1) plant[$i1].on = true ($RES_BND_9)
// [----] end for;
//
// --- Alias of INI[1 | 3] ---
// BLOCK 3: Resizable Component (status = Solve.EXPLICIT)
// --------------------------------------------------------
// ### Variable:
// 	plant[$i1].term.v
// ### Equation:
// 	[FOR-] (1000) ($RES_SIM_1)
// [----] for $i1 in 1:1000 loop
// [----]   [SCAL] (1) plant[$i1].term.v = grid.V ($RES_SIM_2)
// [----] end for;
//
// --- Alias of INI[1 | 4] ---
// BLOCK 4: Resizable Component (status = Solve.EXPLICIT)
// --------------------------------------------------------
// ### Variable:
// 	plant[$i1].term.i
// ### Equation:
// 	[FOR-] (1000) ($RES_SIM_3)
// [----] for $i1 in 1:1000 loop
// [----]   [SCAL] (1) plant[$i1].term.i = (if plant[$i1].on then plant[$i1].eta * plant[$i1].P_solar else 0.0) / plant[$i1].term.v ($RES_SIM_4)
// [----] end for;
//
// --- Alias of INI[1 | 5] ---
// BLOCK 5: Resizable Component (status = Solve.EXPLICIT)
// --------------------------------------------------------
// ### Variable:
// 	grid.terms[$i1].i
// ### Equation:
// 	[FOR-] (1000) ($RES_SIM_5)
// [----] for $i1 in 1:1000 loop
// [----]   [SCAL] (1) grid.terms[$i1].i = -plant[$i1].term.i ($RES_SIM_6)
// [----] end for;
//
// --- Alias of INI[1 | 6] ---
// BLOCK 6: Single Strong Component (status = Solve.EXPLICIT)
// ------------------------------------------------------------
// ### Variable:
// 	Real grid.P_grid
// ### Equation:
// 	[SCAL] (1) grid.P_grid = -plant.term.v * grid.terms.i ($RES_SIM_0)
//
// #####################################
//
//     [INI] Initialization: (Solve)
//
// #####################################
//
// ================================
//   (1) Continuous INI Partition
// ================================
//
// BLOCK 1: Resizable Component (status = Solve.EXPLICIT)
// --------------------------------------------------------
// ### Variable:
// 	plant[$i1].on
// ### Equation:
// 	[FOR-] (1000) ($RES_BND_8)
// [----] for $i1 in 1:1000 loop
// [----]   [SCAL] (1) plant[$i1].on = true ($RES_BND_9)
// [----] end for;
//
// BLOCK 2: Single Strong Component (status = Solve.EXPLICIT)
// ------------------------------------------------------------
// ### Variable:
// 	Real[1000] plant.P_solar = 100.0:100.0:1e5
// ### Equation:
// 	[ARRY] (1000) plant.P_solar = 100.0:100.0:1e5 ($RES_BND_10)
//
// BLOCK 3: Resizable Component (status = Solve.EXPLICIT)
// --------------------------------------------------------
// ### Variable:
// 	plant[$i1].term.v
// ### Equation:
// 	[FOR-] (1000) ($RES_SIM_1)
// [----] for $i1 in 1:1000 loop
// [----]   [SCAL] (1) plant[$i1].term.v = grid.V ($RES_SIM_2)
// [----] end for;
//
// BLOCK 4: Resizable Component (status = Solve.EXPLICIT)
// --------------------------------------------------------
// ### Variable:
// 	plant[$i1].term.i
// ### Equation:
// 	[FOR-] (1000) ($RES_SIM_3)
// [----] for $i1 in 1:1000 loop
// [----]   [SCAL] (1) plant[$i1].term.i = (if plant[$i1].on then plant[$i1].eta * plant[$i1].P_solar else 0.0) / plant[$i1].term.v ($RES_SIM_4)
// [----] end for;
//
// BLOCK 5: Resizable Component (status = Solve.EXPLICIT)
// --------------------------------------------------------
// ### Variable:
// 	grid.terms[$i1].i
// ### Equation:
// 	[FOR-] (1000) ($RES_SIM_5)
// [----] for $i1 in 1:1000 loop
// [----]   [SCAL] (1) grid.terms[$i1].i = -plant[$i1].term.i ($RES_SIM_6)
// [----] end for;
//
// BLOCK 6: Single Strong Component (status = Solve.EXPLICIT)
// ------------------------------------------------------------
// ### Variable:
// 	Real grid.P_grid
// ### Equation:
// 	[SCAL] (1) grid.P_grid = -plant.term.v * grid.terms.i ($RES_SIM_0)
//
// record SimulationResult
//     resultFile = "VectorizedSolarSystemTest_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-6, method = 'dassl', fileNamePrefix = 'VectorizedSolarSystemTest', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// end SimulationResult;
// ""
// 4.5045e7
// endResult
