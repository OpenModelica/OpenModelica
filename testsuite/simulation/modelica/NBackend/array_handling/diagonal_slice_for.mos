// name: diagonal_slice_for
// keywords: NewBackend
// status: correct

loadString("

model diagonal_slice_for1
  Real x[4,4];
  Real y[4];
equation
  for i in 1:4 loop
    x[i,i] = i*cos(time);
  end for;
  for i in 1:4, j in 1:4 loop
    x[i,j] = y[j] + i*sin(j*time);
  end for;
end diagonal_slice_for1;

model entwine_for1
  Real x[10];
  Real y[10];
equation
  x[1] = 1;
  y[1] = 2;
  for j in 2:10 loop
    x[j] = y[j-1] * sin(time);
  end for;
  y[5] = x[4];
  for i in 2:4 loop
    y[i] = x[i-1];
  end for;
  for i in 6:10 loop
    y[i] = x[i-1];
  end for;

end entwine_for1;
"); getErrorString();

setCommandLineOptions("--newBackend -d=bltdump");

simulate(diagonal_slice_for1); getErrorString();
val(x[2,1],1);
val(x[4,1],1);

simulate(entwine_for1); getErrorString();
val(x[5],1);
val(y[3],1);

// Result:
// true
// ""
// true
// ################################################################################
//
// 	[ODE] Differential-Algebraic: (Causalize)
//
// ################################################################################
//
// ========================================
// CONTINUOUS 1 ODE System
// ========================================
//
// BLOCK 1: Sliced Component (status = Solve.UNPROCESSED)
// ----------------------------------------
// ### Variable:
// 	x[i, i]
// ### Equation:
// 	[FOR-] (4) ($RES_SIM_2)
// 	[----] for i in 1:4 loop
// 	[----]   [SCAL] (1) x[i, i] = CAST(Real, i) * cos(time) ($RES_SIM_3)
// 	[----] end for;
// 	 slice: {3, 2, 1, 0}
//
// BLOCK 2: Sliced Component (status = Solve.UNPROCESSED)
// ----------------------------------------
// ### Variable:
// 	y[j]
// ### Equation:
// 	[FOR-] (16) ($RES_SIM_0)
// 	[----] for {i in 1:4, j in 1:4} loop
// 	[----]   [SCAL] (1) x[i, j] = y[j] + CAST(Real, i) * sin(CAST(Real, j) * time) ($RES_SIM_1)
// 	[----] end for;
// 	 slice: {15, 10, 5, 0}
//
// BLOCK 3: Sliced Component (status = Solve.UNPROCESSED)
// ----------------------------------------
// ### Variable:
// 	x[i, j]
// ### Equation:
// 	[FOR-] (16) ($RES_SIM_0)
// 	[----] for {i in 1:4, j in 1:4} loop
// 	[----]   [SCAL] (1) x[i, j] = y[j] + CAST(Real, i) * sin(CAST(Real, j) * time) ($RES_SIM_1)
// 	[----] end for;
// 	 slice: {11, 7, 3, 14, 6, 2, 13, 9, 1, 12, ...}
//
// ################################################################################
//
// 	[ODE] Differential-Algebraic: (Causalize)
//
// ################################################################################
//
// ========================================
// CONTINUOUS 1 ODE System
// ========================================
//
// BLOCK 1: Sliced Component (status = Solve.UNPROCESSED)
// ----------------------------------------
// ### Variable:
// 	x[i, i]
// ### Equation:
// 	[FOR-] (4) ($RES_SIM_2)
// 	[----] for i in 1:4 loop
// 	[----]   [SCAL] (1) x[i, i] = CAST(Real, i) * cos(time) ($RES_SIM_3)
// 	[----] end for;
// 	 slice: {3, 2, 1, 0}
//
// BLOCK 2: Sliced Component (status = Solve.UNPROCESSED)
// ----------------------------------------
// ### Variable:
// 	y[j]
// ### Equation:
// 	[FOR-] (16) ($RES_SIM_0)
// 	[----] for {i in 1:4, j in 1:4} loop
// 	[----]   [SCAL] (1) x[i, j] = y[j] + CAST(Real, i) * sin(CAST(Real, j) * time) ($RES_SIM_1)
// 	[----] end for;
// 	 slice: {15, 10, 5, 0}
//
// BLOCK 3: Sliced Component (status = Solve.UNPROCESSED)
// ----------------------------------------
// ### Variable:
// 	x[i, j]
// ### Equation:
// 	[FOR-] (16) ($RES_SIM_0)
// 	[----] for {i in 1:4, j in 1:4} loop
// 	[----]   [SCAL] (1) x[i, j] = y[j] + CAST(Real, i) * sin(CAST(Real, j) * time) ($RES_SIM_1)
// 	[----] end for;
// 	 slice: {11, 7, 3, 14, 6, 2, 13, 9, 1, 12, ...}
//
// ################################################################################
//
// 	[INI] Initialization: (Causalize)
//
// ################################################################################
//
// ========================================
// CONTINUOUS 1 INI System
// ========================================
//
// BLOCK 1: Sliced Component (status = Solve.UNPROCESSED)
// ----------------------------------------
// ### Variable:
// 	x[i, i]
// ### Equation:
// 	[FOR-] (4) ($RES_SIM_2)
// 	[----] for i in 1:4 loop
// 	[----]   [SCAL] (1) x[i, i] = CAST(Real, i) * cos(time) ($RES_SIM_3)
// 	[----] end for;
// 	 slice: {3, 2, 1, 0}
//
// BLOCK 2: Sliced Component (status = Solve.UNPROCESSED)
// ----------------------------------------
// ### Variable:
// 	y[j]
// ### Equation:
// 	[FOR-] (16) ($RES_SIM_0)
// 	[----] for {i in 1:4, j in 1:4} loop
// 	[----]   [SCAL] (1) x[i, j] = y[j] + CAST(Real, i) * sin(CAST(Real, j) * time) ($RES_SIM_1)
// 	[----] end for;
// 	 slice: {15, 10, 5, 0}
//
// BLOCK 3: Sliced Component (status = Solve.UNPROCESSED)
// ----------------------------------------
// ### Variable:
// 	x[i, j]
// ### Equation:
// 	[FOR-] (16) ($RES_SIM_0)
// 	[----] for {i in 1:4, j in 1:4} loop
// 	[----]   [SCAL] (1) x[i, j] = y[j] + CAST(Real, i) * sin(CAST(Real, j) * time) ($RES_SIM_1)
// 	[----] end for;
// 	 slice: {11, 7, 3, 14, 6, 2, 13, 9, 1, 12, ...}
//
// ################################################################################
//
// 	[ALG] Algebraic: (Solve)
//
// ################################################################################
//
// ========================================
// CONTINUOUS 1 ALG System
// ========================================
//
// --- Alias of INI[1 | 1] ---
// BLOCK 1: Generic Component (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Equation:
// 	[FOR-] (4) ($RES_SIM_2)
// 	[----] for i in 1:4 loop
// 	[----]   [SCAL] (1) x[i, i] = CAST(Real, i) * cos(time) ($RES_SIM_3)
// 	[----] end for;
// 	 slice: {3, 2, 1, 0}
//
// --- Alias of INI[1 | 2] ---
// BLOCK 2: Generic Component (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Equation:
// 	[FOR-] (16) ($RES_SIM_0)
// 	[----] for {i in 1:4, j in 1:4} loop
// 	[----]   [SCAL] (1) y[j] = -(CAST(Real, i) * sin(CAST(Real, j) * time) - x[i, j]) ($RES_SIM_1)
// 	[----] end for;
// 	 slice: {15, 10, 5, 0}
//
// --- Alias of INI[1 | 3] ---
// BLOCK 3: Generic Component (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Equation:
// 	[FOR-] (16) ($RES_SIM_0)
// 	[----] for {i in 1:4, j in 1:4} loop
// 	[----]   [SCAL] (1) x[i, j] = y[j] + CAST(Real, i) * sin(CAST(Real, j) * time) ($RES_SIM_1)
// 	[----] end for;
// 	 slice: {11, 7, 3, 14, 6, 2, 13, 9, 1, 12, ...}
//
// ################################################################################
//
// 	[INI] Initialization: (Solve)
//
// ################################################################################
//
// ========================================
// CONTINUOUS 1 INI System
// ========================================
//
// BLOCK 1: Generic Component (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Equation:
// 	[FOR-] (4) ($RES_SIM_2)
// 	[----] for i in 1:4 loop
// 	[----]   [SCAL] (1) x[i, i] = CAST(Real, i) * cos(time) ($RES_SIM_3)
// 	[----] end for;
// 	 slice: {3, 2, 1, 0}
//
// BLOCK 2: Generic Component (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Equation:
// 	[FOR-] (16) ($RES_SIM_0)
// 	[----] for {i in 1:4, j in 1:4} loop
// 	[----]   [SCAL] (1) y[j] = -(CAST(Real, i) * sin(CAST(Real, j) * time) - x[i, j]) ($RES_SIM_1)
// 	[----] end for;
// 	 slice: {15, 10, 5, 0}
//
// BLOCK 3: Generic Component (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Equation:
// 	[FOR-] (16) ($RES_SIM_0)
// 	[----] for {i in 1:4, j in 1:4} loop
// 	[----]   [SCAL] (1) x[i, j] = y[j] + CAST(Real, i) * sin(CAST(Real, j) * time) ($RES_SIM_1)
// 	[----] end for;
// 	 slice: {11, 7, 3, 14, 6, 2, 13, 9, 1, 12, ...}
//
// record SimulationResult
//     resultFile = "diagonal_slice_for1_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'diagonal_slice_for1', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// end SimulationResult;
// ""
// 1.682941969615793
// 3.365883939231586
// ################################################################################
//
// 	[ODE] Differential-Algebraic: (Causalize)
//
// ################################################################################
//
// ========================================
// CONTINUOUS 1 ODE System
// ========================================
//
// BLOCK 1: Sliced Component (status = Solve.UNPROCESSED)
// ----------------------------------------
// ### Variable:
// 	y[1]
// ### Equation:
// 	[SCAL] (1) y[1] = 2.0 ($RES_SIM_7)
// 	 slice: {}
//
// BLOCK 2: Sliced Component (status = Solve.UNPROCESSED)
// ----------------------------------------
// ### Variable:
// 	x[1]
// ### Equation:
// 	[SCAL] (1) x[1] = 1.0 ($RES_SIM_8)
// 	 slice: {}
//
// BLOCK 3: Algebraic Loop (Linear = false, Mixed = false)
// ----------------------------------------
// Strict Tearing Set
// ****************************************
// ### Iteration Variables:
// 	[ALGB] (10) Real[10] x
// 	 slice: {1, 2, 3, 4, 5, 6, 7, 8, 9};
// 	[ALGB] (10) Real[10] y
// 	 slice: {4, 1, 2, 3, 5, 6, 7, 8, 9};
// ### Residual Equations:
// 	[SCAL] (1) y[5] = x[4] ($RES_SIM_4)
// 	 slice: {};
// 	[FOR-] (9) ($RES_SIM_5)
// [----] for j in 2:10 loop
// [----]   [SCAL] (1) x[j] = y[j - 1] * sin(time) ($RES_SIM_6)
// [----] end for;
// 	 slice: {};
// 	[FOR-] (3) ($RES_SIM_2)
// [----] for i in 2:4 loop
// [----]   [SCAL] (1) y[i] = x[i - 1] ($RES_SIM_3)
// [----] end for;
// 	 slice: {};
// 	[FOR-] (5) ($RES_SIM_0)
// [----] for i in 6:10 loop
// [----]   [SCAL] (1) y[i] = x[i - 1] ($RES_SIM_1)
// [----] end for;
// 	 slice: {};
// ### Inner Equations:
//
// ################################################################################
//
// 	[ODE] Differential-Algebraic: (Causalize)
//
// ################################################################################
//
// ========================================
// CONTINUOUS 1 ODE System
// ========================================
//
// BLOCK 1: Sliced Component (status = Solve.UNPROCESSED)
// ----------------------------------------
// ### Variable:
// 	y[1]
// ### Equation:
// 	[SCAL] (1) y[1] = 2.0 ($RES_SIM_7)
// 	 slice: {}
//
// BLOCK 2: Sliced Component (status = Solve.UNPROCESSED)
// ----------------------------------------
// ### Variable:
// 	x[1]
// ### Equation:
// 	[SCAL] (1) x[1] = 1.0 ($RES_SIM_8)
// 	 slice: {}
//
// BLOCK 3: Algebraic Loop (Linear = false, Mixed = false)
// ----------------------------------------
// Strict Tearing Set
// ****************************************
// ### Iteration Variables:
// 	[ALGB] (10) Real[10] x
// 	 slice: {1, 2, 3, 4, 5, 6, 7, 8, 9};
// 	[ALGB] (10) Real[10] y
// 	 slice: {4, 1, 2, 3, 5, 6, 7, 8, 9};
// ### Residual Equations:
// 	[SCAL] (1) y[5] = x[4] ($RES_SIM_4)
// 	 slice: {};
// 	[FOR-] (9) ($RES_SIM_5)
// [----] for j in 2:10 loop
// [----]   [SCAL] (1) x[j] = y[j - 1] * sin(time) ($RES_SIM_6)
// [----] end for;
// 	 slice: {};
// 	[FOR-] (3) ($RES_SIM_2)
// [----] for i in 2:4 loop
// [----]   [SCAL] (1) y[i] = x[i - 1] ($RES_SIM_3)
// [----] end for;
// 	 slice: {};
// 	[FOR-] (5) ($RES_SIM_0)
// [----] for i in 6:10 loop
// [----]   [SCAL] (1) y[i] = x[i - 1] ($RES_SIM_1)
// [----] end for;
// 	 slice: {};
// ### Inner Equations:
//
// ################################################################################
//
// 	[INI] Initialization: (Causalize)
//
// ################################################################################
//
// ========================================
// CONTINUOUS 1 INI System
// ========================================
//
// BLOCK 1: Sliced Component (status = Solve.UNPROCESSED)
// ----------------------------------------
// ### Variable:
// 	x[1]
// ### Equation:
// 	[SCAL] (1) x[1] = 1.0 ($RES_SIM_8)
// 	 slice: {}
//
// BLOCK 2: Sliced Component (status = Solve.UNPROCESSED)
// ----------------------------------------
// ### Variable:
// 	y[1]
// ### Equation:
// 	[SCAL] (1) y[1] = 2.0 ($RES_SIM_7)
// 	 slice: {}
//
// BLOCK 3: Algebraic Loop (Linear = false, Mixed = false)
// ----------------------------------------
// Strict Tearing Set
// ****************************************
// ### Iteration Variables:
// 	[ALGB] (10) Real[10] x
// 	 slice: {1, 2, 3, 4, 5, 6, 7, 8, 9};
// 	[ALGB] (10) Real[10] y
// 	 slice: {4, 5, 6, 7, 8, 9, 1, 2, 3};
// ### Residual Equations:
// 	[SCAL] (1) y[5] = x[4] ($RES_SIM_4)
// 	 slice: {};
// 	[FOR-] (9) ($RES_SIM_5)
// [----] for j in 2:10 loop
// [----]   [SCAL] (1) x[j] = y[j - 1] * sin(time) ($RES_SIM_6)
// [----] end for;
// 	 slice: {};
// 	[FOR-] (5) ($RES_SIM_0)
// [----] for i in 6:10 loop
// [----]   [SCAL] (1) y[i] = x[i - 1] ($RES_SIM_1)
// [----] end for;
// 	 slice: {};
// 	[FOR-] (3) ($RES_SIM_2)
// [----] for i in 2:4 loop
// [----]   [SCAL] (1) y[i] = x[i - 1] ($RES_SIM_3)
// [----] end for;
// 	 slice: {};
// ### Inner Equations:
//
// ################################################################################
//
// 	[ALG] Algebraic: (Solve)
//
// ################################################################################
//
// ========================================
// CONTINUOUS 1 ALG System
// ========================================
//
// --- Alias of INI[1 | 2] ---
// BLOCK 1: Sliced Component (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
// 	y[1]
// ### Equation:
// 	[SCAL] (1) y[1] = 2.0 ($RES_SIM_7)
// 	 slice: {}
//
// --- Alias of INI[1 | 1] ---
// BLOCK 2: Sliced Component (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
// 	x[1]
// ### Equation:
// 	[SCAL] (1) x[1] = 1.0 ($RES_SIM_8)
// 	 slice: {}
//
// BLOCK 3: Algebraic Loop (Linear = false, Mixed = false)
// ----------------------------------------
// Strict Tearing Set
// ****************************************
// ### Iteration Variables:
// 	[ALGB] (10) Real[10] x
// 	 slice: {1, 2, 3, 4, 5, 6, 7, 8, 9};
// 	[ALGB] (10) Real[10] y
// 	 slice: {4, 1, 2, 3, 5, 6, 7, 8, 9};
// ### Residual Equations:
// 	[SCAL] (1) $RES_SIM_4 = x[4] - y[5] ($RES_SIM_4)
// 	 slice: {};
// 	[FOR-] (9) ($RES_SIM_5)
// [----] for j in 2:10 loop
// [----]   [SCAL] (1) $RES_SIM_5[j] = y[(-1) + j] * sin(time) - x[j] ($RES_SIM_6)
// [----] end for;
// 	 slice: {};
// 	[FOR-] (3) ($RES_SIM_2)
// [----] for i in 2:4 loop
// [----]   [SCAL] (1) $RES_SIM_2[i] = x[(-1) + i] - y[i] ($RES_SIM_3)
// [----] end for;
// 	 slice: {};
// 	[FOR-] (5) ($RES_SIM_0)
// [----] for i in 6:10 loop
// [----]   [SCAL] (1) $RES_SIM_0[i] = x[(-1) + i] - y[i] ($RES_SIM_1)
// [----] end for;
// 	 slice: {};
// ### Inner Equations:
//
// ################################################################################
//
// 	[NLS] Jacobian ODE_NLS_JAC_1: NLS
//
// ################################################################################
//
// Partial Derivative Variables (4/18)
// ****************************************
// (1)       [JACV] (1) Real $pDER_ODE_NLS_JAC_1.$RES_SIM_4
// (2)       [JACV] (9) Real[9] $pDER_ODE_NLS_JAC_1.$RES_SIM_5
// (3)       [JACV] (3) Real[3] $pDER_ODE_NLS_JAC_1.$RES_SIM_2
// (4)       [JACV] (5) Real[5] $pDER_ODE_NLS_JAC_1.$RES_SIM_0
//
// Seed Variables (2/20)
// ****************************************
// (1)       [SEED] (10) Real[10] $SEED_ODE_NLS_JAC_1.y
// (2)       [SEED] (10) Real[10] $SEED_ODE_NLS_JAC_1.x
//
// BLOCK 1: Single Strong Component (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
// 	Real $pDER_ODE_NLS_JAC_1.$RES_SIM_4
// ### Equation:
// 	[SCAL] (1) $pDER_ODE_NLS_JAC_1.$RES_SIM_4 = $SEED_ODE_NLS_JAC_1.x[4] - $SEED_ODE_NLS_JAC_1.y[5] ($RES_ODE_NLS_JAC_1_0)
//
// BLOCK 2: Sliced Component (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
//
// ### Equation:
// 	[FOR-] (9) ($RES_ODE_NLS_JAC_1_1)
// 	[----] for j in 2:10 loop
// 	[----]   [SCAL] (1) $pDER_ODE_NLS_JAC_1.$RES_SIM_5[j] = $SEED_ODE_NLS_JAC_1.y[(-1) + j] * sin(time) - $SEED_ODE_NLS_JAC_1.x[j] ($RES_ODE_NLS_JAC_1_2)
// 	[----] end for;
// 	 slice: {}
//
// BLOCK 3: Sliced Component (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
//
// ### Equation:
// 	[FOR-] (3) ($RES_ODE_NLS_JAC_1_3)
// 	[----] for i in 2:4 loop
// 	[----]   [SCAL] (1) $pDER_ODE_NLS_JAC_1.$RES_SIM_2[i] = $SEED_ODE_NLS_JAC_1.x[(-1) + i] - $SEED_ODE_NLS_JAC_1.y[i] ($RES_ODE_NLS_JAC_1_4)
// 	[----] end for;
// 	 slice: {}
//
// BLOCK 4: Sliced Component (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
//
// ### Equation:
// 	[FOR-] (5) ($RES_ODE_NLS_JAC_1_5)
// 	[----] for i in 6:10 loop
// 	[----]   [SCAL] (1) $pDER_ODE_NLS_JAC_1.$RES_SIM_0[i] = $SEED_ODE_NLS_JAC_1.x[(-1) + i] - $SEED_ODE_NLS_JAC_1.y[i] ($RES_ODE_NLS_JAC_1_6)
// 	[----] end for;
// 	 slice: {}
//
// ========================================
// Sparsity Pattern (nnz: 2)
// ========================================
//
// ### Columns ###
// ----------------------------------------
// (y[10])	 affects:	{}
// (y[9])	 affects:	{}
// (y[8])	 affects:	{}
// (y[7])	 affects:	{}
// (y[6])	 affects:	{}
// (y[5])	 affects:	{$RES_SIM_4}
// (y[4])	 affects:	{}
// (y[3])	 affects:	{}
// (y[2])	 affects:	{}
// (y[1])	 affects:	{}
// (x[10])	 affects:	{}
// (x[9])	 affects:	{}
// (x[8])	 affects:	{}
// (x[7])	 affects:	{}
// (x[6])	 affects:	{}
// (x[5])	 affects:	{}
// (x[4])	 affects:	{$RES_SIM_4}
// (x[3])	 affects:	{}
// (x[2])	 affects:	{}
// (x[1])	 affects:	{}
//
// ##### Rows #####
// ----------------------------------------
// ($RES_SIM_0[5])	 depends on:	{}
// ($RES_SIM_0[4])	 depends on:	{}
// ($RES_SIM_0[3])	 depends on:	{}
// ($RES_SIM_0[2])	 depends on:	{}
// ($RES_SIM_0[1])	 depends on:	{}
// ($RES_SIM_2[3])	 depends on:	{}
// ($RES_SIM_2[2])	 depends on:	{}
// ($RES_SIM_2[1])	 depends on:	{}
// ($RES_SIM_5[9])	 depends on:	{}
// ($RES_SIM_5[8])	 depends on:	{}
// ($RES_SIM_5[7])	 depends on:	{}
// ($RES_SIM_5[6])	 depends on:	{}
// ($RES_SIM_5[5])	 depends on:	{}
// ($RES_SIM_5[4])	 depends on:	{}
// ($RES_SIM_5[3])	 depends on:	{}
// ($RES_SIM_5[2])	 depends on:	{}
// ($RES_SIM_5[1])	 depends on:	{}
// ($RES_SIM_4)	 depends on:	{y[5],x[4]}
//
// ========================================
// Sparsity Coloring
// ========================================
// Color (1)
//   - Column: {y[10],y[9],y[8],y[7],y[6],y[4],y[3],y[2],y[1],x[10],x[9],x[8],x[7],x[6],x[5],x[4],x[3],x[2],x[1]}
//   - Row:    {$RES_SIM_4}
//
// Color (2)
//   - Column: {y[5]}
//   - Row:    {$RES_SIM_4}
//
//
// ################################################################################
//
// 	[INI] Initialization: (Solve)
//
// ################################################################################
//
// ========================================
// CONTINUOUS 1 INI System
// ========================================
//
// BLOCK 1: Sliced Component (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
// 	x[1]
// ### Equation:
// 	[SCAL] (1) x[1] = 1.0 ($RES_SIM_8)
// 	 slice: {}
//
// BLOCK 2: Sliced Component (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
// 	y[1]
// ### Equation:
// 	[SCAL] (1) y[1] = 2.0 ($RES_SIM_7)
// 	 slice: {}
//
// BLOCK 3: Algebraic Loop (Linear = false, Mixed = false)
// ----------------------------------------
// Strict Tearing Set
// ****************************************
// ### Iteration Variables:
// 	[ALGB] (10) Real[10] x
// 	 slice: {1, 2, 3, 4, 5, 6, 7, 8, 9};
// 	[ALGB] (10) Real[10] y
// 	 slice: {4, 5, 6, 7, 8, 9, 1, 2, 3};
// ### Residual Equations:
// 	[SCAL] (1) $RES_SIM_4 = x[4] - y[5] ($RES_SIM_4)
// 	 slice: {};
// 	[FOR-] (9) ($RES_SIM_5)
// [----] for j in 2:10 loop
// [----]   [SCAL] (1) $RES_SIM_5[j] = y[(-1) + j] * sin(time) - x[j] ($RES_SIM_6)
// [----] end for;
// 	 slice: {};
// 	[FOR-] (5) ($RES_SIM_0)
// [----] for i in 6:10 loop
// [----]   [SCAL] (1) $RES_SIM_0[i] = x[(-1) + i] - y[i] ($RES_SIM_1)
// [----] end for;
// 	 slice: {};
// 	[FOR-] (3) ($RES_SIM_2)
// [----] for i in 2:4 loop
// [----]   [SCAL] (1) $RES_SIM_2[i] = x[(-1) + i] - y[i] ($RES_SIM_3)
// [----] end for;
// 	 slice: {};
// ### Inner Equations:
//
// ################################################################################
//
// 	[NLS] Jacobian INI_NLS_JAC_1: NLS
//
// ################################################################################
//
// Partial Derivative Variables (4/18)
// ****************************************
// (1)       [JACV] (1) Real $pDER_INI_NLS_JAC_1.$RES_SIM_4
// (2)       [JACV] (9) Real[9] $pDER_INI_NLS_JAC_1.$RES_SIM_5
// (3)       [JACV] (5) Real[5] $pDER_INI_NLS_JAC_1.$RES_SIM_0
// (4)       [JACV] (3) Real[3] $pDER_INI_NLS_JAC_1.$RES_SIM_2
//
// Seed Variables (2/20)
// ****************************************
// (1)       [SEED] (10) Real[10] $SEED_INI_NLS_JAC_1.y
// (2)       [SEED] (10) Real[10] $SEED_INI_NLS_JAC_1.x
//
// BLOCK 1: Single Strong Component (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
// 	Real $pDER_INI_NLS_JAC_1.$RES_SIM_4
// ### Equation:
// 	[SCAL] (1) $pDER_INI_NLS_JAC_1.$RES_SIM_4 = $SEED_INI_NLS_JAC_1.x[4] - $SEED_INI_NLS_JAC_1.y[5] ($RES_INI_NLS_JAC_1_0)
//
// BLOCK 2: Sliced Component (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
//
// ### Equation:
// 	[FOR-] (9) ($RES_INI_NLS_JAC_1_1)
// 	[----] for j in 2:10 loop
// 	[----]   [SCAL] (1) $pDER_INI_NLS_JAC_1.$RES_SIM_5[j] = $SEED_INI_NLS_JAC_1.y[(-1) + j] * sin(time) - $SEED_INI_NLS_JAC_1.x[j] ($RES_INI_NLS_JAC_1_2)
// 	[----] end for;
// 	 slice: {}
//
// BLOCK 3: Sliced Component (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
//
// ### Equation:
// 	[FOR-] (5) ($RES_INI_NLS_JAC_1_3)
// 	[----] for i in 6:10 loop
// 	[----]   [SCAL] (1) $pDER_INI_NLS_JAC_1.$RES_SIM_0[i] = $SEED_INI_NLS_JAC_1.x[(-1) + i] - $SEED_INI_NLS_JAC_1.y[i] ($RES_INI_NLS_JAC_1_4)
// 	[----] end for;
// 	 slice: {}
//
// BLOCK 4: Sliced Component (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
//
// ### Equation:
// 	[FOR-] (3) ($RES_INI_NLS_JAC_1_5)
// 	[----] for i in 2:4 loop
// 	[----]   [SCAL] (1) $pDER_INI_NLS_JAC_1.$RES_SIM_2[i] = $SEED_INI_NLS_JAC_1.x[(-1) + i] - $SEED_INI_NLS_JAC_1.y[i] ($RES_INI_NLS_JAC_1_6)
// 	[----] end for;
// 	 slice: {}
//
// ========================================
// Sparsity Pattern (nnz: 2)
// ========================================
//
// ### Columns ###
// ----------------------------------------
// (y[10])	 affects:	{}
// (y[9])	 affects:	{}
// (y[8])	 affects:	{}
// (y[7])	 affects:	{}
// (y[6])	 affects:	{}
// (y[5])	 affects:	{$RES_SIM_4}
// (y[4])	 affects:	{}
// (y[3])	 affects:	{}
// (y[2])	 affects:	{}
// (y[1])	 affects:	{}
// (x[10])	 affects:	{}
// (x[9])	 affects:	{}
// (x[8])	 affects:	{}
// (x[7])	 affects:	{}
// (x[6])	 affects:	{}
// (x[5])	 affects:	{}
// (x[4])	 affects:	{$RES_SIM_4}
// (x[3])	 affects:	{}
// (x[2])	 affects:	{}
// (x[1])	 affects:	{}
//
// ##### Rows #####
// ----------------------------------------
// ($RES_SIM_2[3])	 depends on:	{}
// ($RES_SIM_2[2])	 depends on:	{}
// ($RES_SIM_2[1])	 depends on:	{}
// ($RES_SIM_0[5])	 depends on:	{}
// ($RES_SIM_0[4])	 depends on:	{}
// ($RES_SIM_0[3])	 depends on:	{}
// ($RES_SIM_0[2])	 depends on:	{}
// ($RES_SIM_0[1])	 depends on:	{}
// ($RES_SIM_5[9])	 depends on:	{}
// ($RES_SIM_5[8])	 depends on:	{}
// ($RES_SIM_5[7])	 depends on:	{}
// ($RES_SIM_5[6])	 depends on:	{}
// ($RES_SIM_5[5])	 depends on:	{}
// ($RES_SIM_5[4])	 depends on:	{}
// ($RES_SIM_5[3])	 depends on:	{}
// ($RES_SIM_5[2])	 depends on:	{}
// ($RES_SIM_5[1])	 depends on:	{}
// ($RES_SIM_4)	 depends on:	{y[5],x[4]}
//
// ========================================
// Sparsity Coloring
// ========================================
// Color (1)
//   - Column: {y[10],y[9],y[8],y[7],y[6],y[4],y[3],y[2],y[1],x[10],x[9],x[8],x[7],x[6],x[5],x[4],x[3],x[2],x[1]}
//   - Row:    {$RES_SIM_4}
//
// Color (2)
//   - Column: {y[5]}
//   - Row:    {$RES_SIM_4}
//
//
// record SimulationResult
//     resultFile = "entwine_for1_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'entwine_for1', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// end SimulationResult;
// ""
// 0.7080734182735712
// 1.682941969615793
// endResult
