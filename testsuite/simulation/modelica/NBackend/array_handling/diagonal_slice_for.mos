// name: diagonal_slice_for
// keywords: NewBackend
// status: correct

loadString("

model diagonal_slice_for1
  Real x[4,4];
  Real y[4];
equation
  for i in 1:4 loop
    x[i,i] = i*cos(time);
  end for;
  for i in 1:4, j in 1:4 loop
    x[i,j] = y[j] + i*sin(j*time);
  end for;
end diagonal_slice_for1;

model entwine_for1
  Real x[10];
  Real y[10];
equation
  x[1] = 1;
  y[1] = 2;
  for j in 2:10 loop
    x[j] = y[j-1] * sin(time);
  end for;
  for i in 2:5 loop
    y[i] = x[i-1];
  end for;
  for i in 6:10 loop
    y[i] = x[i-1];
  end for;

end entwine_for1;
"); getErrorString();

setCommandLineOptions("--newBackend -d=bltdump");

simulate(diagonal_slice_for1); getErrorString();
val(x[2,1],1);
val(x[4,1],1);

simulate(entwine_for1); getErrorString();
val(x[5],1);
val(y[3],1);

// Result:
// true
// ""
// true
// ################################################################################
//
// 	[ODE] Differential-Algebraic: (Causalize)
//
// ################################################################################
//
// ========================================
// CONTINUOUS 1 ODE System
// ========================================
//
// BLOCK 1: Sliced Component (status = Solve.UNPROCESSED)
// ----------------------------------------
// ### Variable:
// 	x[i, i]
// ### Equation:
// 	[FOR-] (4) ($RES_SIM_2)
// 	[----] for i in 1:4 loop
// 	[----]   [SCAL] (1) x[i, i] = i * cos(time) ($RES_SIM_3)
// 	[----] end for;
// 	 slice: {3, 2, 1, 0}
//
// BLOCK 2: Sliced Component (status = Solve.UNPROCESSED)
// ----------------------------------------
// ### Variable:
// 	y[j]
// ### Equation:
// 	[FOR-] (16) ($RES_SIM_0)
// 	[----] for {i in 1:4, j in 1:4} loop
// 	[----]   [SCAL] (1) x[i, j] = y[j] + i * sin(j * time) ($RES_SIM_1)
// 	[----] end for;
// 	 slice: {15, 10, 5, 0}
//
// BLOCK 3: Sliced Component (status = Solve.UNPROCESSED)
// ----------------------------------------
// ### Variable:
// 	x[i, j]
// ### Equation:
// 	[FOR-] (16) ($RES_SIM_0)
// 	[----] for {i in 1:4, j in 1:4} loop
// 	[----]   [SCAL] (1) x[i, j] = y[j] + i * sin(j * time) ($RES_SIM_1)
// 	[----] end for;
// 	 slice: {11, 7, 3, 14, 6, 2, 13, 9, 1, 12, ...}
//
// ################################################################################
//
// 	[ODE] Differential-Algebraic: (Causalize)
//
// ################################################################################
//
// ========================================
// CONTINUOUS 1 ODE System
// ========================================
//
// BLOCK 1: Sliced Component (status = Solve.UNPROCESSED)
// ----------------------------------------
// ### Variable:
// 	x[i, i]
// ### Equation:
// 	[FOR-] (4) ($RES_SIM_2)
// 	[----] for i in 1:4 loop
// 	[----]   [SCAL] (1) x[i, i] = i * cos(time) ($RES_SIM_3)
// 	[----] end for;
// 	 slice: {3, 2, 1, 0}
//
// BLOCK 2: Sliced Component (status = Solve.UNPROCESSED)
// ----------------------------------------
// ### Variable:
// 	y[j]
// ### Equation:
// 	[FOR-] (16) ($RES_SIM_0)
// 	[----] for {i in 1:4, j in 1:4} loop
// 	[----]   [SCAL] (1) x[i, j] = y[j] + i * sin(j * time) ($RES_SIM_1)
// 	[----] end for;
// 	 slice: {15, 10, 5, 0}
//
// BLOCK 3: Sliced Component (status = Solve.UNPROCESSED)
// ----------------------------------------
// ### Variable:
// 	x[i, j]
// ### Equation:
// 	[FOR-] (16) ($RES_SIM_0)
// 	[----] for {i in 1:4, j in 1:4} loop
// 	[----]   [SCAL] (1) x[i, j] = y[j] + i * sin(j * time) ($RES_SIM_1)
// 	[----] end for;
// 	 slice: {11, 7, 3, 14, 6, 2, 13, 9, 1, 12, ...}
//
// ################################################################################
//
// 	[INI] Initialization: (Causalize)
//
// ################################################################################
//
// ========================================
// CONTINUOUS 1 INI System
// ========================================
//
// BLOCK 1: Sliced Component (status = Solve.UNPROCESSED)
// ----------------------------------------
// ### Variable:
// 	x[i, i]
// ### Equation:
// 	[FOR-] (4) ($RES_SIM_2)
// 	[----] for i in 1:4 loop
// 	[----]   [SCAL] (1) x[i, i] = i * cos(time) ($RES_SIM_3)
// 	[----] end for;
// 	 slice: {3, 2, 1, 0}
//
// BLOCK 2: Sliced Component (status = Solve.UNPROCESSED)
// ----------------------------------------
// ### Variable:
// 	y[j]
// ### Equation:
// 	[FOR-] (16) ($RES_SIM_0)
// 	[----] for {i in 1:4, j in 1:4} loop
// 	[----]   [SCAL] (1) x[i, j] = y[j] + i * sin(j * time) ($RES_SIM_1)
// 	[----] end for;
// 	 slice: {15, 10, 5, 0}
//
// BLOCK 3: Sliced Component (status = Solve.UNPROCESSED)
// ----------------------------------------
// ### Variable:
// 	x[i, j]
// ### Equation:
// 	[FOR-] (16) ($RES_SIM_0)
// 	[----] for {i in 1:4, j in 1:4} loop
// 	[----]   [SCAL] (1) x[i, j] = y[j] + i * sin(j * time) ($RES_SIM_1)
// 	[----] end for;
// 	 slice: {11, 7, 3, 14, 6, 2, 13, 9, 1, 12, ...}
//
// ################################################################################
//
// 	[ALG] Algebraic: (Solve)
//
// ################################################################################
//
// ========================================
// CONTINUOUS 1 ALG System
// ========================================
//
// --- Alias of INI[1 | 1] ---
// BLOCK 1: Generic Component (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
// 	x[i, i]
// ### Equation:
// 	[FOR-] (4) ($RES_SIM_2)
// 	[----] for i in 1:4 loop
// 	[----]   [SCAL] (1) x[i, i] = i * cos(time) ($RES_SIM_3)
// 	[----] end for;
// 	 slice: {3, 2, 1, 0}
//
// --- Alias of INI[1 | 2] ---
// BLOCK 2: Generic Component (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
// 	y[j]
// ### Equation:
// 	[FOR-] (16) ($RES_SIM_0)
// 	[----] for {i in 1:4, j in 1:4} loop
// 	[----]   [SCAL] (1) y[j] = -(i * sin(j * time) - x[i, j]) ($RES_SIM_1)
// 	[----] end for;
// 	 slice: {15, 10, 5, 0}
//
// --- Alias of INI[1 | 3] ---
// BLOCK 3: Generic Component (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
// 	x[i, j]
// ### Equation:
// 	[FOR-] (16) ($RES_SIM_0)
// 	[----] for {i in 1:4, j in 1:4} loop
// 	[----]   [SCAL] (1) x[i, j] = y[j] + i * sin(j * time) ($RES_SIM_1)
// 	[----] end for;
// 	 slice: {11, 7, 3, 14, 6, 2, 13, 9, 1, 12, ...}
//
// ################################################################################
//
// 	[INI] Initialization: (Solve)
//
// ################################################################################
//
// ========================================
// CONTINUOUS 1 INI System
// ========================================
//
// BLOCK 1: Generic Component (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
// 	x[i, i]
// ### Equation:
// 	[FOR-] (4) ($RES_SIM_2)
// 	[----] for i in 1:4 loop
// 	[----]   [SCAL] (1) x[i, i] = i * cos(time) ($RES_SIM_3)
// 	[----] end for;
// 	 slice: {3, 2, 1, 0}
//
// BLOCK 2: Generic Component (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
// 	y[j]
// ### Equation:
// 	[FOR-] (16) ($RES_SIM_0)
// 	[----] for {i in 1:4, j in 1:4} loop
// 	[----]   [SCAL] (1) y[j] = -(i * sin(j * time) - x[i, j]) ($RES_SIM_1)
// 	[----] end for;
// 	 slice: {15, 10, 5, 0}
//
// BLOCK 3: Generic Component (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
// 	x[i, j]
// ### Equation:
// 	[FOR-] (16) ($RES_SIM_0)
// 	[----] for {i in 1:4, j in 1:4} loop
// 	[----]   [SCAL] (1) x[i, j] = y[j] + i * sin(j * time) ($RES_SIM_1)
// 	[----] end for;
// 	 slice: {11, 7, 3, 14, 6, 2, 13, 9, 1, 12, ...}
//
// record SimulationResult
//     resultFile = "diagonal_slice_for1_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'diagonal_slice_for1', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// end SimulationResult;
// ""
// 1.381773290676036
// 3.06471526029183
// ################################################################################
//
// 	[ODE] Differential-Algebraic: (Causalize)
//
// ################################################################################
//
// ========================================
// CONTINUOUS 1 ODE System
// ========================================
//
// BLOCK 1: Sliced Component (status = Solve.UNPROCESSED)
// ----------------------------------------
// ### Variable:
// 	y[1]
// ### Equation:
// 	[SCAL] (1) y[1] = 2.0 ($RES_SIM_6)
// 	 slice: {}
//
// BLOCK 2: Sliced Component (status = Solve.UNPROCESSED)
// ----------------------------------------
// ### Variable:
// 	x[1]
// ### Equation:
// 	[SCAL] (1) x[1] = 1.0 ($RES_SIM_7)
// 	 slice: {}
//
// BLOCK 3: Entwined Component (status = Solve.EXPLICIT)
// ----------------------------------------
// call order: {$RES_SIM_2, $RES_SIM_4, $RES_SIM_2, $RES_SIM_4, $RES_SIM_2, $RES_SIM_4, $RES_SIM_2, $RES_SIM_4, $RES_SIM_0, $RES_SIM_4, ...}
// ### Variable:
// 	y[i]
// ### Equation:
// 	[FOR-] (5) ($RES_SIM_0)
// 	[----] for i in 6:10 loop
// 	[----]   [SCAL] (1) y[i] = x[i - 1] ($RES_SIM_1)
// 	[----] end for;
// 	 slice: {0, 1, 2, 3, 4}
// ### Variable:
// 	x[j]
// ### Equation:
// 	[FOR-] (9) ($RES_SIM_4)
// 	[----] for j in 2:10 loop
// 	[----]   [SCAL] (1) x[j] = y[j - 1] * sin(time) ($RES_SIM_5)
// 	[----] end for;
// 	 slice: {0, 1, 2, 3, 4, 5, 6, 7, 8}
// ### Variable:
// 	y[i]
// ### Equation:
// 	[FOR-] (4) ($RES_SIM_2)
// 	[----] for i in 2:5 loop
// 	[----]   [SCAL] (1) y[i] = x[i - 1] ($RES_SIM_3)
// 	[----] end for;
// 	 slice: {0, 1, 2, 3}
//
// ################################################################################
//
// 	[ODE] Differential-Algebraic: (Causalize)
//
// ################################################################################
//
// ========================================
// CONTINUOUS 1 ODE System
// ========================================
//
// BLOCK 1: Sliced Component (status = Solve.UNPROCESSED)
// ----------------------------------------
// ### Variable:
// 	y[1]
// ### Equation:
// 	[SCAL] (1) y[1] = 2.0 ($RES_SIM_6)
// 	 slice: {}
//
// BLOCK 2: Sliced Component (status = Solve.UNPROCESSED)
// ----------------------------------------
// ### Variable:
// 	x[1]
// ### Equation:
// 	[SCAL] (1) x[1] = 1.0 ($RES_SIM_7)
// 	 slice: {}
//
// BLOCK 3: Entwined Component (status = Solve.EXPLICIT)
// ----------------------------------------
// call order: {$RES_SIM_2, $RES_SIM_4, $RES_SIM_2, $RES_SIM_4, $RES_SIM_2, $RES_SIM_4, $RES_SIM_2, $RES_SIM_4, $RES_SIM_0, $RES_SIM_4, ...}
// ### Variable:
// 	y[i]
// ### Equation:
// 	[FOR-] (5) ($RES_SIM_0)
// 	[----] for i in 6:10 loop
// 	[----]   [SCAL] (1) y[i] = x[i - 1] ($RES_SIM_1)
// 	[----] end for;
// 	 slice: {0, 1, 2, 3, 4}
// ### Variable:
// 	x[j]
// ### Equation:
// 	[FOR-] (9) ($RES_SIM_4)
// 	[----] for j in 2:10 loop
// 	[----]   [SCAL] (1) x[j] = y[j - 1] * sin(time) ($RES_SIM_5)
// 	[----] end for;
// 	 slice: {0, 1, 2, 3, 4, 5, 6, 7, 8}
// ### Variable:
// 	y[i]
// ### Equation:
// 	[FOR-] (4) ($RES_SIM_2)
// 	[----] for i in 2:5 loop
// 	[----]   [SCAL] (1) y[i] = x[i - 1] ($RES_SIM_3)
// 	[----] end for;
// 	 slice: {0, 1, 2, 3}
//
// ################################################################################
//
// 	[INI] Initialization: (Causalize)
//
// ################################################################################
//
// ========================================
// CONTINUOUS 1 INI System
// ========================================
//
// BLOCK 1: Sliced Component (status = Solve.UNPROCESSED)
// ----------------------------------------
// ### Variable:
// 	x[1]
// ### Equation:
// 	[SCAL] (1) x[1] = 1.0 ($RES_SIM_7)
// 	 slice: {}
//
// BLOCK 2: Sliced Component (status = Solve.UNPROCESSED)
// ----------------------------------------
// ### Variable:
// 	y[1]
// ### Equation:
// 	[SCAL] (1) y[1] = 2.0 ($RES_SIM_6)
// 	 slice: {}
//
// BLOCK 3: Entwined Component (status = Solve.EXPLICIT)
// ----------------------------------------
// call order: {$RES_SIM_4, $RES_SIM_2, $RES_SIM_4, $RES_SIM_2, $RES_SIM_4, $RES_SIM_2, $RES_SIM_4, $RES_SIM_2, $RES_SIM_4, $RES_SIM_0, ...}
// ### Variable:
// 	y[i]
// ### Equation:
// 	[FOR-] (5) ($RES_SIM_0)
// 	[----] for i in 6:10 loop
// 	[----]   [SCAL] (1) y[i] = x[i - 1] ($RES_SIM_1)
// 	[----] end for;
// 	 slice: {0, 1, 2, 3, 4}
// ### Variable:
// 	y[i]
// ### Equation:
// 	[FOR-] (4) ($RES_SIM_2)
// 	[----] for i in 2:5 loop
// 	[----]   [SCAL] (1) y[i] = x[i - 1] ($RES_SIM_3)
// 	[----] end for;
// 	 slice: {0, 1, 2, 3}
// ### Variable:
// 	x[j]
// ### Equation:
// 	[FOR-] (9) ($RES_SIM_4)
// 	[----] for j in 2:10 loop
// 	[----]   [SCAL] (1) x[j] = y[j - 1] * sin(time) ($RES_SIM_5)
// 	[----] end for;
// 	 slice: {0, 1, 2, 3, 4, 5, 6, 7, 8}
//
// ################################################################################
//
// 	[ALG] Algebraic: (Solve)
//
// ################################################################################
//
// ========================================
// CONTINUOUS 1 ALG System
// ========================================
//
// --- Alias of INI[1 | 2] ---
// BLOCK 1: Sliced Component (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
// 	y[1]
// ### Equation:
// 	[SCAL] (1) y[1] = 2.0 ($RES_SIM_6)
// 	 slice: {}
//
// --- Alias of INI[1 | 1] ---
// BLOCK 2: Sliced Component (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
// 	x[1]
// ### Equation:
// 	[SCAL] (1) x[1] = 1.0 ($RES_SIM_7)
// 	 slice: {}
//
// BLOCK 3: Entwined Component (status = Solve.EXPLICIT)
// ----------------------------------------
// call order: {$RES_SIM_2, $RES_SIM_4, $RES_SIM_2, $RES_SIM_4, $RES_SIM_2, $RES_SIM_4, $RES_SIM_2, $RES_SIM_4, $RES_SIM_0, $RES_SIM_4, ...}
// BLOCK: Generic Component (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
// 	y[i]
// ### Equation:
// 	[FOR-] (5) ($RES_SIM_0)
// 	[----] for i in 6:10 loop
// 	[----]   [SCAL] (1) y[i] = x[(-1) + i] ($RES_SIM_1)
// 	[----] end for;
// 	 slice: {0, 1, 2, 3, 4}
// BLOCK: Generic Component (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
// 	x[j]
// ### Equation:
// 	[FOR-] (9) ($RES_SIM_4)
// 	[----] for j in 2:10 loop
// 	[----]   [SCAL] (1) x[j] = y[(-1) + j] * sin(time) ($RES_SIM_5)
// 	[----] end for;
// 	 slice: {0, 1, 2, 3, 4, 5, 6, 7, 8}
// BLOCK: Generic Component (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
// 	y[i]
// ### Equation:
// 	[FOR-] (4) ($RES_SIM_2)
// 	[----] for i in 2:5 loop
// 	[----]   [SCAL] (1) y[i] = x[(-1) + i] ($RES_SIM_3)
// 	[----] end for;
// 	 slice: {0, 1, 2, 3}
//
// ################################################################################
//
// 	[INI] Initialization: (Solve)
//
// ################################################################################
//
// ========================================
// CONTINUOUS 1 INI System
// ========================================
//
// BLOCK 1: Sliced Component (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
// 	x[1]
// ### Equation:
// 	[SCAL] (1) x[1] = 1.0 ($RES_SIM_7)
// 	 slice: {}
//
// BLOCK 2: Sliced Component (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
// 	y[1]
// ### Equation:
// 	[SCAL] (1) y[1] = 2.0 ($RES_SIM_6)
// 	 slice: {}
//
// BLOCK 3: Entwined Component (status = Solve.EXPLICIT)
// ----------------------------------------
// call order: {$RES_SIM_4, $RES_SIM_2, $RES_SIM_4, $RES_SIM_2, $RES_SIM_4, $RES_SIM_2, $RES_SIM_4, $RES_SIM_2, $RES_SIM_4, $RES_SIM_0, ...}
// BLOCK: Generic Component (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
// 	y[i]
// ### Equation:
// 	[FOR-] (5) ($RES_SIM_0)
// 	[----] for i in 6:10 loop
// 	[----]   [SCAL] (1) y[i] = x[(-1) + i] ($RES_SIM_1)
// 	[----] end for;
// 	 slice: {0, 1, 2, 3, 4}
// BLOCK: Generic Component (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
// 	y[i]
// ### Equation:
// 	[FOR-] (4) ($RES_SIM_2)
// 	[----] for i in 2:5 loop
// 	[----]   [SCAL] (1) y[i] = x[(-1) + i] ($RES_SIM_3)
// 	[----] end for;
// 	 slice: {0, 1, 2, 3}
// BLOCK: Generic Component (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
// 	x[j]
// ### Equation:
// 	[FOR-] (9) ($RES_SIM_4)
// 	[----] for j in 2:10 loop
// 	[----]   [SCAL] (1) x[j] = y[(-1) + j] * sin(time) ($RES_SIM_5)
// 	[----] end for;
// 	 slice: {0, 1, 2, 3, 4, 5, 6, 7, 8}
//
// record SimulationResult
//     resultFile = "entwine_for1_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'entwine_for1', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// end SimulationResult;
// ""
// 0.7080734182735712
// 1.682941969615793
// endResult
