// name: diagonal_slice_for
// keywords: NewBackend
// status: correct

loadString("

model diagonal_slice_for1
  Real x[4,4];
  Real y[4];
equation
  for i in 1:4 loop
    x[i,i] = i*cos(time);
  end for;
  for i in 1:4, j in 1:4 loop
    x[i,j] = y[j] + i*sin(j*time);
  end for;
end diagonal_slice_for1;

model entwine_for1
  Real x[10];
  Real y[10];
equation
  x[1] = 1;
  y[1] = 2;
  for j in 2:10 loop
    x[j] = y[j-1] * sin(time);
  end for;
  for i in 2:5 loop
    y[i] = x[i-1];
  end for;
  for i in 6:10 loop
    y[i] = x[i-1];
  end for;

end entwine_for1;
"); getErrorString();

setCommandLineOptions("--newBackend");

simulate(diagonal_slice_for1); getErrorString();
val(x[2,1],1);
val(x[4,1],1);

simulate(entwine_for1); getErrorString();
val(x[5],1);
val(y[3],1);

// Result:
// true
// ""
// true
// record SimulationResult
//     resultFile = "diagonal_slice_for1_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-6, method = 'dassl', fileNamePrefix = 'diagonal_slice_for1', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// end SimulationResult;
// ""
// 1.3817732906760363
// 3.0647152602918295
// record SimulationResult
//     resultFile = "entwine_for1_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-6, method = 'dassl', fileNamePrefix = 'entwine_for1', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// end SimulationResult;
// ""
// 0.7080734182735712
// 1.682941969615793
// endResult
