// name: irregular_for
// keywords: NewBackend
// status: correct

loadString("
model irregular_for1
  parameter Integer p = 10;
  Real[p] x;
equation
  for i in 2:2:(p-1)*2 loop
    x[integer(i/2)] = x[integer(i/2)+1] + sin(i/2*time);
  end for;
  x[4] = cos(time);
end irregular_for1;
"); getErrorString();

setCommandLineOptions("--newBackend -d=bltdump");

simulate(irregular_for1); getErrorString();
val(x[3],1);
// Result:
// true
// ""
// true
// #################################################
//
// 	[ODE] Differential-Algebraic: (Causalize)
//
// #################################################
//
// ===========================
// CONTINUOUS 1 ODE System
// ===========================
//
// BLOCK 1: Single Strong Component (status = Solve.UNPROCESSED)
// ---------------------------------------------------------------
// ### Variable:
// 	Real $FUN_2
// ### Equation:
// 	[SCAL] (1) $FUN_2 = cos(time) ($RES_$AUX_3)
//
// BLOCK 2: Sliced Component (status = Solve.UNPROCESSED)
// --------------------------------------------------------
// ### Variable:
// 	x[4]
// ### Equation:
// 	[SCAL] (1) x[4] = $FUN_2 ($RES_SIM_0)
//
// BLOCK 3: Sliced Component (status = Solve.UNPROCESSED)
// --------------------------------------------------------
// ### Variable:
// 	$FUN_1[integer(1.0 + 0.5 * ((-2.0) + $i1))]
// ### Equation:
// 	[FOR-] (9) ($RES_$AUX_4)
// 	[----] for $i1 in 2:2:18 loop
// 	[----]   [SCAL] (1) $FUN_1[integer(1.0 + 0.5 * ((-2.0) + $i1))] = sin(($i1 / 2.0) * time) ($RES_$AUX_5)
// 	[----] end for;
// 	 slice: {8, 7, 6, 5, 4, 3, 2, 1, 0}
//
// BLOCK 4: Sliced Component (status = Solve.UNPROCESSED)
// --------------------------------------------------------
// ### Variable:
// 	x[integer(0.5 * $i1)]
// ### Equation:
// 	[FOR-] (9) ($RES_SIM_1)
// 	[----] for $i1 in 2:2:18 loop
// 	[----]   [SCAL] (1) x[integer($i1 / 2.0)] = x[integer($i1 / 2.0) + 1] + $FUN_1[integer(1.0 + 0.5 * ((-2.0) + $i1))] ($RES_SIM_2)
// 	[----] end for;
// 	 slice: {0, 1, 2}
//
// BLOCK 5: Sliced Component (status = Solve.UNPROCESSED)
// --------------------------------------------------------
// ### Variable:
// 	x[1 + integer(0.5 * $i1)]
// ### Equation:
// 	[FOR-] (9) ($RES_SIM_1)
// 	[----] for $i1 in 2:2:18 loop
// 	[----]   [SCAL] (1) x[integer($i1 / 2.0)] = x[integer($i1 / 2.0) + 1] + $FUN_1[integer(1.0 + 0.5 * ((-2.0) + $i1))] ($RES_SIM_2)
// 	[----] end for;
// 	 slice: {8, 7, 6, 5, 4, 3}
//
// #################################################
//
// 	[ODE] Differential-Algebraic: (Causalize)
//
// #################################################
//
// ===========================
// CONTINUOUS 1 ODE System
// ===========================
//
// BLOCK 1: Single Strong Component (status = Solve.UNPROCESSED)
// ---------------------------------------------------------------
// ### Variable:
// 	Real $FUN_2
// ### Equation:
// 	[SCAL] (1) $FUN_2 = cos(time) ($RES_$AUX_3)
//
// BLOCK 2: Sliced Component (status = Solve.UNPROCESSED)
// --------------------------------------------------------
// ### Variable:
// 	x[4]
// ### Equation:
// 	[SCAL] (1) x[4] = $FUN_2 ($RES_SIM_0)
//
// BLOCK 3: Sliced Component (status = Solve.UNPROCESSED)
// --------------------------------------------------------
// ### Variable:
// 	$FUN_1[integer(1.0 + 0.5 * ((-2.0) + $i1))]
// ### Equation:
// 	[FOR-] (9) ($RES_$AUX_4)
// 	[----] for $i1 in 2:2:18 loop
// 	[----]   [SCAL] (1) $FUN_1[integer(1.0 + 0.5 * ((-2.0) + $i1))] = sin(($i1 / 2.0) * time) ($RES_$AUX_5)
// 	[----] end for;
// 	 slice: {8, 7, 6, 5, 4, 3, 2, 1, 0}
//
// BLOCK 4: Sliced Component (status = Solve.UNPROCESSED)
// --------------------------------------------------------
// ### Variable:
// 	x[integer(0.5 * $i1)]
// ### Equation:
// 	[FOR-] (9) ($RES_SIM_1)
// 	[----] for $i1 in 2:2:18 loop
// 	[----]   [SCAL] (1) x[integer($i1 / 2.0)] = x[integer($i1 / 2.0) + 1] + $FUN_1[integer(1.0 + 0.5 * ((-2.0) + $i1))] ($RES_SIM_2)
// 	[----] end for;
// 	 slice: {0, 1, 2}
//
// BLOCK 5: Sliced Component (status = Solve.UNPROCESSED)
// --------------------------------------------------------
// ### Variable:
// 	x[1 + integer(0.5 * $i1)]
// ### Equation:
// 	[FOR-] (9) ($RES_SIM_1)
// 	[----] for $i1 in 2:2:18 loop
// 	[----]   [SCAL] (1) x[integer($i1 / 2.0)] = x[integer($i1 / 2.0) + 1] + $FUN_1[integer(1.0 + 0.5 * ((-2.0) + $i1))] ($RES_SIM_2)
// 	[----] end for;
// 	 slice: {8, 7, 6, 5, 4, 3}
//
// #########################################
//
// 	[INI] Initialization: (Causalize)
//
// #########################################
//
// ===========================
// CONTINUOUS 1 INI System
// ===========================
//
// BLOCK 1: Single Strong Component (status = Solve.UNPROCESSED)
// ---------------------------------------------------------------
// ### Variable:
// 	Real $FUN_2
// ### Equation:
// 	[SCAL] (1) $FUN_2 = cos(time) ($RES_$AUX_3)
//
// BLOCK 2: Sliced Component (status = Solve.UNPROCESSED)
// --------------------------------------------------------
// ### Variable:
// 	x[4]
// ### Equation:
// 	[SCAL] (1) x[4] = $FUN_2 ($RES_SIM_0)
//
// BLOCK 3: Sliced Component (status = Solve.UNPROCESSED)
// --------------------------------------------------------
// ### Variable:
// 	$FUN_1[integer(1.0 + 0.5 * ((-2.0) + $i1))]
// ### Equation:
// 	[FOR-] (9) ($RES_$AUX_4)
// 	[----] for $i1 in 2:2:18 loop
// 	[----]   [SCAL] (1) $FUN_1[integer(1.0 + 0.5 * ((-2.0) + $i1))] = sin(($i1 / 2.0) * time) ($RES_$AUX_5)
// 	[----] end for;
// 	 slice: {8, 7, 6, 5, 4, 3, 2, 1, 0}
//
// BLOCK 4: Sliced Component (status = Solve.UNPROCESSED)
// --------------------------------------------------------
// ### Variable:
// 	x[integer(0.5 * $i1)]
// ### Equation:
// 	[FOR-] (9) ($RES_SIM_1)
// 	[----] for $i1 in 2:2:18 loop
// 	[----]   [SCAL] (1) x[integer($i1 / 2.0)] = x[integer($i1 / 2.0) + 1] + $FUN_1[integer(1.0 + 0.5 * ((-2.0) + $i1))] ($RES_SIM_2)
// 	[----] end for;
// 	 slice: {0, 1, 2}
//
// BLOCK 5: Sliced Component (status = Solve.UNPROCESSED)
// --------------------------------------------------------
// ### Variable:
// 	x[1 + integer(0.5 * $i1)]
// ### Equation:
// 	[FOR-] (9) ($RES_SIM_1)
// 	[----] for $i1 in 2:2:18 loop
// 	[----]   [SCAL] (1) x[integer($i1 / 2.0)] = x[integer($i1 / 2.0) + 1] + $FUN_1[integer(1.0 + 0.5 * ((-2.0) + $i1))] ($RES_SIM_2)
// 	[----] end for;
// 	 slice: {8, 7, 6, 5, 4, 3}
//
// ################################
//
// 	[ALG] Algebraic: (Solve)
//
// ################################
//
// ===========================
// CONTINUOUS 1 ALG System
// ===========================
//
// --- Alias of INI[1 | 1] ---
// BLOCK 1: Single Strong Component (status = Solve.EXPLICIT)
// ------------------------------------------------------------
// ### Variable:
// 	Real $FUN_2
// ### Equation:
// 	[SCAL] (1) $FUN_2 = cos(time) ($RES_$AUX_3)
//
// --- Alias of INI[1 | 2] ---
// BLOCK 2: Sliced Component (status = Solve.EXPLICIT)
// -----------------------------------------------------
// ### Variable:
// 	x[4]
// ### Equation:
// 	[SCAL] (1) x[4] = $FUN_2 ($RES_SIM_0)
//
// --- Alias of INI[1 | 3] ---
// BLOCK 3: Generic Component (status = Solve.EXPLICIT)
// ------------------------------------------------------
// ### Variable:
// 	$FUN_1[integer(1.0 + 0.5 * ((-2.0) + $i1))]
// ### Equation:
// 	[FOR-] (9) ($RES_$AUX_4)
// 	[----] for $i1 in 2:2:18 loop
// 	[----]   [SCAL] (1) $FUN_1[integer(1.0 + 0.5 * ((-2.0) + $i1))] = sin((0.5 * $i1) * time) ($RES_$AUX_5)
// 	[----] end for;
// 	 slice: {8, 7, 6, 5, 4, 3, 2, 1, 0}
//
// --- Alias of INI[1 | 4] ---
// BLOCK 4: Generic Component (status = Solve.EXPLICIT)
// ------------------------------------------------------
// ### Variable:
// 	x[integer(0.5 * $i1)]
// ### Equation:
// 	[FOR-] (9) ($RES_SIM_1)
// 	[----] for $i1 in 2:2:18 loop
// 	[----]   [SCAL] (1) x[integer(0.5 * $i1)] = x[1 + integer(0.5 * $i1)] + $FUN_1[integer(1.0 + 0.5 * ((-2.0) + $i1))] ($RES_SIM_2)
// 	[----] end for;
// 	 slice: {0, 1, 2}
//
// --- Alias of INI[1 | 5] ---
// BLOCK 5: Generic Component (status = Solve.EXPLICIT)
// ------------------------------------------------------
// ### Variable:
// 	x[1 + integer(0.5 * $i1)]
// ### Equation:
// 	[FOR-] (9) ($RES_SIM_1)
// 	[----] for $i1 in 2:2:18 loop
// 	[----]   [SCAL] (1) x[1 + integer(0.5 * $i1)] = -($FUN_1[integer(1.0 + 0.5 * ((-2.0) + $i1))] - x[integer(0.5 * $i1)]) ($RES_SIM_2)
// 	[----] end for;
// 	 slice: {8, 7, 6, 5, 4, 3}
//
// #####################################
//
// 	[INI] Initialization: (Solve)
//
// #####################################
//
// ===========================
// CONTINUOUS 1 INI System
// ===========================
//
// BLOCK 1: Single Strong Component (status = Solve.EXPLICIT)
// ------------------------------------------------------------
// ### Variable:
// 	Real $FUN_2
// ### Equation:
// 	[SCAL] (1) $FUN_2 = cos(time) ($RES_$AUX_3)
//
// BLOCK 2: Sliced Component (status = Solve.EXPLICIT)
// -----------------------------------------------------
// ### Variable:
// 	x[4]
// ### Equation:
// 	[SCAL] (1) x[4] = $FUN_2 ($RES_SIM_0)
//
// BLOCK 3: Generic Component (status = Solve.EXPLICIT)
// ------------------------------------------------------
// ### Variable:
// 	$FUN_1[integer(1.0 + 0.5 * ((-2.0) + $i1))]
// ### Equation:
// 	[FOR-] (9) ($RES_$AUX_4)
// 	[----] for $i1 in 2:2:18 loop
// 	[----]   [SCAL] (1) $FUN_1[integer(1.0 + 0.5 * ((-2.0) + $i1))] = sin((0.5 * $i1) * time) ($RES_$AUX_5)
// 	[----] end for;
// 	 slice: {8, 7, 6, 5, 4, 3, 2, 1, 0}
//
// BLOCK 4: Generic Component (status = Solve.EXPLICIT)
// ------------------------------------------------------
// ### Variable:
// 	x[integer(0.5 * $i1)]
// ### Equation:
// 	[FOR-] (9) ($RES_SIM_1)
// 	[----] for $i1 in 2:2:18 loop
// 	[----]   [SCAL] (1) x[integer(0.5 * $i1)] = x[1 + integer(0.5 * $i1)] + $FUN_1[integer(1.0 + 0.5 * ((-2.0) + $i1))] ($RES_SIM_2)
// 	[----] end for;
// 	 slice: {0, 1, 2}
//
// BLOCK 5: Generic Component (status = Solve.EXPLICIT)
// ------------------------------------------------------
// ### Variable:
// 	x[1 + integer(0.5 * $i1)]
// ### Equation:
// 	[FOR-] (9) ($RES_SIM_1)
// 	[----] for $i1 in 2:2:18 loop
// 	[----]   [SCAL] (1) x[1 + integer(0.5 * $i1)] = -($FUN_1[integer(1.0 + 0.5 * ((-2.0) + $i1))] - x[integer(0.5 * $i1)]) ($RES_SIM_2)
// 	[----] end for;
// 	 slice: {8, 7, 6, 5, 4, 3}
//
// record SimulationResult
//     resultFile = "irregular_for1_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-6, method = 'dassl', fileNamePrefix = 'irregular_for1', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// end SimulationResult;
// ""
// 0.681422313928007
// endResult
