// name: simple_for
// keywords: NewBackend
// status: correct

loadString("
model simple_for1
  parameter Integer p = 10;
  Real[p] x;
equation
  for i in 1:p loop
    x[i] = sin(i*time);
  end for;
end simple_for1;

model simple_for2
  parameter Integer p = 10;
  Real[p+1] x;
equation
  for i in 1:p loop
    x[i] = sin(i*time);
  end for;
  x[p+1] = cos(time);
end simple_for2;

model simple_for3
  parameter Integer p = 10;
  Real[p+1] x;
equation
  for i in 1:p loop
    x[i] = x[i+1] + sin(i*time);
  end for;
  x[1] = cos(time);
end simple_for3;

"); getErrorString();

setCommandLineOptions("--newBackend -d=bltdump");

simulate(simple_for1); getErrorString();
val(x[3],1);
simulate(simple_for2); getErrorString();
val(x[3],1);
simulate(simple_for3); getErrorString();
val(x[3],1);

// Result:
// true
// ""
// true
// ################################################################################
//
// 	[ODE] Differential-Algebraic: (Causalize)
//
// ################################################################################
//
// ========================================
// CONTINUOUS 1 ODE System
// ========================================
//
// BLOCK 1: Sliced Component (status = Solve.UNPROCESSED)
// ----------------------------------------
// ### Variable:
// 	x[i]
// ### Equation:
// 	[FOR-] (10) ($RES_SIM_0)
// 	[----] for i in 1:10 loop
// 	[----]   [SCAL] (1) x[i] = sin(i * time) ($RES_SIM_1)
// 	[----] end for;
// 	 slice: {9, 8, 7, 6, 5, 4, 3, 2, 1, 0}
//
// ################################################################################
//
// 	[ODE] Differential-Algebraic: (Causalize)
//
// ################################################################################
//
// ========================================
// CONTINUOUS 1 ODE System
// ========================================
//
// BLOCK 1: Sliced Component (status = Solve.UNPROCESSED)
// ----------------------------------------
// ### Variable:
// 	x[i]
// ### Equation:
// 	[FOR-] (10) ($RES_SIM_0)
// 	[----] for i in 1:10 loop
// 	[----]   [SCAL] (1) x[i] = sin(i * time) ($RES_SIM_1)
// 	[----] end for;
// 	 slice: {9, 8, 7, 6, 5, 4, 3, 2, 1, 0}
//
// ################################################################################
//
// 	[INI] Initialization: (Causalize)
//
// ################################################################################
//
// ========================================
// CONTINUOUS 1 INI System
// ========================================
//
// BLOCK 1: Sliced Component (status = Solve.UNPROCESSED)
// ----------------------------------------
// ### Variable:
// 	x[i]
// ### Equation:
// 	[FOR-] (10) ($RES_SIM_0)
// 	[----] for i in 1:10 loop
// 	[----]   [SCAL] (1) x[i] = sin(i * time) ($RES_SIM_1)
// 	[----] end for;
// 	 slice: {9, 8, 7, 6, 5, 4, 3, 2, 1, 0}
//
// ################################################################################
//
// 	[ALG] Algebraic: (Solve)
//
// ################################################################################
//
// ========================================
// CONTINUOUS 1 ALG System
// ========================================
//
// --- Alias of INI[1 | 1] ---
// BLOCK 1: Generic Component (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
// 	x[i]
// ### Equation:
// 	[FOR-] (10) ($RES_SIM_0)
// 	[----] for i in 1:10 loop
// 	[----]   [SCAL] (1) x[i] = sin(i * time) ($RES_SIM_1)
// 	[----] end for;
// 	 slice: {9, 8, 7, 6, 5, 4, 3, 2, 1, 0}
//
// ################################################################################
//
// 	[INI] Initialization: (Solve)
//
// ################################################################################
//
// ========================================
// CONTINUOUS 1 INI System
// ========================================
//
// BLOCK 1: Generic Component (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
// 	x[i]
// ### Equation:
// 	[FOR-] (10) ($RES_SIM_0)
// 	[----] for i in 1:10 loop
// 	[----]   [SCAL] (1) x[i] = sin(i * time) ($RES_SIM_1)
// 	[----] end for;
// 	 slice: {9, 8, 7, 6, 5, 4, 3, 2, 1, 0}
//
// record SimulationResult
//     resultFile = "simple_for1_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'simple_for1', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// end SimulationResult;
// ""
// 0.1411200080598672
// ################################################################################
//
// 	[ODE] Differential-Algebraic: (Causalize)
//
// ################################################################################
//
// ========================================
// CONTINUOUS 1 ODE System
// ========================================
//
// BLOCK 1: Sliced Component (status = Solve.UNPROCESSED)
// ----------------------------------------
// ### Variable:
// 	x[11]
// ### Equation:
// 	[SCAL] (1) x[11] = cos(time) ($RES_SIM_0)
// 	 slice: {}
//
// BLOCK 2: Sliced Component (status = Solve.UNPROCESSED)
// ----------------------------------------
// ### Variable:
// 	x[i]
// ### Equation:
// 	[FOR-] (10) ($RES_SIM_1)
// 	[----] for i in 1:10 loop
// 	[----]   [SCAL] (1) x[i] = sin(i * time) ($RES_SIM_2)
// 	[----] end for;
// 	 slice: {9, 8, 7, 6, 5, 4, 3, 2, 1, 0}
//
// ################################################################################
//
// 	[ODE] Differential-Algebraic: (Causalize)
//
// ################################################################################
//
// ========================================
// CONTINUOUS 1 ODE System
// ========================================
//
// BLOCK 1: Sliced Component (status = Solve.UNPROCESSED)
// ----------------------------------------
// ### Variable:
// 	x[11]
// ### Equation:
// 	[SCAL] (1) x[11] = cos(time) ($RES_SIM_0)
// 	 slice: {}
//
// BLOCK 2: Sliced Component (status = Solve.UNPROCESSED)
// ----------------------------------------
// ### Variable:
// 	x[i]
// ### Equation:
// 	[FOR-] (10) ($RES_SIM_1)
// 	[----] for i in 1:10 loop
// 	[----]   [SCAL] (1) x[i] = sin(i * time) ($RES_SIM_2)
// 	[----] end for;
// 	 slice: {9, 8, 7, 6, 5, 4, 3, 2, 1, 0}
//
// ################################################################################
//
// 	[INI] Initialization: (Causalize)
//
// ################################################################################
//
// ========================================
// CONTINUOUS 1 INI System
// ========================================
//
// BLOCK 1: Sliced Component (status = Solve.UNPROCESSED)
// ----------------------------------------
// ### Variable:
// 	x[11]
// ### Equation:
// 	[SCAL] (1) x[11] = cos(time) ($RES_SIM_0)
// 	 slice: {}
//
// BLOCK 2: Sliced Component (status = Solve.UNPROCESSED)
// ----------------------------------------
// ### Variable:
// 	x[i]
// ### Equation:
// 	[FOR-] (10) ($RES_SIM_1)
// 	[----] for i in 1:10 loop
// 	[----]   [SCAL] (1) x[i] = sin(i * time) ($RES_SIM_2)
// 	[----] end for;
// 	 slice: {9, 8, 7, 6, 5, 4, 3, 2, 1, 0}
//
// ################################################################################
//
// 	[ALG] Algebraic: (Solve)
//
// ################################################################################
//
// ========================================
// CONTINUOUS 1 ALG System
// ========================================
//
// --- Alias of INI[1 | 1] ---
// BLOCK 1: Sliced Component (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
// 	x[11]
// ### Equation:
// 	[SCAL] (1) x[11] = cos(time) ($RES_SIM_0)
// 	 slice: {}
//
// --- Alias of INI[1 | 2] ---
// BLOCK 2: Generic Component (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
// 	x[i]
// ### Equation:
// 	[FOR-] (10) ($RES_SIM_1)
// 	[----] for i in 1:10 loop
// 	[----]   [SCAL] (1) x[i] = sin(i * time) ($RES_SIM_2)
// 	[----] end for;
// 	 slice: {9, 8, 7, 6, 5, 4, 3, 2, 1, 0}
//
// ################################################################################
//
// 	[INI] Initialization: (Solve)
//
// ################################################################################
//
// ========================================
// CONTINUOUS 1 INI System
// ========================================
//
// BLOCK 1: Sliced Component (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
// 	x[11]
// ### Equation:
// 	[SCAL] (1) x[11] = cos(time) ($RES_SIM_0)
// 	 slice: {}
//
// BLOCK 2: Generic Component (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
// 	x[i]
// ### Equation:
// 	[FOR-] (10) ($RES_SIM_1)
// 	[----] for i in 1:10 loop
// 	[----]   [SCAL] (1) x[i] = sin(i * time) ($RES_SIM_2)
// 	[----] end for;
// 	 slice: {9, 8, 7, 6, 5, 4, 3, 2, 1, 0}
//
// record SimulationResult
//     resultFile = "simple_for2_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'simple_for2', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// end SimulationResult;
// ""
// 0.1411200080598672
// ################################################################################
//
// 	[ODE] Differential-Algebraic: (Causalize)
//
// ################################################################################
//
// ========================================
// CONTINUOUS 1 ODE System
// ========================================
//
// BLOCK 1: Sliced Component (status = Solve.UNPROCESSED)
// ----------------------------------------
// ### Variable:
// 	x[1]
// ### Equation:
// 	[SCAL] (1) x[1] = cos(time) ($RES_SIM_0)
// 	 slice: {}
//
// BLOCK 2: Sliced Component (status = Solve.UNPROCESSED)
// ----------------------------------------
// ### Variable:
// 	x[1 + i]
// ### Equation:
// 	[FOR-] (10) ($RES_SIM_1)
// 	[----] for i in 1:10 loop
// 	[----]   [SCAL] (1) x[i] = x[i + 1] + sin(i * time) ($RES_SIM_2)
// 	[----] end for;
// 	 slice: {9, 8, 7, 6, 5, 4, 3, 2, 1, 0}
//
// ################################################################################
//
// 	[ODE] Differential-Algebraic: (Causalize)
//
// ################################################################################
//
// ========================================
// CONTINUOUS 1 ODE System
// ========================================
//
// BLOCK 1: Sliced Component (status = Solve.UNPROCESSED)
// ----------------------------------------
// ### Variable:
// 	x[1]
// ### Equation:
// 	[SCAL] (1) x[1] = cos(time) ($RES_SIM_0)
// 	 slice: {}
//
// BLOCK 2: Sliced Component (status = Solve.UNPROCESSED)
// ----------------------------------------
// ### Variable:
// 	x[1 + i]
// ### Equation:
// 	[FOR-] (10) ($RES_SIM_1)
// 	[----] for i in 1:10 loop
// 	[----]   [SCAL] (1) x[i] = x[i + 1] + sin(i * time) ($RES_SIM_2)
// 	[----] end for;
// 	 slice: {9, 8, 7, 6, 5, 4, 3, 2, 1, 0}
//
// ################################################################################
//
// 	[INI] Initialization: (Causalize)
//
// ################################################################################
//
// ========================================
// CONTINUOUS 1 INI System
// ========================================
//
// BLOCK 1: Sliced Component (status = Solve.UNPROCESSED)
// ----------------------------------------
// ### Variable:
// 	x[1]
// ### Equation:
// 	[SCAL] (1) x[1] = cos(time) ($RES_SIM_0)
// 	 slice: {}
//
// BLOCK 2: Sliced Component (status = Solve.UNPROCESSED)
// ----------------------------------------
// ### Variable:
// 	x[1 + i]
// ### Equation:
// 	[FOR-] (10) ($RES_SIM_1)
// 	[----] for i in 1:10 loop
// 	[----]   [SCAL] (1) x[i] = x[i + 1] + sin(i * time) ($RES_SIM_2)
// 	[----] end for;
// 	 slice: {9, 8, 7, 6, 5, 4, 3, 2, 1, 0}
//
// ################################################################################
//
// 	[ALG] Algebraic: (Solve)
//
// ################################################################################
//
// ========================================
// CONTINUOUS 1 ALG System
// ========================================
//
// --- Alias of INI[1 | 1] ---
// BLOCK 1: Sliced Component (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
// 	x[1]
// ### Equation:
// 	[SCAL] (1) x[1] = cos(time) ($RES_SIM_0)
// 	 slice: {}
//
// --- Alias of INI[1 | 2] ---
// BLOCK 2: Generic Component (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
// 	x[1 + i]
// ### Equation:
// 	[FOR-] (10) ($RES_SIM_1)
// 	[----] for i in 1:10 loop
// 	[----]   [SCAL] (1) x[1 + i] = -(sin(i * time) - x[i]) ($RES_SIM_2)
// 	[----] end for;
// 	 slice: {9, 8, 7, 6, 5, 4, 3, 2, 1, 0}
//
// ################################################################################
//
// 	[INI] Initialization: (Solve)
//
// ################################################################################
//
// ========================================
// CONTINUOUS 1 INI System
// ========================================
//
// BLOCK 1: Sliced Component (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
// 	x[1]
// ### Equation:
// 	[SCAL] (1) x[1] = cos(time) ($RES_SIM_0)
// 	 slice: {}
//
// BLOCK 2: Generic Component (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
// 	x[1 + i]
// ### Equation:
// 	[FOR-] (10) ($RES_SIM_1)
// 	[----] for i in 1:10 loop
// 	[----]   [SCAL] (1) x[1 + i] = -(sin(i * time) - x[i]) ($RES_SIM_2)
// 	[----] end for;
// 	 slice: {9, 8, 7, 6, 5, 4, 3, 2, 1, 0}
//
// record SimulationResult
//     resultFile = "simple_for3_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'simple_for3', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// end SimulationResult;
// ""
// -1.210466105765438
// endResult
