// name: partitioning
// keywords: NewBackend
// status: correct


loadString("
model partitioning
  Real x,y,z,k;
  parameter Real a = 1.0;
equation
  k = cos(time);
  z = a^2 * k;
  y = x^2 + a;
  der(x) = sin(time);
end partitioning;

"); getErrorString();

setCommandLineOptions("--newBackend -d=bltdump"); getErrorString();

simulate(partitioning); getErrorString();

// Result:
// true
// ""
// true
// ""
// ################################################################################
//
// 	[ODE] Differential-Algebraic: (Causalize)
//
// ################################################################################
//
// ========================================
// CONTINUOUS ODE System
// ========================================
//
// BLOCK 1: Single Equation
// ----------------------------------------
// ### Variable:
// 	Real $DER.x
// ### Equation:
// 	[SCAL] ($RES_SIM_0) $DER.x = sin(time)
//
// ========================================
// AdjacencyMatrix
// ========================================
//
// Normal Adjacency Matrix (row = equation)
// ****************************************
// 	(1)	{1}
//
// Transposed Adjacency Matrix (row = variable)
// ****************************************
// 	(1)	{1}
//
//
// ========================================
// Scalar Matching
// ========================================
//
// variable to equation
// ****************************************
// 	var 1 --> eqn 1
//
// equation to variable
// ****************************************
// 	eqn 1 --> var 1
//
//
// ========================================
// CONTINUOUS ODE System
// ========================================
//
// BLOCK 1: Single Equation
// ----------------------------------------
// ### Variable:
// 	Real y
// ### Equation:
// 	[SCAL] ($RES_SIM_1) y = x ^ 2.0 + a
//
// ========================================
// AdjacencyMatrix
// ========================================
//
// Normal Adjacency Matrix (row = equation)
// ****************************************
// 	(1)	{1}
//
// Transposed Adjacency Matrix (row = variable)
// ****************************************
// 	(1)	{1}
//
//
// ========================================
// Scalar Matching
// ========================================
//
// variable to equation
// ****************************************
// 	var 1 --> eqn 1
//
// equation to variable
// ****************************************
// 	eqn 1 --> var 1
//
//
// ========================================
// CONTINUOUS ODE System
// ========================================
//
// BLOCK 1: Single Equation
// ----------------------------------------
// ### Variable:
// 	Real k
// ### Equation:
// 	[SCAL] ($RES_SIM_3) k = cos(time)
//
// BLOCK 2: Single Equation
// ----------------------------------------
// ### Variable:
// 	Real z
// ### Equation:
// 	[SCAL] ($RES_SIM_2) z = a ^ 2.0 * k
//
// ========================================
// AdjacencyMatrix
// ========================================
//
// Normal Adjacency Matrix (row = equation)
// ****************************************
// 	(1)	{2, 1}
// 	(2)	{2}
//
// Transposed Adjacency Matrix (row = variable)
// ****************************************
// 	(1)	{1}
// 	(2)	{2, 1}
//
//
// ========================================
// Scalar Matching
// ========================================
//
// variable to equation
// ****************************************
// 	var 1 --> eqn 1
// 	var 2 --> eqn 2
//
// equation to variable
// ****************************************
// 	eqn 1 --> var 1
// 	eqn 2 --> var 2
//
//
// ################################################################################
//
// 	[ODE] Differential-Algebraic: (Causalize)
//
// ################################################################################
//
// ========================================
// CONTINUOUS ODE System
// ========================================
//
// BLOCK 1: Single Equation
// ----------------------------------------
// ### Variable:
// 	Real $DER.x
// ### Equation:
// 	[SCAL] ($RES_SIM_0) $DER.x = sin(time)
//
// ========================================
// AdjacencyMatrix
// ========================================
//
// Normal Adjacency Matrix (row = equation)
// ****************************************
// 	(1)	{1}
//
// Transposed Adjacency Matrix (row = variable)
// ****************************************
// 	(1)	{1}
//
//
// ========================================
// Scalar Matching
// ========================================
//
// variable to equation
// ****************************************
// 	var 1 --> eqn 1
//
// equation to variable
// ****************************************
// 	eqn 1 --> var 1
//
//
// ========================================
// CONTINUOUS ODE System
// ========================================
//
// BLOCK 1: Single Equation
// ----------------------------------------
// ### Variable:
// 	Real y
// ### Equation:
// 	[SCAL] ($RES_SIM_1) y = x ^ 2.0 + a
//
// ========================================
// AdjacencyMatrix
// ========================================
//
// Normal Adjacency Matrix (row = equation)
// ****************************************
// 	(1)	{1}
//
// Transposed Adjacency Matrix (row = variable)
// ****************************************
// 	(1)	{1}
//
//
// ========================================
// Scalar Matching
// ========================================
//
// variable to equation
// ****************************************
// 	var 1 --> eqn 1
//
// equation to variable
// ****************************************
// 	eqn 1 --> var 1
//
//
// ========================================
// CONTINUOUS ODE System
// ========================================
//
// BLOCK 1: Single Equation
// ----------------------------------------
// ### Variable:
// 	Real k
// ### Equation:
// 	[SCAL] ($RES_SIM_3) k = cos(time)
//
// BLOCK 2: Single Equation
// ----------------------------------------
// ### Variable:
// 	Real z
// ### Equation:
// 	[SCAL] ($RES_SIM_2) z = a ^ 2.0 * k
//
// ========================================
// AdjacencyMatrix
// ========================================
//
// Normal Adjacency Matrix (row = equation)
// ****************************************
// 	(1)	{2, 1}
// 	(2)	{2}
//
// Transposed Adjacency Matrix (row = variable)
// ****************************************
// 	(1)	{1}
// 	(2)	{2, 1}
//
//
// ========================================
// Scalar Matching
// ========================================
//
// variable to equation
// ****************************************
// 	var 1 --> eqn 1
// 	var 2 --> eqn 2
//
// equation to variable
// ****************************************
// 	eqn 1 --> var 1
// 	eqn 2 --> var 2
//
//
// ################################################################################
//
// 	[INI] Initialization: (Causalize)
//
// ################################################################################
//
// ========================================
// CONTINUOUS INI System
// ========================================
//
// ========================================
// AdjacencyMatrix
// ========================================
//
// Empty Adjacency Matrix
// ****************************************
//
//
// ========================================
// Empty Matching
// ========================================
//
//
// ========================================
// CONTINUOUS INI System
// ========================================
//
// BLOCK 1: Single Equation
// ----------------------------------------
// ### Variable:
// 	Real x
// ### Equation:
// 	[SIMP] ($RES_SIM_5) x = $START.x
//
// BLOCK 2: Single Equation
// ----------------------------------------
// ### Variable:
// 	Real y
// ### Equation:
// 	[SCAL] ($RES_SIM_1) y = x ^ 2.0 + a
//
// BLOCK 3: Single Equation
// ----------------------------------------
// ### Variable:
// 	Real k
// ### Equation:
// 	[SCAL] ($RES_SIM_3) k = cos(time)
//
// BLOCK 4: Single Equation
// ----------------------------------------
// ### Variable:
// 	Real z
// ### Equation:
// 	[SCAL] ($RES_SIM_2) z = a ^ 2.0 * k
//
// ========================================
// AdjacencyMatrix
// ========================================
//
// Normal Adjacency Matrix (row = equation)
// ****************************************
// 	(1)	{3}
// 	(2)	{3, 2}
// 	(3)	{1, 4}
// 	(4)	{4}
//
// Transposed Adjacency Matrix (row = variable)
// ****************************************
// 	(1)	{3}
// 	(2)	{2}
// 	(3)	{2, 1}
// 	(4)	{3, 4}
//
//
// ========================================
// Scalar Matching
// ========================================
//
// variable to equation
// ****************************************
// 	var 1 --> eqn 3
// 	var 2 --> eqn 2
// 	var 3 --> eqn 1
// 	var 4 --> eqn 4
//
// equation to variable
// ****************************************
// 	eqn 1 --> var 3
// 	eqn 2 --> var 2
// 	eqn 3 --> var 1
// 	eqn 4 --> var 4
//
//
// ========================================
// CONTINUOUS INI System
// ========================================
//
// BLOCK 1: Single Equation
// ----------------------------------------
// ### Variable:
// 	Real $DER.x
// ### Equation:
// 	[SCAL] ($RES_SIM_0) $DER.x = sin(time)
//
// ========================================
// AdjacencyMatrix
// ========================================
//
// Normal Adjacency Matrix (row = equation)
// ****************************************
// 	(1)	{1}
//
// Transposed Adjacency Matrix (row = variable)
// ****************************************
// 	(1)	{1}
//
//
// ========================================
// Scalar Matching
// ========================================
//
// variable to equation
// ****************************************
// 	var 1 --> eqn 1
//
// equation to variable
// ****************************************
// 	eqn 1 --> var 1
//
//
// record SimulationResult
//     resultFile = "partitioning_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'partitioning', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "stdout            | info    | Jacobian or SparsePattern is not generated or failed to initialize! Switch back to normal.
// LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// end SimulationResult;
// ""
// endResult
