// name: splitIf
// keywords: NewBackend
// status: correct

loadString("
model SplitIf
  Real v1, v2;
equation
  if time >= 1 then
    v1 = time*3;
    v2^3 = 0;
  else
    v2^3 = 0;
    v1 = time*3 + 2;
  end if;
end SplitIf;
"); getErrorString();
setCommandLineOptions("--newBackend -d=dumpSimplify"); getErrorString();
buildModel(SplitIf); getErrorString();

// Result:
// true
// ""
// true
// ""
// ### dumpSimplify | NBackendDAE.simplify ###
// [BEFORE]
//   [-IF-] (1) ($RES_SIM_9)
//   [----] if time >= 1.0 then
//   [----]   [SCAL] (1) v2 ^ 3.0 = 0.0 ($RES_SIM_10)
//   [----] else
//   [----]   [SCAL] (1) v2 ^ 3.0 = 0.0 ($RES_SIM_11)
//   [----] end if;
// [AFTER ]
//   [SCAL] (1) v2 ^ 3.0 = 0.0 ($RES_SIM_9)
//
// ### dumpSimplify | NBackendDAE.simplify ###
// [BEFORE] time * 3.0
// [AFTER ] 3.0 * time
//
// ### dumpSimplify | NBackendDAE.simplify ###
// [BEFORE] time * 3.0 + 2.0
// [AFTER ] 2.0 + 3.0 * time
//
// ### dumpSimplify | NBackendDAE.simplify ###
// [BEFORE]
//   [-IF-] (1) ($RES_SIM_6)
//   [----] if time >= 1.0 then
//   [----]   [SCAL] (1) v1 = 3.0 * time ($RES_SIM_7)
//   [----] else
//   [----]   [SCAL] (1) v1 = 2.0 + 3.0 * time ($RES_SIM_8)
//   [----] end if;
// [AFTER ]
//   [SCAL] (1) v1 = if time >= 1.0 then 3.0 * time else 2.0 + 3.0 * time ($RES_SIM_6)
//
// ### dumpSimplify | NBEquation.Equation.getResidualExp ###
// [BEFORE] 0.0 - v2 ^ 3.0
// [AFTER ] -v2 ^ 3.0
//
// ### dumpSimplify | NBSolve.solveBody ###
// [BEFORE] -3.0 * v2 ^ 2.0 * 1.0
// [AFTER ] -3.0 * v2 ^ 2.0
//
// ### dumpSimplify | NBSolve.solveBody ###
// [BEFORE] (-0.0) ^ (1/3.0)
// [AFTER ] 0.0
//
// {"SplitIf", "SplitIf_init.xml"}
// ""
// endResult
