// name: detectStates
// keywords: NewBackend
// status: correct

loadString("
  // model where there are no algebraics inside der() call
  // solution -> differentiate whats inside -> no index reduction
  model expandDerOperator1
    Real x,y,z;
  equation
    der(x) = sin(time);
    der(y) = cos(time);
    z = der(x+y);
  end expandDerOperator1;

  // model where there is one algebraic var inside der() call
  // solution -> differentiate whats inside -> no index reduction
  model expandDerOperator2
    Real x,y,z;
  equation
    der(x) = sin(time);
    y = cos(time);
    z = der(x+y);
  end expandDerOperator2;

  // IMPROVED TO OLD BACKEND
  // model where there is more than one algebraic var inside der() call
  // solution -> create auxiliary $AUX = x + y -> possibly no index reduction
  model expandDerOperator3
    Real x,y,z;
  equation
    x = sin(time) + z;
    y = cos(time);
    z = der(x+y);
  end expandDerOperator3;
"); getErrorString();

setCommandLineOptions("--newBackend -d=stateselection");
simulate(expandDerOperator1); getErrorString();
simulate(expandDerOperator2); getErrorString();
simulate(expandDerOperator3); getErrorString();

// Result:
// true
// ""
// true
// [stateselection] (2) Natural states before index reduction:
// *************************************************************
// 	[STAT] (1) Real x
// 	[STAT] (1) Real y
//
// [stateselection] State Order:
// *******************************
// 	(y --d/dt--> $FUN_2)
// 	(x --d/dt--> $FUN_1)
//
// record SimulationResult
//     resultFile = "expandDerOperator1_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-6, method = 'dassl', fileNamePrefix = 'expandDerOperator1', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// end SimulationResult;
// ""
// [stateselection] (2) Natural states before index reduction:
// *************************************************************
// 	[STAT] (1) Real y
// 	[STAT] (1) Real x
//
// [stateselection] State Order:
// *******************************
// 	(x --d/dt--> $FUN_1)
//
// [stateselection] (0) State Derivatives Created by Differentiation
// *******************************************************************
//
//
// [stateselection] (1) Selected Dummy States
// ********************************************
// 	[DSTA] (1) Real y;
//
// record SimulationResult
//     resultFile = "expandDerOperator2_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-6, method = 'dassl', fileNamePrefix = 'expandDerOperator2', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// end SimulationResult;
// ""
// [stateselection] (1) Natural states before index reduction:
// *************************************************************
// 	[STAT] (1) Real $AUX_0 = x + y
//
// [stateselection] (1) Created auxiliary equations:
// ***************************************************
// 	[SCAL] (1) $AUX_0 = x + y ($RES_$AUX_0)
//
// [stateselection] State Order:
// *******************************
// 	($AUX_0 --d/dt--> z)
//
// record SimulationResult
//     resultFile = "expandDerOperator3_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-6, method = 'dassl', fileNamePrefix = 'expandDerOperator3', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// end SimulationResult;
// ""
// endResult
