// name: simpleNonlinearLoop
// keywords: NewBackend
// status: correct

loadString("
model simpleNonlinearLoop
  Real x(start=1.0, nominal=1.0),y(start=1.0, nominal=1.0);
equation
  x = y^2 + sin(time);
  y = sin(x);
end simpleNonlinearLoop;
"); getErrorString();

setCommandLineOptions("--newBackend -d=bltdump");
simulate(simpleNonlinearLoop); getErrorString();

// Result:
// true
// ""
// true
// #################################################
//
// 	[ODE] Differential-Algebraic: (Causalize)
//
// #################################################
//
// ===========================
// CONTINUOUS 1 ODE System
// ===========================
//
// BLOCK 1: Single Strong Component (status = Solve.UNPROCESSED)
// ---------------------------------------------------------------
// ### Variable:
// 	Real $FUN_1
// ### Equation:
// 	[SCAL] (1) $FUN_1 = sin(time) ($RES_$AUX_3)
//
// BLOCK 2: Algebraic Loop (Linear = false, Mixed = false)
// ---------------------------------------------------------
// Strict Tearing Set
// ********************
// ### Iteration Variables:
// 	[ALGB] (1) Real y (start = 1.0, nominal = 1.0)
// 	 slice: {};
// 	[ALGB] (1) Real x (start = 1.0, nominal = 1.0)
// 	 slice: {};
// ### Residual Equations:
// 	[SCAL] (1) x = y ^ 2.0 + $FUN_1 ($RES_SIM_1)
// 	 slice: {};
// 	[SCAL] (1) y = sin(x) ($RES_$AUX_2)
// 	 slice: {};
// ### Inner Equations:
//
// #################################################
//
// 	[ODE] Differential-Algebraic: (Causalize)
//
// #################################################
//
// ===========================
// CONTINUOUS 1 ODE System
// ===========================
//
// BLOCK 1: Single Strong Component (status = Solve.UNPROCESSED)
// ---------------------------------------------------------------
// ### Variable:
// 	Real $FUN_1
// ### Equation:
// 	[SCAL] (1) $FUN_1 = sin(time) ($RES_$AUX_3)
//
// BLOCK 2: Algebraic Loop (Linear = false, Mixed = false)
// ---------------------------------------------------------
// Strict Tearing Set
// ********************
// ### Iteration Variables:
// 	[ALGB] (1) Real y (start = 1.0, nominal = 1.0)
// 	 slice: {};
// 	[ALGB] (1) Real x (start = 1.0, nominal = 1.0)
// 	 slice: {};
// ### Residual Equations:
// 	[SCAL] (1) x = y ^ 2.0 + $FUN_1 ($RES_SIM_1)
// 	 slice: {};
// 	[SCAL] (1) y = sin(x) ($RES_$AUX_2)
// 	 slice: {};
// ### Inner Equations:
//
// #########################################
//
// 	[INI] Initialization: (Causalize)
//
// #########################################
//
// ===========================
// CONTINUOUS 1 INI System
// ===========================
//
// BLOCK 1: Single Strong Component (status = Solve.UNPROCESSED)
// ---------------------------------------------------------------
// ### Variable:
// 	Real $FUN_1
// ### Equation:
// 	[SCAL] (1) $FUN_1 = sin(time) ($RES_$AUX_3)
//
// BLOCK 2: Algebraic Loop (Linear = false, Mixed = false)
// ---------------------------------------------------------
// Strict Tearing Set
// ********************
// ### Iteration Variables:
// 	[ALGB] (1) Real x (start = 1.0, nominal = 1.0)
// 	 slice: {};
// 	[ALGB] (1) Real y (start = 1.0, nominal = 1.0)
// 	 slice: {};
// ### Residual Equations:
// 	[SCAL] (1) x = y ^ 2.0 + $FUN_1 ($RES_SIM_1)
// 	 slice: {};
// 	[SCAL] (1) y = sin(x) ($RES_$AUX_2)
// 	 slice: {};
// ### Inner Equations:
//
// ################################
//
// 	[ALG] Algebraic: (Solve)
//
// ################################
//
// ===========================
// CONTINUOUS 1 ALG System
// ===========================
//
// --- Alias of INI[1 | 1] ---
// BLOCK 1: Single Strong Component (status = Solve.EXPLICIT)
// ------------------------------------------------------------
// ### Variable:
// 	Real $FUN_1
// ### Equation:
// 	[SCAL] (1) $FUN_1 = sin(time) ($RES_$AUX_3)
//
// BLOCK 2: Algebraic Loop (Linear = false, Mixed = false)
// ---------------------------------------------------------
// Strict Tearing Set
// ********************
// ### Iteration Variables:
// 	[ALGB] (1) Real y (start = 1.0, nominal = 1.0)
// 	 slice: {};
// 	[ALGB] (1) Real x (start = 1.0, nominal = 1.0)
// 	 slice: {};
// ### Residual Equations:
// 	[SCAL] (1) $RES_SIM_1 = (y ^ 2.0 + $FUN_1) - x ($RES_SIM_1)
// 	 slice: {};
// 	[SCAL] (1) $RES_$AUX_2 = sin(x) - y ($RES_$AUX_2)
// 	 slice: {};
// ### Inner Equations:
//
// #########################################
//
// 	[NLS] Jacobian ODE_NLS_JAC_1: NLS
//
// #########################################
//
// Partial Derivative Variables (2/2)
// ************************************
// (1)       [JVAR] (1) Real $pDER_ODE_NLS_JAC_1.$RES_$AUX_2
// (2)       [JVAR] (1) Real $pDER_ODE_NLS_JAC_1.$RES_SIM_1
//
// Seed Variables (2/2)
// **********************
// (1)       [SEED] (1) Real $SEED_ODE_NLS_JAC_1.x
// (2)       [SEED] (1) Real $SEED_ODE_NLS_JAC_1.y
//
// BLOCK 1: Single Strong Component (status = Solve.EXPLICIT)
// ------------------------------------------------------------
// ### Variable:
// 	Real $pDER_ODE_NLS_JAC_1.$RES_SIM_1
// ### Equation:
// 	[SCAL] (1) $pDER_ODE_NLS_JAC_1.$RES_SIM_1 = 2.0 * y * $SEED_ODE_NLS_JAC_1.y - $SEED_ODE_NLS_JAC_1.x ($RES_ODE_NLS_JAC_1_0)
//
// BLOCK 2: Single Strong Component (status = Solve.EXPLICIT)
// ------------------------------------------------------------
// ### Variable:
// 	Real $pDER_ODE_NLS_JAC_1.$RES_$AUX_2
// ### Equation:
// 	[SCAL] (1) $pDER_ODE_NLS_JAC_1.$RES_$AUX_2 = cos(x) * $SEED_ODE_NLS_JAC_1.x - $SEED_ODE_NLS_JAC_1.y ($RES_ODE_NLS_JAC_1_1)
//
// =============================
// Sparsity Pattern (nnz: 4)
// =============================
//
// ### Seeds (col vars) ###
// --------------------------
// {x, y}
//
// ### Partials (row vars) ###
// -----------------------------
// {$RES_$AUX_2, $RES_SIM_1}
//
// ### Columns ###
// -----------------
// (y)	 affects:	{$RES_SIM_1,$RES_$AUX_2}
// (x)	 affects:	{$RES_SIM_1,$RES_$AUX_2}
//
// ##### Rows #####
// ------------------
// ($RES_SIM_1)	 depends on:	{x,y}
// ($RES_$AUX_2)	 depends on:	{x,y}
//
// =====================
// Sparsity Coloring
// =====================
// Color (1)
//   - Column: {x}
//   - Row:    {}
//
// Color (2)
//   - Column: {y}
//   - Row:    {}
//
//
// #####################################
//
// 	[INI] Initialization: (Solve)
//
// #####################################
//
// ===========================
// CONTINUOUS 1 INI System
// ===========================
//
// BLOCK 1: Single Strong Component (status = Solve.EXPLICIT)
// ------------------------------------------------------------
// ### Variable:
// 	Real $FUN_1
// ### Equation:
// 	[SCAL] (1) $FUN_1 = sin(time) ($RES_$AUX_3)
//
// BLOCK 2: Algebraic Loop (Linear = false, Mixed = false)
// ---------------------------------------------------------
// Strict Tearing Set
// ********************
// ### Iteration Variables:
// 	[ALGB] (1) Real x (start = 1.0, nominal = 1.0)
// 	 slice: {};
// 	[ALGB] (1) Real y (start = 1.0, nominal = 1.0)
// 	 slice: {};
// ### Residual Equations:
// 	[SCAL] (1) $RES_SIM_1 = (y ^ 2.0 + $FUN_1) - x ($RES_SIM_1)
// 	 slice: {};
// 	[SCAL] (1) $RES_$AUX_2 = sin(x) - y ($RES_$AUX_2)
// 	 slice: {};
// ### Inner Equations:
//
// #########################################
//
// 	[NLS] Jacobian INI_NLS_JAC_1: NLS
//
// #########################################
//
// Partial Derivative Variables (2/2)
// ************************************
// (1)       [JVAR] (1) Real $pDER_INI_NLS_JAC_1.$RES_$AUX_2
// (2)       [JVAR] (1) Real $pDER_INI_NLS_JAC_1.$RES_SIM_1
//
// Seed Variables (2/2)
// **********************
// (1)       [SEED] (1) Real $SEED_INI_NLS_JAC_1.y
// (2)       [SEED] (1) Real $SEED_INI_NLS_JAC_1.x
//
// BLOCK 1: Single Strong Component (status = Solve.EXPLICIT)
// ------------------------------------------------------------
// ### Variable:
// 	Real $pDER_INI_NLS_JAC_1.$RES_SIM_1
// ### Equation:
// 	[SCAL] (1) $pDER_INI_NLS_JAC_1.$RES_SIM_1 = 2.0 * y * $SEED_INI_NLS_JAC_1.y - $SEED_INI_NLS_JAC_1.x ($RES_INI_NLS_JAC_1_0)
//
// BLOCK 2: Single Strong Component (status = Solve.EXPLICIT)
// ------------------------------------------------------------
// ### Variable:
// 	Real $pDER_INI_NLS_JAC_1.$RES_$AUX_2
// ### Equation:
// 	[SCAL] (1) $pDER_INI_NLS_JAC_1.$RES_$AUX_2 = cos(x) * $SEED_INI_NLS_JAC_1.x - $SEED_INI_NLS_JAC_1.y ($RES_INI_NLS_JAC_1_1)
//
// =============================
// Sparsity Pattern (nnz: 4)
// =============================
//
// ### Seeds (col vars) ###
// --------------------------
// {y, x}
//
// ### Partials (row vars) ###
// -----------------------------
// {$RES_$AUX_2, $RES_SIM_1}
//
// ### Columns ###
// -----------------
// (x)	 affects:	{$RES_SIM_1,$RES_$AUX_2}
// (y)	 affects:	{$RES_SIM_1,$RES_$AUX_2}
//
// ##### Rows #####
// ------------------
// ($RES_SIM_1)	 depends on:	{x,y}
// ($RES_$AUX_2)	 depends on:	{x,y}
//
// =====================
// Sparsity Coloring
// =====================
// Color (1)
//   - Column: {y}
//   - Row:    {}
//
// Color (2)
//   - Column: {x}
//   - Row:    {}
//
//
// record SimulationResult
//     resultFile = "simpleNonlinearLoop_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'simpleNonlinearLoop', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// end SimulationResult;
// ""
// endResult
