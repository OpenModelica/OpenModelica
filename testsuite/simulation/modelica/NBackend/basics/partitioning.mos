// name: partitioning
// keywords: NewBackend
// status: correct


loadString("
model partitioning
  Real x,y,z,k;
  parameter Real a = 1.0;
equation
  k = cos(time);
  z = a^2 * k;
  y = x^2 + a;
  der(x) = sin(time);
end partitioning;

"); getErrorString();

setCommandLineOptions("--newBackend -d=dumpSynchronous"); getErrorString();

simulate(partitioning); getErrorString();

val(x, 1);

// Result:
// true
// ""
// true
// ""
// ##############################################
//
// 	[dumpSynchronous] Partitioning result:
//
// ##############################################
//
// ===========================
// CONTINUOUS 1 ODE System
// ===========================
//
// Unknown Variables (2/2)
// *************************
// (1)       [ALGB] (1) Real z
// (2)       [ALGB] (1) Real k
//
//
// Equations Equations (2/2)
// ***************************
// (1)       [SCAL] (1) z = a ^ 2.0 * k ($RES_SIM_2)
// (2)       [SCAL] (1) k = cos(time) ($RES_$AUX_5)
//
//
//
// ===========================
// CONTINUOUS 2 ODE System
// ===========================
//
// Unknown Variables (3/3)
// *************************
// (1)       [ALGB] (1) Real y
// (2)       [ALGB] (1) Real $FUN_2
// (3)       [DER-] (1) Real $DER.x
//
//
// Equations Equations (3/3)
// ***************************
// (1)       [SCAL] (1) y = x ^ 2.0 + a ($RES_SIM_1)
// (2)       [SCAL] (1) $DER.x = $FUN_2 ($RES_SIM_0)
// (3)       [SCAL] (1) $FUN_2 = sin(time) ($RES_$AUX_4)
//
//
//
// record SimulationResult
//     resultFile = "partitioning_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-6, method = 'dassl', fileNamePrefix = 'partitioning', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// end SimulationResult;
// ""
// 0.45969220091667
// endResult
