// name: function_diff
// keywords: NewBackend
// status: correct

loadString("
model diff_func_test
  Real x;
  Real y;
  Real z;
equation
  y = sin(x);
  der(x) = f(y);
  der(z) = f(x);
end diff_func_test;

function f
  input Real a;
  output Real b;
algorithm
  if a >= 0 then
    b := a^2;
  else
    b := f(-a);
  end if;
  annotation(Inline=false);
end f;
"); getErrorString();

setCommandLineOptions("--newBackend -d=debugDifferentiation"); getErrorString();
simulate(diff_func_test); getErrorString();
// Result:
// true
// ""
// true
// ""
// ### debugDifferentiation | NBJacobian.jacobianSymbolic ###
// [BEFORE] [SCAL] (1) y = sin(x) ($RES_SIM_2)
// [AFTER ] [SCAL] (1) $pDER_ODE_JAC.y = cos(x) * $SEED_ODE_JAC.x ($RES_SIM_2)
//
// ### debugDifferentiation | NBJacobian.jacobianSymbolic ###
// [BEFORE] [SCAL] (1) $DER.x = f(y) ($RES_SIM_1)
//
// [BEFORE] function 'f'
//   input Real 'a';
//   output Real 'b';
// algorithm
//   if 'a' >= 0.0 then
//     'b' := 'a' ^ 2.0;
//   elseif true then
//     'b' := 'f'(-'a');
//   end if;
//   annotation(derivative(order = 1) = '$fDER.f', Inline = false);
// end 'f'
//
// [AFTER]  function '$fDER.f'
//   input Real 'a';
//   input Real '$fDER_a';
//   output Real '$fDER_b';
// algorithm
//   if 'a' >= 0.0 then
//     '$fDER_b' := 2.0 * a ^ 1.0 * $fDER_a;
//   elseif true then
//     '$fDER_b' := '$fDER.f'(-'a', -'$fDER_a');
//   end if;
//   annotation(Inline = false);
// end '$fDER.f'
//
// [AFTER ] [SCAL] (1) $pDER_ODE_JAC.$DER.x = $fDER.f(y, $pDER_ODE_JAC.y) ($RES_SIM_1)
//
// ### debugDifferentiation | NBJacobian.jacobianSymbolic ###
// [BEFORE] [SCAL] (1) $DER.z = f(x) ($RES_SIM_0)
// [AFTER ] [SCAL] (1) $pDER_ODE_JAC.$DER.z = $fDER.f(x, $SEED_ODE_JAC.x) ($RES_SIM_0)
//
// record SimulationResult
//     resultFile = "diff_func_test_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'diff_func_test', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// end SimulationResult;
// ""
// endResult
