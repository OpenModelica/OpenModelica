// name: builtin_functions
// keywords: NewBackend
// status: correct

// kabdelhak: the derivatives are already working but
// the concept of array sparsity pattern is not yet introduced!

loadString("
model builtin_functions
  Real y;
  Real[14] x(each start=0.0, each fixed=true);
equation
  y = abs(x[2]);
  der(x[1]) = sqrt(y);
  der(x[2]) = sin(y);
  der(x[3]) = cos(y);
  der(x[4]) = tan(y);
  der(x[5]) = asin(y);
  der(x[6]) = acos(y);
  der(x[7]) = atan(y);
  der(x[8]) = sinh(y);
  der(x[9]) = cosh(y);
  der(x[10]) = tanh(y);
  der(x[11]) = exp(y);
  der(x[12]) = log(y+1);
  der(x[13]) = log10(y+1);
  der(x[14]) = atan2(y, x[1]);
end builtin_functions;

"); getErrorString();

setCommandLineOptions("--newBackend -d=symjacdump"); getErrorString();
simulate(builtin_functions); getErrorString();
// Result:
// true
// ""
// true
// ""
// ################################################################################
//
// 	[symjacdump] Creating symbolic Jacobians:
//
// ################################################################################
//
// ========================================
// CONTINUOUS 1 ODE System
// ========================================
//
// BLOCK 1: Single Equation (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
// 	Real y
// ### Equation:
// 	[SCAL] (1) y = abs(x[2]) ($RES_SIM_14)
//
// BLOCK 2: Sliced Equation (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
// 	$DER.x[1]
// ### Equation:
// 	[SCAL] (1) $DER.x[1] = sqrt(y) ($RES_SIM_13)
//
// BLOCK 3: Sliced Equation (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
// 	$DER.x[2]
// ### Equation:
// 	[SCAL] (1) $DER.x[2] = sin(y) ($RES_SIM_12)
//
// BLOCK 4: Sliced Equation (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
// 	$DER.x[3]
// ### Equation:
// 	[SCAL] (1) $DER.x[3] = cos(y) ($RES_SIM_11)
//
// BLOCK 5: Sliced Equation (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
// 	$DER.x[4]
// ### Equation:
// 	[SCAL] (1) $DER.x[4] = tan(y) ($RES_SIM_10)
//
// BLOCK 6: Sliced Equation (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
// 	$DER.x[5]
// ### Equation:
// 	[SCAL] (1) $DER.x[5] = asin(y) ($RES_SIM_9)
//
// BLOCK 7: Sliced Equation (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
// 	$DER.x[6]
// ### Equation:
// 	[SCAL] (1) $DER.x[6] = acos(y) ($RES_SIM_8)
//
// BLOCK 8: Sliced Equation (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
// 	$DER.x[7]
// ### Equation:
// 	[SCAL] (1) $DER.x[7] = atan(y) ($RES_SIM_7)
//
// BLOCK 9: Sliced Equation (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
// 	$DER.x[8]
// ### Equation:
// 	[SCAL] (1) $DER.x[8] = sinh(y) ($RES_SIM_6)
//
// BLOCK 10: Sliced Equation (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
// 	$DER.x[9]
// ### Equation:
// 	[SCAL] (1) $DER.x[9] = cosh(y) ($RES_SIM_5)
//
// BLOCK 11: Sliced Equation (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
// 	$DER.x[10]
// ### Equation:
// 	[SCAL] (1) $DER.x[10] = tanh(y) ($RES_SIM_4)
//
// BLOCK 12: Sliced Equation (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
// 	$DER.x[11]
// ### Equation:
// 	[SCAL] (1) $DER.x[11] = exp(y) ($RES_SIM_3)
//
// BLOCK 13: Sliced Equation (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
// 	$DER.x[12]
// ### Equation:
// 	[SCAL] (1) $DER.x[12] = log(1.0 + y) ($RES_SIM_2)
//
// BLOCK 14: Sliced Equation (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
// 	$DER.x[13]
// ### Equation:
// 	[SCAL] (1) $DER.x[13] = log10(1.0 + y) ($RES_SIM_1)
//
// BLOCK 15: Sliced Equation (status = Solve.EXPLICIT)
// ----------------------------------------
// ### Variable:
// 	$DER.x[14]
// ### Equation:
// 	[SCAL] (1) $DER.x[14] = atan2(y, x[1]) ($RES_SIM_0)
//
// ========================================
// [SIM] Jacobian ODE_JAC:
// ========================================
//
// Result Equations (15/15)
// ****************************************
// (1)       [SCAL] (1) $pDER_ODE_JAC.y = sign(x[2]) * $SEED_ODE_JAC.x[2] ($RES_ODE_JAC_0)
// (2)       [SCAL] (1) $pDER_ODE_JAC.$DER.x[1] = 0.5 / y ^ 0.5 * $pDER_ODE_JAC.y ($RES_ODE_JAC_1)
// (3)       [SCAL] (1) $pDER_ODE_JAC.$DER.x[2] = cos(y) * $pDER_ODE_JAC.y ($RES_ODE_JAC_2)
// (4)       [SCAL] (1) $pDER_ODE_JAC.$DER.x[3] = -sin(y) * $pDER_ODE_JAC.y ($RES_ODE_JAC_3)
// (5)       [SCAL] (1) $pDER_ODE_JAC.$DER.x[4] = 1/cos(y) ^ 2.0 * $pDER_ODE_JAC.y ($RES_ODE_JAC_4)
// (6)       [SCAL] (1) $pDER_ODE_JAC.$DER.x[5] = 1/(1.0 - y ^ 2.0) ^ 0.5 * $pDER_ODE_JAC.y ($RES_ODE_JAC_5)
// (7)       [SCAL] (1) $pDER_ODE_JAC.$DER.x[6] = -1/(1.0 - y ^ 2.0) ^ 0.5 * $pDER_ODE_JAC.y ($RES_ODE_JAC_6)
// (8)       [SCAL] (1) $pDER_ODE_JAC.$DER.x[7] = 1/1.0 + y ^ 2.0 * $pDER_ODE_JAC.y ($RES_ODE_JAC_7)
// (9)       [SCAL] (1) $pDER_ODE_JAC.$DER.x[8] = cosh(y) * $pDER_ODE_JAC.y ($RES_ODE_JAC_8)
// (10)      [SCAL] (1) $pDER_ODE_JAC.$DER.x[9] = sinh(y) * $pDER_ODE_JAC.y ($RES_ODE_JAC_9)
// (11)      [SCAL] (1) $pDER_ODE_JAC.$DER.x[10] = (1.0 - tanh(y) ^ 2.0) * $pDER_ODE_JAC.y ($RES_ODE_JAC_10)
// (12)      [SCAL] (1) $pDER_ODE_JAC.$DER.x[11] = exp(y) * $pDER_ODE_JAC.y ($RES_ODE_JAC_11)
// (13)      [SCAL] (1) $pDER_ODE_JAC.$DER.x[12] = 1/1.0 + y * $pDER_ODE_JAC.y ($RES_ODE_JAC_12)
// (14)      [SCAL] (1) $pDER_ODE_JAC.$DER.x[13] = 0.4342944819032518 / 1.0 + y * $pDER_ODE_JAC.y ($RES_ODE_JAC_13)
// (15)      [SCAL] (1) $pDER_ODE_JAC.$DER.x[14] = y / y ^ 2.0 + x[1] ^ 2.0 * $SEED_ODE_JAC.x[1] - x[1] / y ^ 2.0 + x[1] ^ 2.0 * $pDER_ODE_JAC.y ($RES_ODE_JAC_14)
//
//
// ========================================
// Sparsity Pattern (nnz: 0)
// ========================================
//
// ### Columns ###
// ----------------------------------------
// (x)	 affects:	{}
//
// Sparsity Coloring Groups
// ----------------------------------------
// {x}
//
// record SimulationResult
//     resultFile = "",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'builtin_functions', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "Failed to build model: builtin_functions"
// end SimulationResult;
// "Error: Internal error NBInitialization.main failed!
// Error: Internal error UnorderedMap.getSafe failed because the key did not exist.
// Error: Internal error NSimJacobian.SimJacobian.createSparsityPattern failed to get index for cref: x
// "
// endResult
