// name: record_inlining
// keywords: NewBackend
// status: correct

loadModel(Complex); getErrorString();

loadString("
  model record_inlining
    Complex a,b,c,d;
  equation
    a = Complex(sin(time), cos(time));
    b = Complex(time, tan(time));
    c = a * b;
    d = a^b;
  end record_inlining;
"); getErrorString();

setCommandLineOptions("--newBackend -d=dumpBackendInline"); getErrorString();

simulate(record_inlining); getErrorString();

// Result:
// true
// ""
// true
// ""
// true
// ""
// [dumpBackendInline] Inlining operatations for: {NORMAL, BUILTIN_EARLY, EARLY, DEFAULT}
// ****************************************************************************************
// [NBReplacements.applyFuncExp] Inlining: Complex.'*'.multiply(a, b)
// -- Result: Complex.'constructor'.fromReal(a.re * b.re - a.im * b.im, a.re * b.im + a.im * b.re)
//
// [NBReplacements.applyFuncExp] Inlining: Complex.'^'(a, b)
// -- Result: Complex.'constructor'.fromReal(exp(0.5 * log(a.re * a.re + a.im * a.im) * b.re - atan2(a.im, a.re) * b.im) * cos(0.5 * log(a.re * a.re + a.im * a.im) * b.im + atan2(a.im, a.re) * b.re), exp(0.5 * log(a.re * a.re + a.im * a.im) * b.re - atan2(a.im, a.re) * b.im) * sin(0.5 * log(a.re * a.re + a.im * a.im) * b.im + atan2(a.im, a.re) * b.re))
//
// [NBInline.inlineRecordEquation] Inlining: [RECD] (2) a = Complex.'constructor'.fromReal(sin(time), cos(time)) ($RES_SIM_3)
// -- Result: [SCAL] (1) a.re = sin(time) ($RES_SIM_4)
// -- Result: [SCAL] (1) a.im = cos(time) ($RES_SIM_5)
//
// [NBInline.inlineRecordEquation] Inlining: [RECD] (2) b = Complex.'constructor'.fromReal(time, tan(time)) ($RES_SIM_2)
// -- Result: [SCAL] (1) b.re = time ($RES_SIM_6)
// -- Result: [SCAL] (1) b.im = tan(time) ($RES_SIM_7)
//
// [NBInline.inlineRecordEquation] Inlining: [RECD] (2) c = Complex.'constructor'.fromReal(a.re * b.re - a.im * b.im, a.re * b.im + a.im * b.re) ($RES_SIM_1)
// -- Result: [SCAL] (1) c.re = a.re * b.re - a.im * b.im ($RES_SIM_8)
// -- Result: [SCAL] (1) c.im = a.re * b.im + a.im * b.re ($RES_SIM_9)
//
// [NBInline.inlineRecordEquation] Inlining: [RECD] (2) d = Complex.'constructor'.fromReal(exp(0.5 * log(a.re * a.re + a.im * a.im) * b.re - atan2(a.im, a.re) * b.im) * cos(0.5 * log(a.re * a.re + a.im * a.im) * b.im + atan2(a.im, a.re) * b.re), exp(0.5 * log(a.re * a.re + a.im * a.im) * b.re - atan2(a.im, a.re) * b.im) * sin(0.5 * log(a.re * a.re + a.im * a.im) * b.im + atan2(a.im, a.re) * b.re)) ($RES_SIM_0)
// -- Result: [SCAL] (1) d.re = exp(0.5 * log(a.re * a.re + a.im * a.im) * b.re - atan2(a.im, a.re) * b.im) * cos(0.5 * log(a.re * a.re + a.im * a.im) * b.im + atan2(a.im, a.re) * b.re) ($RES_SIM_10)
// -- Result: [SCAL] (1) d.im = exp(0.5 * log(a.re * a.re + a.im * a.im) * b.re - atan2(a.im, a.re) * b.im) * sin(0.5 * log(a.re * a.re + a.im * a.im) * b.im + atan2(a.im, a.re) * b.re) ($RES_SIM_11)
//
//
// [dumpBackendInline] Inlining operatations for: {AFTER_INDEX_RED}
// ******************************************************************
//
// record SimulationResult
//     resultFile = "record_inlining_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'record_inlining', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// end SimulationResult;
// ""
// endResult
