// name: solveMultaryBinary
// keywords: NewBackend
// status: correct
// cflags: --newBackend -d=dumpSolve

loadString("
  model solveMultaryBinary
    Real x;
  equation
    3 = 2 * (time - 4 + 3 * x^2);
  end solveMultaryBinary;
"); getErrorString();

setCommandLineOptions("-d=dumpSolve");
simulate(solveMultaryBinary); getErrorString();
// Result:
// true
// ""
// true
//
// ##########################################
// START - Solve
//
// Solve Input:
// ### Variable:
// 	x
// ### Equation:
// 	[SCAL] (1) 3.0 = 2.0 * ((-4.0) + time + 3.0 * x ^ 2.0) ($RES_SIM_0)
//
// SolveUnique Instructions (substitute from top to bottom):
// 	0 (is initial)
// 	$SUBST_CREF - (-3.0)
// 	$SUBST_CREF / 2.0
// 	$SUBST_CREF - (time + (-4.0))
// 	$SUBST_CREF / 3.0
// 	$SUBST_CREF ^ (1/2.0)
// ### Status:
// 	Solve.EXPLICIT
//
// Solve Output:
// ### Status:
// 	Solve.EXPLICIT
// ### Equation:
// 	[SCAL] (1) x = (0.3333333333333333 * (5.5 - time)) ^ 0.5 ($RES_SIM_0)
//
// END - Solve
// ##########################################
//
// record SimulationResult
//     resultFile = "solveMultaryBinary_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-6, method = 'dassl', fileNamePrefix = 'solveMultaryBinary', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// end SimulationResult;
// ""
// endResult
