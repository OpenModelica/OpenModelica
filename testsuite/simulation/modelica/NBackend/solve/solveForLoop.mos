// name: solveForLoop
// keywords: NewBackend
// status: correct
// cflags: --newBackend -d=dumpSolve

loadString("
  model solveForLoop
    parameter Integer n = 2;
    Real[n] y;
  equation
    for i in 1:n loop
      0 = 2^(time) + (1 + time)^8 * y[i]^5 - 2 * i^n;
    end for;
  end solveForLoop;
"); getErrorString();

setCommandLineOptions("");
simulate(solveForLoop); getErrorString();
// Result:
// true
// ""
// true
//
// ##########################################
// START - Solve
//
// Solve Input:
// ### Variable:
// 	y[$i1]
// ### Equation:
// 	[SCAL] (1) 0.0 = ((1.0 + time) ^ 8.0 * y[$i1] ^ 5.0 + 2.0 ^ time) - 2.0 * $i1 ^ 2.0 ($RES_SIM_1)
//
// SolveUnique Instructions (substitute from top to bottom):
// 	0 (is initial)
// 	($SUBST_CREF + 2.0 * $i1 ^ 2.0) - 2.0 ^ time
// 	$SUBST_CREF / (1.0 + time) ^ 8.0
// 	$SUBST_CREF ^ (1/5.0)
// ### Status:
// 	Solve.EXPLICIT
//
// Solve Output:
// ### Status:
// 	Solve.EXPLICIT
// ### Equation:
// 	[SCAL] (1) y[$i1] = ((2.0 * $i1 ^ 2.0 - 2.0 ^ time) / (1.0 + time) ^ 8.0) ^ 0.2 ($RES_SIM_1)
//
// END - Solve
// ##########################################
//
// record SimulationResult
//     resultFile = "solveForLoop_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-6, method = 'dassl', fileNamePrefix = 'solveForLoop', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// end SimulationResult;
// ""
// endResult
