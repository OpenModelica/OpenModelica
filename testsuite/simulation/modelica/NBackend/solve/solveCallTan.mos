// name: solveCallTan
// keywords: NewBackend
// status: correct
// cflags: --newBackend -d=dumpSolve

loadString("
  model solveCallTan
    Real x;
  equation
    tanh(x) = 0.5 + 2 * time;
  end solveCallTan;
"); getErrorString();

setCommandLineOptions("-d=dumpSolve");
simulate(solveCallTan); getErrorString();
// Result:
// true
// ""
// true
//
// ##########################################
// START - Solve
//
// Solve Input:
// ### Variable:
// 	$FUN_1
// ### Equation:
// 	[SCAL] (1) $FUN_1 = 0.5 + 2.0 * time ($RES_SIM_0)
//
// Solve Output:
// ### Status:
// 	Solve.EXPLICIT
// ### Equation:
// 	[SCAL] (1) $FUN_1 = 0.5 + 2.0 * time ($RES_SIM_0)
//
// END - Solve
// ##########################################
//
//
// ##########################################
// START - Solve
//
// Solve Input:
// ### Variable:
// 	x
// ### Equation:
// 	[SCAL] (1) 0.5 + 2.0 * time = tanh(x) ($RES_AUX_1)
//
// SolveUnique Instructions (substitute from top to bottom):
// 	0 (is initial)
// 	$SUBST_CREF + (0.5 + 2.0 * time)
// 	atanh($SUBST_CREF)
// ### Status:
// 	Solve.EXPLICIT
//
// Solve Output:
// ### Status:
// 	Solve.EXPLICIT
// ### Equation:
// 	[SCAL] (1) x = atanh(0.5 + 2.0 * time) ($RES_AUX_1)
//
// END - Solve
// ##########################################
//
// record SimulationResult
//     resultFile = "solveCallTan_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-6, method = 'dassl', fileNamePrefix = 'solveCallTan', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// end SimulationResult;
// ""
// endResult
