// name: wrapFunctionCalls11
// keywords: cse, wrapFunctionCalls
// status: correct
// cflags: -d=-newInst

loadString("
package CSE
  model wrapFunctionCalls11
    Real x, y, z, a, b, c;
    parameter Real p1 = 5;
  equation
    x = sin(y);
    x = cos(z);
    z = 2 * p1;
    a = sin(b);
    b = cos(c);
    c = 2 * p1;
  end wrapFunctionCalls11;
end CSE;
"); getErrorString();

setCommandLineOptions("--preOptModules-=clockPartitioning -d=dumpCSE"); getErrorString();
simulate(CSE.wrapFunctionCalls11); getErrorString();


// Result:
// true
// ""
// true
// ""
//
//
//
// ###############################################################
// Final Results
// ###############################################################
//
// ########### Updated Variable List (jacobian) (2)
// ========================================
// 1: $res_NLSJac0_1.$pDERNLSJac0.dummyVarNLSJac0:VARIABLE()  type: Real unreplaceable
// 2: $cse1:VARIABLE(protected = true )  type: Real unreplaceable
//
//
// ########### Updated Equation List (jacobian) (2, 2)
// ========================================
// 1/1 (1): $res_NLSJac0_1.$pDERNLSJac0.dummyVarNLSJac0 = $cse1 * y.SeedNLSJac0   [dynamic |0|0|0|0|]
// 2/2 (1): $cse1 = cos(y)   [unknown |0|0|0|0|]
//
//
// ########### Updated globalKnownVars (jacobian) (2)
// ========================================
// 1: $res_NLSJac0_1:VARIABLE()  type: Real
// 2: input y.SeedNLSJac0:STATE_DER()  type: Real unreplaceable
//
//
// ########### CSE Replacements (1/43)
// ========================================
// 1: $cse1 - cos(y) - {}
//
//
//
// ###############################################################
// Final Results
// ###############################################################
//
// ########### Updated Variable List (simulation) (4)
// ========================================
// 1: b:VARIABLE()  type: Real
// 2: a:VARIABLE()  type: Real
// 3: y:VARIABLE()  type: Real
// 4: x:VARIABLE()  type: Real
//
//
// ########### Updated Equation List (simulation) (4, 4)
// ========================================
// 1/1 (1): b = cos(c)   [unknown |0|0|0|0|]
// 2/2 (1): a = sin(b)   [unknown |0|0|0|0|]
// 3/3 (1): x = cos(z)   [unknown |0|0|0|0|]
// 4/4 (1): x = sin(y)   [unknown |0|0|0|0|]
//
//
// ########### Updated globalKnownVars (simulation) (3)
// ========================================
// 1: z:VARIABLE(fixed = true )  = 2.0 * p1  type: Real
// 2: c:VARIABLE(fixed = true )  = 2.0 * p1  type: Real
// 3: p1:PARAM()  = 5.0  type: Real
//
//
// ########### CSE Replacements (4/46)
// ========================================
// 1: x - sin(y) - {}
// 2: x - cos(z) - {}
// 3: a - sin(b) - {}
// 4: b - cos(c) - {}
//
//
//
// ###############################################################
// Final Results
// ###############################################################
//
// ########### Updated Variable List (jacobian) (2)
// ========================================
// 1: $res_NLSJac1_1.$pDERNLSJac1.dummyVarNLSJac1:VARIABLE()  type: Real unreplaceable
// 2: $cse2:VARIABLE(protected = true )  type: Real unreplaceable
//
//
// ########### Updated Equation List (jacobian) (2, 2)
// ========================================
// 1/1 (1): $res_NLSJac1_1.$pDERNLSJac1.dummyVarNLSJac1 = $cse2 * y.SeedNLSJac1   [unknown |0|0|0|0|]
// 2/2 (1): $cse2 = cos(y)   [unknown |0|0|0|0|]
//
//
// ########### Updated globalKnownVars (jacobian) (2)
// ========================================
// 1: $res_NLSJac1_1:VARIABLE()  type: Real
// 2: input y.SeedNLSJac1:STATE_DER()  type: Real unreplaceable
//
//
// ########### CSE Replacements (1/43)
// ========================================
// 1: $cse2 - cos(y) - {}
// record SimulationResult
//     resultFile = "CSE.wrapFunctionCalls11_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'CSE.wrapFunctionCalls11', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// end SimulationResult;
// ""
// endResult
