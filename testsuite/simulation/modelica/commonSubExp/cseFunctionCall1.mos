// name: cseFunctionCall1
// keywords: cse
// status: correct

loadString("
package CSE
  package functions
    function f1
      input Real x1;
      input Real x2;
      output Real y;
    protected
      Integer z;
    algorithm
      y := if x1>x2 then sin(x1) else cos(x2);
      z := integer(ceil(y));
      for i in 1:z loop
        y := y+x1*x2;
      end for;
    end f1;
  end functions;
  
  model FunctionCallTest1
    import CSE.functions.*;
    Real x,y,z;
  equation
    x = sin(time*cos(time));
    der(y) = f1(time, x);
    der(z) = f1(time, x);
  end FunctionCallTest1;

end CSE;
"); getErrorString();

setDebugFlags("dumpCSE"); getErrorString();
setCommandLineOptions("--postOptModules+=wrapFunctionCalls"); getErrorString();
simulate(CSE.FunctionCallTest1); getErrorString();

// Result:
// true
// ""
// true
// ""
// true
// ""
//
//
//
// ###############################################################
// Final Results
// ###############################################################
//
// ########### Updated Variable List (simulation) (5)
// ========================================
// 1: z:STATE(1)(fixed = true )  type: Real
// 2: y:STATE(1)(fixed = true )  type: Real
// 3: x:VARIABLE()  type: Real
// 4: $cse2:VARIABLE(protected = true )  type: Real unreplaceable
// 5: $cse1:VARIABLE(protected = true )  type: Real unreplaceable
//
//
// ########### Updated Equation List (simulation) (5, 5)
// ========================================
// 1/1 (1): der(y) = $cse2   [dynamic |0|0|0|0|]
// 2/2 (1): der(z) = $cse2   [dynamic |0|0|0|0|]
// 3/3 (1): $cse2 = CSE.functions.f1(time, x)   [unknown |0|0|0|0|]
// 4/4 (1): $cse1 = cos(time)   [unknown |0|0|0|0|]
// 5/5 (1): x = sin(time * $cse1)   [unknown |0|0|0|0|]
//
//
// ########### CSE Replacements (3/45)
// ========================================
// 1: x - sin(time * $cse1) - {}
// 2: $cse1 - cos(time) - {}
// 3: $cse2 - CSE.functions.f1(time, x) - {}
// record SimulationResult
//     resultFile = "CSE.FunctionCallTest1_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'CSE.FunctionCallTest1', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// end SimulationResult;
// "Warning: The initial conditions are not fully specified. For more information set -d=initialization. In OMEdit Tools->Options->Simulation->OMCFlags, in OMNotebook call setCommandLineOptions(\"-d=initialization\").
// "
// endResult
