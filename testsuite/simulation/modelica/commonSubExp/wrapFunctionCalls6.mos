// name: wrapFunctionCalls6
// keywords: cse, wrapFunctionCalls
// status: correct
// cflags: -d=-newInst

loadString("
package CSE
  model wrapFunctionCalls6
    function f1
      input Real x1;
      output Real y1;
      output Real y2;
      output Real y3;
    algorithm
      y1 := x1;
      y2 := x1 + y1;
      y1 := y2+1.0;
      y2 := x1 * y2;
      y3 := x1 * y2 + y1;
    end f1;

    Real b, c, x;
    parameter Real p1 = 5;
  equation
    b = f1(time).y2;
    x = 2*p1;
    c = f1(x).y2;
  end wrapFunctionCalls6;
end CSE;
"); getErrorString();

setCommandLineOptions("--postOptModules+=wrapFunctionCalls --preOptModules-=clockPartitioning -d=dumpCSE"); getErrorString();
simulate(CSE.wrapFunctionCalls6); getErrorString();

// Result:
// true
// ""
// true
// ""
//
//
//
// ###############################################################
// Final Results
// ###############################################################
//
// ########### Updated Variable List (simulation) (1)
// ========================================
// 1: b:VARIABLE()  type: Real 
//
//
// ########### Updated Equation List (simulation) (1, 1)
// ========================================
// 1/1 (1): (_, b, _) = CSE.wrapFunctionCalls6.f1(time)   [unknown |0|0|0|0|]
//
//
// ########### Updated globalKnownVars (simulation) (3)
// ========================================
// 1: x:VARIABLE(fixed = true )  = 2.0 * p1  type: Real 
// 2: p1:PARAM()  = 5.0  type: Real 
// 3: c in (_, c, _):VARIABLE(fixed = true )  = CSE.wrapFunctionCalls6.f1(x)  type: Real 
//
//
// ########### CSE Replacements (2/44)
// ========================================
// 1: (_, b, _) - CSE.wrapFunctionCalls6.f1(time) - {}
// 2: (_, c, _) - CSE.wrapFunctionCalls6.f1(x) - {}
// record SimulationResult
//     resultFile = "CSE.wrapFunctionCalls6_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'CSE.wrapFunctionCalls6', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// end SimulationResult;
// ""
// endResult
