// name: EventClockAndClassic
// keywords: synchronous clocked equations event clock subclock
// status: correct
// cflags: --std=3.3

loadModel(Modelica);getErrorString();
loadFile("EventClockAndClassic.mo");getErrorString();

setCommandLineOptions("+simCodeTarget=Cpp"); getErrorString();
setCommandLineOptions("-d=dumpSynchronous"); getErrorString();

simulate(EventClockAndClassic);getErrorString();
val(count1, 1.0);
val(count1Shift, 1.0);
val(count2, 1.0);
// Result:
// true
// ""
// true
// ""
// true
// ""
// true
// ""
// synchronous features pre-phase: synchronousFeatures
//
//
// ########################################
// clock partitioning (3 partitions)
// ########################################
//
//
// continuous time partition
// ========================================
//
// Variables (3)
// ========================================
// 1: count2:DISCRETE()  type: Integer
// 2: condition:DISCRETE()  type: Boolean
// 3: f:VARIABLE()  type: Real
//
//
// Equations (3, 3)
// ========================================
// 1/1 (1): f = cos(5.0 * time * 3.141592653589793)   [binding |0|0|0|0|]
// 2/2 (1): condition = f > 0.0   [binding |0|0|0|0|]
// 3/3 (1): when condition then
//   count2 := 1 + pre(count2);
// end when;   [dynamic |0|0|0|0|]
//
//
// no matching
//
//
// clocked partition(1)
// ========================================
//
// Variables (1)
// ========================================
// 1: count1:DISCRETE(start = 0 )  type: Integer
//
//
// Equations (1, 1)
// ========================================
// 1/1 (1): count1 = 1 + previous(count1)   [dynamic |0|0|0|0|]
//
//
// no matching
//
//
// clocked partition(2)
// ========================================
//
// Variables (1)
// ========================================
// 1: count1Shift:DISCRETE(start = 0 )  type: Integer
//
//
// Equations (1, 1)
// ========================================
// 1/1 (1): count1Shift = 1 + previous(count1Shift)   [dynamic |0|0|0|0|]
//
//
// no matching
//
//
//
// Base clocks (1)
// ========================================
// 1: Clock(condition, 0.0)[2]
//
//
// Sub clocks (2)
// ========================================
// 1: factor(1/1) shift(0/1)  event(false)
// 2: factor(1/1) shift(1/1)  event(false)
//
// synchronous features post-phase: synchronousFeatures
//
//
// ########################################
// clock partitioning (3 partitions)
// ########################################
//
//
// unspecified partition
// ========================================
//
// Variables (4)
// ========================================
// 1: count2:DISCRETE()  type: Integer
// 2: condition:DISCRETE()  type: Boolean
// 3: f:VARIABLE()  type: Real
// 4: $whenCondition1:DISCRETE(fixed = true protected = true )  "condition" type: Boolean unreplaceable
//
//
// Equations (4, 4)
// ========================================
// 1/1 (1): f = cos(5.0 * time * 3.141592653589793)   [binding |0|0|0|0|]
// 2/2 (1): condition = f > 0.0   [binding |0|0|0|0|]
// 3/3 (1): when $whenCondition1 then
//   count2 := 1 + pre(count2);
// end when;   [dynamic |0|0|0|0|]
// 4/4 (1): $whenCondition1 = condition   [dynamic |0|0|0|0|]
//
//
// Matching
// ========================================
// 4 variables and equations
// var 1 is solved in eqn 3
// var 2 is solved in eqn 2
// var 3 is solved in eqn 1
// var 4 is solved in eqn 4
//
//
// StrongComponents
// ========================================
// {1:3}
// {2:2}
// {4:4}
// WhenEquation  {3:1}
//
//
// clocked partition(1)
// ========================================
//
// Variables (1)
// ========================================
// 1: count1:CLOCKED_STATE(start = 0 fixed = true )  type: Integer
//
//
// Equations (1, 1)
// ========================================
// 1/1 (1): count1 = 1 + previous(count1)   [dynamic |0|0|0|0|]
//
//
// no matching
//
//
// clocked partition(2)
// ========================================
//
// Variables (1)
// ========================================
// 1: count1Shift:CLOCKED_STATE(start = 0 fixed = true )  type: Integer
//
//
// Equations (1, 1)
// ========================================
// 1/1 (1): count1Shift = 1 + previous(count1Shift)   [dynamic |0|0|0|0|]
//
//
// no matching
//
//
//
// Base clocks (1)
// ========================================
// 1: Clock(condition, 0.0)[2]
//
//
// Sub clocks (2)
// ========================================
// 1: factor(1/1) shift(0/1)  event(false)
// 2: factor(1/1) shift(1/1)  event(false)
//
// record SimulationResult
//     resultFile = "EventClockAndClassic_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'EventClockAndClassic', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = ""
// end SimulationResult;
// ""
// 2.0
// 1.0
// 2.0
// endResult
