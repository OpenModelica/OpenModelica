// name: SynchronousFeatures.VaryingClock
// keywords: synchronous features
// status: correct
// cflags: -d=-newInst

setCommandLineOptions("+d=dumpSynchronous"); getErrorString();

loadFile("SynchronousFeatures.mo"); getErrorString();

instantiateModel(SynchronousFeatures.VaryingClock); getErrorString();
translateModel(SynchronousFeatures.VaryingClock); getErrorString();

// Result:
// true
// ""
// true
// ""
// "class SynchronousFeatures.VaryingClock \"Varying Interval Clocks\"
//   Integer nextInterval(start = 1);
//   Clock c = Clock(nextInterval, 100);
//   Real v(start = 0.2);
//   Real d = interval(v);
//   Real d0 = 0.01 * /*Real*/(previous(nextInterval));
// equation
//   when c then
//     nextInterval = 1 + previous(nextInterval);
//     v = 1.0 + previous(v);
//   end when;
// end SynchronousFeatures.VaryingClock;
// "
// ""
// synchronous features pre-phase: synchronousFeatures
//
//
// ########################################
// clock partitioning (1 partitions)
// ########################################
//
//
// clocked partition(1)
// ========================================
//
// Variables (4)
// ========================================
// 1: d0:VARIABLE()  type: Real 
// 2: d:VARIABLE()  type: Real 
// 3: v:VARIABLE(start = 0.2 )  type: Real 
// 4: nextInterval:DISCRETE(start = 1 )  type: Integer 
//
//
// Equations (4, 4)
// ========================================
// 1/1 (1): d = interval()   [binding |0|0|0|0|]
// 2/2 (1): d0 = 0.01 * /*Real*/(previous(nextInterval))   [binding |0|0|0|0|]
// 3/3 (1): v = 1.0 + previous(v)   [dynamic |0|0|0|0|]
// 4/4 (1): nextInterval = 1 + previous(nextInterval)   [dynamic |0|0|0|0|]
//
//
// no matching
//
//
//
// Base clocks (1)
// ========================================
// 1: Clock(previous(nextInterval), 100)[1]
//
//
// Sub clocks (1)
// ========================================
// 1: factor(1/1) shift(0/1)  event(false)
//
// synchronous features post-phase: synchronousFeatures
//
//
// ########################################
// clock partitioning (1 partitions)
// ########################################
//
//
// clocked partition(1)
// ========================================
//
// Variables (4)
// ========================================
// 1: d0:VARIABLE()  type: Real 
// 2: d:VARIABLE()  type: Real 
// 3: v:CLOCKED_STATE(start = 0.2 fixed = true )  type: Real 
// 4: nextInterval:CLOCKED_STATE(start = 1 fixed = true )  type: Integer 
//
//
// Equations (4, 4)
// ========================================
// 1/1 (1): d = interval()   [binding |0|0|0|0|]
// 2/2 (1): d0 = 0.01 * /*Real*/(previous(nextInterval))   [binding |0|0|0|0|]
// 3/3 (1): v = 1.0 + previous(v)   [dynamic |0|0|0|0|]
// 4/4 (1): nextInterval = 1 + previous(nextInterval)   [dynamic |0|0|0|0|]
//
//
// no matching
//
//
//
// Base clocks (1)
// ========================================
// 1: Clock(previous(nextInterval), 100)[1]
//
//
// Sub clocks (1)
// ========================================
// 1: factor(1/1) shift(0/1)  event(false)
//
// true
// ""
// endResult
