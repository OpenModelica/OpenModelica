// name:      Modelica.Fluid.Examples.BranchingDynamicPipes
// keywords:  parmodauto
// status:    correct
// cflags:
//
// Tests automatic parallelization with parmodauto
//

setCommandLineOptions("--parmodauto");
getErrorString();

loadModel(Modelica);
getErrorString();

echo(false);
res := simulate(Modelica.Fluid.Examples.BranchingDynamicPipes, simflags="-noHomotopyOnFirstTry");
echo(true);
getErrorString();


echo(false);
expectedRes := getEnvironmentVar("REFERENCEFILES")+"/msl32/Modelica.Fluid.Examples.BranchingDynamicPipes.mat";
outDiffFile := "Modelica.Fluid.Examples.BranchingDynamicPipes_diff";

varsToCompare :=   {"pipe1.mediums[1].p", "pipe1.mediums[1].Xi[1]", "pipe1.mediums[1].T",
                    "pipe1.mediums[2].p", "pipe1.mediums[2].Xi[1]", "pipe1.mediums[2].T",
                    "pipe1.mediums[3].p", "pipe1.mediums[3].Xi[1]", "pipe1.mediums[3].T",
                    "pipe1.mediums[4].p", "pipe1.mediums[4].Xi[1]", "pipe1.mediums[4].T",
                    "pipe1.mediums[5].p", "pipe1.mediums[5].Xi[1]", "pipe1.mediums[5].T",
                    "pipe1.flowModel.m_flows[1]", "pipe1.flowModel.m_flows[2]", "pipe1.flowModel.m_flows[3]",
                    "pipe1.flowModel.m_flows[4]", "pipe1.flowModel.m_flows[5]", "pipe2.mediums[1].p",
                    "pipe2.mediums[1].Xi[1]", "pipe2.mediums[1].T", "pipe2.mediums[2].p",
                    "pipe2.mediums[2].Xi[1]", "pipe2.mediums[2].T", "pipe2.mediums[3].p",
                    "pipe2.mediums[3].Xi[1]", "pipe2.mediums[3].T", "pipe2.mediums[4].p",
                    "pipe2.mediums[4].Xi[1]", "pipe2.mediums[4].T", "pipe2.mediums[5].Xi[1]",
                    "pipe2.mediums[5].T", "pipe2.flowModel.m_flows[1]", "pipe2.flowModel.m_flows[2]",
                    "pipe2.flowModel.m_flows[3]", "pipe2.flowModel.m_flows[4]", "pipe3.mediums[1].p",
                    "pipe3.mediums[1].Xi[1]", "pipe3.mediums[1].T", "pipe3.mediums[2].p",
                    "pipe3.mediums[2].Xi[1]", "pipe3.mediums[2].T", "pipe3.mediums[3].p",
                    "pipe3.mediums[3].Xi[1]", "pipe3.mediums[3].T", "pipe3.mediums[4].p",
                    "pipe3.mediums[4].Xi[1]", "pipe3.mediums[4].T", "pipe3.mediums[5].Xi[1]",
                    "pipe3.mediums[5].T", "pipe3.flowModel.m_flows[1]", "pipe3.flowModel.m_flows[2]",
                    "pipe3.flowModel.m_flows[3]", "pipe3.flowModel.m_flows[4]", "pipe3.flowModel.m_flows[5]",
                    "pipe4.mediums[1].p", "pipe4.mediums[1].Xi[1]", "pipe4.mediums[1].T",
                    "pipe4.mediums[2].p", "pipe4.mediums[2].Xi[1]", "pipe4.mediums[2].T",
                    "pipe4.mediums[3].p", "pipe4.mediums[3].Xi[1]", "pipe4.mediums[3].T",
                    "pipe4.mediums[4].p", "pipe4.mediums[4].Xi[1]", "pipe4.mediums[4].T",
                    "pipe4.mediums[5].p", "pipe4.mediums[5].Xi[1]", "pipe4.mediums[5].T",
                    "pipe4.flowModel.m_flows[1]", "pipe4.flowModel.m_flows[2]", "pipe4.flowModel.m_flows[3]",
                    "pipe4.flowModel.m_flows[4]", "pipe4.flowModel.m_flows[5]"};
echo(true);


OpenModelica.Scripting.diffSimulationResults(actualFile = "Modelica.Fluid.Examples.BranchingDynamicPipes_res.mat",
                                             expectedFile = expectedRes,
                                             diffPrefix = outDiffFile,
                                             vars = varsToCompare);
getErrorString();

// Result:
// true
// ""
// true
// ""
// true
// "Warning: The model contains alias variables with redundant start and/or conflicting nominal values. It is recommended to resolve the conflicts, because otherwise the system could be hard to solve. To print the conflicting alias sets and the chosen candidates please use -d=aliasConflicts.
// "
// true
// (true,{})
// ""
// endResult
