// name:      parameterTest7
// keywords:  parameter evaluation, structural
// status:    correct
// cflags: -d=-newInst

loadString("
model parameterTest7
  parameter Integer p1 = p2;
  parameter Integer p2 = 3;
  parameter Integer s = p1;
  parameter Integer a[s] = {1,2,3};
  parameter Integer s2 = 7;
  parameter Integer a2[s2] = ones(s2);
  parameter Integer s3 = 10;
  parameter Integer a3[s3] = ones(s3);
equation
end parameterTest7;
"); getErrorString();

setCommandLineOptions("-d=evalParameterDump");
simulate(parameterTest7, simflags="-output=p1,p2,s,a[1],a[2],a[3]"); getErrorString();
system("./parameterTest7 -override p2=10,a[1]=10 -output=p1,p2,s,a[1],a[2],a[3]"); getErrorString();

// Result:
// true
// ""
// true
//
// BEGINNING of preOptModule 'evaluateParameters'
// ********************************************************************************
//
//
// ########################################
// DAE before evaluating parameters
// ########################################
//
//
// unknown partition
// ========================================
//
// no matching
//
//
//
// BackendDAEType: simulation
//
//
// Known variables only depending on parameters and constants - globalKnownVars (25)
// ========================================
// 1: a3[10]:PARAM()  = 1  type: Integer  [10]
// 2: a3[9]:PARAM()  = 1  type: Integer  [10]
// 3: a3[8]:PARAM()  = 1  type: Integer  [10]
// 4: a3[7]:PARAM()  = 1  type: Integer  [10]
// 5: a3[6]:PARAM()  = 1  type: Integer  [10]
// 6: a3[5]:PARAM()  = 1  type: Integer  [10]
// 7: a3[4]:PARAM()  = 1  type: Integer  [10]
// 8: a3[3]:PARAM()  = 1  type: Integer  [10]
// 9: a3[2]:PARAM()  = 1  type: Integer  [10]
// 10: a3[1]:PARAM()  = 1  type: Integer  [10]
// 11: s3:PARAM(final = true )  = 10  type: Integer 
// 12: a2[7]:PARAM()  = 1  type: Integer  [7]
// 13: a2[6]:PARAM()  = 1  type: Integer  [7]
// 14: a2[5]:PARAM()  = 1  type: Integer  [7]
// 15: a2[4]:PARAM()  = 1  type: Integer  [7]
// 16: a2[3]:PARAM()  = 1  type: Integer  [7]
// 17: a2[2]:PARAM()  = 1  type: Integer  [7]
// 18: a2[1]:PARAM()  = 1  type: Integer  [7]
// 19: s2:PARAM(final = true )  = 7  type: Integer 
// 20: a[3]:PARAM()  = 3  type: Integer  [3]
// 21: a[2]:PARAM()  = 2  type: Integer  [3]
// 22: a[1]:PARAM()  = 1  type: Integer  [3]
// 23: s:PARAM(final = true )  = p1  type: Integer 
// 24: p2:PARAM()  = 3  type: Integer 
// 25: p1:PARAM()  = p2  type: Integer 
//
//
//
// Structural parameters and parameters with annotation(Evaluate=true) will be evaluated.
//
// START evaluating parameters:
// ================================================================================
// Number of parameters: 25
// Number of parameters selected for evaluation: 3
// Selected parameters for evaluation:
// 23,19,11
//
// Adjacency Matrix (row: equation)
// ========================================
// number of rows: 25
// 1:
// 2:
// 3:
// 4:
// 5:
// 6:
// 7:
// 8:
// 9:
// 10:
// 11:
// 12:
// 13:
// 14:
// 15:
// 16:
// 17:
// 18:
// 19:
// 20:
// 21:
// 22:
// 23: 25
// 24:
// 25: 24
//
// Transposed Adjacency Matrix (row: variable)
// ========================================
// number of rows: 25
// 1: 1
// 2: 2
// 3: 3
// 4: 4
// 5: 5
// 6: 6
// 7: 7
// 8: 8
// 9: 9
// 10: 10
// 11: 11
// 12: 12
// 13: 13
// 14: 14
// 15: 15
// 16: 16
// 17: 17
// 18: 18
// 19: 19
// 20: 20
// 21: 21
// 22: 22
// 23: 23
// 24: 25 24
// 25: 25 23
//
//
// After evaluating the selected parameters:
// ================================================================================
//
// All replacements:
// Replacements: (5)
// ========================================
// p2 -> 3
// p1 -> 3
// s -> 3
// s2 -> 7
// s3 -> 10
//
// Replacements that will be replaced in the DAE:
// Replacements: (5)
// ========================================
// p2 -> 3
// p1 -> 3
// s -> 3
// s2 -> 7
// s3 -> 10
//
// globalKnownVars (25)
// ========================================
// 1: a3[10]:PARAM()  = 1  type: Integer  [10]
// 2: a3[9]:PARAM()  = 1  type: Integer  [10]
// 3: a3[8]:PARAM()  = 1  type: Integer  [10]
// 4: a3[7]:PARAM()  = 1  type: Integer  [10]
// 5: a3[6]:PARAM()  = 1  type: Integer  [10]
// 6: a3[5]:PARAM()  = 1  type: Integer  [10]
// 7: a3[4]:PARAM()  = 1  type: Integer  [10]
// 8: a3[3]:PARAM()  = 1  type: Integer  [10]
// 9: a3[2]:PARAM()  = 1  type: Integer  [10]
// 10: a3[1]:PARAM()  = 1  type: Integer  [10]
// 11: s3:PARAM(final = true )  = 10  type: Integer 
// 12: a2[7]:PARAM()  = 1  type: Integer  [7]
// 13: a2[6]:PARAM()  = 1  type: Integer  [7]
// 14: a2[5]:PARAM()  = 1  type: Integer  [7]
// 15: a2[4]:PARAM()  = 1  type: Integer  [7]
// 16: a2[3]:PARAM()  = 1  type: Integer  [7]
// 17: a2[2]:PARAM()  = 1  type: Integer  [7]
// 18: a2[1]:PARAM()  = 1  type: Integer  [7]
// 19: s2:PARAM(final = true )  = 7  type: Integer 
// 20: a[3]:PARAM()  = 3  type: Integer  [3]
// 21: a[2]:PARAM()  = 2  type: Integer  [3]
// 22: a[1]:PARAM()  = 1  type: Integer  [3]
// 23: s:PARAM(final = true )  = 3  type: Integer 
// 24: p2:PARAM(final = true )  = 3  type: Integer 
// 25: p1:PARAM(final = true )  = p2  type: Integer 
//
//
// mark: 1
// markarr: -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,1,1,1
//
//
// After sorting parameters:
// ================================================================================
// Order:
// 24
// 25
// 23
// 22
// 21
// 20
// 19
// 18
// 17
// 16
// 15
// 14
// 13
// 12
// 11
// 10
// 9
// 8
// 7
// 6
// 5
// 4
// 3
// 2
// 1
//
//
// After replacing the evaluated parameters in parameter bindings:
// ================================================================================
// All replacements:
// Replacements: (5)
// ========================================
// p2 -> 3
// p1 -> 3
// s -> 3
// s2 -> 7
// s3 -> 10
//
// Replacements that will be replaced in the DAE:
// Replacements: (5)
// ========================================
// p2 -> 3
// p1 -> 3
// s -> 3
// s2 -> 7
// s3 -> 10
//
// globalKnownVars (25)
// ========================================
// 1: a3[10]:PARAM()  = 1  type: Integer  [10]
// 2: a3[9]:PARAM()  = 1  type: Integer  [10]
// 3: a3[8]:PARAM()  = 1  type: Integer  [10]
// 4: a3[7]:PARAM()  = 1  type: Integer  [10]
// 5: a3[6]:PARAM()  = 1  type: Integer  [10]
// 6: a3[5]:PARAM()  = 1  type: Integer  [10]
// 7: a3[4]:PARAM()  = 1  type: Integer  [10]
// 8: a3[3]:PARAM()  = 1  type: Integer  [10]
// 9: a3[2]:PARAM()  = 1  type: Integer  [10]
// 10: a3[1]:PARAM()  = 1  type: Integer  [10]
// 11: s3:PARAM(final = true )  = 10  type: Integer 
// 12: a2[7]:PARAM()  = 1  type: Integer  [7]
// 13: a2[6]:PARAM()  = 1  type: Integer  [7]
// 14: a2[5]:PARAM()  = 1  type: Integer  [7]
// 15: a2[4]:PARAM()  = 1  type: Integer  [7]
// 16: a2[3]:PARAM()  = 1  type: Integer  [7]
// 17: a2[2]:PARAM()  = 1  type: Integer  [7]
// 18: a2[1]:PARAM()  = 1  type: Integer  [7]
// 19: s2:PARAM(final = true )  = 7  type: Integer 
// 20: a[3]:PARAM()  = 3  type: Integer  [3]
// 21: a[2]:PARAM()  = 2  type: Integer  [3]
// 22: a[1]:PARAM()  = 1  type: Integer  [3]
// 23: s:PARAM(final = true )  = 3  type: Integer 
// 24: p2:PARAM(final = true )  = 3  type: Integer 
// 25: p1:PARAM(final = true )  = 3  type: Integer 
//
//
// mark: 1
// markarr: -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,1,1,1
//
//
// After replacing the evaluated parameters in variable bindings and start attributes:
// ================================================================================
// All replacements:
// Replacements: (5)
// ========================================
// p2 -> 3
// p1 -> 3
// s -> 3
// s2 -> 7
// s3 -> 10
//
// Replacements that will be replaced in the DAE:
// Replacements: (5)
// ========================================
// p2 -> 3
// p1 -> 3
// s -> 3
// s2 -> 7
// s3 -> 10
//
// globalKnownVars (25)
// ========================================
// 1: a3[10]:PARAM()  = 1  type: Integer  [10]
// 2: a3[9]:PARAM()  = 1  type: Integer  [10]
// 3: a3[8]:PARAM()  = 1  type: Integer  [10]
// 4: a3[7]:PARAM()  = 1  type: Integer  [10]
// 5: a3[6]:PARAM()  = 1  type: Integer  [10]
// 6: a3[5]:PARAM()  = 1  type: Integer  [10]
// 7: a3[4]:PARAM()  = 1  type: Integer  [10]
// 8: a3[3]:PARAM()  = 1  type: Integer  [10]
// 9: a3[2]:PARAM()  = 1  type: Integer  [10]
// 10: a3[1]:PARAM()  = 1  type: Integer  [10]
// 11: s3:PARAM(final = true )  = 10  type: Integer 
// 12: a2[7]:PARAM()  = 1  type: Integer  [7]
// 13: a2[6]:PARAM()  = 1  type: Integer  [7]
// 14: a2[5]:PARAM()  = 1  type: Integer  [7]
// 15: a2[4]:PARAM()  = 1  type: Integer  [7]
// 16: a2[3]:PARAM()  = 1  type: Integer  [7]
// 17: a2[2]:PARAM()  = 1  type: Integer  [7]
// 18: a2[1]:PARAM()  = 1  type: Integer  [7]
// 19: s2:PARAM(final = true )  = 7  type: Integer 
// 20: a[3]:PARAM()  = 3  type: Integer  [3]
// 21: a[2]:PARAM()  = 2  type: Integer  [3]
// 22: a[1]:PARAM()  = 1  type: Integer  [3]
// 23: s:PARAM(final = true )  = 3  type: Integer 
// 24: p2:PARAM(final = true )  = 3  type: Integer 
// 25: p1:PARAM(final = true )  = 3  type: Integer 
//
//
// mark: 1
// markarr: -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,1,1,1
//
//
// ########################################
// DAE after replacing the evaluated parameters
// ########################################
//
//
// unknown partition
// ========================================
//
// no matching
//
//
//
// BackendDAEType: simulation
//
//
// Known variables only depending on parameters and constants - globalKnownVars (25)
// ========================================
// 1: a3[10]:PARAM()  = 1  type: Integer  [10]
// 2: a3[9]:PARAM()  = 1  type: Integer  [10]
// 3: a3[8]:PARAM()  = 1  type: Integer  [10]
// 4: a3[7]:PARAM()  = 1  type: Integer  [10]
// 5: a3[6]:PARAM()  = 1  type: Integer  [10]
// 6: a3[5]:PARAM()  = 1  type: Integer  [10]
// 7: a3[4]:PARAM()  = 1  type: Integer  [10]
// 8: a3[3]:PARAM()  = 1  type: Integer  [10]
// 9: a3[2]:PARAM()  = 1  type: Integer  [10]
// 10: a3[1]:PARAM()  = 1  type: Integer  [10]
// 11: s3:PARAM(final = true )  = 10  type: Integer 
// 12: a2[7]:PARAM()  = 1  type: Integer  [7]
// 13: a2[6]:PARAM()  = 1  type: Integer  [7]
// 14: a2[5]:PARAM()  = 1  type: Integer  [7]
// 15: a2[4]:PARAM()  = 1  type: Integer  [7]
// 16: a2[3]:PARAM()  = 1  type: Integer  [7]
// 17: a2[2]:PARAM()  = 1  type: Integer  [7]
// 18: a2[1]:PARAM()  = 1  type: Integer  [7]
// 19: s2:PARAM(final = true )  = 7  type: Integer 
// 20: a[3]:PARAM()  = 3  type: Integer  [3]
// 21: a[2]:PARAM()  = 2  type: Integer  [3]
// 22: a[1]:PARAM()  = 1  type: Integer  [3]
// 23: s:PARAM(final = true )  = 3  type: Integer 
// 24: p2:PARAM(final = true )  = 3  type: Integer 
// 25: p1:PARAM(final = true )  = 3  type: Integer 
//
//
//
// END of preOptModule 'evaluateParameters'
// ********************************************************************************
//
// record SimulationResult
//     resultFile = "parameterTest7_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'parameterTest7', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = '-output=p1,p2,s,a[1],a[2],a[3]'",
//     messages = "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// time=1,p1=3,p2=3,s=3,a[1]=1,a[2]=2,a[3]=3
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// end SimulationResult;
// ""
// stdout            | warning | It is not possible to override the following quantity: p2
// |                 | |       | It seems to be structural, final, protected or evaluated or has a non-constant binding.
// LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// time=1,p1=3,p2=3,s=3,a[1]=10,a[2]=2,a[3]=3
// LOG_SUCCESS       | info    | The simulation finished successfully.
// 0
// ""
// endResult
