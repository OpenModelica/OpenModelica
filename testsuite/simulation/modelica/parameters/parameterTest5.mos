// name:      parameterTest5
// keywords:  parameter evaluation, structural
// status:    correct
// cflags: -d=-newInst

loadString("
model parameterTest5
  parameter Boolean b1 = true;
  parameter Real a = 5;
  parameter Real b = 2*a;
  parameter Real c = 5 + a;
  final parameter Real d = a + b + c;
  parameter Real e = d + a;
  parameter Real f = if b1 then g else 2;
  parameter Real g = if b1 then 2 else f;
  parameter Real h = f + g;
equation

end parameterTest5;
"); getErrorString();

setCommandLineOptions("-d=evalParameterDump"); getErrorString();
simulate(parameterTest5); getErrorString();

// Result:
// true
// ""
// true
// ""
//
// BEGINNING of preOptModule 'evaluateParameters'
// ********************************************************************************
//
//
// ########################################
// DAE before evaluating parameters
// ########################################
//
//
// unknown partition
// ========================================
//
// no matching
//
//
//
// BackendDAEType: simulation
//
//
// Known variables only depending on parameters and constants - globalKnownVars (9)
// ========================================
// 1: h:PARAM()  = f + g  type: Real 
// 2: g:PARAM()  = if b1 then 2.0 else f  type: Real 
// 3: f:PARAM()  = if b1 then g else 2.0  type: Real 
// 4: e:PARAM()  = d + a  type: Real 
// 5: d:PARAM(final = true )  = a + b + c  type: Real 
// 6: c:PARAM()  = 5.0 + a  type: Real 
// 7: b:PARAM()  = 2.0 * a  type: Real 
// 8: a:PARAM()  = 5.0  type: Real 
// 9: b1:PARAM(final = true )  = true  type: Boolean 
//
//
//
// Structural parameters and parameters with annotation(Evaluate=true) will be evaluated.
//
// START evaluating parameters:
// ================================================================================
// Number of parameters: 9
// Number of parameters selected for evaluation: 1
// Selected parameters for evaluation:
// 9
//
// Adjacency Matrix (row: equation)
// ========================================
// number of rows: 9
// 1: 3 2
// 2: 9 3
// 3: 9 2
// 4: 8 5
// 5: 8 7 6
// 6: 8
// 7: 8
// 8:
// 9:
//
// Transposed Adjacency Matrix (row: variable)
// ========================================
// number of rows: 9
// 1: 1
// 2: 3 2 1
// 3: 3 2 1
// 4: 4
// 5: 5 4
// 6: 6 5
// 7: 7 5
// 8: 8 7 6 5 4
// 9: 9 3 2
//
//
// After evaluating the selected parameters:
// ================================================================================
//
// All replacements:
// Replacements: (1)
// ========================================
// b1 -> true
//
// Replacements that will be replaced in the DAE:
// Replacements: (1)
// ========================================
// b1 -> true
//
// globalKnownVars (9)
// ========================================
// 1: h:PARAM()  = f + g  type: Real 
// 2: g:PARAM()  = if b1 then 2.0 else f  type: Real 
// 3: f:PARAM()  = if b1 then g else 2.0  type: Real 
// 4: e:PARAM()  = d + a  type: Real 
// 5: d:PARAM(final = true )  = a + b + c  type: Real 
// 6: c:PARAM()  = 5.0 + a  type: Real 
// 7: b:PARAM()  = 2.0 * a  type: Real 
// 8: a:PARAM()  = 5.0  type: Real 
// 9: b1:PARAM(final = true )  = true  type: Boolean 
//
//
// mark: 1
// markarr: -1,-1,-1,-1,-1,-1,-1,-1,1
//
//
// After sorting parameters:
// ================================================================================
// Order:
// 9
// 8
// 7
// 6
// 5
// 4
// 3,2
// 1
//
//
// After replacing the evaluated parameters in parameter bindings:
// ================================================================================
// All replacements:
// Replacements: (2)
// ========================================
// b1 -> true
// g -> 2.0
//
// Replacements that will be replaced in the DAE:
// Replacements: (2)
// ========================================
// b1 -> true
// g -> 2.0
//
// globalKnownVars (9)
// ========================================
// 1: h:PARAM()  = 2.0 + f  type: Real 
// 2: g:PARAM(final = true )  = 2.0  type: Real 
// 3: f:PARAM()  = g  type: Real 
// 4: e:PARAM()  = d + a  type: Real 
// 5: d:PARAM(final = true )  = a + b + c  type: Real 
// 6: c:PARAM()  = 5.0 + a  type: Real 
// 7: b:PARAM()  = 2.0 * a  type: Real 
// 8: a:PARAM()  = 5.0  type: Real 
// 9: b1:PARAM(final = true )  = true  type: Boolean 
//
//
// mark: 1
// markarr: -1,-1,-1,-1,-1,-1,-1,-1,1
//
//
// After replacing the evaluated parameters in variable bindings and start attributes:
// ================================================================================
// All replacements:
// Replacements: (2)
// ========================================
// b1 -> true
// g -> 2.0
//
// Replacements that will be replaced in the DAE:
// Replacements: (2)
// ========================================
// b1 -> true
// g -> 2.0
//
// globalKnownVars (9)
// ========================================
// 1: h:PARAM()  = 2.0 + f  type: Real 
// 2: g:PARAM(final = true )  = 2.0  type: Real 
// 3: f:PARAM()  = g  type: Real 
// 4: e:PARAM()  = d + a  type: Real 
// 5: d:PARAM(final = true )  = a + b + c  type: Real 
// 6: c:PARAM()  = 5.0 + a  type: Real 
// 7: b:PARAM()  = 2.0 * a  type: Real 
// 8: a:PARAM()  = 5.0  type: Real 
// 9: b1:PARAM(final = true )  = true  type: Boolean 
//
//
// mark: 1
// markarr: -1,-1,-1,-1,-1,-1,-1,-1,1
//
//
// ########################################
// DAE after replacing the evaluated parameters
// ########################################
//
//
// unknown partition
// ========================================
//
// no matching
//
//
//
// BackendDAEType: simulation
//
//
// Known variables only depending on parameters and constants - globalKnownVars (9)
// ========================================
// 1: h:PARAM()  = 2.0 + f  type: Real 
// 2: g:PARAM(final = true )  = 2.0  type: Real 
// 3: f:PARAM()  = g  type: Real 
// 4: e:PARAM()  = d + a  type: Real 
// 5: d:PARAM(final = true )  = a + b + c  type: Real 
// 6: c:PARAM()  = 5.0 + a  type: Real 
// 7: b:PARAM()  = 2.0 * a  type: Real 
// 8: a:PARAM()  = 5.0  type: Real 
// 9: b1:PARAM(final = true )  = true  type: Boolean 
//
//
//
// END of preOptModule 'evaluateParameters'
// ********************************************************************************
//
// record SimulationResult
//     resultFile = "parameterTest5_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'parameterTest5', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// end SimulationResult;
// ""
// endResult
