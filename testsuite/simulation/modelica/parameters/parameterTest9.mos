// name:      parameterTest9
// keywords:  parameter evaluation
// status:    correct

loadString("
model parameterTest9
  parameter Boolean state = true;
  Real v;
  Real r;
  parameter Integer p1 = p2;
  parameter Integer p2 = 3;
  parameter Integer s = p1;
  parameter Integer a[s] = {1,2,3};
  parameter Integer s2 = 7;
  parameter Integer a2[s2] = ones(s2);
  parameter Integer s3 = 10;
  parameter Integer a3[s3] = ones(s3);
equation
  if state then // code which is removed during symbolic
    der(v) = 1; // processing, if state=false
    der(r) = 2;
  else
    v = time;
    r = 2*time;
  end if;
end parameterTest9;
"); getErrorString();

setCommandLineOptions("-d=evalParameterDump");
simulate(parameterTest9); getErrorString();


// Result:
// true
// ""
// true
//
// BEGINNING of preOptModule 'evaluateParameters'
// ********************************************************************************
//
//
// ########################################
// DAE before evaluating parameters
// ########################################
//
//
// unknown partition
// ========================================
//
// Variables (2)
// ========================================
// 1: r:VARIABLE()  type: Real
// 2: v:VARIABLE()  type: Real
//
//
// Equations (2, 2)
// ========================================
// 1/1 (1): der(v) = 1.0   [dynamic |0|0|0|0|]
// 2/2 (1): der(r) = 2.0   [dynamic |0|0|0|0|]
//
//
// no matching
//
//
//
// BackendDAEType: simulation
//
//
// Known variables only depending on parameters and constants - globalKnownVars (26)
// ========================================
// 1: a3[10]:PARAM()  = 1  type: Integer [10]
// 2: a3[9]:PARAM()  = 1  type: Integer [10]
// 3: a3[8]:PARAM()  = 1  type: Integer [10]
// 4: a3[7]:PARAM()  = 1  type: Integer [10]
// 5: a3[6]:PARAM()  = 1  type: Integer [10]
// 6: a3[5]:PARAM()  = 1  type: Integer [10]
// 7: a3[4]:PARAM()  = 1  type: Integer [10]
// 8: a3[3]:PARAM()  = 1  type: Integer [10]
// 9: a3[2]:PARAM()  = 1  type: Integer [10]
// 10: a3[1]:PARAM()  = 1  type: Integer [10]
// 11: s3:PARAM(final = true )  = 10  type: Integer
// 12: a2[7]:PARAM()  = 1  type: Integer [7]
// 13: a2[6]:PARAM()  = 1  type: Integer [7]
// 14: a2[5]:PARAM()  = 1  type: Integer [7]
// 15: a2[4]:PARAM()  = 1  type: Integer [7]
// 16: a2[3]:PARAM()  = 1  type: Integer [7]
// 17: a2[2]:PARAM()  = 1  type: Integer [7]
// 18: a2[1]:PARAM()  = 1  type: Integer [7]
// 19: s2:PARAM(final = true )  = 7  type: Integer
// 20: a[3]:PARAM()  = 3  type: Integer [3]
// 21: a[2]:PARAM()  = 2  type: Integer [3]
// 22: a[1]:PARAM()  = 1  type: Integer [3]
// 23: s:PARAM(final = true )  = p1  type: Integer
// 24: p2:PARAM()  = 3  type: Integer
// 25: p1:PARAM()  = p2  type: Integer
// 26: state:PARAM(final = true )  = true  type: Boolean
//
//
//
// Structural parameters and parameters with annotation(Evaluate=true) will be evaluated.
//
// START evaluating parameters:
// ================================================================================
// Number of parameters: 26
// Number of parameters selected for evaluation: 4
// Selected parameters for evaluation:
// 26,23,19,11
//
// Adjacency Matrix (row: equation)
// ========================================
// number of rows: 26
// 1:
// 2:
// 3:
// 4:
// 5:
// 6:
// 7:
// 8:
// 9:
// 10:
// 11:
// 12:
// 13:
// 14:
// 15:
// 16:
// 17:
// 18:
// 19:
// 20:
// 21:
// 22:
// 23: 25
// 24:
// 25: 24
// 26:
//
// Transposed Adjacency Matrix (row: variable)
// ========================================
// number of rows: 26
// 1: 1
// 2: 2
// 3: 3
// 4: 4
// 5: 5
// 6: 6
// 7: 7
// 8: 8
// 9: 9
// 10: 10
// 11: 11
// 12: 12
// 13: 13
// 14: 14
// 15: 15
// 16: 16
// 17: 17
// 18: 18
// 19: 19
// 20: 20
// 21: 21
// 22: 22
// 23: 23
// 24: 25 24
// 25: 25 23
// 26: 26
//
//
// After evaluating the selected parameters:
// ================================================================================
//
// All replacements:
// Replacements: (6)
// ========================================
// state -> true
// p2 -> 3
// p1 -> 3
// s -> 3
// s2 -> 7
// s3 -> 10
//
// Replacements that will be replaced in the DAE:
// Replacements: (6)
// ========================================
// state -> true
// p2 -> 3
// p1 -> 3
// s -> 3
// s2 -> 7
// s3 -> 10
//
// globalKnownVars (26)
// ========================================
// 1: a3[10]:PARAM()  = 1  type: Integer [10]
// 2: a3[9]:PARAM()  = 1  type: Integer [10]
// 3: a3[8]:PARAM()  = 1  type: Integer [10]
// 4: a3[7]:PARAM()  = 1  type: Integer [10]
// 5: a3[6]:PARAM()  = 1  type: Integer [10]
// 6: a3[5]:PARAM()  = 1  type: Integer [10]
// 7: a3[4]:PARAM()  = 1  type: Integer [10]
// 8: a3[3]:PARAM()  = 1  type: Integer [10]
// 9: a3[2]:PARAM()  = 1  type: Integer [10]
// 10: a3[1]:PARAM()  = 1  type: Integer [10]
// 11: s3:PARAM(final = true )  = 10  type: Integer
// 12: a2[7]:PARAM()  = 1  type: Integer [7]
// 13: a2[6]:PARAM()  = 1  type: Integer [7]
// 14: a2[5]:PARAM()  = 1  type: Integer [7]
// 15: a2[4]:PARAM()  = 1  type: Integer [7]
// 16: a2[3]:PARAM()  = 1  type: Integer [7]
// 17: a2[2]:PARAM()  = 1  type: Integer [7]
// 18: a2[1]:PARAM()  = 1  type: Integer [7]
// 19: s2:PARAM(final = true )  = 7  type: Integer
// 20: a[3]:PARAM()  = 3  type: Integer [3]
// 21: a[2]:PARAM()  = 2  type: Integer [3]
// 22: a[1]:PARAM()  = 1  type: Integer [3]
// 23: s:PARAM(final = true )  = 3  type: Integer
// 24: p2:PARAM(final = true )  = 3  type: Integer
// 25: p1:PARAM(final = true )  = p2  type: Integer
// 26: state:PARAM(final = true )  = true  type: Boolean
//
//
// mark: 1
// markarr: -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,1,1,1,1
//
//
// After sorting parameters:
// ================================================================================
// Order:
// 26
// 24
// 25
// 23
// 22
// 21
// 20
// 19
// 18
// 17
// 16
// 15
// 14
// 13
// 12
// 11
// 10
// 9
// 8
// 7
// 6
// 5
// 4
// 3
// 2
// 1
//
//
// After replacing the evaluated parameters in parameter bindings:
// ================================================================================
// All replacements:
// Replacements: (6)
// ========================================
// state -> true
// p2 -> 3
// p1 -> 3
// s -> 3
// s2 -> 7
// s3 -> 10
//
// Replacements that will be replaced in the DAE:
// Replacements: (6)
// ========================================
// state -> true
// p2 -> 3
// p1 -> 3
// s -> 3
// s2 -> 7
// s3 -> 10
//
// globalKnownVars (26)
// ========================================
// 1: a3[10]:PARAM()  = 1  type: Integer [10]
// 2: a3[9]:PARAM()  = 1  type: Integer [10]
// 3: a3[8]:PARAM()  = 1  type: Integer [10]
// 4: a3[7]:PARAM()  = 1  type: Integer [10]
// 5: a3[6]:PARAM()  = 1  type: Integer [10]
// 6: a3[5]:PARAM()  = 1  type: Integer [10]
// 7: a3[4]:PARAM()  = 1  type: Integer [10]
// 8: a3[3]:PARAM()  = 1  type: Integer [10]
// 9: a3[2]:PARAM()  = 1  type: Integer [10]
// 10: a3[1]:PARAM()  = 1  type: Integer [10]
// 11: s3:PARAM(final = true )  = 10  type: Integer
// 12: a2[7]:PARAM()  = 1  type: Integer [7]
// 13: a2[6]:PARAM()  = 1  type: Integer [7]
// 14: a2[5]:PARAM()  = 1  type: Integer [7]
// 15: a2[4]:PARAM()  = 1  type: Integer [7]
// 16: a2[3]:PARAM()  = 1  type: Integer [7]
// 17: a2[2]:PARAM()  = 1  type: Integer [7]
// 18: a2[1]:PARAM()  = 1  type: Integer [7]
// 19: s2:PARAM(final = true )  = 7  type: Integer
// 20: a[3]:PARAM()  = 3  type: Integer [3]
// 21: a[2]:PARAM()  = 2  type: Integer [3]
// 22: a[1]:PARAM()  = 1  type: Integer [3]
// 23: s:PARAM(final = true )  = 3  type: Integer
// 24: p2:PARAM(final = true )  = 3  type: Integer
// 25: p1:PARAM(final = true )  = 3  type: Integer
// 26: state:PARAM(final = true )  = true  type: Boolean
//
//
// mark: 1
// markarr: -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,1,1,1,1
//
//
// After replacing the evaluated parameters in variable bindings and start attributes:
// ================================================================================
// All replacements:
// Replacements: (6)
// ========================================
// state -> true
// p2 -> 3
// p1 -> 3
// s -> 3
// s2 -> 7
// s3 -> 10
//
// Replacements that will be replaced in the DAE:
// Replacements: (6)
// ========================================
// state -> true
// p2 -> 3
// p1 -> 3
// s -> 3
// s2 -> 7
// s3 -> 10
//
// globalKnownVars (26)
// ========================================
// 1: a3[10]:PARAM()  = 1  type: Integer [10]
// 2: a3[9]:PARAM()  = 1  type: Integer [10]
// 3: a3[8]:PARAM()  = 1  type: Integer [10]
// 4: a3[7]:PARAM()  = 1  type: Integer [10]
// 5: a3[6]:PARAM()  = 1  type: Integer [10]
// 6: a3[5]:PARAM()  = 1  type: Integer [10]
// 7: a3[4]:PARAM()  = 1  type: Integer [10]
// 8: a3[3]:PARAM()  = 1  type: Integer [10]
// 9: a3[2]:PARAM()  = 1  type: Integer [10]
// 10: a3[1]:PARAM()  = 1  type: Integer [10]
// 11: s3:PARAM(final = true )  = 10  type: Integer
// 12: a2[7]:PARAM()  = 1  type: Integer [7]
// 13: a2[6]:PARAM()  = 1  type: Integer [7]
// 14: a2[5]:PARAM()  = 1  type: Integer [7]
// 15: a2[4]:PARAM()  = 1  type: Integer [7]
// 16: a2[3]:PARAM()  = 1  type: Integer [7]
// 17: a2[2]:PARAM()  = 1  type: Integer [7]
// 18: a2[1]:PARAM()  = 1  type: Integer [7]
// 19: s2:PARAM(final = true )  = 7  type: Integer
// 20: a[3]:PARAM()  = 3  type: Integer [3]
// 21: a[2]:PARAM()  = 2  type: Integer [3]
// 22: a[1]:PARAM()  = 1  type: Integer [3]
// 23: s:PARAM(final = true )  = 3  type: Integer
// 24: p2:PARAM(final = true )  = 3  type: Integer
// 25: p1:PARAM(final = true )  = 3  type: Integer
// 26: state:PARAM(final = true )  = true  type: Boolean
//
//
// mark: 1
// markarr: -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,1,1,1,1
//
//
// ########################################
// DAE after replacing the evaluated parameters
// ########################################
//
//
// unknown partition
// ========================================
//
// Variables (2)
// ========================================
// 1: r:VARIABLE()  type: Real
// 2: v:VARIABLE()  type: Real
//
//
// Equations (2, 2)
// ========================================
// 1/1 (1): der(v) = 1.0   [dynamic |0|0|0|0|]
// 2/2 (1): der(r) = 2.0   [dynamic |0|0|0|0|]
//
//
// no matching
//
//
//
// BackendDAEType: simulation
//
//
// Known variables only depending on parameters and constants - globalKnownVars (26)
// ========================================
// 1: a3[10]:PARAM()  = 1  type: Integer [10]
// 2: a3[9]:PARAM()  = 1  type: Integer [10]
// 3: a3[8]:PARAM()  = 1  type: Integer [10]
// 4: a3[7]:PARAM()  = 1  type: Integer [10]
// 5: a3[6]:PARAM()  = 1  type: Integer [10]
// 6: a3[5]:PARAM()  = 1  type: Integer [10]
// 7: a3[4]:PARAM()  = 1  type: Integer [10]
// 8: a3[3]:PARAM()  = 1  type: Integer [10]
// 9: a3[2]:PARAM()  = 1  type: Integer [10]
// 10: a3[1]:PARAM()  = 1  type: Integer [10]
// 11: s3:PARAM(final = true )  = 10  type: Integer
// 12: a2[7]:PARAM()  = 1  type: Integer [7]
// 13: a2[6]:PARAM()  = 1  type: Integer [7]
// 14: a2[5]:PARAM()  = 1  type: Integer [7]
// 15: a2[4]:PARAM()  = 1  type: Integer [7]
// 16: a2[3]:PARAM()  = 1  type: Integer [7]
// 17: a2[2]:PARAM()  = 1  type: Integer [7]
// 18: a2[1]:PARAM()  = 1  type: Integer [7]
// 19: s2:PARAM(final = true )  = 7  type: Integer
// 20: a[3]:PARAM()  = 3  type: Integer [3]
// 21: a[2]:PARAM()  = 2  type: Integer [3]
// 22: a[1]:PARAM()  = 1  type: Integer [3]
// 23: s:PARAM(final = true )  = 3  type: Integer
// 24: p2:PARAM(final = true )  = 3  type: Integer
// 25: p1:PARAM(final = true )  = 3  type: Integer
// 26: state:PARAM(final = true )  = true  type: Boolean
//
//
//
// END of preOptModule 'evaluateParameters'
// ********************************************************************************
//
// record SimulationResult
//     resultFile = "parameterTest9_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'parameterTest9', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// end SimulationResult;
// "Warning: The initial conditions are not fully specified. For more information set -d=initialization. In OMEdit Tools->Options->Simulation->OMCFlags, in OMNotebook call setCommandLineOptions(\"-d=initialization\").
// "
// endResult
