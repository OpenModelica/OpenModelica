// name:      parameterTest3
// keywords:  parameter evaluation, loop
// status:    correct
// cflags: -d=-newInst

loadString("
model parameterTest3
  parameter Boolean b1 = false;
  parameter Real p1 = if b1 then sub(p2,2) else 0;
  parameter Real p2 = if b1 then 0 else sub(p1,3);
  
  function sub
    input Real x;
    input Real y;
    output Real res;
  algorithm
    res := x - y;
  end sub;
  
equation

end parameterTest3;
"); getErrorString();

setCommandLineOptions("-d=evalParameterDump"); getErrorString();
simulate(parameterTest3); getErrorString();

// Result:
// true
// ""
// true
// ""
//
// BEGINNING of preOptModule 'evaluateParameters'
// ********************************************************************************
//
//
// ########################################
// DAE before evaluating parameters
// ########################################
//
//
// unknown partition
// ========================================
//
// no matching
//
//
//
// BackendDAEType: simulation
//
//
// Known variables only depending on parameters and constants - globalKnownVars (3)
// ========================================
// 1: p2:PARAM()  = if b1 then 0.0 else parameterTest3.sub(p1, 3.0)  type: Real 
// 2: p1:PARAM()  = if b1 then parameterTest3.sub(p2, 2.0) else 0.0  type: Real 
// 3: b1:PARAM()  = false  type: Boolean 
//
//
//
// Structural parameters and parameters with annotation(Evaluate=true) will be evaluated.
//
// START evaluating parameters:
// ================================================================================
// Number of parameters: 3
// Number of parameters selected for evaluation: 0
// Selected parameters for evaluation:
//
//
// Adjacency Matrix (row: equation)
// ========================================
// number of rows: 3
// 1: 3 2
// 2: 3 1
// 3:
//
// Transposed Adjacency Matrix (row: variable)
// ========================================
// number of rows: 3
// 1: 2 1
// 2: 2 1
// 3: 3 2 1
//
//
// After evaluating the selected parameters:
// ================================================================================
//
// All replacements:
// Replacements: (0)
// ========================================
//
//
// Replacements that will be replaced in the DAE:
// Replacements: (0)
// ========================================
//
//
// globalKnownVars (3)
// ========================================
// 1: p2:PARAM()  = if b1 then 0.0 else parameterTest3.sub(p1, 3.0)  type: Real 
// 2: p1:PARAM()  = if b1 then parameterTest3.sub(p2, 2.0) else 0.0  type: Real 
// 3: b1:PARAM()  = false  type: Boolean 
//
//
// mark: 1
// markarr: -1,-1,-1
//
//
// After sorting parameters:
// ================================================================================
// Order:
// 3
// 2,1
//
//
// After replacing the evaluated parameters in parameter bindings:
// ================================================================================
// All replacements:
// Replacements: (0)
// ========================================
//
//
// Replacements that will be replaced in the DAE:
// Replacements: (0)
// ========================================
//
//
// globalKnownVars (3)
// ========================================
// 1: p2:PARAM()  = if b1 then 0.0 else parameterTest3.sub(p1, 3.0)  type: Real 
// 2: p1:PARAM()  = if b1 then parameterTest3.sub(p2, 2.0) else 0.0  type: Real 
// 3: b1:PARAM()  = false  type: Boolean 
//
//
// mark: 1
// markarr: -1,-1,-1
//
//
// After replacing the evaluated parameters in variable bindings and start attributes:
// ================================================================================
// All replacements:
// Replacements: (0)
// ========================================
//
//
// Replacements that will be replaced in the DAE:
// Replacements: (0)
// ========================================
//
//
// globalKnownVars (3)
// ========================================
// 1: p2:PARAM()  = if b1 then 0.0 else parameterTest3.sub(p1, 3.0)  type: Real 
// 2: p1:PARAM()  = if b1 then parameterTest3.sub(p2, 2.0) else 0.0  type: Real 
// 3: b1:PARAM()  = false  type: Boolean 
//
//
// mark: 1
// markarr: -1,-1,-1
//
//
// There is no evaluated parameter.
//
// END of preOptModule 'evaluateParameters'
// ********************************************************************************
//
// record SimulationResult
//     resultFile = "",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'parameterTest3', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "Failed to build model: parameterTest3"
// end SimulationResult;
// "Error: Cyclically dependent parameters found:
//          p2:PARAM()  = if b1 then 0.0 else parameterTest3.sub(p1, 3.0)  type: Real 
//          p1:PARAM()  = if b1 then parameterTest3.sub(p2, 2.0) else 0.0  type: Real
// Error: No system for the symbolic initialization was generated
// "
// endResult
