// name:                pulseInput.mos
// keywords:            spatialDistribution
// status:              correct
// teardown_command:    rm -f pulseInputSpatialDistribution*
//
// Moble with spatialDistribution with constant velocity and pulse input.

loadModel(Modelica); getErrorString();
loadString("model pulseInputSpatialDistribution
  \"Single conveyor belt with constant positive velocity
  and pulse input from the left side.\"
  extends Modelica.Icons.Example;
  Real leftInput;
  Real rightInput = 0;
  Real leftOutput;
  Real rightOutput;
  constant Real[:] initialPoints(each min = 0, each max = 1) = {0.0, 1.0};
  constant Real[:] initialValues = {0.0, 0.0};
  Real v = 10;
  Boolean posV;
  Real x(start=0, fixed=true);
  Modelica.Blocks.Sources.Pulse pulseIn(amplitude = 1, period = 0.3, width = 50);
equation
  leftInput = pulseIn.y;
  v = der(x);
  posV = v >= 0;
  (leftOutput, rightOutput) = spatialDistribution(leftInput, rightInput, x, posV, initialPoints, initialValues);
end pulseInputSpatialDistribution;"); getErrorString();

// Simulate
simulate(pulseInputSpatialDistribution, simflags="-lv=LOG_EVENTS"); getErrorString();


// Result:
// true
// ""
// true
// ""
// record SimulationResult
//     resultFile = "pulseInputSpatialDistribution_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'pulseInputSpatialDistribution', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = '-lv=LOG_EVENTS'",
//     messages = "LOG_EVENTS        | info    | status of relations at time=0
// |                 | |       | | [1] (pre: false) false = time < pulseIn.startTime
// |                 | |       | | [2] (pre:  true)  true = time < pulseIn.T_start + pulseIn.T_width
// |                 | |       | | [3] (pre: false) false = spatialDistributionZeroCrossing(0, 2, x, true)
// |                 | |       | | [4] (pre: false) false = integer((time - pulseIn.startTime) / pulseIn.period) > pre(pulseIn.count)
// LOG_EVENTS        | info    | status of zero crossings at time=0
// |                 | |       | | [1] (pre:  0) -1 = time < pulseIn.startTime or pulseIn.nperiod == 0 or pulseIn.nperiod > 0 and pulseIn.count >= pulseIn.nperiod
// |                 | |       | | [2] (pre:  0)  1 = time < pulseIn.T_start + pulseIn.T_width
// |                 | |       | | [3] (pre:  0) -1 = spatialDistributionZeroCrossing(0, 2, x, true) > 0.0
// |                 | |       | | [4] (pre:  0) -1 = integer((time - pulseIn.startTime) / pulseIn.period) > pre(pulseIn.count)
// |                 | |       | | [5] (pre:  0) -1 = integer((time - pulseIn.startTime) / pulseIn.period, 0)
// LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_EVENTS        | info    | state event at time=0.1
// |                 | |       | | [3] spatialDistributionZeroCrossing(0, 2, x, true) > 0.0
// LOG_EVENTS        | info    | state event at time=0.15
// |                 | |       | | [2] time < pulseIn.T_start + pulseIn.T_width
// LOG_EVENTS        | info    | state event at time=0.25
// |                 | |       | | [3] spatialDistributionZeroCrossing(0, 2, x, true) > 0.0
// LOG_EVENTS        | info    | state event at time=0.3
// |                 | |       | | [5] integer((time - pulseIn.startTime) / pulseIn.period, 0)
// |                 | |       | | [4] integer((time - pulseIn.startTime) / pulseIn.period) > pre(pulseIn.count)
// LOG_EVENTS        | info    | state event at time=0.4
// |                 | |       | | [3] spatialDistributionZeroCrossing(0, 2, x, true) > 0.0
// LOG_EVENTS        | info    | state event at time=0.45
// |                 | |       | | [2] time < pulseIn.T_start + pulseIn.T_width
// LOG_EVENTS        | info    | state event at time=0.55
// |                 | |       | | [3] spatialDistributionZeroCrossing(0, 2, x, true) > 0.0
// LOG_EVENTS        | info    | state event at time=0.6
// |                 | |       | | [5] integer((time - pulseIn.startTime) / pulseIn.period, 0)
// |                 | |       | | [4] integer((time - pulseIn.startTime) / pulseIn.period) > pre(pulseIn.count)
// LOG_EVENTS        | info    | state event at time=0.7
// |                 | |       | | [3] spatialDistributionZeroCrossing(0, 2, x, true) > 0.0
// LOG_EVENTS        | info    | state event at time=0.75
// |                 | |       | | [2] time < pulseIn.T_start + pulseIn.T_width
// LOG_EVENTS        | info    | state event at time=0.85
// |                 | |       | | [3] spatialDistributionZeroCrossing(0, 2, x, true) > 0.0
// LOG_EVENTS        | info    | state event at time=0.9
// |                 | |       | | [5] integer((time - pulseIn.startTime) / pulseIn.period, 0)
// |                 | |       | | [4] integer((time - pulseIn.startTime) / pulseIn.period) > pre(pulseIn.count)
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// end SimulationResult;
// ""
// endResult
