// name:      Circuit1x
// keywords:  resolveLoops
// status:    correct
//

loadModel(Modelica, {"3.2.1"}); getErrorString();

loadFile("Circuit1x.mo"); getErrorString();
setDebugFlags("backenddaeinfo,stateselection"); getErrorString();
simulate(Circuit1x); getErrorString();
// Result:
// true
// ""
// true
// ""
// true
// ""
// record SimulationResult
//     resultFile = "",
//     simulationOptions = "startTime = 0.0, stopTime = 10.0, numberOfIntervals = 10000, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'Circuit1x', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "Simulation execution failed for model: Circuit1x
// stdout            | warning | The default linear solver fails, the fallback solver with total pivoting is started at time 0.000000. That might raise performance issues, for more information use -lv LOG_LS.
// stdout            | warning | The default linear solver fails, the fallback solver with total pivoting is started at time 0.000000. That might raise performance issues, for more information use -lv LOG_LS.
// stdout            | warning | Error solving linear system of equations (no. 16) at time 0.000000.
// stdout            | warning | Solving linear system 16 fails at time 0. For more information use -lv LOG_LS.
// assert            | debug   | Solving linear system 16 failed at time=0.
// |                 | |       | For more information please use -lv LOG_LS.
// assert            | info    | simulation terminated by an assertion at initialization
// "
// end SimulationResult;
// "Notification: Model statistics after passing the front-end and creating the data structures used by the back-end:
//  * Number of equations: 38
//  * Number of variables: 38
// Warning: The linear system:
// 1 : Cgd.v = R_Load.v - Cds.p.v
// 2 : Cds.v = Cds.p.v - R_Load.v
// [
//   1.0 , -1.0 ;
//   -1.0 , 1.0
// ]
//   *
// [
//   Cds.p.v ;
//   R_Load.v
// ]
//   =
// [
//   -Cgd.v ;
//   -Cds.v
// ]
//  might be structurally or numerically singular for variable R_Load.v since U(2,2) = 0.0. It might be hard to solve. Compilation continues anyway.
// Warning: The linear system:
// 1 : Cgd.i + R_Load.i - Cds.i = 0.0
// 2 : Cds.i + Voltage_Source.i - Cgd.i = 0.0
// [
//   1.0 , -1.0 ;
//   -1.0 , 1.0
// ]
//   *
// [
//   Cgd.i ;
//   Cds.i
// ]
//   =
// [
//   -R_Load.i ;
//   -Voltage_Source.i
// ]
//  might be structurally or numerically singular for variable Cds.i since U(2,2) = 0.0. It might be hard to solve. Compilation continues anyway.
// Warning: The linear system:
// 1 : Cds.v = Cds.p.v - R_Load.v
// 2 : Cgd.v = R_Load.v - Cds.p.v
// [
//   1.0 , -1.0 ;
//   -1.0 , 1.0
// ]
//   *
// [
//   R_Load.v ;
//   Cds.p.v
// ]
//   =
// [
//   -Cds.v ;
//   -Cgd.v
// ]
//  might be structurally or numerically singular for variable Cds.p.v since U(2,2) = 0.0. It might be hard to solve. Compilation continues anyway.
// Warning: The linear system:
// 1 : Cds.i + Voltage_Source.i - Cgd.i = 0.0
// 2 : Cgd.i + R_Load.i - Cds.i = 0.0
// [
//   -1.0 , 1.0 ;
//   1.0 , -1.0
// ]
//   *
// [
//   Cgd.i ;
//   Cds.i
// ]
//   =
// [
//   -Voltage_Source.i ;
//   -R_Load.i
// ]
//  might be structurally or numerically singular for variable Cds.i since U(2,2) = 0.0. It might be hard to solve. Compilation continues anyway.
// Warning: The initial conditions are not fully specified. For more information set -d=initialization. In OMEdit Tools->Options->Simulation->OMCFlags, in OMNotebook call setCommandLineOptions("-d=initialization").
// Notification: Model statistics after passing the back-end for initialization:
//  * Number of independent subsystems: 2
//  * Number of states: 0 ()
//  * Number of discrete variables: 0 ('-d=discreteinfo' for list of discrete vars)
//  * Number of discrete states: 0 ('-d=discreteinfo' for list of discrete states)
//  * Top-level inputs: 0
// Notification: Strong component statistics for initialization (15):
//  * Single equations (assignments): 13
//  * Array equations: 0
//  * Algorithm blocks: 0
//  * Record equations: 0
//  * When equations: 0
//  * If-equations: 0
//  * Equation systems (linear and non-linear blocks): 0
//  * Torn equation systems: 2
//  * Mixed (continuous/discrete) equation systems: 0
// Notification: Torn system details for strict tearing set:
//  * Linear torn systems: 2 {(1,100.0%) 1,(1,100.0%) 1}
//  * Non-linear torn systems: 0
// Warning: The linear system:
// 1 : Cgd.v = R_Load.v - Cds.p.v
// 2 : Cds.v = Cds.p.v - R_Load.v
// [
//   1.0 , -1.0 ;
//   -1.0 , 1.0
// ]
//   *
// [
//   Cds.p.v ;
//   R_Load.v
// ]
//   =
// [
//   -Cgd.v ;
//   -Cds.v
// ]
//  might be structurally or numerically singular for variable R_Load.v since U(2,2) = 0.0. It might be hard to solve. Compilation continues anyway.
// Warning: The linear system:
// 1 : Cgd.i + R_Load.i - Cds.i = 0.0
// 2 : Cds.i + Voltage_Source.i - Cgd.i = 0.0
// [
//   1.0 , -1.0 ;
//   -1.0 , 1.0
// ]
//   *
// [
//   Cgd.i ;
//   Cds.i
// ]
//   =
// [
//   -R_Load.i ;
//   -Voltage_Source.i
// ]
//  might be structurally or numerically singular for variable Cds.i since U(2,2) = 0.0. It might be hard to solve. Compilation continues anyway.
// Notification: Model statistics after passing the back-end for simulation:
//  * Number of independent subsystems: 1
//  * Number of states: 2 (Cgd.v,Cds.v)
//  * Number of discrete variables: 0 ('-d=discreteinfo' for list of discrete vars)
//  * Number of discrete states: 0 ('-d=discreteinfo' for list of discrete states)
//  * Top-level inputs: 0
// Notification: Strong component statistics for simulation (10):
//  * Single equations (assignments): 8
//  * Array equations: 0
//  * Algorithm blocks: 0
//  * Record equations: 0
//  * When equations: 0
//  * If-equations: 0
//  * Equation systems (linear and non-linear blocks): 0
//  * Torn equation systems: 2
//  * Mixed (continuous/discrete) equation systems: 0
// Notification: Torn system details for strict tearing set:
//  * Linear torn systems: 2 {(1,100.0%) 1,(1,100.0%) 1}
//  * Non-linear torn systems: 0
// "
// endResult
