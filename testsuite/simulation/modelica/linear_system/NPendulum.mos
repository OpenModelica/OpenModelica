// name:      NPendulum10
// keywords:  arrays
// status:    correct
// teardown_command: rm -f simcall_*.log NPendulum.pendulum*
// cflags: -d=-newInst
//
// Simulate NPendulum with N=10 with different linear solvers
//

loadFile("NPendulum.mo");
getErrorString();


// Enable linear tearing
setCommandLineOptions("--maxSizeLinearTearing=4000"); getErrorString();
buildModel(NPendulum.pendulum); getErrorString();

system(realpath(".") + "/NPendulum.pendulum -ls totalpivot", "simcall_totalpivot.log");
readFile("simcall_totalpivot.log"); remove("simcall_totalpivot.log");
res := OpenModelica.Scripting.compareSimulationResults("NPendulum.pendulum_res.mat",
  getEnvironmentVar("REFERENCEFILES")+"/linear_system/NPendulum_10.mat",
  "NPendulum_diff.csv",0.01,0.0001,
  {"phi[10]"});

system(realpath(".") + "/NPendulum.pendulum -ls lapack", "simcall_lapack.log");
readFile("simcall_lapack.log"); remove("simcall_lapack.log");
res := OpenModelica.Scripting.compareSimulationResults("NPendulum.pendulum_res.mat",
  getEnvironmentVar("REFERENCEFILES")+"/linear_system/NPendulum_10.mat",
  "NPendulum_diff.csv",0.01,0.0001,
  {"phi[10]"});

system(realpath(".") + "/NPendulum.pendulum -ls umfpack", "simcall_umfpack.log");
readFile("simcall_umfpack.log"); remove("simcall_umfpack.log");
res := OpenModelica.Scripting.compareSimulationResults("NPendulum.pendulum_res.mat",
  getEnvironmentVar("REFERENCEFILES")+"/linear_system/NPendulum_10.mat",
  "NPendulum_diff.csv",0.01,0.0001,
  {"phi[10]"});

/*
Lis solver doesn't work here
system(realpath(".") + "/NPendulum.pendulum -ls lis", "simcall_lis.log");
readFile("simcall_lis.log"); remove("simcall_lis.log");
res := OpenModelica.Scripting.compareSimulationResults("NPendulum.pendulum_res.mat",
  getEnvironmentVar("REFERENCEFILES")+"/linear_system/NPendulum_10.mat",
  "NPendulum_diff.csv",0.01,0.0001,
  {"phi[10]"});
*/

system(realpath(".") + "/NPendulum.pendulum -ls klu", "simcall_klu.log");
readFile("simcall_klu.log"); remove("simcall_klu.log");
res := OpenModelica.Scripting.compareSimulationResults("NPendulum.pendulum_res.mat",
  getEnvironmentVar("REFERENCEFILES")+"/linear_system/NPendulum_10.mat",
  "NPendulum_diff.csv",0.01,0.0001,
  {"phi[10]"});

// Disable linear tearing
setCommandLineOptions("--maxSizeLinearTearing=0"); getErrorString();
buildModel(NPendulum.pendulum); getErrorString();

system(realpath(".") + "/NPendulum.pendulum -ls totalpivot -lssMinSize=4001", "simcall_totalpivot.log");
readFile("simcall_totalpivot.log"); remove("simcall_totalpivot.log");
res := OpenModelica.Scripting.compareSimulationResults("NPendulum.pendulum_res.mat",
  getEnvironmentVar("REFERENCEFILES")+"/linear_system/NPendulum_10.mat",
  "NPendulum_diff.csv",0.01,0.01,
  {"phi[10]"});

system(realpath(".") + "/NPendulum.pendulum -ls lapack -lssMinSize=4001", "simcall_lapack.log");
readFile("simcall_lapack.log"); remove("simcall_lapack.log");
res := OpenModelica.Scripting.compareSimulationResults("NPendulum.pendulum_res.mat",
  getEnvironmentVar("REFERENCEFILES")+"/linear_system/NPendulum_10.mat",
  "NPendulum_diff.csv",0.01,0.01,
  {"phi[10]"});

system(realpath(".") + "/NPendulum.pendulum -ls umfpack -lssMinSize=4001", "simcall_umfpack.log");
readFile("simcall_umfpack.log"); remove("simcall_umfpack.log");
res := OpenModelica.Scripting.compareSimulationResults("NPendulum.pendulum_res.mat",
  getEnvironmentVar("REFERENCEFILES")+"/linear_system/NPendulum_10.mat",
  "NPendulum_diff.csv",0.01,0.01,
  {"phi[10]"});

/*
Lis solver doesn't work here
system(realpath(".") + "/NPendulum.pendulum -ls lis", "simcall_lis.log");
readFile("simcall_lis.log"); remove("simcall_lis.log");
res := OpenModelica.Scripting.compareSimulationResults("NPendulum.pendulum_res.mat",
  getEnvironmentVar("REFERENCEFILES")+"/linear_system/NPendulum_10.mat",
  "NPendulum_diff.csv",0.01,0.01,
  {"phi[10]"});
*/

system(realpath(".") + "/NPendulum.pendulum -ls klu -lssMinSize=4001", "simcall_klu.log");
readFile("simcall_klu.log"); remove("simcall_klu.log");
res := OpenModelica.Scripting.compareSimulationResults("NPendulum.pendulum_res.mat",
  getEnvironmentVar("REFERENCEFILES")+"/linear_system/NPendulum_10.mat",
  "NPendulum_diff.csv",0.01,0.01,
  {"phi[10]"});


// Result:
// true
// "Notification: Automatically loaded package Modelica 3.2.1 due to uses annotation.
// Notification: Automatically loaded package Complex 3.2.1 due to uses annotation.
// Notification: Automatically loaded package ModelicaServices 3.2.1 due to uses annotation.
// "
// true
// ""
// {"NPendulum.pendulum","NPendulum.pendulum_init.xml"}
// ""
// 0
// "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// true
// {"Files Equal!"}
// 0
// "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// true
// {"Files Equal!"}
// 0
// "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// true
// {"Files Equal!"}
// 0
// "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// true
// {"Files Equal!"}
// true
// "Warning: 'compareSimulationResults' is deprecated. It is recommended to use 'diffSimulationResults' instead.
// "
// {"NPendulum.pendulum","NPendulum.pendulum_init.xml"}
// ""
// 0
// "stdout            | info    | Minimum system size for using linear sparse solver changed to 4001
// stdout            | info    | Using sparse solver for linear system 0,
// |                 | |       | because density of 0.012 remains under threshold of 0.200 or size of 278 exceeds threshold of 4001.
// |                 | |       | The maximum density and the minimal system size for using sparse solvers can be specified
// |                 | |       | using the runtime flags '<-lssMaxDensity=value>' and '<-lssMinSize=value>'.
// stdout            | info    | Using sparse solver for linear system 1,
// |                 | |       | because density of 0.013 remains under threshold of 0.200 or size of 275 exceeds threshold of 4001.
// |                 | |       | The maximum density and the minimal system size for using sparse solvers can be specified
// |                 | |       | using the runtime flags '<-lssMaxDensity=value>' and '<-lssMinSize=value>'.
// LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// true
// {"Files Equal!"}
// 0
// "stdout            | info    | Minimum system size for using linear sparse solver changed to 4001
// stdout            | info    | Using sparse solver for linear system 0,
// |                 | |       | because density of 0.012 remains under threshold of 0.200 or size of 278 exceeds threshold of 4001.
// |                 | |       | The maximum density and the minimal system size for using sparse solvers can be specified
// |                 | |       | using the runtime flags '<-lssMaxDensity=value>' and '<-lssMinSize=value>'.
// stdout            | info    | Using sparse solver for linear system 1,
// |                 | |       | because density of 0.013 remains under threshold of 0.200 or size of 275 exceeds threshold of 4001.
// |                 | |       | The maximum density and the minimal system size for using sparse solvers can be specified
// |                 | |       | using the runtime flags '<-lssMaxDensity=value>' and '<-lssMinSize=value>'.
// LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// true
// {"Files Equal!"}
// 0
// "stdout            | info    | Minimum system size for using linear sparse solver changed to 4001
// stdout            | info    | Using sparse solver for linear system 0,
// |                 | |       | because density of 0.012 remains under threshold of 0.200 or size of 278 exceeds threshold of 4001.
// |                 | |       | The maximum density and the minimal system size for using sparse solvers can be specified
// |                 | |       | using the runtime flags '<-lssMaxDensity=value>' and '<-lssMinSize=value>'.
// stdout            | info    | Using sparse solver for linear system 1,
// |                 | |       | because density of 0.013 remains under threshold of 0.200 or size of 275 exceeds threshold of 4001.
// |                 | |       | The maximum density and the minimal system size for using sparse solvers can be specified
// |                 | |       | using the runtime flags '<-lssMaxDensity=value>' and '<-lssMinSize=value>'.
// LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// true
// {"Files Equal!"}
// 0
// "stdout            | info    | Minimum system size for using linear sparse solver changed to 4001
// stdout            | info    | Using sparse solver for linear system 0,
// |                 | |       | because density of 0.012 remains under threshold of 0.200 or size of 278 exceeds threshold of 4001.
// |                 | |       | The maximum density and the minimal system size for using sparse solvers can be specified
// |                 | |       | using the runtime flags '<-lssMaxDensity=value>' and '<-lssMinSize=value>'.
// stdout            | info    | Using sparse solver for linear system 1,
// |                 | |       | because density of 0.013 remains under threshold of 0.200 or size of 275 exceeds threshold of 4001.
// |                 | |       | The maximum density and the minimal system size for using sparse solvers can be specified
// |                 | |       | using the runtime flags '<-lssMaxDensity=value>' and '<-lssMinSize=value>'.
// LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// true
// {"Files Equal!"}
// endResult
