// name:      dynamicTearing1
// keywords:  nonlinear, dynamic tearing
// status:    correct
// cflags: -d=-newInst

loadString("
model dynamicTearing1
   Real x,y,z,x1,y1,z1,z2;
   parameter Real a=10, b=5, c=2;
equation
   (a-4-b-time)*y = x * time +time;
   a + b - 7*c = x*y +1 +y;
   z = x - y;

   (a-4-b-time)*y1 = x1 * time +time;
   a + b - 7*c = x1*y1 +1 +y;
   z1 = x1 - y1;

   z2 = z + z1;
end dynamicTearing1;
"); getErrorString();

setTearingMethod("cellier"); getErrorString();
setCommandLineOptions("+forceTearing"); getErrorString();
setCommandLineOptions("+dynamicTearing=nonlinear"); getErrorString();
simulate(dynamicTearing1,startTime=0,stopTime=2,numberOfIntervals=500,simflags="-lv=LOG_DT_CONS"); getErrorString();

print("x at time=0.0");
val(x,0.0); getErrorString();   // underdetermined
print("x1 at time=0.0");
val(x1,0.0); getErrorString();  // underdetermined
print("y at time=0.0");
val(y,0.0); getErrorString();   // 0.0
print("y1 at time=0.0");
val(y1,0.0); getErrorString();  // 0.0
print("z at time=0.0");
val(z,0.0); getErrorString();   // underdetermined
print("z1 at time=0.0");
val(z1,0.0); getErrorString();  // underdetermined
print("z2 at time=0.0");
val(z2,0.0); getErrorString();
print("x at time=1.1");
val(x,1.1); getErrorString();   // -1.0
print("x1 at time=1.1");
val(x1,1.1); getErrorString();  // 0.0 or -1.0
print("y at time=1.1");
val(y,1.1); getErrorString();   // 0.0
print("y1 at time=1.1");
val(y1,1.1); getErrorString();  // -11.0 or 0.0
print("z at time=1.1");
val(z,1.1); getErrorString();   // -1.0
print("z1 at time=1.1");
val(z1,1.1); getErrorString();  // 11.0 or -1.0
print("z2 at time=1.1");
val(z2,1.1); getErrorString();  // 10.0 or -2.0


// Result:
// true
// ""
// true
// ""
// true
// ""
// true
// ""
// record SimulationResult
//     resultFile = "dynamicTearing1_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 2.0, numberOfIntervals = 500, tolerance = 1e-6, method = 'dassl', fileNamePrefix = 'dynamicTearing1', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = '-lv=LOG_DT_CONS'",
//     messages = "LOG_DT_CONS       | info    | The following local constraint is violated:
// |                 | |       | abs(y1) > 1e-12
// LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_DT_CONS       | info    | The following local constraint is violated:
// |                 | |       | abs(y1) > 1e-12
// LOG_DT_CONS       | info    | The following local constraint is violated:
// |                 | |       | abs(y1) > 1e-12
// LOG_DT_CONS       | info    | The following local constraint is violated:
// |                 | |       | abs(y1) > 1e-12
// LOG_DT_CONS       | info    | The following local constraint is violated:
// |                 | |       | abs(y1) > 1e-12
// LOG_DT_CONS       | info    | The following global constraint is violated:
// |                 | |       | abs(-4.0 + a + (-b) - time) > 1e-12
// LOG_DT_CONS       | info    | The following local constraint is violated:
// |                 | |       | abs(y1) > 1e-12
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// end SimulationResult;
// "Warning: There are nonlinear iteration variables with default zero start attribute found in NLSJac0. For more information set -d=initialization. In OMEdit Tools->Options->Simulation->Show additional information from the initialization process, in OMNotebook call setCommandLineOptions(\"-d=initialization\").
// Warning: There are nonlinear iteration variables with default zero start attribute found in NLSJac1. For more information set -d=initialization. In OMEdit Tools->Options->Simulation->Show additional information from the initialization process, in OMNotebook call setCommandLineOptions(\"-d=initialization\").
// "
// x at time=0.0
// 0.0
// ""
// x1 at time=0.0
// 0.0
// ""
// y at time=0.0
// 0.0
// ""
// y1 at time=0.0
// 0.0
// ""
// z at time=0.0
// 0.0
// ""
// z1 at time=0.0
// 0.0
// ""
// z2 at time=0.0
// 0.0
// ""
// x at time=1.1
// -1.0
// ""
// x1 at time=1.1
// 0.0
// ""
// y at time=1.1
// 0.0
// ""
// y1 at time=1.1
// -11.0
// ""
// z at time=1.1
// -1.0
// ""
// z1 at time=1.1
// 11.0
// ""
// z2 at time=1.1
// 10.0
// ""
// endResult
