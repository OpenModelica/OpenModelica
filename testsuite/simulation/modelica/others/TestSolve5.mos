// name: TestSolve
// status: correct
//
// Checks that the backend knows how to solve certain expressions
// test: cos, sin, tan
// cflags: -d=-newInst

loadString("
model ModelTestSolve5
  constant Real s[:] = {-1,1};
  Real[2] x(start=s);
  Real[2] y(start=s);
  Real[2] z(start=s);
  Real err[6];
  Real Err (start = 0, fixed = true);
equation

  for i in 1:2 loop
    cos(x[i]) = 0.5*time;
    sin(y[i]) = 0.5*time;
    tan(z[i]) = 0.5*time;
    err[(i-1)*3 +1] = abs(-cos(x[i]) + 0.5*time);
    err[(i-1)*3 +2] = abs(-sin(y[i]) + 0.5*time);
    err[(i-1)*3 +3] = abs(-tan(z[i]) + 0.5*time);
  end for;

  der(Err) = sum(err);
end ModelTestSolve5;
"); getErrorString();

simulate(ModelTestSolve5, simflags="-lv LOG_NLS_V"); getErrorString();
val(x[1],0.5);
val(y[1],0.5);
val(z[1],0.5);
val(x[2],0.5);
val(y[2],0.5);
val(z[2],0.5);
val(Err,1);

// Result:
// true
// ""
// record SimulationResult
//     resultFile = "ModelTestSolve5_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'ModelTestSolve5', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = '-lv LOG_NLS_V'",
//     messages = "LOG_NLS           | info    | initialize mixed system solvers
// |                 | |       | | 0 mixed systems
// LOG_NLS           | info    | initialize non-linear system solvers
// |                 | |       | | 0 non-linear systems
// LOG_NLS           | info    | update static data of non-linear system solvers
// LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// LOG_NLS           | info    | free mixed system solvers
// LOG_NLS           | info    | free non-linear system solvers
// "
// end SimulationResult;
// ""
// -1.318116071652818
// 0.2526802551420786
// 0.2449786631268641
// 1.318116071652818
// 0.2526802551420786
// 0.2449786631268641
// 0.0
// endResult
