// Name:     ASSC
// keywords: index reduction
// status:   correct
// teardown_command: rm -rf ASSC *_init.xml *_records.c *.exe *.log *_res.mat *.c *.libs *.makefile *.o *.dll *.so *_functions.h *.h *_diff.csv output.log
// cflags: -d=-newInst
//
//
//

loadFile("ASSC.mo"); getErrorString();
setCommandLineOptions("-d=dumpASSC,bltdump");
simulate(ASSC); getErrorString();


// Result:
// true
// ""
// true
// ######################################################
//  LinearJacobian sparsity pattern: Original
// ######################################################
// (scal_idx|arr_idx|changed) [var_index, value] || RHS_EXPRESSION
// (3|3|false):    [2|2.0] [3|2.0]     || RHS: 10.0 - (x + c)
// (5|5|false):    [2|1.0] [3|1.0]     || RHS: -c
//
// ######################################################
//  LinearJacobian sparsity pattern: Solved
// ######################################################
// (scal_idx|arr_idx|changed) [var_index, value] || RHS_EXPRESSION
// (3|3|false):    [2|1.0] [3|1.0]     || RHS: 10.0 - (x + c)
// (5|5|true):    EMPTY ROW         || RHS: -10.0 + x + c - 2.0 * c
//
// [ASSC] The equation: a + b + c = 0.0
// [ASSC] Gets replaced by equation: 0.0 = -10.0 + x + c - 2.0 * c
// unmatched equations: 5
//
// Index Reduction neccessary!
// MSS subsets:
//  5, 4
//
// ##############--MSSS--##############
// Indices of constraint equations: 5 4
//
// ------------------4------------------
// Constraint equation to be differentiated:
// 0.0 = 5.0 + c - y
// Differentiated equation:
// 0.0 = der(c) - der(y)
//
// ------------------5------------------
// Constraint equation to be differentiated:
// 0.0 = -10.0 + x + c - 2.0 * c
// Differentiated equation:
// 0.0 = der(x) - der(c)
//
// Update Adjacency Matrix: 3 4 5
//
// ########################### STATE SELECTION ###########################
// ########## Try static state selection ##########
// Try to select dummy vars with natural matching (newer)
// Select 2 dummy states from 3 candidates.
//
// Highest order derivatives (state candidates): (3)
// ========================================
// 1: c:STATE(1)(stateSelect=StateSelect.never )  type: Real
// 2: y:STATE(1)()  type: Real
// 3: x:STATE(1)(fixed = true )  type: Real
//
//
// Constraint equations: (2)
// ========================================
// 1/1 (1): 0.0 = -10.0 + x + c - 2.0 * c   [unknown |0|0|0|0|]
// 2/2 (1): 0.0 = 5.0 + c - y   [unknown |0|0|0|0|]
//
// Adjacency Matrix Enhanced (row == equation)
// ====================================
// number of rows: 2
// 1:(-3,constone) (-1,constone)
// 2:(-1,constone) (-2,constone)
//
// Transpose Adjacency Matrix Enhanced (row == var)
// =====================================
// number of rows: 3
// 1:(-2,constone) (-1,constone)
// 2:(-2,constone)
// 3:(-1,constone)
//
//
// Matching
// ========================================
// 3 variables
// var 1 is solved in eqn 1
// var 2 is solved in eqn 2
// var 3 is solved in eqn -1
//
//
// Matching
// ========================================
// 2 equations
// eqn 1 is solved for var 1
// eqn 2 is solved for var 2
// Perfect Matching, no dynamic index reduction needed! There are no unassigned equations.
//
//
// Selected dummy states: (2)
// ========================================
// 1: y:STATE(1)()  type: Real
// 2: c:STATE(1)(stateSelect=StateSelect.never )  type: Real
//
//
// Selected continuous states: (1)
// ========================================
// 1: x:STATE(1)(fixed = true )  type: Real
//
// record SimulationResult
//     resultFile = "ASSC_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'ASSC', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// end SimulationResult;
// ""
// endResult
