// name:     inferredConstructor
// keywords: synchronous features, rationalClock, c
// status: correct
//
// Two rational Clock constructors.
// First clock should tick periodic, second clock has increasing 
// Get single warning about using default values for clock

loadFile("../Synchronous.mo"); getErrorString();

cd("temp/");
simulate(Synchronous.Constructors.rationalClock, stopTime=1.2, simflags="-lv=LOG_SYNCHRONOUS -override=stepSize=1.0", outputFormat="csv"); getErrorString();

//print("First clock");
//val(y1, 0.0);
//val(y1, 0.2);
//val(y1, 0.4);
//val(y1, 0.6000000001);    // Stupid rounding errors, it's 1e-16 to big...
//val(y1, 0.8);
//val(y1, 1.0);
//val(y1, 1.2);

print("Second clock");
val(y2, 0.0);   // 1.0
val(y2, 0.3);   // 2.0
val(y2, 0.7);   // 4.0
val(y2, 1.2);   // 6.0

// Result:
// true
// ""
// record SimulationResult
//     resultFile = "Synchronous.Constructors.inferredClock_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 2.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'Synchronous.Constructors.inferredClock', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = '-lv=LOG_SYNCHRONOUS'",
//     messages = "stdout            | warning | Inferred clock, using default clock 'Clock(intervalCounter=1, resolution=1)'
// LOG_SYNCHRONOUS   | info    | Initialized synchronous timers.
// |                 | |       | | Number of base clocks: 1
// |                 | |       | | Base clock 1
// |                 | |       | | | intervalCounter/resolution = : 1/1
// |                 | |       | | | interval: 1.000000e+00
// |                 | |       | | | Number of sub-clocks: 1
// |                 | |       | | | Sub-clock 1 of base clock 1
// |                 | |       | | | | shift: 0/1
// |                 | |       | | | | factor: 1/1
// |                 | |       | | | | solverMethod: 
// |                 | |       | | | | holdEvents: false
// LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SYNCHRONOUS   | info    | Fired timer at time 0.000000
// LOG_SYNCHRONOUS   | info    | Fired timer at time 1.000000
// LOG_SYNCHRONOUS   | info    | Fired timer at time 2.000000
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// end SimulationResult;
// ""
// 1.0
// 2.0
// 3.0
// endResult
