// name:     initial_equation
// keywords: initialization, start values, initial equation
// status:   correct
// teardown_command: rm -rf initializationTests.initial_equation* _initializationTests.initial_equation* output.log
// 
//  test start values and initial equations
//

loadString("
within ;
package initializationTests
  model initial_equation1
    Real x;
    Real y;
  initial equation
    x = 5;
    y = 5;
  equation
    der(x) = 2*x*y-3*y;
    der(y) = 5*y-7*x*y;
  end initial_equation1;

  model initial_equation2
    Real x(start=5);
    Real y(start=5);
  equation
    der(x) = 2*x*y-3*y;
    der(y) = 5*y-7*x*y;
  end initial_equation2;

  model initial_equation3
    Real x(start=5);
    Real y(start=5);
  initial equation
    x = 3;
    y = 4;
  equation
    der(x) = 2*x*y-3*y;
    der(y) = 5*y-7*x*y;
  end initial_equation3;
end initializationTests;
"); getErrorString();

simulate(initializationTests.initial_equation1, tolerance=1e-5, startTime=0.0, stopTime=0.0); getErrorString();
res := readSimulationResult("initializationTests.initial_equation1_res.mat", {time, x, y}, 2); getErrorString();

simulate(initializationTests.initial_equation2, tolerance=1e-5, startTime=0.0, stopTime=0.0); getErrorString();
res := readSimulationResult("initializationTests.initial_equation2_res.mat", {time, x, y}, 2); getErrorString();

simulate(initializationTests.initial_equation3, tolerance=1e-5, startTime=0.0, stopTime=0.0); getErrorString();
res := readSimulationResult("initializationTests.initial_equation3_res.mat", {time, x, y}, 2); getErrorString();

// Result:
// true
// ""
// record SimulationResult
//     resultFile = "initializationTests.initial_equation1_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 0.0, numberOfIntervals = 500, tolerance = 1e-05, method = 'dassl', fileNamePrefix = 'initializationTests.initial_equation1', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// end SimulationResult;
// ""
// {{0.0,0.0},{5.0,5.0},{5.0,5.0}}
// ""
// record SimulationResult
//     resultFile = "initializationTests.initial_equation2_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 0.0, numberOfIntervals = 500, tolerance = 1e-05, method = 'dassl', fileNamePrefix = 'initializationTests.initial_equation2', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// end SimulationResult;
// "Warning: The initial conditions are not fully specified. For more information set -d=initialization. In OMEdit Tools->Options->Simulation->OMCFlags, in OMNotebook call setCommandLineOptions(\"-d=initialization\").
// "
// {{0.0,0.0},{5.0,5.0},{5.0,5.0}}
// ""
// record SimulationResult
//     resultFile = "initializationTests.initial_equation3_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 0.0, numberOfIntervals = 500, tolerance = 1e-05, method = 'dassl', fileNamePrefix = 'initializationTests.initial_equation3', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// end SimulationResult;
// ""
// {{0.0,0.0},{3.0,3.0},{4.0,4.0}}
// ""
// endResult
