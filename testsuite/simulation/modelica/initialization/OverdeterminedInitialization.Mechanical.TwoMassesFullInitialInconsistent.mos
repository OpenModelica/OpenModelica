// name: OverdeterminedInitialization.Mechanical.TwoMassesFullInitialInconsistent
// keywords: initialization, over-determined
// status: correct
// cflags: -d=newInst

loadModel(Modelica, {"4.0.0"}); getErrorString();
loadFile("OverdeterminedInitialization.mo"); getErrorString();

setCommandLineOptions("-d=initialization"); getErrorString();
simulate(OverdeterminedInitialization.Mechanical.TwoMassesFullInitialInconsistent); getErrorString();

// Result:
// true
// ""
// true
// ""
// true
// ""
// record SimulationResult
//     resultFile = "",
//     simulationOptions = "startTime = 0.0, stopTime = 10.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'OverdeterminedInitialization.Mechanical.TwoMassesFullInitialInconsistent', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "Simulation execution failed for model: OverdeterminedInitialization.Mechanical.TwoMassesFullInitialInconsistent
// LOG_INIT          | error   | The initialization problem is inconsistent due to the following equation: 0 != 1 = $START.mass2.s - mass2.s
// LOG_STDOUT        | warning | Error in initialization. Storing results and exiting.
// |                 | |       | Use -lv=LOG_INIT -w for more information.
// "
// end SimulationResult;
// "Warning: It was not possible to determine if the initialization problem is consistent, because of not evaluable parameters/start values during compile time: mass1.v = $START.mass1.v ($START.mass2.v = $START.mass1.v)
// Warning: It was not possible to determine if the initialization problem is consistent, because of not evaluable parameters/start values during compile time: mass2.s = $START.mass2.s ($START.mass1.s + 0.5 * (mass1.L + mass2.L) = $START.mass2.s)
// Warning: The initial conditions are over specified. The following 2 initial equations are redundant, so they are removed from the initialization system:
//          mass1.v = $START.mass1.v
//          mass2.s = $START.mass2.s.
// Warning: The model contains alias variables with redundant start and/or conflicting nominal values. It is recommended to resolve the conflicts, because otherwise the system could be hard to solve. To print the conflicting alias sets and the chosen candidates please use -d=aliasConflicts.
// "
// endResult
