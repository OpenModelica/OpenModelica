// name:     Modelica.Fluid.Examples.AST_BatchPlant.BatchPlant_StandardWater
// keywords: simulation MSL Examples
// status: correct
// cflags: -d=-newInst
//
// Simulation Results
// Modelica Standard Library
//

runScript("../common/ModelTestingDefaults.mos"); getErrorString();

modelTestingType := OpenModelicaModelTesting.Kind.Compilation;
modelName := $TypeName(Modelica.Fluid.Examples.AST_BatchPlant.BatchPlant_StandardWater);
compareVars :=
{
   "B5.level",
   "B5.medium.h",
   "volume5.medium.p",
   "volume5.medium.h",
   "P1.medium.p",
   "P1.medium.h",
   "P2.medium.p",
   "P2.medium.h",
   "B1.level",
   "B1.medium.h",
   "B2.level",
   "B2.medium.h",
   "B3.level",
   "B3.medium.h",
   "B4.level",
   "B4.medium.h",
   "B7.level",
   "B7.medium.h",
   "B6.level",
   "B6.medium.h",
   "volume4.medium.p",
   "volume4.medium.h",
   "pipeB1B2.mediums[1].p",
   "pipeB1B2.mediums[1].h",
   "pipeB1B2.mediums[2].p",
   "pipeB1B2.mediums[2].h",
   "pipePump1B1.mediums[1].p",
   "pipePump1B1.mediums[1].h",
   "pipePump1B1.mediums[2].p",
   "pipePump1B1.mediums[2].h",
   "pipePump2B2.mediums[1].p",
   "pipePump2B2.mediums[1].h",
   "pipePump2B2.mediums[2].p",
   "pipePump2B2.mediums[2].h"
};

simulationRuntime := OpenModelicaModelTesting.SimulationRuntime.Cpp;

runScript(modelTesting);getErrorString();

// Result:
// "true
// "
// ""
// OpenModelicaModelTesting.Kind.Compilation
// Modelica.Fluid.Examples.AST_BatchPlant.BatchPlant_StandardWater
// {"B5.level","B5.medium.h","volume5.medium.p","volume5.medium.h","P1.medium.p","P1.medium.h","P2.medium.p","P2.medium.h","B1.level","B1.medium.h","B2.level","B2.medium.h","B3.level","B3.medium.h","B4.level","B4.medium.h","B7.level","B7.medium.h","B6.level","B6.medium.h","volume4.medium.p","volume4.medium.h","pipeB1B2.mediums[1].p","pipeB1B2.mediums[1].h","pipeB1B2.mediums[2].p","pipeB1B2.mediums[2].h","pipePump1B1.mediums[1].p","pipePump1B1.mediums[1].h","pipePump1B1.mediums[2].p","pipePump1B1.mediums[2].h","pipePump2B2.mediums[1].p","pipePump2B2.mediums[1].h","pipePump2B2.mediums[2].p","pipePump2B2.mediums[2].h"}
// OpenModelicaModelTesting.SimulationRuntime.Cpp
// Compilation succeeded
// Warning: Alias set with several free start values
//  * candidate: pipeB1B2.mediums[2].p(start = 101325.0)
//  * candidate: pipeB1B2.port_b.p(start = 5000000.0)
//  * candidate: V2.port_b.p(start = 5000000.0)
//  * candidate: V2.state_b.p(start = 5000000.0)
//  * candidate: pipeB1B2.state_b.p(start = 5000000.0)
//  * candidate: pipeB1B2.mediums[2].state.p(start = 5000000.0)
//  * candidate: pipeB1B2.statesFM[2].p(start = 5000000.0)
//  * candidate: pipeB1B2.flowModel.states[2].p(start = 5000000.0)
//  * candidate: pipeB1B2.heatTransfer.states[2].p(start = 5000000.0)
//  * candidate: pipeB1B2.mediums[2].sat.psat(start = 5000000.0)
// => select value from pipeB1B2.mediums[2].p(start = 101325.0) for variable: pipeB1B2.mediums[2].p
// Warning: Alias set with different nominal values
//  * candidate: pipeB1B2.mediums[2].sat.psat(nominal = 1000000.0)
//  * candidate: pipeB1B2.heatTransfer.states[2].p(nominal = 1000000.0)
//  * candidate: pipeB1B2.flowModel.states[2].p(nominal = 1000000.0)
//  * candidate: pipeB1B2.statesFM[2].p(nominal = 1000000.0)
//  * candidate: pipeB1B2.mediums[2].state.p(nominal = 1000000.0)
//  * candidate: pipeB1B2.state_b.p(nominal = 1000000.0)
//  * candidate: V2.state_b.p(nominal = 1000000.0)
//  * candidate: V2.port_b.p(nominal = 1000000.0)
//  * candidate: pipeB1B2.port_b.p(nominal = 1000000.0)
//  * candidate: pipeB1B2.mediums[2].p(nominal = 100000.0)
// => select value from pipeB1B2.mediums[2].p(nominal = 100000.0) for variable: pipeB1B2.mediums[2].p
// Warning: Alias set with several free start values
//  * candidate: volume5.medium.p(start = volume5.p_start)
//  * candidate: volume5.port_3.p(start = 5000000.0)
//  * candidate: V20.port_b.p(start = 5000000.0)
//  * candidate: V20.state_b.p(start = 5000000.0)
//  * candidate: volume5.port_2.p(start = 5000000.0)
//  * candidate: V24.port_a.p(start = 5000000.0)
//  * candidate: V24.state_a.p(start = 5000000.0)
//  * candidate: volume5.port_1.p(start = 5000000.0)
//  * candidate: V21.port_b.p(start = 5000000.0)
//  * candidate: V21.state_b.p(start = 5000000.0)
//  * candidate: volume5.medium.state.p(start = 5000000.0)
//  * candidate: volume5.medium.sat.psat(start = 5000000.0)
// => select value from volume5.medium.p(start = volume5.p_start) for variable: volume5.medium.p
// Warning: Alias set with different nominal values
//  * candidate: volume5.medium.sat.psat(nominal = 1000000.0)
//  * candidate: volume5.medium.state.p(nominal = 1000000.0)
//  * candidate: V21.state_b.p(nominal = 1000000.0)
//  * candidate: V21.port_b.p(nominal = 1000000.0)
//  * candidate: volume5.port_1.p(nominal = 1000000.0)
//  * candidate: V24.state_a.p(nominal = 1000000.0)
//  * candidate: V24.port_a.p(nominal = 1000000.0)
//  * candidate: volume5.port_2.p(nominal = 1000000.0)
//  * candidate: V20.state_b.p(nominal = 1000000.0)
//  * candidate: V20.port_b.p(nominal = 1000000.0)
//  * candidate: volume5.port_3.p(nominal = 1000000.0)
//  * candidate: volume5.medium.p(nominal = 100000.0)
// => select value from volume5.medium.p(nominal = 100000.0) for variable: volume5.medium.p
// Warning: Alias set with several free start values
//  * candidate: volume4.medium.p(start = volume4.p_start)
//  * candidate: volume4.port_3.p(start = 5000000.0)
//  * candidate: multiPort.port_a.p(start = 5000000.0)
//  * candidate: multiPort.ports_b[3].p(start = 5000000.0)
//  * candidate: V19.port_b.p(start = 5000000.0)
//  * candidate: V19.state_b.p(start = 5000000.0)
//  * candidate: multiPort.ports_b[2].p(start = 5000000.0)
//  * candidate: V10.port_b.p(start = 5000000.0)
//  * candidate: V10.state_b.p(start = 5000000.0)
//  * candidate: multiPort.ports_b[1].p(start = 5000000.0)
//  * candidate: V18.port_b.p(start = 5000000.0)
//  * candidate: V18.state_b.p(start = 5000000.0)
//  * candidate: volume4.port_2.p(start = 5000000.0)
//  * candidate: V21.port_a.p(start = 5000000.0)
//  * candidate: V21.state_a.p(start = 5000000.0)
//  * candidate: volume4.port_1.p(start = 5000000.0)
//  * candidate: V23.port_a.p(start = 5000000.0)
//  * candidate: V23.state_a.p(start = 5000000.0)
//  * candidate: volume4.medium.state.p(start = 5000000.0)
//  * candidate: volume4.medium.sat.psat(start = 5000000.0)
// => select value from volume4.medium.p(start = volume4.p_start) for variable: volume4.medium.p
// Warning: Alias set with different nominal values
//  * candidate: volume4.medium.sat.psat(nominal = 1000000.0)
//  * candidate: volume4.medium.state.p(nominal = 1000000.0)
//  * candidate: V23.state_a.p(nominal = 1000000.0)
//  * candidate: V23.port_a.p(nominal = 1000000.0)
//  * candidate: volume4.port_1.p(nominal = 1000000.0)
//  * candidate: V21.state_a.p(nominal = 1000000.0)
//  * candidate: V21.port_a.p(nominal = 1000000.0)
//  * candidate: volume4.port_2.p(nominal = 1000000.0)
//  * candidate: V18.state_b.p(nominal = 1000000.0)
//  * candidate: V18.port_b.p(nominal = 1000000.0)
//  * candidate: multiPort.ports_b[1].p(nominal = 1000000.0)
//  * candidate: V10.state_b.p(nominal = 1000000.0)
//  * candidate: V10.port_b.p(nominal = 1000000.0)
//  * candidate: multiPort.ports_b[2].p(nominal = 1000000.0)
//  * candidate: V19.state_b.p(nominal = 1000000.0)
//  * candidate: V19.port_b.p(nominal = 1000000.0)
//  * candidate: multiPort.ports_b[3].p(nominal = 1000000.0)
//  * candidate: multiPort.port_a.p(nominal = 1000000.0)
//  * candidate: volume4.port_3.p(nominal = 1000000.0)
//  * candidate: volume4.medium.p(nominal = 100000.0)
// => select value from volume4.medium.p(nominal = 100000.0) for variable: volume4.medium.p
// Warning: Alias set with several free start values
//  * candidate: P1.port_a.p(start = P1.p_a_start)
//  * candidate: V23.port_b.p(start = 5000000.0)
//  * candidate: V23.state_b.p(start = 5000000.0)
//  * candidate: P1.monitoring.state_in.p(start = 5000000.0)
// => select value from P1.port_a.p(start = P1.p_a_start) for variable: P1.port_a.p
// Warning: Alias set with several free start values
//  * candidate: pipePump1B1.mediums[2].p(start = 101325.0)
//  * candidate: pipePump1B1.port_b.p(start = 5000000.0)
//  * candidate: V1.port_a.p(start = 5000000.0)
//  * candidate: V1.state_a.p(start = 5000000.0)
//  * candidate: pipePump1B1.state_b.p(start = 5000000.0)
//  * candidate: pipePump1B1.mediums[2].state.p(start = 5000000.0)
//  * candidate: pipePump1B1.statesFM[2].p(start = 5000000.0)
//  * candidate: pipePump1B1.flowModel.states[2].p(start = 5000000.0)
//  * candidate: pipePump1B1.heatTransfer.states[2].p(start = 5000000.0)
//  * candidate: pipePump1B1.mediums[2].sat.psat(start = 5000000.0)
// => select value from pipePump1B1.mediums[2].p(start = 101325.0) for variable: pipePump1B1.mediums[2].p
// Warning: Alias set with different nominal values
//  * candidate: pipePump1B1.mediums[2].sat.psat(nominal = 1000000.0)
//  * candidate: pipePump1B1.heatTransfer.states[2].p(nominal = 1000000.0)
//  * candidate: pipePump1B1.flowModel.states[2].p(nominal = 1000000.0)
//  * candidate: pipePump1B1.statesFM[2].p(nominal = 1000000.0)
//  * candidate: pipePump1B1.mediums[2].state.p(nominal = 1000000.0)
//  * candidate: pipePump1B1.state_b.p(nominal = 1000000.0)
//  * candidate: V1.state_a.p(nominal = 1000000.0)
//  * candidate: V1.port_a.p(nominal = 1000000.0)
//  * candidate: pipePump1B1.port_b.p(nominal = 1000000.0)
//  * candidate: pipePump1B1.mediums[2].p(nominal = 100000.0)
// => select value from pipePump1B1.mediums[2].p(nominal = 100000.0) for variable: pipePump1B1.mediums[2].p
// Warning: Alias set with several free start values
//  * candidate: pipePump2B2.mediums[2].p(start = 101325.0)
//  * candidate: pipePump2B2.port_b.p(start = 5000000.0)
//  * candidate: V5.port_a.p(start = 5000000.0)
//  * candidate: V5.state_a.p(start = 5000000.0)
//  * candidate: pipePump2B2.state_b.p(start = 5000000.0)
//  * candidate: pipePump2B2.mediums[2].state.p(start = 5000000.0)
//  * candidate: pipePump2B2.statesFM[2].p(start = 5000000.0)
//  * candidate: pipePump2B2.flowModel.states[2].p(start = 5000000.0)
//  * candidate: pipePump2B2.heatTransfer.states[2].p(start = 5000000.0)
//  * candidate: pipePump2B2.mediums[2].sat.psat(start = 5000000.0)
// => select value from pipePump2B2.mediums[2].p(start = 101325.0) for variable: pipePump2B2.mediums[2].p
// Warning: Alias set with different nominal values
//  * candidate: pipePump2B2.mediums[2].sat.psat(nominal = 1000000.0)
//  * candidate: pipePump2B2.heatTransfer.states[2].p(nominal = 1000000.0)
//  * candidate: pipePump2B2.flowModel.states[2].p(nominal = 1000000.0)
//  * candidate: pipePump2B2.statesFM[2].p(nominal = 1000000.0)
//  * candidate: pipePump2B2.mediums[2].state.p(nominal = 1000000.0)
//  * candidate: pipePump2B2.state_b.p(nominal = 1000000.0)
//  * candidate: V5.state_a.p(nominal = 1000000.0)
//  * candidate: V5.port_a.p(nominal = 1000000.0)
//  * candidate: pipePump2B2.port_b.p(nominal = 1000000.0)
//  * candidate: pipePump2B2.mediums[2].p(nominal = 100000.0)
// => select value from pipePump2B2.mediums[2].p(nominal = 100000.0) for variable: pipePump2B2.mediums[2].p
// Warning: Alias set with several free start values
//  * candidate: P1.medium.p(start = P1.p_start)
//  * candidate: P1.port_b.p(start = P1.p_b_start)
//  * candidate: V22.port_a.p(start = 5000000.0)
//  * candidate: V22.state_a.p(start = 5000000.0)
//  * candidate: P1.medium.state.p(start = 5000000.0)
//  * candidate: P1.monitoring.state.p(start = 5000000.0)
//  * candidate: P1.heatTransfer.states[1].p(start = 5000000.0)
//  * candidate: P1.medium.sat.psat(start = 5000000.0)
// => select value from P1.medium.p(start = P1.p_start) for variable: P1.medium.p
// Warning: Alias set with different nominal values
//  * candidate: P1.medium.sat.psat(nominal = 1000000.0)
//  * candidate: P1.heatTransfer.states[1].p(nominal = 1000000.0)
//  * candidate: P1.monitoring.state.p(nominal = 1000000.0)
//  * candidate: P1.medium.state.p(nominal = 1000000.0)
//  * candidate: V22.state_a.p(nominal = 1000000.0)
//  * candidate: V22.port_a.p(nominal = 1000000.0)
//  * candidate: P1.port_b.p(nominal = 1000000.0)
//  * candidate: P1.medium.p(nominal = 100000.0)
// => select value from P1.medium.p(nominal = 100000.0) for variable: P1.medium.p
// Warning: Alias set with several free start values
//  * candidate: P2.medium.p(start = P2.p_start)
//  * candidate: P2.port_b.p(start = P2.p_b_start)
//  * candidate: V25.port_a.p(start = 5000000.0)
//  * candidate: V25.state_a.p(start = 5000000.0)
//  * candidate: P2.medium.state.p(start = 5000000.0)
//  * candidate: P2.monitoring.state.p(start = 5000000.0)
//  * candidate: P2.heatTransfer.states[1].p(start = 5000000.0)
//  * candidate: P2.medium.sat.psat(start = 5000000.0)
// => select value from P2.medium.p(start = P2.p_start) for variable: P2.medium.p
// Warning: Alias set with different nominal values
//  * candidate: P2.medium.sat.psat(nominal = 1000000.0)
//  * candidate: P2.heatTransfer.states[1].p(nominal = 1000000.0)
//  * candidate: P2.monitoring.state.p(nominal = 1000000.0)
//  * candidate: P2.medium.state.p(nominal = 1000000.0)
//  * candidate: V25.state_a.p(nominal = 1000000.0)
//  * candidate: V25.port_a.p(nominal = 1000000.0)
//  * candidate: P2.port_b.p(nominal = 1000000.0)
//  * candidate: P2.medium.p(nominal = 100000.0)
// => select value from P2.medium.p(nominal = 100000.0) for variable: P2.medium.p
// Warning: Alias set with several free start values
//  * candidate: B5.medium.T(start = 293.15)
//  * candidate: B5.medium.state.T(start = 500.0)
//  * candidate: B5.heatTransfer.states[1].T(start = 500.0)
// => select value from B5.medium.T(start = 293.15) for variable: B5.medium.T
// Warning: Alias set with different nominal values
//  * candidate: HeatB5.port.T(nominal = 300.0)
//  * candidate: B5.heatPort.T(nominal = 300.0)
//  * candidate: B5.heatTransfer.heatPorts[1].T(nominal = 300.0)
//  * candidate: B5.heatTransfer.Ts[1](nominal = 300.0)
//  * candidate: B5.heatTransfer.states[1].T(nominal = 500.0)
//  * candidate: B5.medium.state.T(nominal = 500.0)
//  * candidate: B5.medium.T(nominal = 500.0)
// => select value from B5.medium.T(nominal = 500.0) for variable: B5.medium.T
// Warning: Alias set with several free start values
//  * candidate: B6.heatTransfer.states[1].T(start = 500.0)
//  * candidate: B6.medium.state.T(start = 500.0)
//  * candidate: B6.medium.T(start = B6.T_start)
// => select value from B6.medium.T(start = B6.T_start) for variable: B6.heatTransfer.Ts[1]
// Warning: Alias set with different nominal values
//  * candidate: B6.medium.T(nominal = 500.0)
//  * candidate: B6.medium.state.T(nominal = 500.0)
//  * candidate: B6.heatTransfer.states[1].T(nominal = 500.0)
//  * candidate: CoolingB6.port.T(nominal = 300.0)
//  * candidate: B6.heatPort.T(nominal = 300.0)
//  * candidate: B6.heatTransfer.heatPorts[1].T(nominal = 300.0)
//  * candidate: B6.heatTransfer.Ts[1](nominal = 300.0)
// => select value from B6.heatTransfer.Ts[1](nominal = 300.0) for variable: B6.heatTransfer.Ts[1]
// Warning: Alias set with several free start values
//  * candidate: pipePump2B2.mediums[1].p(start = 101325.0)
//  * candidate: pipePump2B2.port_a.p(start = 5000000.0)
//  * candidate: V25.port_b.p(start = 5000000.0)
//  * candidate: V25.state_b.p(start = 5000000.0)
//  * candidate: pipePump2B2.state_a.p(start = 5000000.0)
//  * candidate: pipePump2B2.mediums[1].state.p(start = 5000000.0)
//  * candidate: pipePump2B2.statesFM[1].p(start = 5000000.0)
//  * candidate: pipePump2B2.flowModel.states[1].p(start = 5000000.0)
//  * candidate: pipePump2B2.heatTransfer.states[1].p(start = 5000000.0)
//  * candidate: pipePump2B2.mediums[1].sat.psat(start = 5000000.0)
// => select value from pipePump2B2.mediums[1].p(start = 101325.0) for variable: pipePump2B2.mediums[1].p
// Warning: Alias set with different nominal values
//  * candidate: pipePump2B2.mediums[1].sat.psat(nominal = 1000000.0)
//  * candidate: pipePump2B2.heatTransfer.states[1].p(nominal = 1000000.0)
//  * candidate: pipePump2B2.flowModel.states[1].p(nominal = 1000000.0)
//  * candidate: pipePump2B2.statesFM[1].p(nominal = 1000000.0)
//  * candidate: pipePump2B2.mediums[1].state.p(nominal = 1000000.0)
//  * candidate: pipePump2B2.state_a.p(nominal = 1000000.0)
//  * candidate: V25.state_b.p(nominal = 1000000.0)
//  * candidate: V25.port_b.p(nominal = 1000000.0)
//  * candidate: pipePump2B2.port_a.p(nominal = 1000000.0)
//  * candidate: pipePump2B2.mediums[1].p(nominal = 100000.0)
// => select value from pipePump2B2.mediums[1].p(nominal = 100000.0) for variable: pipePump2B2.mediums[1].p
// Warning: Alias set with several free start values
//  * candidate: pipePump1B1.mediums[1].p(start = 101325.0)
//  * candidate: pipePump1B1.port_a.p(start = 5000000.0)
//  * candidate: V22.port_b.p(start = 5000000.0)
//  * candidate: V22.state_b.p(start = 5000000.0)
//  * candidate: pipePump1B1.state_a.p(start = 5000000.0)
//  * candidate: pipePump1B1.mediums[1].state.p(start = 5000000.0)
//  * candidate: pipePump1B1.statesFM[1].p(start = 5000000.0)
//  * candidate: pipePump1B1.flowModel.states[1].p(start = 5000000.0)
//  * candidate: pipePump1B1.heatTransfer.states[1].p(start = 5000000.0)
//  * candidate: pipePump1B1.mediums[1].sat.psat(start = 5000000.0)
// => select value from pipePump1B1.mediums[1].p(start = 101325.0) for variable: pipePump1B1.mediums[1].p
// Warning: Alias set with different nominal values
//  * candidate: pipePump1B1.mediums[1].sat.psat(nominal = 1000000.0)
//  * candidate: pipePump1B1.heatTransfer.states[1].p(nominal = 1000000.0)
//  * candidate: pipePump1B1.flowModel.states[1].p(nominal = 1000000.0)
//  * candidate: pipePump1B1.statesFM[1].p(nominal = 1000000.0)
//  * candidate: pipePump1B1.mediums[1].state.p(nominal = 1000000.0)
//  * candidate: pipePump1B1.state_a.p(nominal = 1000000.0)
//  * candidate: V22.state_b.p(nominal = 1000000.0)
//  * candidate: V22.port_b.p(nominal = 1000000.0)
//  * candidate: pipePump1B1.port_a.p(nominal = 1000000.0)
//  * candidate: pipePump1B1.mediums[1].p(nominal = 100000.0)
// => select value from pipePump1B1.mediums[1].p(nominal = 100000.0) for variable: pipePump1B1.mediums[1].p
// Warning: Alias set with several free start values
//  * candidate: pipeB1B2.mediums[1].p(start = 101325.0)
//  * candidate: pipeB1B2.port_a.p(start = 5000000.0)
//  * candidate: V4.port_b.p(start = 5000000.0)
//  * candidate: V4.state_b.p(start = 5000000.0)
//  * candidate: pipeB1B2.state_a.p(start = 5000000.0)
//  * candidate: pipeB1B2.mediums[1].state.p(start = 5000000.0)
//  * candidate: pipeB1B2.statesFM[1].p(start = 5000000.0)
//  * candidate: pipeB1B2.flowModel.states[1].p(start = 5000000.0)
//  * candidate: pipeB1B2.heatTransfer.states[1].p(start = 5000000.0)
//  * candidate: pipeB1B2.mediums[1].sat.psat(start = 5000000.0)
// => select value from pipeB1B2.mediums[1].p(start = 101325.0) for variable: pipeB1B2.mediums[1].p
// Warning: Alias set with different nominal values
//  * candidate: pipeB1B2.mediums[1].sat.psat(nominal = 1000000.0)
//  * candidate: pipeB1B2.heatTransfer.states[1].p(nominal = 1000000.0)
//  * candidate: pipeB1B2.flowModel.states[1].p(nominal = 1000000.0)
//  * candidate: pipeB1B2.statesFM[1].p(nominal = 1000000.0)
//  * candidate: pipeB1B2.mediums[1].state.p(nominal = 1000000.0)
//  * candidate: pipeB1B2.state_a.p(nominal = 1000000.0)
//  * candidate: V4.state_b.p(nominal = 1000000.0)
//  * candidate: V4.port_b.p(nominal = 1000000.0)
//  * candidate: pipeB1B2.port_a.p(nominal = 1000000.0)
//  * candidate: pipeB1B2.mediums[1].p(nominal = 100000.0)
// => select value from pipeB1B2.mediums[1].p(nominal = 100000.0) for variable: pipeB1B2.mediums[1].p
// Warning: Alias set with several free start values
//  * candidate: B7.heatTransfer.states[1].T(start = 500.0)
//  * candidate: B7.medium.state.T(start = 500.0)
//  * candidate: B7.medium.T(start = B7.T_start)
// => select value from B7.medium.T(start = B7.T_start) for variable: B7.heatTransfer.Ts[1]
// Warning: Alias set with different nominal values
//  * candidate: B7.medium.T(nominal = 500.0)
//  * candidate: B7.medium.state.T(nominal = 500.0)
//  * candidate: B7.heatTransfer.states[1].T(nominal = 500.0)
//  * candidate: CoolingB7.port.T(nominal = 300.0)
//  * candidate: B7.heatPort.T(nominal = 300.0)
//  * candidate: B7.heatTransfer.heatPorts[1].T(nominal = 300.0)
//  * candidate: B7.heatTransfer.Ts[1](nominal = 300.0)
// => select value from B7.heatTransfer.Ts[1](nominal = 300.0) for variable: B7.heatTransfer.Ts[1]
// Warning: Alias set with several free start values
//  * candidate: P2.port_a.p(start = P2.p_a_start)
//  * candidate: V24.port_b.p(start = 5000000.0)
//  * candidate: V24.state_b.p(start = 5000000.0)
//  * candidate: P2.monitoring.state_in.p(start = 5000000.0)
// => select value from P2.port_a.p(start = P2.p_a_start) for variable: P2.port_a.p
// Warning: Alias set with several free start values
//  * candidate: pipePump2B2.m_flows[1](start = 0.0)
//  * candidate: P2.port_b.m_flow(start = P2.m_flow_start)
//  * candidate: V25.m_flow(start = V25.m_flow_start)
// => select value from V25.m_flow(start = V25.m_flow_start) for variable: pipePump2B2.m_flows[1]
// Warning: Alias set with several free start values
//  * candidate: V24.m_flow(start = V24.m_flow_start)
//  * candidate: P2.port_a.m_flow(start = P2.m_flow_start)
// => select value from V24.m_flow(start = V24.m_flow_start) for variable: V24.m_flow
// Warning: Alias set with several free start values
//  * candidate: pipePump1B1.m_flows[1](start = 0.0)
//  * candidate: P1.port_b.m_flow(start = P1.m_flow_start)
//  * candidate: V22.m_flow(start = V22.m_flow_start)
// => select value from V22.m_flow(start = V22.m_flow_start) for variable: pipePump1B1.m_flows[1]
// Warning: Alias set with several free start values
//  * candidate: V23.m_flow(start = V23.m_flow_start)
//  * candidate: P1.port_a.m_flow(start = P1.m_flow_start)
// => select value from V23.m_flow(start = V23.m_flow_start) for variable: V23.m_flow
// Warning: Alias set with several free start values
//  * candidate: volume4.medium.h(start = volume4.h_start)
//  * candidate: volume4.port_3.h_outflow(start = 100000.0)
//  * candidate: multiPort.ports_b[3].h_outflow(start = 100000.0)
//  * candidate: V19.state_b.h(start = 100000.0)
//  * candidate: V19.port_a.h_outflow(start = 100000.0)
//  * candidate: multiPort.ports_b[2].h_outflow(start = 100000.0)
//  * candidate: V10.state_b.h(start = 100000.0)
//  * candidate: V10.port_a.h_outflow(start = 100000.0)
//  * candidate: pipeB1B1.flowModel.states[2].h(start = 100000.0)
//  * candidate: multiPort.ports_b[1].h_outflow(start = 100000.0)
//  * candidate: V18.state_b.h(start = 100000.0)
//  * candidate: V18.port_a.h_outflow(start = 100000.0)
//  * candidate: pipeB7Pump.flowModel.states[2].h(start = 100000.0)
//  * candidate: volume4.port_2.h_outflow(start = 100000.0)
//  * candidate: V21.state_a.h(start = 100000.0)
//  * candidate: V21.port_b.h_outflow(start = 100000.0)
//  * candidate: volume4.port_1.h_outflow(start = 100000.0)
//  * candidate: V23.state_a.h(start = 100000.0)
//  * candidate: V23.port_b.h_outflow(start = 100000.0)
//  * candidate: P1.monitoring.state_in.h(start = 100000.0)
//  * candidate: volume4.medium.state.h(start = 100000.0)
// => select value from volume4.medium.h(start = volume4.h_start) for variable: volume4.medium.h
// Warning: Alias set with several free start values
//  * candidate: volume4.medium.T(start = volume4.T_start)
//  * candidate: volume4.medium.state.T(start = 500.0)
// => select value from volume4.medium.T(start = volume4.T_start) for variable: volume4.medium.T
// Warning: Alias set with several free start values
//  * candidate: B6.medium.h(start = B6.h_start)
//  * candidate: B6.ports[1].h_outflow(start = 100000.0)
//  * candidate: pipeB6Pump.flowModel.states[1].h(start = 100000.0)
//  * candidate: B6.medium.state.h(start = 100000.0)
//  * candidate: B6.heatTransfer.states[1].h(start = 100000.0)
// => select value from B6.medium.h(start = B6.h_start) for variable: B6.medium.h
// Warning: Alias set with several free start values
//  * candidate: pipePump2B2.statesFM[2].T(start = 500.0)
//  * candidate: pipePump2B2.mediums[2].state.T(start = 500.0)
//  * candidate: pipePump2B2.heatTransfer.states[2].T(start = 500.0)
//  * candidate: pipePump2B2.mediums[2].T(start = 293.15)
//  * candidate: pipePump2B2.flowModel.states[2].T(start = 500.0)
// => select value from pipePump2B2.statesFM[2].T(start = 500.0) for variable: pipePump2B2.statesFM[2].T
// Warning: Alias set with different nominal values
//  * candidate: pipePump2B2.flowModel.states[2].T(nominal = 500.0)
//  * candidate: pipePump2B2.mediums[2].T(nominal = 500.0)
//  * candidate: pipePump2B2.heatTransfer.heatPorts[2].T(nominal = 300.0)
//  * candidate: pipePump2B2.heatTransfer.Ts[2](nominal = 300.0)
//  * candidate: pipePump2B2.heatTransfer.states[2].T(nominal = 500.0)
//  * candidate: pipePump2B2.mediums[2].state.T(nominal = 500.0)
//  * candidate: pipePump2B2.statesFM[2].T(nominal = 500.0)
// => select value from pipePump2B2.statesFM[2].T(nominal = 500.0) for variable: pipePump2B2.statesFM[2].T
// Warning: Alias set with several free start values
//  * candidate: pipePump2B2.mediums[2].h(start = pipePump2B2.h_start)
//  * candidate: pipePump2B2.port_b.h_outflow(start = 100000.0)
//  * candidate: V5.state_a.h(start = 100000.0)
//  * candidate: V5.port_b.h_outflow(start = 100000.0)
//  * candidate: pipePump2B2.mediums[2].state.h(start = 100000.0)
//  * candidate: pipePump2B2.statesFM[2].h(start = 100000.0)
//  * candidate: pipePump2B2.flowModel.states[2].h(start = 100000.0)
//  * candidate: pipePump2B2.heatTransfer.states[2].h(start = 100000.0)
// => select value from pipePump2B2.mediums[2].h(start = pipePump2B2.h_start) for variable: pipePump2B2.mediums[2].h
// Warning: Alias set with several free start values
//  * candidate: pipePump2B2.statesFM[1].T(start = 500.0)
//  * candidate: pipePump2B2.mediums[1].state.T(start = 500.0)
//  * candidate: pipePump2B2.heatTransfer.states[1].T(start = 500.0)
//  * candidate: pipePump2B2.mediums[1].T(start = 293.15)
//  * candidate: pipePump2B2.flowModel.states[1].T(start = 500.0)
// => select value from pipePump2B2.statesFM[1].T(start = 500.0) for variable: pipePump2B2.statesFM[1].T
// Warning: Alias set with different nominal values
//  * candidate: pipePump2B2.flowModel.states[1].T(nominal = 500.0)
//  * candidate: pipePump2B2.mediums[1].T(nominal = 500.0)
//  * candidate: pipePump2B2.heatTransfer.heatPorts[1].T(nominal = 300.0)
//  * candidate: pipePump2B2.heatTransfer.Ts[1](nominal = 300.0)
//  * candidate: pipePump2B2.heatTransfer.states[1].T(nominal = 500.0)
//  * candidate: pipePump2B2.mediums[1].state.T(nominal = 500.0)
//  * candidate: pipePump2B2.statesFM[1].T(nominal = 500.0)
// => select value from pipePump2B2.statesFM[1].T(nominal = 500.0) for variable: pipePump2B2.statesFM[1].T
// Warning: Alias set with several free start values
//  * candidate: pipePump2B2.mediums[1].h(start = pipePump2B2.h_start)
//  * candidate: pipePump2B2.port_a.h_outflow(start = 100000.0)
//  * candidate: V25.state_b.h(start = 100000.0)
//  * candidate: V25.port_a.h_outflow(start = 100000.0)
//  * candidate: pipePump2B2.mediums[1].state.h(start = 100000.0)
//  * candidate: pipePump2B2.statesFM[1].h(start = 100000.0)
//  * candidate: pipePump2B2.flowModel.states[1].h(start = 100000.0)
//  * candidate: pipePump2B2.heatTransfer.states[1].h(start = 100000.0)
// => select value from pipePump2B2.mediums[1].h(start = pipePump2B2.h_start) for variable: pipePump2B2.mediums[1].h
// Warning: Alias set with several free start values
//  * candidate: P2.medium.h(start = P2.h_start)
//  * candidate: P2.port_b.h_outflow(start = 100000.0)
//  * candidate: V25.state_a.h(start = 100000.0)
//  * candidate: V25.port_b.h_outflow(start = 100000.0)
//  * candidate: pipePump2B2.state_a.h(start = 100000.0)
//  * candidate: P2.port_a.h_outflow(start = 100000.0)
//  * candidate: V24.state_b.h(start = 100000.0)
//  * candidate: V24.port_a.h_outflow(start = 100000.0)
//  * candidate: P2.medium.state.h(start = 100000.0)
//  * candidate: P2.monitoring.state.h(start = 100000.0)
//  * candidate: P2.heatTransfer.states[1].h(start = 100000.0)
// => select value from P2.medium.h(start = P2.h_start) for variable: P2.medium.h
// Warning: Alias set with several free start values
//  * candidate: pipePump1B1.statesFM[2].T(start = 500.0)
//  * candidate: pipePump1B1.mediums[2].state.T(start = 500.0)
//  * candidate: pipePump1B1.heatTransfer.states[2].T(start = 500.0)
//  * candidate: pipePump1B1.mediums[2].T(start = 293.15)
//  * candidate: pipePump1B1.flowModel.states[2].T(start = 500.0)
// => select value from pipePump1B1.statesFM[2].T(start = 500.0) for variable: pipePump1B1.statesFM[2].T
// Warning: Alias set with different nominal values
//  * candidate: pipePump1B1.flowModel.states[2].T(nominal = 500.0)
//  * candidate: pipePump1B1.mediums[2].T(nominal = 500.0)
//  * candidate: pipePump1B1.heatTransfer.heatPorts[2].T(nominal = 300.0)
//  * candidate: pipePump1B1.heatTransfer.Ts[2](nominal = 300.0)
//  * candidate: pipePump1B1.heatTransfer.states[2].T(nominal = 500.0)
//  * candidate: pipePump1B1.mediums[2].state.T(nominal = 500.0)
//  * candidate: pipePump1B1.statesFM[2].T(nominal = 500.0)
// => select value from pipePump1B1.statesFM[2].T(nominal = 500.0) for variable: pipePump1B1.statesFM[2].T
// Warning: Alias set with several free start values
//  * candidate: pipePump1B1.mediums[2].h(start = pipePump1B1.h_start)
//  * candidate: pipePump1B1.port_b.h_outflow(start = 100000.0)
//  * candidate: V1.state_a.h(start = 100000.0)
//  * candidate: V1.port_b.h_outflow(start = 100000.0)
//  * candidate: pipePump1B1.mediums[2].state.h(start = 100000.0)
//  * candidate: pipePump1B1.statesFM[2].h(start = 100000.0)
//  * candidate: pipePump1B1.flowModel.states[2].h(start = 100000.0)
//  * candidate: pipePump1B1.heatTransfer.states[2].h(start = 100000.0)
// => select value from pipePump1B1.mediums[2].h(start = pipePump1B1.h_start) for variable: pipePump1B1.mediums[2].h
// Warning: Alias set with several free start values
//  * candidate: pipePump1B1.statesFM[1].T(start = 500.0)
//  * candidate: pipePump1B1.mediums[1].state.T(start = 500.0)
//  * candidate: pipePump1B1.heatTransfer.states[1].T(start = 500.0)
//  * candidate: pipePump1B1.mediums[1].T(start = 293.15)
//  * candidate: pipePump1B1.flowModel.states[1].T(start = 500.0)
// => select value from pipePump1B1.statesFM[1].T(start = 500.0) for variable: pipePump1B1.statesFM[1].T
// Warning: Alias set with different nominal values
//  * candidate: pipePump1B1.flowModel.states[1].T(nominal = 500.0)
//  * candidate: pipePump1B1.mediums[1].T(nominal = 500.0)
//  * candidate: pipePump1B1.heatTransfer.heatPorts[1].T(nominal = 300.0)
//  * candidate: pipePump1B1.heatTransfer.Ts[1](nominal = 300.0)
//  * candidate: pipePump1B1.heatTransfer.states[1].T(nominal = 500.0)
//  * candidate: pipePump1B1.mediums[1].state.T(nominal = 500.0)
//  * candidate: pipePump1B1.statesFM[1].T(nominal = 500.0)
// => select value from pipePump1B1.statesFM[1].T(nominal = 500.0) for variable: pipePump1B1.statesFM[1].T
// Warning: Alias set with several free start values
//  * candidate: pipePump1B1.mediums[1].h(start = pipePump1B1.h_start)
//  * candidate: pipePump1B1.port_a.h_outflow(start = 100000.0)
//  * candidate: V22.state_b.h(start = 100000.0)
//  * candidate: V22.port_a.h_outflow(start = 100000.0)
//  * candidate: pipePump1B1.mediums[1].state.h(start = 100000.0)
//  * candidate: pipePump1B1.statesFM[1].h(start = 100000.0)
//  * candidate: pipePump1B1.flowModel.states[1].h(start = 100000.0)
//  * candidate: pipePump1B1.heatTransfer.states[1].h(start = 100000.0)
// => select value from pipePump1B1.mediums[1].h(start = pipePump1B1.h_start) for variable: pipePump1B1.mediums[1].h
// Warning: Alias set with several free start values
//  * candidate: P1.medium.h(start = P1.h_start)
//  * candidate: P1.port_b.h_outflow(start = 100000.0)
//  * candidate: V22.state_a.h(start = 100000.0)
//  * candidate: V22.port_b.h_outflow(start = 100000.0)
//  * candidate: pipePump1B1.state_a.h(start = 100000.0)
//  * candidate: P1.port_a.h_outflow(start = 100000.0)
//  * candidate: V23.state_b.h(start = 100000.0)
//  * candidate: V23.port_a.h_outflow(start = 100000.0)
//  * candidate: P1.medium.state.h(start = 100000.0)
//  * candidate: P1.monitoring.state.h(start = 100000.0)
//  * candidate: P1.heatTransfer.states[1].h(start = 100000.0)
// => select value from P1.medium.h(start = P1.h_start) for variable: P1.medium.h
// Warning: Alias set with several free start values
//  * candidate: B7.medium.h(start = B7.h_start)
//  * candidate: B7.ports[1].h_outflow(start = 100000.0)
//  * candidate: pipeB7Pump.flowModel.states[1].h(start = 100000.0)
//  * candidate: B7.medium.state.h(start = 100000.0)
//  * candidate: B7.heatTransfer.states[1].h(start = 100000.0)
// => select value from B7.medium.h(start = B7.h_start) for variable: B7.medium.h
// Warning: Alias set with several free start values
//  * candidate: B3.medium.h(start = B3.h_start)
//  * candidate: B3.ports[2].h_outflow(start = 100000.0)
//  * candidate: pipeB1B1.flowModel.states[1].h(start = 100000.0)
//  * candidate: B3.ports[1].h_outflow(start = 100000.0)
//  * candidate: V11.state_a.h(start = 100000.0)
//  * candidate: V11.port_b.h_outflow(start = 100000.0)
//  * candidate: V11.state_b.h(start = 100000.0)
//  * candidate: V11.port_a.h_outflow(start = 100000.0)
//  * candidate: B3.medium.state.h(start = 100000.0)
//  * candidate: B3.heatTransfer.states[1].h(start = 100000.0)
// => select value from B3.medium.h(start = B3.h_start) for variable: B3.medium.h
// Warning: Alias set with several free start values
//  * candidate: B2.medium.h(start = B2.h_start)
//  * candidate: B2.ports[1].h_outflow(start = 100000.0)
//  * candidate: V9.state_a.h(start = 100000.0)
//  * candidate: V9.port_b.h_outflow(start = 100000.0)
//  * candidate: pipeB2B3.flowModel.states[1].h(start = 100000.0)
//  * candidate: B2.medium.state.h(start = 100000.0)
//  * candidate: B2.heatTransfer.states[1].h(start = 100000.0)
// => select value from B2.medium.h(start = B2.h_start) for variable: B2.medium.h
// Warning: Alias set with several free start values
//  * candidate: B1.medium.h(start = B1.h_start)
//  * candidate: B1.ports[1].h_outflow(start = 100000.0)
//  * candidate: V8.state_a.h(start = 100000.0)
//  * candidate: V8.port_b.h_outflow(start = 100000.0)
//  * candidate: pipeB1B3.flowModel.states[1].h(start = 100000.0)
//  * candidate: B1.medium.state.h(start = 100000.0)
//  * candidate: B1.heatTransfer.states[1].h(start = 100000.0)
// => select value from B1.medium.h(start = B1.h_start) for variable: B1.medium.h
// Warning: Alias set with several free start values
//  * candidate: pipeB1B2.statesFM[2].T(start = 500.0)
//  * candidate: pipeB1B2.mediums[2].state.T(start = 500.0)
//  * candidate: pipeB1B2.heatTransfer.states[2].T(start = 500.0)
//  * candidate: pipeB1B2.mediums[2].T(start = 293.15)
//  * candidate: pipeB1B2.flowModel.states[2].T(start = 500.0)
// => select value from pipeB1B2.statesFM[2].T(start = 500.0) for variable: pipeB1B2.statesFM[2].T
// Warning: Alias set with different nominal values
//  * candidate: pipeB1B2.flowModel.states[2].T(nominal = 500.0)
//  * candidate: pipeB1B2.mediums[2].T(nominal = 500.0)
//  * candidate: pipeB1B2.heatTransfer.heatPorts[2].T(nominal = 300.0)
//  * candidate: pipeB1B2.heatTransfer.Ts[2](nominal = 300.0)
//  * candidate: pipeB1B2.heatTransfer.states[2].T(nominal = 500.0)
//  * candidate: pipeB1B2.mediums[2].state.T(nominal = 500.0)
//  * candidate: pipeB1B2.statesFM[2].T(nominal = 500.0)
// => select value from pipeB1B2.statesFM[2].T(nominal = 500.0) for variable: pipeB1B2.statesFM[2].T
// Warning: Alias set with several free start values
//  * candidate: pipeB1B2.mediums[2].h(start = pipeB1B2.h_start)
//  * candidate: pipeB1B2.port_b.h_outflow(start = 100000.0)
//  * candidate: V2.state_b.h(start = 100000.0)
//  * candidate: V2.port_a.h_outflow(start = 100000.0)
//  * candidate: pipeB1B2.mediums[2].state.h(start = 100000.0)
//  * candidate: pipeB1B2.statesFM[2].h(start = 100000.0)
//  * candidate: pipeB1B2.flowModel.states[2].h(start = 100000.0)
//  * candidate: pipeB1B2.heatTransfer.states[2].h(start = 100000.0)
// => select value from pipeB1B2.mediums[2].h(start = pipeB1B2.h_start) for variable: pipeB1B2.mediums[2].h
// Warning: Alias set with several free start values
//  * candidate: pipeB1B2.statesFM[1].T(start = 500.0)
//  * candidate: pipeB1B2.mediums[1].state.T(start = 500.0)
//  * candidate: pipeB1B2.heatTransfer.states[1].T(start = 500.0)
//  * candidate: pipeB1B2.mediums[1].T(start = 293.15)
//  * candidate: pipeB1B2.flowModel.states[1].T(start = 500.0)
// => select value from pipeB1B2.statesFM[1].T(start = 500.0) for variable: pipeB1B2.statesFM[1].T
// Warning: Alias set with different nominal values
//  * candidate: pipeB1B2.flowModel.states[1].T(nominal = 500.0)
//  * candidate: pipeB1B2.mediums[1].T(nominal = 500.0)
//  * candidate: pipeB1B2.heatTransfer.heatPorts[1].T(nominal = 300.0)
//  * candidate: pipeB1B2.heatTransfer.Ts[1](nominal = 300.0)
//  * candidate: pipeB1B2.heatTransfer.states[1].T(nominal = 500.0)
//  * candidate: pipeB1B2.mediums[1].state.T(nominal = 500.0)
//  * candidate: pipeB1B2.statesFM[1].T(nominal = 500.0)
// => select value from pipeB1B2.statesFM[1].T(nominal = 500.0) for variable: pipeB1B2.statesFM[1].T
// Warning: Alias set with several free start values
//  * candidate: pipeB1B2.mediums[1].h(start = pipeB1B2.h_start)
//  * candidate: pipeB1B2.port_a.h_outflow(start = 100000.0)
//  * candidate: V4.state_b.h(start = 100000.0)
//  * candidate: V4.port_a.h_outflow(start = 100000.0)
//  * candidate: pipeB1B2.mediums[1].state.h(start = 100000.0)
//  * candidate: pipeB1B2.statesFM[1].h(start = 100000.0)
//  * candidate: pipeB1B2.flowModel.states[1].h(start = 100000.0)
//  * candidate: pipeB1B2.heatTransfer.states[1].h(start = 100000.0)
// => select value from pipeB1B2.mediums[1].h(start = pipeB1B2.h_start) for variable: pipeB1B2.mediums[1].h
// Warning: Alias set with several free start values
//  * candidate: B4.medium.h(start = B4.h_start)
//  * candidate: B4.ports[1].h_outflow(start = 100000.0)
//  * candidate: V12.state_b.h(start = 100000.0)
//  * candidate: V12.port_a.h_outflow(start = 100000.0)
//  * candidate: B4.medium.state.h(start = 100000.0)
//  * candidate: B4.heatTransfer.states[1].h(start = 100000.0)
// => select value from B4.medium.h(start = B4.h_start) for variable: B4.medium.h
// Warning: Alias set with several free start values
//  * candidate: B4.heatTransfer.states[1].T(start = 500.0)
//  * candidate: B4.medium.state.T(start = 500.0)
//  * candidate: B4.medium.T(start = B4.T_start)
// => select value from B4.medium.T(start = B4.T_start) for variable: B4.heatTransfer.Ts[1]
// Warning: Alias set with different nominal values
//  * candidate: B4.medium.T(nominal = 500.0)
//  * candidate: B4.medium.state.T(nominal = 500.0)
//  * candidate: B4.heatTransfer.states[1].T(nominal = 500.0)
//  * candidate: B4.heatTransfer.heatPorts[1].T(nominal = 300.0)
//  * candidate: B4.heatTransfer.Ts[1](nominal = 300.0)
// => select value from B4.heatTransfer.Ts[1](nominal = 300.0) for variable: B4.heatTransfer.Ts[1]
// Warning: Alias set with several free start values
//  * candidate: B3.heatTransfer.states[1].T(start = 500.0)
//  * candidate: B3.medium.state.T(start = 500.0)
//  * candidate: B3.medium.T(start = B3.T_start)
// => select value from B3.medium.T(start = B3.T_start) for variable: B3.heatTransfer.Ts[1]
// Warning: Alias set with different nominal values
//  * candidate: B3.medium.T(nominal = 500.0)
//  * candidate: B3.medium.state.T(nominal = 500.0)
//  * candidate: B3.heatTransfer.states[1].T(nominal = 500.0)
//  * candidate: B3.heatTransfer.heatPorts[1].T(nominal = 300.0)
//  * candidate: B3.heatTransfer.Ts[1](nominal = 300.0)
// => select value from B3.heatTransfer.Ts[1](nominal = 300.0) for variable: B3.heatTransfer.Ts[1]
// Warning: Alias set with several free start values
//  * candidate: B2.heatTransfer.states[1].T(start = 500.0)
//  * candidate: B2.medium.state.T(start = 500.0)
//  * candidate: B2.medium.T(start = B2.T_start)
// => select value from B2.medium.T(start = B2.T_start) for variable: B2.heatTransfer.Ts[1]
// Warning: Alias set with different nominal values
//  * candidate: B2.medium.T(nominal = 500.0)
//  * candidate: B2.medium.state.T(nominal = 500.0)
//  * candidate: B2.heatTransfer.states[1].T(nominal = 500.0)
//  * candidate: B2.heatTransfer.heatPorts[1].T(nominal = 300.0)
//  * candidate: B2.heatTransfer.Ts[1](nominal = 300.0)
// => select value from B2.heatTransfer.Ts[1](nominal = 300.0) for variable: B2.heatTransfer.Ts[1]
// Warning: Alias set with several free start values
//  * candidate: B1.heatTransfer.states[1].T(start = 500.0)
//  * candidate: B1.medium.state.T(start = 500.0)
//  * candidate: B1.medium.T(start = B1.T_start)
// => select value from B1.medium.T(start = B1.T_start) for variable: B1.heatTransfer.Ts[1]
// Warning: Alias set with different nominal values
//  * candidate: B1.medium.T(nominal = 500.0)
//  * candidate: B1.medium.state.T(nominal = 500.0)
//  * candidate: B1.heatTransfer.states[1].T(nominal = 500.0)
//  * candidate: B1.heatTransfer.heatPorts[1].T(nominal = 300.0)
//  * candidate: B1.heatTransfer.Ts[1](nominal = 300.0)
// => select value from B1.heatTransfer.Ts[1](nominal = 300.0) for variable: B1.heatTransfer.Ts[1]
// Warning: Alias set with several free start values
//  * candidate: P2.heatTransfer.states[1].T(start = 500.0)
//  * candidate: P2.medium.state.T(start = 500.0)
//  * candidate: P2.monitoring.state.T(start = 500.0)
//  * candidate: P2.medium.T(start = P2.T_start)
// => select value from P2.medium.T(start = P2.T_start) for variable: P2.heatTransfer.Ts[1]
// Warning: Alias set with different nominal values
//  * candidate: P2.medium.T(nominal = 500.0)
//  * candidate: P2.monitoring.state.T(nominal = 500.0)
//  * candidate: P2.medium.state.T(nominal = 500.0)
//  * candidate: P2.heatTransfer.states[1].T(nominal = 500.0)
//  * candidate: P2.heatTransfer.heatPorts[1].T(nominal = 300.0)
//  * candidate: P2.heatTransfer.Ts[1](nominal = 300.0)
// => select value from P2.heatTransfer.Ts[1](nominal = 300.0) for variable: P2.heatTransfer.Ts[1]
// Warning: Alias set with several free start values
//  * candidate: volume5.medium.h(start = volume5.h_start)
//  * candidate: volume5.port_3.h_outflow(start = 100000.0)
//  * candidate: V20.state_b.h(start = 100000.0)
//  * candidate: V20.port_a.h_outflow(start = 100000.0)
//  * candidate: volume5.port_2.h_outflow(start = 100000.0)
//  * candidate: V24.state_a.h(start = 100000.0)
//  * candidate: V24.port_b.h_outflow(start = 100000.0)
//  * candidate: P2.monitoring.state_in.h(start = 100000.0)
//  * candidate: volume5.port_1.h_outflow(start = 100000.0)
//  * candidate: V21.state_b.h(start = 100000.0)
//  * candidate: V21.port_a.h_outflow(start = 100000.0)
//  * candidate: volume5.medium.state.h(start = 100000.0)
// => select value from volume5.medium.h(start = volume5.h_start) for variable: volume5.medium.h
// Warning: Alias set with several free start values
//  * candidate: P1.heatTransfer.states[1].T(start = 500.0)
//  * candidate: P1.medium.state.T(start = 500.0)
//  * candidate: P1.monitoring.state.T(start = 500.0)
//  * candidate: P1.medium.T(start = P1.T_start)
// => select value from P1.medium.T(start = P1.T_start) for variable: P1.heatTransfer.Ts[1]
// Warning: Alias set with different nominal values
//  * candidate: P1.medium.T(nominal = 500.0)
//  * candidate: P1.monitoring.state.T(nominal = 500.0)
//  * candidate: P1.medium.state.T(nominal = 500.0)
//  * candidate: P1.heatTransfer.states[1].T(nominal = 500.0)
//  * candidate: P1.heatTransfer.heatPorts[1].T(nominal = 300.0)
//  * candidate: P1.heatTransfer.Ts[1](nominal = 300.0)
// => select value from P1.heatTransfer.Ts[1](nominal = 300.0) for variable: P1.heatTransfer.Ts[1]
// Warning: Alias set with several free start values
//  * candidate: volume5.medium.T(start = volume5.T_start)
//  * candidate: volume5.medium.state.T(start = 500.0)
// => select value from volume5.medium.T(start = volume5.T_start) for variable: volume5.medium.T
// Warning: There are iteration variables with default zero start attribute. For more information set +d=initialization. In OMEdit Tools->Options->Simulation->OMCFlags, in OMNotebook call setCommandLineOptions("+d=initialization").
// "true
// "
// ""
// endResult
