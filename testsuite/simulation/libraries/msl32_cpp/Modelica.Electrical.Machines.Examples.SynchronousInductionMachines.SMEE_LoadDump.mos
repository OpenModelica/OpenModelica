// name:     Modelica.Electrical.Machines.Examples.SynchronousInductionMachines.SMEE_LoadDump
// keywords: simulation MSL Examples
// status: correct
// cflags: -d=-newInst
//
// Simulation Results
// Modelica Standard Library
//

runScript("../common/ModelTestingDefaults.mos"); getErrorString();

modelTestingType := OpenModelicaModelTesting.Kind.VerifiedSimulation;
modelName := $TypeName(Modelica.Electrical.Machines.Examples.SynchronousInductionMachines.SMEE_LoadDump);
compareVars :=
{
   "speed.phi",
   "speed.w",
   "smee.idq_sr[1]",
   "smee.idq_sr[2]",
   "smee.idq_rr[1]",
   "smee.idq_rr[2]",
   "smee.lesigma.i",
   "voltageController.I.y"
};

simulationRuntime := OpenModelicaModelTesting.SimulationRuntime.Cpp;

runScript(modelTesting);getErrorString();

// Result:
// "true
// "
// ""
// OpenModelicaModelTesting.Kind.VerifiedSimulation
// Modelica.Electrical.Machines.Examples.SynchronousInductionMachines.SMEE_LoadDump
// {"speed.phi","speed.w","smee.idq_sr[1]","smee.idq_sr[2]","smee.idq_rr[1]","smee.idq_rr[2]","smee.lesigma.i","voltageController.I.y"}
// OpenModelicaModelTesting.SimulationRuntime.Cpp
// Simulation options: startTime = 0.0, stopTime = 10.0, numberOfIntervals = 10000, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'Modelica.Electrical.Machines.Examples.SynchronousInductionMachines.SMEE_LoadDump', options = '', outputFormat = 'mat', variableFilter = 'time|speed.phi|speed.w|smee.idq_sr.1.|smee.idq_sr.2.|smee.idq_rr.1.|smee.idq_rr.2.|smee.lesigma.i|voltageController.I.y', cflags = '', simflags = ' -emit_protected'
// Result file: Modelica.Electrical.Machines.Examples.SynchronousInductionMachines.SMEE_LoadDump_res.mat
// Messages: ERROR  : solver: DASSL: failed step at t = 0.000282: Number of event iteration steps exceeded at time: 0.000282
// ERROR  : solver: SimManager: Simulation stopped with errors before t = 10.000000
// ERROR  : solver: SimManager: DASSL: solve failed with idid = 5
// ERROR  : solver: SimController: Simulation failed using nonlinear solver newton
// ERROR  : solver: SimController: Recovering with nonlinear solver kinsol
//
// Files Equal!
// "true
// "
// ""
// endResult
