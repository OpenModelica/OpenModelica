// name:     PlanarMechanicsForTesting.Examples.KinematicLoop.mos [simulation checking]
// keywords: simulation PlanarMechanicsForTesting.Examples
// status: correct
// teardown_command: rm -rf _PlanarMechanicsForTesting.Examples.KinematicLoop.* PlanarMechanicsForTesting.Examples.KinematicLoop_i* PlanarMechanicsForTesting.Examples.KinematicLoop_d* PlanarMechanicsForTesting.Examples.KinematicLoop_r* PlanarMechanicsForTesting.Examples.KinematicLoop_f* PlanarMechanicsForTesting.Examples.KinematicLoop PlanarMechanicsForTesting.Examples.KinematicLoop.exe PlanarMechanicsForTesting.Examples.KinematicLoop.cpp PlanarMechanicsForTesting.Examples.KinematicLoop.makefile PlanarMechanicsForTesting.Examples.KinematicLoop.libs PlanarMechanicsForTesting.Examples.KinematicLoop.log PlanarMechanicsForTesting.Examples.KinematicLoop.c PlanarMechanicsForTesting.Examples.KinematicLoop.o output.log
//
// Simulation Results 
// Modelica Standard Library
//

loadModel(Modelica,{"3.1"}); getErrorString();
loadFile("PlanarMechanicsForTesting.mo"); getErrorString();

setMatchingAlgorithm("PFPlus");
setIndexReductionMethod("dynamicStateSelection");
// adrpo: stopTime=3 is got from the experiment annotation in the model
simulate(PlanarMechanicsForTesting.Examples.KinematicLoop); getErrorString();

res := OpenModelica.Scripting.compareSimulationResults("PlanarMechanicsForTesting.Examples.KinematicLoop_res.mat",
  getEnvironmentVar("REFERENCEFILES")+"/PlanarMechanics//KinematicLoop.mat","PlanarMechanicsForTesting.Examples.KinematicLoop_diff.csv",0.01,0.001,
  {"actuatedPrismatic.s", "actuatedPrismatic.v", "revolute3.w", "revolute3.phi"});

// Result:
// true
// ""
// true
// ""
// true
// true
// record SimulationResult
//     resultFile = "PlanarMechanicsForTesting.Examples.KinematicLoop_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 6.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'PlanarMechanicsForTesting.Examples.KinematicLoop', options = '', outputFormat = 'mat', variableFilter = '.*', cflags = '', simflags = ''",
//     messages = "LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
// "
// end SimulationResult;
// "Warning: There are nonlinear iteration variables with default zero start attribute found in NLSJac0. For more information set -d=initialization. In OMEdit Tools->Options->Simulation->OMCFlags, in OMNotebook call setCommandLineOptions(\"-d=initialization\").
// "
// {"Files Equal!"}
// endResult
