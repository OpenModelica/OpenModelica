//name:        Simulate Modelica.Electrical.Digital.Examples [version 3.1]
//keyword:     instantiating/check/simulate MSL 3.1 Modelica.Electrical.Digital.Examples
//status:      correct
// cflags: -d=-newInst
//
// instantiate/check/simulate model example
//

loadModel(Modelica,{"3.1"}); getErrorString();

// Modelica.Electrical.Digital.Examples
instantiateModel(Modelica.Electrical.Digital.Examples.Multiplexer);  getErrorString();
checkModel(Modelica.Electrical.Digital.Examples.Multiplexer);  getErrorString();
simulate(Modelica.Electrical.Digital.Examples.Multiplexer);  getErrorString();


instantiateModel(Modelica.Electrical.Digital.Examples.FlipFlop);  getErrorString();
checkModel(Modelica.Electrical.Digital.Examples.FlipFlop);  getErrorString();
simulate(Modelica.Electrical.Digital.Examples.FlipFlop);  getErrorString();


instantiateModel(Modelica.Electrical.Digital.Examples.HalfAdder);  getErrorString();
checkModel(Modelica.Electrical.Digital.Examples.HalfAdder);  getErrorString();
simulate(Modelica.Electrical.Digital.Examples.HalfAdder);  getErrorString();


instantiateModel(Modelica.Electrical.Digital.Examples.FullAdder);  getErrorString();
checkModel(Modelica.Electrical.Digital.Examples.FullAdder);  getErrorString();
simulate(Modelica.Electrical.Digital.Examples.FullAdder);  getErrorString();


instantiateModel(Modelica.Electrical.Digital.Examples.Adder4);  getErrorString();
checkModel(Modelica.Electrical.Digital.Examples.Adder4);  getErrorString();
simulate(Modelica.Electrical.Digital.Examples.Adder4);  getErrorString();


instantiateModel(Modelica.Electrical.Digital.Examples.Counter3);  getErrorString();
checkModel(Modelica.Electrical.Digital.Examples.Counter3);  getErrorString();
simulate(Modelica.Electrical.Digital.Examples.Counter3);  getErrorString();


instantiateModel(Modelica.Electrical.Digital.Examples.Counter);  getErrorString();
checkModel(Modelica.Electrical.Digital.Examples.Counter);  getErrorString();
simulate(Modelica.Electrical.Digital.Examples.Counter);  getErrorString();

system("rm -f *.c *.dll *.log *.makefile *.cpp *.exe *.h *.libs *_init.xml *_init.txt *_res.mat");


// Result:
// true
// ""
// "class Modelica.Electrical.Digital.Examples.Multiplexer
//   parameter Real CLK.startTime(quantity = "Time", unit = "s", start = 0.0) "Output = offset for time < startTime";
//   parameter Real CLK.period(quantity = "Time", unit = "s", min = 1e-60, start = 1.0) = 20.0 "Time for one period";
//   parameter Real CLK.width(min = 1e-60, max = 100.0, start = 50.0) "Width of pulses in % of period";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') CLK.y "Connector of Digital output signal";
//   protected Real CLK.t_i(quantity = "Time", unit = "s", start = CLK.startTime) "Start time of current period";
//   protected Real CLK.t_width(quantity = "Time", unit = "s") = CLK.period * CLK.width / 100.0;
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') D0.x[1] = Modelica.Electrical.Digital.Interfaces.Logic.'1' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') D0.x[2] = Modelica.Electrical.Digital.Interfaces.Logic.'0' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') D0.x[3] = Modelica.Electrical.Digital.Interfaces.Logic.'1' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') D0.x[4] = Modelica.Electrical.Digital.Interfaces.Logic.'0' "vector of values";
//   parameter Real D0.t[1] = 50.0 "vector of corresponding time points";
//   parameter Real D0.t[2] = 100.0 "vector of corresponding time points";
//   parameter Real D0.t[3] = 145.0 "vector of corresponding time points";
//   parameter Real D0.t[4] = 200.0 "vector of corresponding time points";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') D0.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial output value";
//   parameter Integer D0.n = 4 "table size";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') D0.y;
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') D1.x[1] = Modelica.Electrical.Digital.Interfaces.Logic.'1' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') D1.x[2] = Modelica.Electrical.Digital.Interfaces.Logic.'0' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') D1.x[3] = Modelica.Electrical.Digital.Interfaces.Logic.'1' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') D1.x[4] = Modelica.Electrical.Digital.Interfaces.Logic.'0' "vector of values";
//   parameter Real D1.t[1] = 22.0 "vector of corresponding time points";
//   parameter Real D1.t[2] = 140.0 "vector of corresponding time points";
//   parameter Real D1.t[3] = 150.0 "vector of corresponding time points";
//   parameter Real D1.t[4] = 180.0 "vector of corresponding time points";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') D1.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial output value";
//   parameter Integer D1.n = 4 "table size";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') D1.y;
//   parameter Real MUX.delayTime(quantity = "Time", unit = "s") = 0.001 "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.q0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial value";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.d0;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.d1;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.d2;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.d3;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.a0;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.a1;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.d;
//   parameter Integer MUX.Or1.n(min = 2) = 4 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.Or1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.Or1.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.Or1.x[3] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.Or1.x[4] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.Or1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.Or1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.Or1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.Or1.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.Or1.auxiliary[4](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer MUX.And1.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And1.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And1.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And1.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer MUX.And2.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And2.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And2.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And2.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer MUX.And3.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And3.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And3.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And3.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And3.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And3.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And3.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And3.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer MUX.And4.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And4.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And4.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And4.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And4.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And4.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And4.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And4.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.Not1.x "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.Not1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.Not1.auxiliary(start = Modelica.Electrical.Digital.Interfaces.Logic.'0', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.Not2.x "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.Not2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.Not2.auxiliary(start = Modelica.Electrical.Digital.Interfaces.Logic.'0', fixed = true);
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') D2.x[1] = Modelica.Electrical.Digital.Interfaces.Logic.'1' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') D2.x[2] = Modelica.Electrical.Digital.Interfaces.Logic.'0' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') D2.x[3] = Modelica.Electrical.Digital.Interfaces.Logic.'1' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') D2.x[4] = Modelica.Electrical.Digital.Interfaces.Logic.'0' "vector of values";
//   parameter Real D2.t[1] = 22.0 "vector of corresponding time points";
//   parameter Real D2.t[2] = 140.0 "vector of corresponding time points";
//   parameter Real D2.t[3] = 150.0 "vector of corresponding time points";
//   parameter Real D2.t[4] = 180.0 "vector of corresponding time points";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') D2.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial output value";
//   parameter Integer D2.n = 4 "table size";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') D2.y;
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') D3.x[1] = Modelica.Electrical.Digital.Interfaces.Logic.'1' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') D3.x[2] = Modelica.Electrical.Digital.Interfaces.Logic.'0' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') D3.x[3] = Modelica.Electrical.Digital.Interfaces.Logic.'1' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') D3.x[4] = Modelica.Electrical.Digital.Interfaces.Logic.'0' "vector of values";
//   parameter Real D3.t[1] = 22.0 "vector of corresponding time points";
//   parameter Real D3.t[2] = 140.0 "vector of corresponding time points";
//   parameter Real D3.t[3] = 150.0 "vector of corresponding time points";
//   parameter Real D3.t[4] = 180.0 "vector of corresponding time points";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') D3.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial output value";
//   parameter Integer D3.n = 4 "table size";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') D3.y;
//   parameter Real FF.delayTime(quantity = "Time", unit = "s") = 0.001 "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.q0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial value";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.j;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.qn "not Q";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.clk;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.k;
//   parameter Real FF.RS1.delayTime(quantity = "Time", unit = "s") = FF.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.q0 = FF.q0 "initial value of output";
//   parameter Integer FF.RS1.Nor1.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.Nor1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.Nor1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.Nor1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.Nor1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.Nor1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer FF.RS1.Nor2.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.Nor2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.Nor2.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.Nor2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.Nor2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.Nor2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.r;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.qn;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.TD1.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.TD1.y "Connector of Digital output signal";
//   parameter Real FF.RS1.TD1.delayTime(quantity = "Time", unit = "s", start = 0.0) = FF.RS1.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.TD1.y0 = FF.RS1.q0 "initial value of output";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.TD1.x_delayed;
//   parameter Real FF.RS2.delayTime(quantity = "Time", unit = "s") = FF.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.q0 = FF.q0 "initial value of output";
//   parameter Integer FF.RS2.Nor1.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.Nor1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.Nor1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.Nor1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.Nor1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.Nor1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer FF.RS2.Nor2.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.Nor2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.Nor2.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.Nor2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.Nor2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.Nor2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.r;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.qn;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.TD1.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.TD1.y "Connector of Digital output signal";
//   parameter Real FF.RS2.TD1.delayTime(quantity = "Time", unit = "s", start = 0.0) = FF.RS2.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.TD1.y0 = FF.RS2.q0 "initial value of output";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.TD1.x_delayed;
//   parameter Integer FF.And1.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And1.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And1.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And1.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer FF.And2.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And2.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And2.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And2.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer FF.And3.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And3.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And3.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And3.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And3.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And3.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer FF.And4.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And4.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And4.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And4.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And4.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And4.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.Not1.x "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.Not1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.Not1.auxiliary(start = Modelica.Electrical.Digital.Interfaces.Logic.'0', fixed = true);
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Enable.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'1') "Logic value to be set";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Enable.y;
// equation
//   MUX.Or1.auxiliary[1] = MUX.Or1.x[1];
//   MUX.Or1.auxiliary[2] = D.Tables.OrTable[MUX.Or1.auxiliary[1],MUX.Or1.x[2]];
//   MUX.Or1.auxiliary[3] = D.Tables.OrTable[MUX.Or1.auxiliary[2],MUX.Or1.x[3]];
//   MUX.Or1.auxiliary[4] = D.Tables.OrTable[MUX.Or1.auxiliary[3],MUX.Or1.x[4]];
//   MUX.Or1.y = pre(MUX.Or1.auxiliary[4]);
//   MUX.And1.auxiliary[1] = MUX.And1.x[1];
//   MUX.And1.auxiliary[2] = D.Tables.AndTable[MUX.And1.auxiliary[1],MUX.And1.x[2]];
//   MUX.And1.auxiliary[3] = D.Tables.AndTable[MUX.And1.auxiliary[2],MUX.And1.x[3]];
//   MUX.And1.y = pre(MUX.And1.auxiliary[3]);
//   MUX.And2.auxiliary[1] = MUX.And2.x[1];
//   MUX.And2.auxiliary[2] = D.Tables.AndTable[MUX.And2.auxiliary[1],MUX.And2.x[2]];
//   MUX.And2.auxiliary[3] = D.Tables.AndTable[MUX.And2.auxiliary[2],MUX.And2.x[3]];
//   MUX.And2.y = pre(MUX.And2.auxiliary[3]);
//   MUX.And3.auxiliary[1] = MUX.And3.x[1];
//   MUX.And3.auxiliary[2] = D.Tables.AndTable[MUX.And3.auxiliary[1],MUX.And3.x[2]];
//   MUX.And3.auxiliary[3] = D.Tables.AndTable[MUX.And3.auxiliary[2],MUX.And3.x[3]];
//   MUX.And3.y = pre(MUX.And3.auxiliary[3]);
//   MUX.And4.auxiliary[1] = MUX.And4.x[1];
//   MUX.And4.auxiliary[2] = D.Tables.AndTable[MUX.And4.auxiliary[1],MUX.And4.x[2]];
//   MUX.And4.auxiliary[3] = D.Tables.AndTable[MUX.And4.auxiliary[2],MUX.And4.x[3]];
//   MUX.And4.y = pre(MUX.And4.auxiliary[3]);
//   MUX.Not1.auxiliary = D.Tables.NotTable[MUX.Not1.x];
//   MUX.Not1.y = pre(MUX.Not1.auxiliary);
//   MUX.Not2.auxiliary = D.Tables.NotTable[MUX.Not2.x];
//   MUX.Not2.y = pre(MUX.Not2.auxiliary);
//   FF.RS1.Nor1.auxiliary[1] = FF.RS1.Nor1.x[1];
//   FF.RS1.Nor1.auxiliary[2] = D.Tables.OrTable[FF.RS1.Nor1.auxiliary[1],FF.RS1.Nor1.x[2]];
//   FF.RS1.Nor1.y = pre(D.Tables.NotTable[FF.RS1.Nor1.auxiliary[2]]);
//   FF.RS1.Nor2.auxiliary[1] = FF.RS1.Nor2.x[1];
//   FF.RS1.Nor2.auxiliary[2] = D.Tables.OrTable[FF.RS1.Nor2.auxiliary[1],FF.RS1.Nor2.x[2]];
//   FF.RS1.Nor2.y = pre(D.Tables.NotTable[FF.RS1.Nor2.auxiliary[2]]);
//   FF.RS1.TD1.x_delayed = DAE.CAST(T_ENUMERATION, integer(delay(Real(FF.RS1.TD1.x),FF.RS1.TD1.delayTime,FF.RS1.TD1.delayTime)));
//   FF.RS1.TD1.y = if FF.RS1.TD1.delayTime > 0.0 then if time >= FF.RS1.TD1.delayTime then FF.RS1.TD1.x_delayed else FF.RS1.TD1.y0 else pre(FF.RS1.TD1.x);
//   FF.RS2.Nor1.auxiliary[1] = FF.RS2.Nor1.x[1];
//   FF.RS2.Nor1.auxiliary[2] = D.Tables.OrTable[FF.RS2.Nor1.auxiliary[1],FF.RS2.Nor1.x[2]];
//   FF.RS2.Nor1.y = pre(D.Tables.NotTable[FF.RS2.Nor1.auxiliary[2]]);
//   FF.RS2.Nor2.auxiliary[1] = FF.RS2.Nor2.x[1];
//   FF.RS2.Nor2.auxiliary[2] = D.Tables.OrTable[FF.RS2.Nor2.auxiliary[1],FF.RS2.Nor2.x[2]];
//   FF.RS2.Nor2.y = pre(D.Tables.NotTable[FF.RS2.Nor2.auxiliary[2]]);
//   FF.RS2.TD1.x_delayed = DAE.CAST(T_ENUMERATION, integer(delay(Real(FF.RS2.TD1.x),FF.RS2.TD1.delayTime,FF.RS2.TD1.delayTime)));
//   FF.RS2.TD1.y = if FF.RS2.TD1.delayTime > 0.0 then if time >= FF.RS2.TD1.delayTime then FF.RS2.TD1.x_delayed else FF.RS2.TD1.y0 else pre(FF.RS2.TD1.x);
//   FF.And1.auxiliary[1] = FF.And1.x[1];
//   FF.And1.auxiliary[2] = D.Tables.AndTable[FF.And1.auxiliary[1],FF.And1.x[2]];
//   FF.And1.auxiliary[3] = D.Tables.AndTable[FF.And1.auxiliary[2],FF.And1.x[3]];
//   FF.And1.y = pre(FF.And1.auxiliary[3]);
//   FF.And2.auxiliary[1] = FF.And2.x[1];
//   FF.And2.auxiliary[2] = D.Tables.AndTable[FF.And2.auxiliary[1],FF.And2.x[2]];
//   FF.And2.auxiliary[3] = D.Tables.AndTable[FF.And2.auxiliary[2],FF.And2.x[3]];
//   FF.And2.y = pre(FF.And2.auxiliary[3]);
//   FF.And3.auxiliary[1] = FF.And3.x[1];
//   FF.And3.auxiliary[2] = D.Tables.AndTable[FF.And3.auxiliary[1],FF.And3.x[2]];
//   FF.And3.y = pre(FF.And3.auxiliary[2]);
//   FF.And4.auxiliary[1] = FF.And4.x[1];
//   FF.And4.auxiliary[2] = D.Tables.AndTable[FF.And4.auxiliary[1],FF.And4.x[2]];
//   FF.And4.y = pre(FF.And4.auxiliary[2]);
//   FF.Not1.auxiliary = D.Tables.NotTable[FF.Not1.x];
//   FF.Not1.y = pre(FF.Not1.auxiliary);
//   FF.q = MUX.a1;
//   D3.y = MUX.d3;
//   D2.y = MUX.d2;
//   D1.y = MUX.d1;
//   D0.y = MUX.d0;
//   CLK.y = FF.clk;
//   CLK.y = MUX.a0;
//   Enable.y = FF.j;
//   Enable.y = FF.k;
//   FF.And2.x[1] = FF.RS1.q;
//   FF.And2.x[1] = FF.qn;
//   FF.And1.x[3] = FF.RS1.qn;
//   FF.And1.x[3] = FF.q;
//   FF.And1.x[2] = FF.j;
//   FF.And3.x[1] = FF.And4.x[1];
//   FF.And3.x[1] = FF.Not1.y;
//   FF.And1.x[1] = FF.And2.x[3];
//   FF.And1.x[1] = FF.Not1.x;
//   FF.And1.x[1] = FF.clk;
//   FF.And3.x[2] = FF.RS2.q;
//   FF.And4.x[2] = FF.RS2.qn;
//   FF.And3.y = FF.RS1.s;
//   FF.And4.y = FF.RS1.r;
//   FF.And2.x[2] = FF.k;
//   FF.And1.y = FF.RS2.s;
//   FF.And2.y = FF.RS2.r;
//   FF.RS2.Nor1.y = FF.RS2.TD1.x;
//   FF.RS2.Nor1.y = FF.RS2.qn;
//   FF.RS2.Nor2.x[2] = FF.RS2.TD1.y;
//   FF.RS2.Nor1.x[1] = FF.RS2.Nor2.y;
//   FF.RS2.Nor1.x[1] = FF.RS2.q;
//   FF.RS2.Nor2.x[1] = FF.RS2.r;
//   FF.RS2.Nor1.x[2] = FF.RS2.s;
//   FF.RS1.Nor1.y = FF.RS1.TD1.x;
//   FF.RS1.Nor1.y = FF.RS1.qn;
//   FF.RS1.Nor2.x[2] = FF.RS1.TD1.y;
//   FF.RS1.Nor1.x[1] = FF.RS1.Nor2.y;
//   FF.RS1.Nor1.x[1] = FF.RS1.q;
//   FF.RS1.Nor2.x[1] = FF.RS1.r;
//   FF.RS1.Nor1.x[2] = FF.RS1.s;
//   MUX.And3.x[1] = MUX.And4.x[1];
//   MUX.And3.x[1] = MUX.Not2.x;
//   MUX.And3.x[1] = MUX.a1;
//   MUX.And2.x[3] = MUX.And4.x[3];
//   MUX.And2.x[3] = MUX.Not1.x;
//   MUX.And2.x[3] = MUX.a0;
//   MUX.And1.x[1] = MUX.And2.x[1];
//   MUX.And1.x[1] = MUX.Not2.y;
//   MUX.And1.x[3] = MUX.And3.x[3];
//   MUX.And1.x[3] = MUX.Not1.y;
//   MUX.Or1.y = MUX.d;
//   MUX.And1.y = MUX.Or1.x[4];
//   MUX.And2.y = MUX.Or1.x[3];
//   MUX.And3.y = MUX.Or1.x[2];
//   MUX.And4.y = MUX.Or1.x[1];
//   MUX.And4.x[2] = MUX.d3;
//   MUX.And3.x[2] = MUX.d2;
//   MUX.And2.x[2] = MUX.d1;
//   MUX.And1.x[2] = MUX.d0;
// algorithm
//   when sample(CLK.startTime,CLK.period) then
//     CLK.t_i := time;
//   end when;
//   CLK.y := if  NOT time >= CLK.startTime OR time >= CLK.t_i + CLK.t_width then Modelica.Electrical.Digital.Interfaces.Logic.'0' else Modelica.Electrical.Digital.Interfaces.Logic.'1';
//   if initial() then
//     assert(D0.n > 0, "Invalid size of table (n < 1)");
//     for i in 1:D0.n loop
//     end for;
//   end if;
//   D0.y := D0.y0;
//   for i in 1:D0.n loop
//     if time >= D0.t[i] then
//       D0.y := D0.x[i];
//     end if;
//   end for;
//   if initial() then
//     assert(D1.n > 0, "Invalid size of table (n < 1)");
//     for i in 1:D1.n loop
//     end for;
//   end if;
//   D1.y := D1.y0;
//   for i in 1:D1.n loop
//     if time >= D1.t[i] then
//       D1.y := D1.x[i];
//     end if;
//   end for;
//   if initial() then
//     assert(D2.n > 0, "Invalid size of table (n < 1)");
//     for i in 1:D2.n loop
//     end for;
//   end if;
//   D2.y := D2.y0;
//   for i in 1:D2.n loop
//     if time >= D2.t[i] then
//       D2.y := D2.x[i];
//     end if;
//   end for;
//   if initial() then
//     assert(D3.n > 0, "Invalid size of table (n < 1)");
//     for i in 1:D3.n loop
//     end for;
//   end if;
//   D3.y := D3.y0;
//   for i in 1:D3.n loop
//     if time >= D3.t[i] then
//       D3.y := D3.x[i];
//     end if;
//   end for;
//   Enable.y := Enable.x;
// end Modelica.Electrical.Digital.Examples.Multiplexer;
// "
// ""
// "Check of Modelica.Electrical.Digital.Examples.Multiplexer completed successfully.
// 
// 
// Class Modelica.Electrical.Digital.Examples.Multiplexer has 124 equation(s) and 124 variable(s).
// 72 of these are trivial equation(s).
// "
// ""
// record SimulationResult
//     resultFile = "",
//     messages = "Simulation failed for model: Modelica.Electrical.Digital.Examples.Multiplexer
// Error: Error building simulator. Buildlog: g++ -I. -o Modelica.Electrical.Digital.Examples.Multiplexer.exe Modelica.Electrical.Digital.Examples.Multiplexer.cpp Modelica.Electrical.Digital.Examples.Multiplexer_functions.cpp -L"../../../../libraries/msl31//Modelica/Electrical"   -lsim -linteractive -I"c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc" -msse2 -mfpmath=sse  -lsendData -lQtNetwork-mingw -lQtCore-mingw -lQtGui-mingw -luuid -lole32 -lws2_32 -L"c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/lib/omc" -lc_runtime -lf2c Modelica.Electrical.Digital.Examples.Multiplexer_records.c

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp: In function `int functionDAE_output()':

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1823: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1826: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1826: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1826: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1826: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1826: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1829: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1829: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1829: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1829: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1832: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1832: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1832: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1832: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1833: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1833: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1833: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1833: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1836: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1836: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1836: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1836: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1837: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1837: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1837: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1837: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1838: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1838: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1840: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1840: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1840: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1840: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1840: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1841: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1841: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1861: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1861: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1861: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1861: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1862: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1862: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1864: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1864: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1864: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1864: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1865: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1865: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1885: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1885: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1885: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1885: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1894: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1894: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1894: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1894: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1895: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1895: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1895: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1895: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1898: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1898: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1898: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1898: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1899: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1899: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1899: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1899: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1902: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1902: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1902: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1902: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1903: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1903: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1903: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1903: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1906: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1906: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1906: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1906: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1907: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1907: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1907: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1907: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1910: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1910: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1910: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1910: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1911: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1911: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1911: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1911: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1912: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1912: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1912: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1912: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp: In function `int function_zeroCrossing(fortran_integer*, double*, double*, fortran_integer*, double*, double*, fortran_integer*)':

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2295: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2295: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2297: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2297: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2299: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2299: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2301: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2301: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp: In function `int function_updateDependents()':

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2480: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2483: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2483: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2483: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2483: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2483: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2486: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2486: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2486: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2486: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2489: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2489: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2489: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2489: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2490: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2490: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2490: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2490: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2493: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2493: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2493: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2493: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2494: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2494: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2494: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2494: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2495: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2495: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2497: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2497: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2497: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2497: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2497: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2498: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2498: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2518: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2518: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2518: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2518: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2519: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2519: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2521: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2521: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2521: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2521: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2522: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2522: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2542: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2542: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2542: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2542: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2551: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2551: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2551: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2551: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2552: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2552: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2552: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2552: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2555: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2555: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2555: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2555: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2556: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2556: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2556: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2556: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2559: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2559: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2559: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2559: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2560: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2560: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2560: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2560: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2563: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2563: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2563: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2563: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2564: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2564: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2564: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2564: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2567: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2567: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2567: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2567: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2568: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2568: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2568: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2568: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2569: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2569: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2569: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2569: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp: In function `int initial_residual()':

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2818: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2818: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2818: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2818: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2818: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2819: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2819: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2819: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2819: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2820: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2820: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2820: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2820: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2823: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2823: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2823: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2823: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2823: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2824: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2824: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2824: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2824: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2827: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2827: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2827: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2827: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2828: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2828: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2828: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2828: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2831: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2831: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2831: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2831: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2832: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2832: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2832: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2832: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2835: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2835: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2835: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2835: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2836: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2836: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2836: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2836: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2839: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2845: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2845: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2845: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2845: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2846: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2846: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2848: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2848: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2848: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2848: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2849: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2849: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2867: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2867: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2867: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2867: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2868: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2868: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2870: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2870: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2870: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2870: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2871: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2871: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2889: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2889: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2889: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2889: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2890: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2890: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2890: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2890: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2893: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2893: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2893: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2893: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2894: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2894: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2894: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2894: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2897: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2897: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2897: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2897: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2900: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2900: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2900: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2900: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp: In function `int functionAlgebraics()':

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3158: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3161: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3161: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3161: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3161: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3161: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3164: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3164: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3164: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3164: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3167: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3167: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3167: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3167: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3168: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3168: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3168: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3168: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3171: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3171: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3171: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3171: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3172: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3172: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3172: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3172: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3173: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3173: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3175: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3175: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3175: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3175: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3175: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3176: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3176: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3196: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3196: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3196: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3196: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3197: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3197: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3199: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3199: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3199: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3199: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3200: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3200: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3220: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3220: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3220: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3220: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3229: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3229: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3229: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3229: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3230: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3230: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3230: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3230: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3233: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3233: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3233: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3233: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3234: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3234: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3234: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3234: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3237: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3237: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3237: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3237: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3238: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3238: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3238: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3238: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3241: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3241: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3241: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3241: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3242: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3242: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3242: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3242: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3245: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3245: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3245: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3245: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3246: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3246: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3246: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3246: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3247: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3247: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3247: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3247: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp: In function `int functionDAE(int&)':

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3553: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3556: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3556: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3556: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3556: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3556: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3559: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3559: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3559: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3559: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3562: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3562: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3562: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3562: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3563: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3563: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3563: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3563: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3566: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3566: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3566: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3566: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3567: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3567: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3567: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3567: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3568: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3568: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3570: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3570: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3570: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3570: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3570: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3571: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3571: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3591: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3591: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3591: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3591: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3592: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3592: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3594: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3594: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3594: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3594: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3595: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3595: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3615: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3615: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3615: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3615: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3624: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3624: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3624: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3624: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3625: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3625: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3625: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3625: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3628: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3628: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3628: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3628: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3629: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3629: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3629: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3629: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3632: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3632: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3632: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3632: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3633: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3633: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3633: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3633: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3636: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3636: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3636: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3636: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3637: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3637: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3637: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3637: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3640: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3640: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3640: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3640: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3641: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3641: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3641: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3641: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3642: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3642: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3642: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3642: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp: In function `int function_onlyZeroCrossings(double*, double*)':

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3793: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3793: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3795: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3795: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3797: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3797: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3799: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3799: error: `$Pi' was not declared in this scope

// mingw32-make: *** [Modelica.Electrical.Digital.Examples.Multiplexer] Error 1

// 
// Error: Error building simulator. Buildlog: command g++ not found. Check $OPENMODELICAHOME
// Error: Error building simulator. Buildlog: command "c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/share/omc/scripts/Compile" not found. Check $OPENMODELICAHOME
// "
// end SimulationResult;
// ""
// "class Modelica.Electrical.Digital.Examples.FlipFlop
//   parameter Real FF.delayTime(quantity = "Time", unit = "s") = 0.001 "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.q0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial value";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.j;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.qn "not Q";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.clk;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.k;
//   parameter Real FF.RS1.delayTime(quantity = "Time", unit = "s") = FF.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.q0 = FF.q0 "initial value of output";
//   parameter Integer FF.RS1.Nor1.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.Nor1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.Nor1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.Nor1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.Nor1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.Nor1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer FF.RS1.Nor2.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.Nor2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.Nor2.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.Nor2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.Nor2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.Nor2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.r;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.qn;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.TD1.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.TD1.y "Connector of Digital output signal";
//   parameter Real FF.RS1.TD1.delayTime(quantity = "Time", unit = "s", start = 0.0) = FF.RS1.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.TD1.y0 = FF.RS1.q0 "initial value of output";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.TD1.x_delayed;
//   parameter Real FF.RS2.delayTime(quantity = "Time", unit = "s") = FF.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.q0 = FF.q0 "initial value of output";
//   parameter Integer FF.RS2.Nor1.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.Nor1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.Nor1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.Nor1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.Nor1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.Nor1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer FF.RS2.Nor2.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.Nor2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.Nor2.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.Nor2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.Nor2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.Nor2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.r;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.qn;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.TD1.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.TD1.y "Connector of Digital output signal";
//   parameter Real FF.RS2.TD1.delayTime(quantity = "Time", unit = "s", start = 0.0) = FF.RS2.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.TD1.y0 = FF.RS2.q0 "initial value of output";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.TD1.x_delayed;
//   parameter Integer FF.And1.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And1.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And1.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And1.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer FF.And2.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And2.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And2.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And2.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer FF.And3.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And3.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And3.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And3.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And3.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And3.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer FF.And4.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And4.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And4.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And4.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And4.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And4.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.Not1.x "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.Not1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.Not1.auxiliary(start = Modelica.Electrical.Digital.Interfaces.Logic.'0', fixed = true);
//   parameter Real CLK.startTime(quantity = "Time", unit = "s", start = 0.0) "Output = offset for time < startTime";
//   parameter Real CLK.period(quantity = "Time", unit = "s", min = 1e-60, start = 1.0) = 10.0 "Time for one period";
//   parameter Real CLK.width(min = 1e-60, max = 100.0, start = 50.0) "Width of pulses in % of period";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') CLK.y "Connector of Digital output signal";
//   protected Real CLK.t_i(quantity = "Time", unit = "s", start = CLK.startTime) "Start time of current period";
//   protected Real CLK.t_width(quantity = "Time", unit = "s") = CLK.period * CLK.width / 100.0;
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') J.x[1] = Modelica.Electrical.Digital.Interfaces.Logic.'1' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') J.x[2] = Modelica.Electrical.Digital.Interfaces.Logic.'0' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') J.x[3] = Modelica.Electrical.Digital.Interfaces.Logic.'1' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') J.x[4] = Modelica.Electrical.Digital.Interfaces.Logic.'0' "vector of values";
//   parameter Real J.t[1] = 50.0 "vector of corresponding time points";
//   parameter Real J.t[2] = 100.0 "vector of corresponding time points";
//   parameter Real J.t[3] = 145.0 "vector of corresponding time points";
//   parameter Real J.t[4] = 200.0 "vector of corresponding time points";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') J.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial output value";
//   parameter Integer J.n = 4 "table size";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') J.y;
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') K.x[1] = Modelica.Electrical.Digital.Interfaces.Logic.'1' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') K.x[2] = Modelica.Electrical.Digital.Interfaces.Logic.'0' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') K.x[3] = Modelica.Electrical.Digital.Interfaces.Logic.'1' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') K.x[4] = Modelica.Electrical.Digital.Interfaces.Logic.'0' "vector of values";
//   parameter Real K.t[1] = 22.0 "vector of corresponding time points";
//   parameter Real K.t[2] = 140.0 "vector of corresponding time points";
//   parameter Real K.t[3] = 150.0 "vector of corresponding time points";
//   parameter Real K.t[4] = 180.0 "vector of corresponding time points";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') K.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial output value";
//   parameter Integer K.n = 4 "table size";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') K.y;
// equation
//   FF.RS1.Nor1.auxiliary[1] = FF.RS1.Nor1.x[1];
//   FF.RS1.Nor1.auxiliary[2] = D.Tables.OrTable[FF.RS1.Nor1.auxiliary[1],FF.RS1.Nor1.x[2]];
//   FF.RS1.Nor1.y = pre(D.Tables.NotTable[FF.RS1.Nor1.auxiliary[2]]);
//   FF.RS1.Nor2.auxiliary[1] = FF.RS1.Nor2.x[1];
//   FF.RS1.Nor2.auxiliary[2] = D.Tables.OrTable[FF.RS1.Nor2.auxiliary[1],FF.RS1.Nor2.x[2]];
//   FF.RS1.Nor2.y = pre(D.Tables.NotTable[FF.RS1.Nor2.auxiliary[2]]);
//   FF.RS1.TD1.x_delayed = DAE.CAST(T_ENUMERATION, integer(delay(Real(FF.RS1.TD1.x),FF.RS1.TD1.delayTime,FF.RS1.TD1.delayTime)));
//   FF.RS1.TD1.y = if FF.RS1.TD1.delayTime > 0.0 then if time >= FF.RS1.TD1.delayTime then FF.RS1.TD1.x_delayed else FF.RS1.TD1.y0 else pre(FF.RS1.TD1.x);
//   FF.RS2.Nor1.auxiliary[1] = FF.RS2.Nor1.x[1];
//   FF.RS2.Nor1.auxiliary[2] = D.Tables.OrTable[FF.RS2.Nor1.auxiliary[1],FF.RS2.Nor1.x[2]];
//   FF.RS2.Nor1.y = pre(D.Tables.NotTable[FF.RS2.Nor1.auxiliary[2]]);
//   FF.RS2.Nor2.auxiliary[1] = FF.RS2.Nor2.x[1];
//   FF.RS2.Nor2.auxiliary[2] = D.Tables.OrTable[FF.RS2.Nor2.auxiliary[1],FF.RS2.Nor2.x[2]];
//   FF.RS2.Nor2.y = pre(D.Tables.NotTable[FF.RS2.Nor2.auxiliary[2]]);
//   FF.RS2.TD1.x_delayed = DAE.CAST(T_ENUMERATION, integer(delay(Real(FF.RS2.TD1.x),FF.RS2.TD1.delayTime,FF.RS2.TD1.delayTime)));
//   FF.RS2.TD1.y = if FF.RS2.TD1.delayTime > 0.0 then if time >= FF.RS2.TD1.delayTime then FF.RS2.TD1.x_delayed else FF.RS2.TD1.y0 else pre(FF.RS2.TD1.x);
//   FF.And1.auxiliary[1] = FF.And1.x[1];
//   FF.And1.auxiliary[2] = D.Tables.AndTable[FF.And1.auxiliary[1],FF.And1.x[2]];
//   FF.And1.auxiliary[3] = D.Tables.AndTable[FF.And1.auxiliary[2],FF.And1.x[3]];
//   FF.And1.y = pre(FF.And1.auxiliary[3]);
//   FF.And2.auxiliary[1] = FF.And2.x[1];
//   FF.And2.auxiliary[2] = D.Tables.AndTable[FF.And2.auxiliary[1],FF.And2.x[2]];
//   FF.And2.auxiliary[3] = D.Tables.AndTable[FF.And2.auxiliary[2],FF.And2.x[3]];
//   FF.And2.y = pre(FF.And2.auxiliary[3]);
//   FF.And3.auxiliary[1] = FF.And3.x[1];
//   FF.And3.auxiliary[2] = D.Tables.AndTable[FF.And3.auxiliary[1],FF.And3.x[2]];
//   FF.And3.y = pre(FF.And3.auxiliary[2]);
//   FF.And4.auxiliary[1] = FF.And4.x[1];
//   FF.And4.auxiliary[2] = D.Tables.AndTable[FF.And4.auxiliary[1],FF.And4.x[2]];
//   FF.And4.y = pre(FF.And4.auxiliary[2]);
//   FF.Not1.auxiliary = D.Tables.NotTable[FF.Not1.x];
//   FF.Not1.y = pre(FF.Not1.auxiliary);
//   FF.k = K.y;
//   CLK.y = FF.clk;
//   FF.j = J.y;
//   FF.And2.x[1] = FF.RS1.q;
//   FF.And2.x[1] = FF.qn;
//   FF.And1.x[3] = FF.RS1.qn;
//   FF.And1.x[3] = FF.q;
//   FF.And1.x[2] = FF.j;
//   FF.And3.x[1] = FF.And4.x[1];
//   FF.And3.x[1] = FF.Not1.y;
//   FF.And1.x[1] = FF.And2.x[3];
//   FF.And1.x[1] = FF.Not1.x;
//   FF.And1.x[1] = FF.clk;
//   FF.And3.x[2] = FF.RS2.q;
//   FF.And4.x[2] = FF.RS2.qn;
//   FF.And3.y = FF.RS1.s;
//   FF.And4.y = FF.RS1.r;
//   FF.And2.x[2] = FF.k;
//   FF.And1.y = FF.RS2.s;
//   FF.And2.y = FF.RS2.r;
//   FF.RS2.Nor1.y = FF.RS2.TD1.x;
//   FF.RS2.Nor1.y = FF.RS2.qn;
//   FF.RS2.Nor2.x[2] = FF.RS2.TD1.y;
//   FF.RS2.Nor1.x[1] = FF.RS2.Nor2.y;
//   FF.RS2.Nor1.x[1] = FF.RS2.q;
//   FF.RS2.Nor2.x[1] = FF.RS2.r;
//   FF.RS2.Nor1.x[2] = FF.RS2.s;
//   FF.RS1.Nor1.y = FF.RS1.TD1.x;
//   FF.RS1.Nor1.y = FF.RS1.qn;
//   FF.RS1.Nor2.x[2] = FF.RS1.TD1.y;
//   FF.RS1.Nor1.x[1] = FF.RS1.Nor2.y;
//   FF.RS1.Nor1.x[1] = FF.RS1.q;
//   FF.RS1.Nor2.x[1] = FF.RS1.r;
//   FF.RS1.Nor1.x[2] = FF.RS1.s;
// algorithm
//   when sample(CLK.startTime,CLK.period) then
//     CLK.t_i := time;
//   end when;
//   CLK.y := if  NOT time >= CLK.startTime OR time >= CLK.t_i + CLK.t_width then Modelica.Electrical.Digital.Interfaces.Logic.'0' else Modelica.Electrical.Digital.Interfaces.Logic.'1';
//   if initial() then
//     assert(J.n > 0, "Invalid size of table (n < 1)");
//     for i in 1:J.n loop
//     end for;
//   end if;
//   J.y := J.y0;
//   for i in 1:J.n loop
//     if time >= J.t[i] then
//       J.y := J.x[i];
//     end if;
//   end for;
//   if initial() then
//     assert(K.n > 0, "Invalid size of table (n < 1)");
//     for i in 1:K.n loop
//     end for;
//   end if;
//   K.y := K.y0;
//   for i in 1:K.n loop
//     if time >= K.t[i] then
//       K.y := K.x[i];
//     end if;
//   end for;
// end Modelica.Electrical.Digital.Examples.FlipFlop;
// "
// ""
// "Check of Modelica.Electrical.Digital.Examples.FlipFlop completed successfully.
// 
// 
// Class Modelica.Electrical.Digital.Examples.FlipFlop has 71 equation(s) and 71 variable(s).
// 42 of these are trivial equation(s).
// "
// ""
// record SimulationResult
//     resultFile = "",
//     messages = "Simulation failed for model: Modelica.Electrical.Digital.Examples.FlipFlop
// Error: Error building simulator. Buildlog: g++ -I. -o Modelica.Electrical.Digital.Examples.FlipFlop.exe Modelica.Electrical.Digital.Examples.FlipFlop.cpp Modelica.Electrical.Digital.Examples.FlipFlop_functions.cpp -L"../../../../libraries/msl31//Modelica/Electrical"   -lsim -linteractive -I"c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc" -msse2 -mfpmath=sse  -lsendData -lQtNetwork-mingw -lQtCore-mingw -lQtGui-mingw -luuid -lole32 -lws2_32 -L"c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/lib/omc" -lc_runtime -lf2c Modelica.Electrical.Digital.Examples.FlipFlop_records.c

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp: In function `int functionDAE_output()':

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1265: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1268: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1268: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1268: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1268: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1268: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1271: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1271: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1271: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1271: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1274: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1274: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1274: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1274: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1275: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1275: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1275: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1275: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1278: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1278: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1278: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1278: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1279: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1279: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1279: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1279: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1280: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1280: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1282: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1282: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1282: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1282: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1282: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1283: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1283: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1303: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1303: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1303: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1303: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1304: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1304: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1306: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1306: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1306: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1306: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1307: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1307: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1327: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1327: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1327: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1327: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp: In function `int function_zeroCrossing(fortran_integer*, double*, double*, fortran_integer*, double*, double*, fortran_integer*)':

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1531: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1531: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1533: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1533: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp: In function `int function_updateDependents()':

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1672: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1675: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1675: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1675: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1675: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1675: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1678: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1678: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1678: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1678: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1681: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1681: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1681: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1681: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1682: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1682: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1682: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1682: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1685: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1685: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1685: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1685: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1686: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1686: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1686: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1686: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1687: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1687: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1689: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1689: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1689: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1689: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1689: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1690: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1690: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1710: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1710: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1710: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1710: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1711: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1711: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1713: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1713: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1713: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1713: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1714: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1714: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1734: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1734: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1734: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1734: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp: In function `int initial_residual()':

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1915: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1915: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1915: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1915: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1915: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1916: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1916: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1916: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1918: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1918: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1918: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1918: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1919: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1919: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1937: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1937: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1937: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1937: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1938: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1938: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1940: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1940: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1940: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1940: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1941: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1941: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1959: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1959: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1959: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1959: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1959: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1960: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1960: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1960: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1960: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1963: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1963: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1963: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1963: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1964: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1964: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1964: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1964: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1967: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1967: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1967: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1967: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1970: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1970: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1970: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1970: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp: In function `int functionAlgebraics()':

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2145: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2148: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2148: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2148: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2148: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2148: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2151: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2151: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2151: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2151: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2154: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2154: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2154: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2154: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2155: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2155: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2155: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2155: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2158: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2158: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2158: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2158: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2159: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2159: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2159: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2159: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2160: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2160: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2162: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2162: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2162: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2162: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2162: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2163: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2163: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2183: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2183: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2183: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2183: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2184: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2184: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2186: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2186: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2186: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2186: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2187: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2187: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2207: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2207: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2207: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2207: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp: In function `int functionDAE(int&)':

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2346: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2349: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2349: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2349: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2349: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2349: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2352: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2352: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2352: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2352: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2355: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2355: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2355: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2355: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2356: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2356: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2356: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2356: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2359: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2359: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2359: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2359: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2360: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2360: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2360: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2360: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2361: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2361: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2363: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2363: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2363: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2363: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2363: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2364: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2364: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2384: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2384: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2384: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2384: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2385: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2385: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2387: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2387: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2387: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2387: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2388: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2388: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2408: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2408: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2408: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2408: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp: In function `int function_onlyZeroCrossings(double*, double*)':

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2497: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2497: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2499: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2499: error: `$Pi' was not declared in this scope

// mingw32-make: *** [Modelica.Electrical.Digital.Examples.FlipFlop] Error 1

// 
// Error: Error building simulator. Buildlog: command g++ not found. Check $OPENMODELICAHOME
// Error: Error building simulator. Buildlog: command "c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/share/omc/scripts/Compile" not found. Check $OPENMODELICAHOME
// "
// end SimulationResult;
// ""
// "class Modelica.Electrical.Digital.Examples.HalfAdder
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') a.x[1] = Modelica.Electrical.Digital.Interfaces.Logic.'1' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') a.x[2] = Modelica.Electrical.Digital.Interfaces.Logic.'0' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') a.x[3] = Modelica.Electrical.Digital.Interfaces.Logic.'1' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') a.x[4] = Modelica.Electrical.Digital.Interfaces.Logic.'0' "vector of values";
//   parameter Real a.t[1] = 1.0 "vector of corresponding time points";
//   parameter Real a.t[2] = 2.0 "vector of corresponding time points";
//   parameter Real a.t[3] = 3.0 "vector of corresponding time points";
//   parameter Real a.t[4] = 4.0 "vector of corresponding time points";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') a.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial output value";
//   parameter Integer a.n = 4 "table size";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') a.y;
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') b.x[1] = Modelica.Electrical.Digital.Interfaces.Logic.'1' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') b.x[2] = Modelica.Electrical.Digital.Interfaces.Logic.'0' "vector of values";
//   parameter Real b.t[1] = 2.0 "vector of corresponding time points";
//   parameter Real b.t[2] = 4.0 "vector of corresponding time points";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') b.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial output value";
//   parameter Integer b.n = 2 "table size";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') b.y;
//   parameter Real Adder.delayTime = 0.3 "delay time";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.b;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.a;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.c;
//   parameter Integer Adder.AND.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.AND.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.AND.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.AND.y "Connector of Digital output signal";
//   parameter Real Adder.AND.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder.delayTime "rise inertial delay";
//   parameter Real Adder.AND.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder.delayTime "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.AND.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'U' "initial value of output";
//   parameter Integer Adder.AND.G1.n(min = 2) = Adder.AND.n "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.AND.G1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.AND.G1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.AND.G1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.AND.G1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.AND.G1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.AND.G2.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.AND.G2.y "Connector of Digital output signal";
//   parameter Real Adder.AND.G2.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder.AND.tLH "rise inertial delay";
//   parameter Real Adder.AND.G2.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder.AND.tHL "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.AND.G2.y0 = Adder.AND.y0 "initial value of output";
//   protected Integer Adder.AND.G2.delayTable[1,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[1,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[1,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[1,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[1,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[1,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[1,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[1,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[1,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[2,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[2,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[2,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[2,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[2,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[2,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[2,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[2,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[2,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[3,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[3,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[3,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[3,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[3,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[3,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[3,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[3,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[3,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[4,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[4,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[4,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[4,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[4,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[4,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[4,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[4,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[4,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[5,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[5,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[5,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[5,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[5,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[5,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[5,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[5,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[5,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[6,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[6,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[6,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[6,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[6,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[6,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[6,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[6,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[6,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[7,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[7,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[7,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[7,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[7,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[7,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[7,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[7,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[7,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[8,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[8,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[8,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[8,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[8,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[8,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[8,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[8,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[8,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[9,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[9,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[9,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[9,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[9,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[9,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[9,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[9,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[9,9] = 0 "specification of delay according to signal change";
//   protected Real Adder.AND.G2.delayTime(quantity = "Time", unit = "s");
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.AND.G2.y_auxiliary(start = Adder.AND.G2.y0, fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.AND.G2.x_old(start = Adder.AND.G2.y0, fixed = true);
//   protected Integer Adder.AND.G2.lh;
//   protected discrete Real Adder.AND.G2.t_next(quantity = "Time", unit = "s");
//   parameter Real Adder.XOR.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder.delayTime "rise inertial delay";
//   parameter Real Adder.XOR.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder.delayTime "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.XOR.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'U' "initial value of output";
//   parameter Integer Adder.XOR.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.XOR.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.XOR.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.XOR.y "Connector of Digital output signal";
//   parameter Integer Adder.XOR.G1.n(min = 2) = Adder.XOR.n "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.XOR.G1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.XOR.G1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.XOR.G1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.XOR.G1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.XOR.G1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.XOR.G2.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.XOR.G2.y "Connector of Digital output signal";
//   parameter Real Adder.XOR.G2.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder.XOR.tLH "rise inertial delay";
//   parameter Real Adder.XOR.G2.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder.XOR.tHL "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.XOR.G2.y0 = Adder.XOR.y0 "initial value of output";
//   protected Integer Adder.XOR.G2.delayTable[1,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[1,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[1,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[1,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[1,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[1,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[1,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[1,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[1,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[2,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[2,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[2,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[2,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[2,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[2,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[2,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[2,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[2,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[3,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[3,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[3,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[3,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[3,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[3,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[3,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[3,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[3,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[4,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[4,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[4,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[4,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[4,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[4,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[4,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[4,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[4,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[5,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[5,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[5,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[5,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[5,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[5,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[5,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[5,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[5,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[6,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[6,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[6,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[6,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[6,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[6,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[6,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[6,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[6,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[7,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[7,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[7,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[7,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[7,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[7,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[7,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[7,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[7,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[8,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[8,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[8,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[8,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[8,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[8,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[8,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[8,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[8,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[9,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[9,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[9,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[9,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[9,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[9,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[9,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[9,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[9,9] = 0 "specification of delay according to signal change";
//   protected Real Adder.XOR.G2.delayTime(quantity = "Time", unit = "s");
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.XOR.G2.y_auxiliary(start = Adder.XOR.G2.y0, fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.XOR.G2.x_old(start = Adder.XOR.G2.y0, fixed = true);
//   protected Integer Adder.XOR.G2.lh;
//   protected discrete Real Adder.XOR.G2.t_next(quantity = "Time", unit = "s");
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') s.x[1];
//   output Real s.y[1];
//   parameter Integer s.n(min = 1, start = 1) "signal width";
//   parameter Real s.value_U(start = 0.5) "value for digital U (uninitialized)";
//   parameter Real s.value_X(start = 0.5) "value for digital X (Forcing Unknown)";
//   parameter Real s.value_0(start = 0.0) "value for digital 0   (Forcing 0)";
//   parameter Real s.value_1(start = 1.0) "value for digital 1 (Forcing 1)";
//   parameter Real s.value_Z(start = 0.5) "value for digital Z (High Impedance)";
//   parameter Real s.value_W(start = 0.5) "value for digital W (Weak    Unknown)";
//   parameter Real s.value_L(start = 0.0) "value for digital L (Weak    0)";
//   parameter Real s.value_H(start = 1.0) "value for digital H (Weak    1)";
//   parameter Real s.value_m(start = 0.5) "value for digital m (Don't care)";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') c.x[1];
//   output Real c.y[1];
//   parameter Integer c.n(min = 1, start = 1) "signal width";
//   parameter Real c.value_U(start = 0.5) "value for digital U (uninitialized)";
//   parameter Real c.value_X(start = 0.5) "value for digital X (Forcing Unknown)";
//   parameter Real c.value_0(start = 0.0) "value for digital 0   (Forcing 0)";
//   parameter Real c.value_1(start = 1.0) "value for digital 1 (Forcing 1)";
//   parameter Real c.value_Z(start = 0.5) "value for digital Z (High Impedance)";
//   parameter Real c.value_W(start = 0.5) "value for digital W (Weak    Unknown)";
//   parameter Real c.value_L(start = 0.0) "value for digital L (Weak    0)";
//   parameter Real c.value_H(start = 1.0) "value for digital H (Weak    1)";
//   parameter Real c.value_m(start = 0.5) "value for digital m (Don't care)";
// equation
//   Adder.AND.G1.auxiliary[1] = Adder.AND.G1.x[1];
//   Adder.AND.G1.auxiliary[2] = D.Tables.AndTable[Adder.AND.G1.auxiliary[1],Adder.AND.G1.x[2]];
//   Adder.AND.G1.y = pre(Adder.AND.G1.auxiliary[2]);
//   Adder.XOR.G1.auxiliary[1] = Adder.XOR.G1.x[1];
//   Adder.XOR.G1.auxiliary[2] = D.Tables.XorTable[Adder.XOR.G1.auxiliary[1],Adder.XOR.G1.x[2]];
//   Adder.XOR.G1.y = pre(Adder.XOR.G1.auxiliary[2]);
//   s.y[1] = if s.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'U' then s.value_U else if s.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'X' then s.value_X else if s.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'0' then s.value_0 else if s.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'1' then s.value_1 else if s.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'Z' then s.value_Z else if s.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'W' then s.value_W else if s.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'L' then s.value_L else if s.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'H' then s.value_H else s.value_m;
//   c.y[1] = if c.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'U' then c.value_U else if c.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'X' then c.value_X else if c.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'0' then c.value_0 else if c.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'1' then c.value_1 else if c.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'Z' then c.value_Z else if c.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'W' then c.value_W else if c.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'L' then c.value_L else if c.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'H' then c.value_H else c.value_m;
//   Adder.c = c.x[1];
//   Adder.s = s.x[1];
//   Adder.a = a.y;
//   Adder.b = b.y;
//   Adder.AND.x[2] = Adder.XOR.x[2];
//   Adder.AND.x[2] = Adder.a;
//   Adder.AND.x[1] = Adder.XOR.x[1];
//   Adder.AND.x[1] = Adder.b;
//   Adder.XOR.y = Adder.s;
//   Adder.AND.y = Adder.c;
//   Adder.XOR.G2.y = Adder.XOR.y;
//   Adder.XOR.G1.y = Adder.XOR.G2.x;
//   Adder.XOR.G1.x[1] = Adder.XOR.x[1];
//   Adder.XOR.G1.x[2] = Adder.XOR.x[2];
//   Adder.AND.G1.y = Adder.AND.G2.x;
//   Adder.AND.G2.y = Adder.AND.y;
//   Adder.AND.G1.x[1] = Adder.AND.x[1];
//   Adder.AND.G1.x[2] = Adder.AND.x[2];
// algorithm
//   if initial() then
//     assert(a.n > 0, "Invalid size of table (n < 1)");
//     for i in 1:a.n loop
//     end for;
//   end if;
//   a.y := a.y0;
//   for i in 1:a.n loop
//     if time >= a.t[i] then
//       a.y := a.x[i];
//     end if;
//   end for;
//   if initial() then
//     assert(b.n > 0, "Invalid size of table (n < 1)");
//     for i in 1:b.n loop
//     end for;
//   end if;
//   b.y := b.y0;
//   for i in 1:b.n loop
//     if time >= b.t[i] then
//       b.y := b.x[i];
//     end if;
//   end for;
//   when {initial(),(Adder.AND.G2.tLH > 0.0 OR Adder.AND.G2.tHL > 0.0) AND change(Adder.AND.G2.x) AND  NOT initial()} then
//     Adder.AND.G2.x_old := if initial() OR pre(Adder.AND.G2.x) == DAE.CAST(T_ENUMERATION, 0) then Adder.AND.G2.y0 else pre(Adder.AND.G2.x);
//     Adder.AND.G2.lh := Adder.AND.G2.delayTable[Adder.AND.G2.x_old,Adder.AND.G2.x];
//     Adder.AND.G2.delayTime := if Adder.AND.G2.lh > 0 then Adder.AND.G2.tLH else if Adder.AND.G2.lh < 0 then Adder.AND.G2.tHL else 0.0;
//     Adder.AND.G2.t_next := time + Adder.AND.G2.delayTime;
//     if Adder.AND.G2.lh == 0 OR abs(Adder.AND.G2.delayTime) < 1e-60 then
//       Adder.AND.G2.y_auxiliary := Adder.AND.G2.x;
//     end if;
//   elsewhen time >= Adder.AND.G2.t_next then
//     Adder.AND.G2.y_auxiliary := Adder.AND.G2.x;
//   end when;
//   Adder.AND.G2.y := if Adder.AND.G2.tLH > 0.0 OR Adder.AND.G2.tHL > 0.0 then Adder.AND.G2.y_auxiliary else Adder.AND.G2.x;
//   when {initial(),(Adder.XOR.G2.tLH > 0.0 OR Adder.XOR.G2.tHL > 0.0) AND change(Adder.XOR.G2.x) AND  NOT initial()} then
//     Adder.XOR.G2.x_old := if initial() OR pre(Adder.XOR.G2.x) == DAE.CAST(T_ENUMERATION, 0) then Adder.XOR.G2.y0 else pre(Adder.XOR.G2.x);
//     Adder.XOR.G2.lh := Adder.XOR.G2.delayTable[Adder.XOR.G2.x_old,Adder.XOR.G2.x];
//     Adder.XOR.G2.delayTime := if Adder.XOR.G2.lh > 0 then Adder.XOR.G2.tLH else if Adder.XOR.G2.lh < 0 then Adder.XOR.G2.tHL else 0.0;
//     Adder.XOR.G2.t_next := time + Adder.XOR.G2.delayTime;
//     if Adder.XOR.G2.lh == 0 OR abs(Adder.XOR.G2.delayTime) < 1e-60 then
//       Adder.XOR.G2.y_auxiliary := Adder.XOR.G2.x;
//     end if;
//   elsewhen time >= Adder.XOR.G2.t_next then
//     Adder.XOR.G2.y_auxiliary := Adder.XOR.G2.x;
//   end when;
//   Adder.XOR.G2.y := if Adder.XOR.G2.tLH > 0.0 OR Adder.XOR.G2.tHL > 0.0 then Adder.XOR.G2.y_auxiliary else Adder.XOR.G2.x;
// end Modelica.Electrical.Digital.Examples.HalfAdder;
// "
// ""
// "Check of Modelica.Electrical.Digital.Examples.HalfAdder completed successfully.
// 
// 
// Class Modelica.Electrical.Digital.Examples.HalfAdder has 202 equation(s) and 202 variable(s).
// 182 of these are trivial equation(s).
// "
// ""
// record SimulationResult
//     resultFile = "",
//     messages = "Simulation failed for model: Modelica.Electrical.Digital.Examples.HalfAdder
// Error: Error building simulator. Buildlog: g++ -I. -o Modelica.Electrical.Digital.Examples.HalfAdder.exe Modelica.Electrical.Digital.Examples.HalfAdder.cpp Modelica.Electrical.Digital.Examples.HalfAdder_functions.cpp -L"../../../../libraries/msl31//Modelica/Electrical"   -lsim -linteractive -I"c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc" -msse2 -mfpmath=sse  -lsendData -lQtNetwork-mingw -lQtCore-mingw -lQtGui-mingw -luuid -lole32 -lws2_32 -L"c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/lib/omc" -lc_runtime -lf2c Modelica.Electrical.Digital.Examples.HalfAdder_records.c

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp: In function `int functionDAE_output()':

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:2173: error: `$PD$PTables$PXorTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:2173: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:2173: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:2173: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:2173: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:2176: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:2176: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:2176: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:2176: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:2176: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp: In function `int functionDAE_output2()':

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:2436: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:2493: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp: In function `int function_zeroCrossing(fortran_integer*, double*, double*, fortran_integer*, double*, double*, fortran_integer*)':

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:2649: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:2649: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:2651: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:2651: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp: In function `int function_updateDependents()':

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3021: error: `$PD$PTables$PXorTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3021: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3021: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3021: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3021: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3105: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3105: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3105: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3105: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3105: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3166: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3272: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3380: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3389: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp: In function `int initial_residual()':

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3516: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3516: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3516: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3516: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3516: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3519: error: `$PD$PTables$PXorTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3519: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3519: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3519: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3519: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp: In function `int functionAlgebraics()':

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3989: error: `$PD$PTables$PXorTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3989: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3989: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3989: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3989: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3992: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3992: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3992: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3992: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3992: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp: In function `int functionDAE(int&)':

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:4424: error: `$PD$PTables$PXorTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:4424: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:4424: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:4424: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:4424: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:4508: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:4508: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:4508: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:4508: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:4508: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:4569: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:4675: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp: In function `int function_onlyZeroCrossings(double*, double*)':

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:4796: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:4796: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:4798: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:4798: error: `$Pi' was not declared in this scope

// mingw32-make: *** [Modelica.Electrical.Digital.Examples.HalfAdder] Error 1

// 
// Error: Error building simulator. Buildlog: command g++ not found. Check $OPENMODELICAHOME
// Error: Error building simulator. Buildlog: command "c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/share/omc/scripts/Compile" not found. Check $OPENMODELICAHOME
// "
// end SimulationResult;
// ""
// "class Modelica.Electrical.Digital.Examples.FullAdder
//   parameter Real Adder1.Adder2.delayTime = 0.001 "delay time";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.b;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.a;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.c;
//   parameter Integer Adder1.Adder2.AND.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.y "Connector of Digital output signal";
//   parameter Real Adder1.Adder2.AND.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder2.delayTime "rise inertial delay";
//   parameter Real Adder1.Adder2.AND.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder2.delayTime "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'U' "initial value of output";
//   parameter Integer Adder1.Adder2.AND.G1.n(min = 2) = Adder1.Adder2.AND.n "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.G1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.G1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.G1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.G1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.G1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.G2.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.G2.y "Connector of Digital output signal";
//   parameter Real Adder1.Adder2.AND.G2.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder2.AND.tLH "rise inertial delay";
//   parameter Real Adder1.Adder2.AND.G2.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder2.AND.tHL "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.G2.y0 = Adder1.Adder2.AND.y0 "initial value of output";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[1,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[1,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[1,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[1,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[1,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[1,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[1,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[1,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[1,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[2,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[2,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[2,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[2,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[2,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[2,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[2,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[2,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[2,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[3,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[3,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[3,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[3,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[3,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[3,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[3,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[3,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[3,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[4,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[4,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[4,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[4,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[4,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[4,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[4,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[4,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[4,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[5,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[5,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[5,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[5,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[5,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[5,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[5,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[5,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[5,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[6,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[6,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[6,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[6,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[6,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[6,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[6,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[6,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[6,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[7,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[7,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[7,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[7,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[7,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[7,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[7,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[7,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[7,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[8,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[8,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[8,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[8,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[8,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[8,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[8,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[8,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[8,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[9,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[9,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[9,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[9,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[9,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[9,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[9,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[9,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[9,9] = 0 "specification of delay according to signal change";
//   protected Real Adder1.Adder2.AND.G2.delayTime(quantity = "Time", unit = "s");
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.G2.y_auxiliary(start = Adder1.Adder2.AND.G2.y0, fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.G2.x_old(start = Adder1.Adder2.AND.G2.y0, fixed = true);
//   protected Integer Adder1.Adder2.AND.G2.lh;
//   protected discrete Real Adder1.Adder2.AND.G2.t_next(quantity = "Time", unit = "s");
//   parameter Real Adder1.Adder2.XOR.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder2.delayTime "rise inertial delay";
//   parameter Real Adder1.Adder2.XOR.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder2.delayTime "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'U' "initial value of output";
//   parameter Integer Adder1.Adder2.XOR.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.y "Connector of Digital output signal";
//   parameter Integer Adder1.Adder2.XOR.G1.n(min = 2) = Adder1.Adder2.XOR.n "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.G1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.G1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.G1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.G1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.G1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.G2.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.G2.y "Connector of Digital output signal";
//   parameter Real Adder1.Adder2.XOR.G2.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder2.XOR.tLH "rise inertial delay";
//   parameter Real Adder1.Adder2.XOR.G2.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder2.XOR.tHL "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.G2.y0 = Adder1.Adder2.XOR.y0 "initial value of output";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[1,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[1,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[1,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[1,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[1,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[1,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[1,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[1,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[1,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[2,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[2,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[2,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[2,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[2,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[2,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[2,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[2,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[2,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[3,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[3,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[3,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[3,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[3,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[3,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[3,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[3,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[3,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[4,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[4,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[4,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[4,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[4,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[4,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[4,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[4,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[4,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[5,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[5,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[5,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[5,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[5,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[5,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[5,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[5,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[5,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[6,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[6,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[6,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[6,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[6,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[6,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[6,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[6,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[6,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[7,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[7,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[7,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[7,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[7,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[7,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[7,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[7,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[7,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[8,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[8,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[8,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[8,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[8,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[8,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[8,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[8,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[8,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[9,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[9,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[9,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[9,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[9,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[9,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[9,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[9,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[9,9] = 0 "specification of delay according to signal change";
//   protected Real Adder1.Adder2.XOR.G2.delayTime(quantity = "Time", unit = "s");
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.G2.y_auxiliary(start = Adder1.Adder2.XOR.G2.y0, fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.G2.x_old(start = Adder1.Adder2.XOR.G2.y0, fixed = true);
//   protected Integer Adder1.Adder2.XOR.G2.lh;
//   protected discrete Real Adder1.Adder2.XOR.G2.t_next(quantity = "Time", unit = "s");
//   parameter Real Adder1.Adder1.delayTime = 0.001 "delay time";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.b;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.a;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.c;
//   parameter Integer Adder1.Adder1.AND.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.y "Connector of Digital output signal";
//   parameter Real Adder1.Adder1.AND.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder1.delayTime "rise inertial delay";
//   parameter Real Adder1.Adder1.AND.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder1.delayTime "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'U' "initial value of output";
//   parameter Integer Adder1.Adder1.AND.G1.n(min = 2) = Adder1.Adder1.AND.n "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.G1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.G1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.G1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.G1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.G1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.G2.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.G2.y "Connector of Digital output signal";
//   parameter Real Adder1.Adder1.AND.G2.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder1.AND.tLH "rise inertial delay";
//   parameter Real Adder1.Adder1.AND.G2.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder1.AND.tHL "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.G2.y0 = Adder1.Adder1.AND.y0 "initial value of output";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[1,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[1,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[1,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[1,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[1,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[1,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[1,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[1,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[1,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[2,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[2,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[2,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[2,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[2,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[2,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[2,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[2,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[2,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[3,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[3,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[3,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[3,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[3,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[3,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[3,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[3,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[3,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[4,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[4,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[4,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[4,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[4,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[4,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[4,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[4,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[4,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[5,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[5,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[5,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[5,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[5,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[5,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[5,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[5,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[5,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[6,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[6,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[6,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[6,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[6,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[6,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[6,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[6,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[6,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[7,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[7,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[7,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[7,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[7,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[7,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[7,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[7,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[7,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[8,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[8,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[8,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[8,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[8,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[8,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[8,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[8,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[8,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[9,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[9,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[9,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[9,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[9,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[9,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[9,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[9,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[9,9] = 0 "specification of delay according to signal change";
//   protected Real Adder1.Adder1.AND.G2.delayTime(quantity = "Time", unit = "s");
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.G2.y_auxiliary(start = Adder1.Adder1.AND.G2.y0, fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.G2.x_old(start = Adder1.Adder1.AND.G2.y0, fixed = true);
//   protected Integer Adder1.Adder1.AND.G2.lh;
//   protected discrete Real Adder1.Adder1.AND.G2.t_next(quantity = "Time", unit = "s");
//   parameter Real Adder1.Adder1.XOR.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder1.delayTime "rise inertial delay";
//   parameter Real Adder1.Adder1.XOR.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder1.delayTime "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'U' "initial value of output";
//   parameter Integer Adder1.Adder1.XOR.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.y "Connector of Digital output signal";
//   parameter Integer Adder1.Adder1.XOR.G1.n(min = 2) = Adder1.Adder1.XOR.n "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.G1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.G1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.G1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.G1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.G1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.G2.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.G2.y "Connector of Digital output signal";
//   parameter Real Adder1.Adder1.XOR.G2.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder1.XOR.tLH "rise inertial delay";
//   parameter Real Adder1.Adder1.XOR.G2.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder1.XOR.tHL "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.G2.y0 = Adder1.Adder1.XOR.y0 "initial value of output";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[1,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[1,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[1,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[1,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[1,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[1,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[1,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[1,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[1,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[2,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[2,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[2,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[2,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[2,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[2,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[2,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[2,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[2,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[3,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[3,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[3,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[3,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[3,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[3,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[3,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[3,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[3,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[4,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[4,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[4,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[4,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[4,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[4,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[4,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[4,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[4,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[5,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[5,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[5,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[5,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[5,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[5,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[5,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[5,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[5,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[6,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[6,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[6,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[6,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[6,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[6,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[6,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[6,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[6,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[7,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[7,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[7,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[7,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[7,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[7,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[7,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[7,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[7,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[8,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[8,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[8,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[8,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[8,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[8,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[8,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[8,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[8,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[9,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[9,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[9,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[9,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[9,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[9,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[9,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[9,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[9,9] = 0 "specification of delay according to signal change";
//   protected Real Adder1.Adder1.XOR.G2.delayTime(quantity = "Time", unit = "s");
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.G2.y_auxiliary(start = Adder1.Adder1.XOR.G2.y0, fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.G2.x_old(start = Adder1.Adder1.XOR.G2.y0, fixed = true);
//   protected Integer Adder1.Adder1.XOR.G2.lh;
//   protected discrete Real Adder1.Adder1.XOR.G2.t_next(quantity = "Time", unit = "s");
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.a;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.b;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.c_in;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.s;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.c_out;
//   parameter Integer Adder1.OR.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.OR.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.OR.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.OR.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.OR.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.OR.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') s.x[1];
//   output Real s.y[1];
//   parameter Integer s.n(min = 1, start = 1) "signal width";
//   parameter Real s.value_U(start = 0.5) "value for digital U (uninitialized)";
//   parameter Real s.value_X(start = 0.5) "value for digital X (Forcing Unknown)";
//   parameter Real s.value_0(start = 0.0) "value for digital 0   (Forcing 0)";
//   parameter Real s.value_1(start = 1.0) "value for digital 1 (Forcing 1)";
//   parameter Real s.value_Z(start = 0.5) "value for digital Z (High Impedance)";
//   parameter Real s.value_W(start = 0.5) "value for digital W (Weak    Unknown)";
//   parameter Real s.value_L(start = 0.0) "value for digital L (Weak    0)";
//   parameter Real s.value_H(start = 1.0) "value for digital H (Weak    1)";
//   parameter Real s.value_m(start = 0.5) "value for digital m (Don't care)";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') c_out.x[1];
//   output Real c_out.y[1];
//   parameter Integer c_out.n(min = 1, start = 1) "signal width";
//   parameter Real c_out.value_U(start = 0.5) "value for digital U (uninitialized)";
//   parameter Real c_out.value_X(start = 0.5) "value for digital X (Forcing Unknown)";
//   parameter Real c_out.value_0(start = 0.0) "value for digital 0   (Forcing 0)";
//   parameter Real c_out.value_1(start = 1.0) "value for digital 1 (Forcing 1)";
//   parameter Real c_out.value_Z(start = 0.5) "value for digital Z (High Impedance)";
//   parameter Real c_out.value_W(start = 0.5) "value for digital W (Weak    Unknown)";
//   parameter Real c_out.value_L(start = 0.0) "value for digital L (Weak    0)";
//   parameter Real c_out.value_H(start = 1.0) "value for digital H (Weak    1)";
//   parameter Real c_out.value_m(start = 0.5) "value for digital m (Don't care)";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.enable;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.q2;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.count;
//   parameter Real Counter.FF1.delayTime(quantity = "Time", unit = "s") = 0.001 "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.q0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial value";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.j;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.qn "not Q";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.clk;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.k;
//   parameter Real Counter.FF1.RS1.delayTime(quantity = "Time", unit = "s") = Counter.FF1.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.q0 = Counter.FF1.q0 "initial value of output";
//   parameter Integer Counter.FF1.RS1.Nor1.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.Nor1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.Nor1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.Nor1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.Nor1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.Nor1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF1.RS1.Nor2.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.Nor2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.Nor2.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.Nor2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.Nor2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.Nor2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.r;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.qn;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.TD1.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.TD1.y "Connector of Digital output signal";
//   parameter Real Counter.FF1.RS1.TD1.delayTime(quantity = "Time", unit = "s", start = 0.0) = Counter.FF1.RS1.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.TD1.y0 = Counter.FF1.RS1.q0 "initial value of output";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.TD1.x_delayed;
//   parameter Real Counter.FF1.RS2.delayTime(quantity = "Time", unit = "s") = Counter.FF1.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.q0 = Counter.FF1.q0 "initial value of output";
//   parameter Integer Counter.FF1.RS2.Nor1.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.Nor1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.Nor1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.Nor1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.Nor1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.Nor1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF1.RS2.Nor2.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.Nor2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.Nor2.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.Nor2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.Nor2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.Nor2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.r;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.qn;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.TD1.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.TD1.y "Connector of Digital output signal";
//   parameter Real Counter.FF1.RS2.TD1.delayTime(quantity = "Time", unit = "s", start = 0.0) = Counter.FF1.RS2.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.TD1.y0 = Counter.FF1.RS2.q0 "initial value of output";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.TD1.x_delayed;
//   parameter Integer Counter.FF1.And1.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And1.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And1.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And1.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF1.And2.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And2.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And2.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And2.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF1.And3.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And3.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And3.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And3.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And3.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And3.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF1.And4.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And4.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And4.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And4.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And4.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And4.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.Not1.x "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.Not1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.Not1.auxiliary(start = Modelica.Electrical.Digital.Interfaces.Logic.'0', fixed = true);
//   parameter Real Counter.FF2.delayTime(quantity = "Time", unit = "s") = 0.001 "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.q0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial value";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.j;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.qn "not Q";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.clk;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.k;
//   parameter Real Counter.FF2.RS1.delayTime(quantity = "Time", unit = "s") = Counter.FF2.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.q0 = Counter.FF2.q0 "initial value of output";
//   parameter Integer Counter.FF2.RS1.Nor1.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.Nor1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.Nor1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.Nor1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.Nor1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.Nor1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF2.RS1.Nor2.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.Nor2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.Nor2.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.Nor2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.Nor2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.Nor2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.r;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.qn;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.TD1.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.TD1.y "Connector of Digital output signal";
//   parameter Real Counter.FF2.RS1.TD1.delayTime(quantity = "Time", unit = "s", start = 0.0) = Counter.FF2.RS1.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.TD1.y0 = Counter.FF2.RS1.q0 "initial value of output";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.TD1.x_delayed;
//   parameter Real Counter.FF2.RS2.delayTime(quantity = "Time", unit = "s") = Counter.FF2.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.q0 = Counter.FF2.q0 "initial value of output";
//   parameter Integer Counter.FF2.RS2.Nor1.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.Nor1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.Nor1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.Nor1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.Nor1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.Nor1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF2.RS2.Nor2.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.Nor2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.Nor2.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.Nor2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.Nor2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.Nor2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.r;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.qn;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.TD1.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.TD1.y "Connector of Digital output signal";
//   parameter Real Counter.FF2.RS2.TD1.delayTime(quantity = "Time", unit = "s", start = 0.0) = Counter.FF2.RS2.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.TD1.y0 = Counter.FF2.RS2.q0 "initial value of output";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.TD1.x_delayed;
//   parameter Integer Counter.FF2.And1.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And1.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And1.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And1.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF2.And2.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And2.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And2.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And2.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF2.And3.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And3.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And3.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And3.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And3.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And3.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF2.And4.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And4.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And4.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And4.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And4.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And4.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.Not1.x "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.Not1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.Not1.auxiliary(start = Modelica.Electrical.Digital.Interfaces.Logic.'0', fixed = true);
//   parameter Real Counter.FF3.delayTime(quantity = "Time", unit = "s") = 0.001 "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.q0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial value";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.j;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.qn "not Q";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.clk;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.k;
//   parameter Real Counter.FF3.RS1.delayTime(quantity = "Time", unit = "s") = Counter.FF3.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.q0 = Counter.FF3.q0 "initial value of output";
//   parameter Integer Counter.FF3.RS1.Nor1.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.Nor1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.Nor1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.Nor1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.Nor1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.Nor1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF3.RS1.Nor2.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.Nor2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.Nor2.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.Nor2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.Nor2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.Nor2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.r;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.qn;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.TD1.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.TD1.y "Connector of Digital output signal";
//   parameter Real Counter.FF3.RS1.TD1.delayTime(quantity = "Time", unit = "s", start = 0.0) = Counter.FF3.RS1.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.TD1.y0 = Counter.FF3.RS1.q0 "initial value of output";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.TD1.x_delayed;
//   parameter Real Counter.FF3.RS2.delayTime(quantity = "Time", unit = "s") = Counter.FF3.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.q0 = Counter.FF3.q0 "initial value of output";
//   parameter Integer Counter.FF3.RS2.Nor1.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.Nor1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.Nor1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.Nor1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.Nor1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.Nor1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF3.RS2.Nor2.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.Nor2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.Nor2.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.Nor2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.Nor2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.Nor2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.r;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.qn;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.TD1.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.TD1.y "Connector of Digital output signal";
//   parameter Real Counter.FF3.RS2.TD1.delayTime(quantity = "Time", unit = "s", start = 0.0) = Counter.FF3.RS2.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.TD1.y0 = Counter.FF3.RS2.q0 "initial value of output";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.TD1.x_delayed;
//   parameter Integer Counter.FF3.And1.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And1.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And1.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And1.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF3.And2.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And2.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And2.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And2.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF3.And3.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And3.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And3.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And3.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And3.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And3.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF3.And4.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And4.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And4.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And4.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And4.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And4.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.Not1.x "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.Not1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.Not1.auxiliary(start = Modelica.Electrical.Digital.Interfaces.Logic.'0', fixed = true);
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.q1;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.q0;
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Enable.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'1') = Modelica.Electrical.Digital.Interfaces.Logic.'1' "Logic value to be set";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Enable.y;
//   parameter Real CLK.startTime(quantity = "Time", unit = "s", start = 0.0) "Output = offset for time < startTime";
//   parameter Real CLK.period(quantity = "Time", unit = "s", min = 1e-60, start = 1.0) "Time for one period";
//   parameter Real CLK.width(min = 1e-60, max = 100.0, start = 50.0) "Width of pulses in % of period";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') CLK.y "Connector of Digital output signal";
//   protected Real CLK.t_i(quantity = "Time", unit = "s", start = CLK.startTime) "Start time of current period";
//   protected Real CLK.t_width(quantity = "Time", unit = "s") = CLK.period * CLK.width / 100.0;
// equation
//   Adder1.Adder2.AND.G1.auxiliary[1] = Adder1.Adder2.AND.G1.x[1];
//   Adder1.Adder2.AND.G1.auxiliary[2] = D.Tables.AndTable[Adder1.Adder2.AND.G1.auxiliary[1],Adder1.Adder2.AND.G1.x[2]];
//   Adder1.Adder2.AND.G1.y = pre(Adder1.Adder2.AND.G1.auxiliary[2]);
//   Adder1.Adder2.XOR.G1.auxiliary[1] = Adder1.Adder2.XOR.G1.x[1];
//   Adder1.Adder2.XOR.G1.auxiliary[2] = D.Tables.XorTable[Adder1.Adder2.XOR.G1.auxiliary[1],Adder1.Adder2.XOR.G1.x[2]];
//   Adder1.Adder2.XOR.G1.y = pre(Adder1.Adder2.XOR.G1.auxiliary[2]);
//   Adder1.Adder1.AND.G1.auxiliary[1] = Adder1.Adder1.AND.G1.x[1];
//   Adder1.Adder1.AND.G1.auxiliary[2] = D.Tables.AndTable[Adder1.Adder1.AND.G1.auxiliary[1],Adder1.Adder1.AND.G1.x[2]];
//   Adder1.Adder1.AND.G1.y = pre(Adder1.Adder1.AND.G1.auxiliary[2]);
//   Adder1.Adder1.XOR.G1.auxiliary[1] = Adder1.Adder1.XOR.G1.x[1];
//   Adder1.Adder1.XOR.G1.auxiliary[2] = D.Tables.XorTable[Adder1.Adder1.XOR.G1.auxiliary[1],Adder1.Adder1.XOR.G1.x[2]];
//   Adder1.Adder1.XOR.G1.y = pre(Adder1.Adder1.XOR.G1.auxiliary[2]);
//   Adder1.OR.auxiliary[1] = Adder1.OR.x[1];
//   Adder1.OR.auxiliary[2] = D.Tables.OrTable[Adder1.OR.auxiliary[1],Adder1.OR.x[2]];
//   Adder1.OR.y = pre(Adder1.OR.auxiliary[2]);
//   s.y[1] = if s.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'U' then s.value_U else if s.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'X' then s.value_X else if s.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'0' then s.value_0 else if s.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'1' then s.value_1 else if s.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'Z' then s.value_Z else if s.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'W' then s.value_W else if s.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'L' then s.value_L else if s.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'H' then s.value_H else s.value_m;
//   c_out.y[1] = if c_out.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'U' then c_out.value_U else if c_out.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'X' then c_out.value_X else if c_out.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'0' then c_out.value_0 else if c_out.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'1' then c_out.value_1 else if c_out.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'Z' then c_out.value_Z else if c_out.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'W' then c_out.value_W else if c_out.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'L' then c_out.value_L else if c_out.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'H' then c_out.value_H else c_out.value_m;
//   Counter.FF1.RS1.Nor1.auxiliary[1] = Counter.FF1.RS1.Nor1.x[1];
//   Counter.FF1.RS1.Nor1.auxiliary[2] = D.Tables.OrTable[Counter.FF1.RS1.Nor1.auxiliary[1],Counter.FF1.RS1.Nor1.x[2]];
//   Counter.FF1.RS1.Nor1.y = pre(D.Tables.NotTable[Counter.FF1.RS1.Nor1.auxiliary[2]]);
//   Counter.FF1.RS1.Nor2.auxiliary[1] = Counter.FF1.RS1.Nor2.x[1];
//   Counter.FF1.RS1.Nor2.auxiliary[2] = D.Tables.OrTable[Counter.FF1.RS1.Nor2.auxiliary[1],Counter.FF1.RS1.Nor2.x[2]];
//   Counter.FF1.RS1.Nor2.y = pre(D.Tables.NotTable[Counter.FF1.RS1.Nor2.auxiliary[2]]);
//   Counter.FF1.RS1.TD1.x_delayed = DAE.CAST(T_ENUMERATION, integer(delay(Real(Counter.FF1.RS1.TD1.x),Counter.FF1.RS1.TD1.delayTime,Counter.FF1.RS1.TD1.delayTime)));
//   Counter.FF1.RS1.TD1.y = if Counter.FF1.RS1.TD1.delayTime > 0.0 then if time >= Counter.FF1.RS1.TD1.delayTime then Counter.FF1.RS1.TD1.x_delayed else Counter.FF1.RS1.TD1.y0 else pre(Counter.FF1.RS1.TD1.x);
//   Counter.FF1.RS2.Nor1.auxiliary[1] = Counter.FF1.RS2.Nor1.x[1];
//   Counter.FF1.RS2.Nor1.auxiliary[2] = D.Tables.OrTable[Counter.FF1.RS2.Nor1.auxiliary[1],Counter.FF1.RS2.Nor1.x[2]];
//   Counter.FF1.RS2.Nor1.y = pre(D.Tables.NotTable[Counter.FF1.RS2.Nor1.auxiliary[2]]);
//   Counter.FF1.RS2.Nor2.auxiliary[1] = Counter.FF1.RS2.Nor2.x[1];
//   Counter.FF1.RS2.Nor2.auxiliary[2] = D.Tables.OrTable[Counter.FF1.RS2.Nor2.auxiliary[1],Counter.FF1.RS2.Nor2.x[2]];
//   Counter.FF1.RS2.Nor2.y = pre(D.Tables.NotTable[Counter.FF1.RS2.Nor2.auxiliary[2]]);
//   Counter.FF1.RS2.TD1.x_delayed = DAE.CAST(T_ENUMERATION, integer(delay(Real(Counter.FF1.RS2.TD1.x),Counter.FF1.RS2.TD1.delayTime,Counter.FF1.RS2.TD1.delayTime)));
//   Counter.FF1.RS2.TD1.y = if Counter.FF1.RS2.TD1.delayTime > 0.0 then if time >= Counter.FF1.RS2.TD1.delayTime then Counter.FF1.RS2.TD1.x_delayed else Counter.FF1.RS2.TD1.y0 else pre(Counter.FF1.RS2.TD1.x);
//   Counter.FF1.And1.auxiliary[1] = Counter.FF1.And1.x[1];
//   Counter.FF1.And1.auxiliary[2] = D.Tables.AndTable[Counter.FF1.And1.auxiliary[1],Counter.FF1.And1.x[2]];
//   Counter.FF1.And1.auxiliary[3] = D.Tables.AndTable[Counter.FF1.And1.auxiliary[2],Counter.FF1.And1.x[3]];
//   Counter.FF1.And1.y = pre(Counter.FF1.And1.auxiliary[3]);
//   Counter.FF1.And2.auxiliary[1] = Counter.FF1.And2.x[1];
//   Counter.FF1.And2.auxiliary[2] = D.Tables.AndTable[Counter.FF1.And2.auxiliary[1],Counter.FF1.And2.x[2]];
//   Counter.FF1.And2.auxiliary[3] = D.Tables.AndTable[Counter.FF1.And2.auxiliary[2],Counter.FF1.And2.x[3]];
//   Counter.FF1.And2.y = pre(Counter.FF1.And2.auxiliary[3]);
//   Counter.FF1.And3.auxiliary[1] = Counter.FF1.And3.x[1];
//   Counter.FF1.And3.auxiliary[2] = D.Tables.AndTable[Counter.FF1.And3.auxiliary[1],Counter.FF1.And3.x[2]];
//   Counter.FF1.And3.y = pre(Counter.FF1.And3.auxiliary[2]);
//   Counter.FF1.And4.auxiliary[1] = Counter.FF1.And4.x[1];
//   Counter.FF1.And4.auxiliary[2] = D.Tables.AndTable[Counter.FF1.And4.auxiliary[1],Counter.FF1.And4.x[2]];
//   Counter.FF1.And4.y = pre(Counter.FF1.And4.auxiliary[2]);
//   Counter.FF1.Not1.auxiliary = D.Tables.NotTable[Counter.FF1.Not1.x];
//   Counter.FF1.Not1.y = pre(Counter.FF1.Not1.auxiliary);
//   Counter.FF2.RS1.Nor1.auxiliary[1] = Counter.FF2.RS1.Nor1.x[1];
//   Counter.FF2.RS1.Nor1.auxiliary[2] = D.Tables.OrTable[Counter.FF2.RS1.Nor1.auxiliary[1],Counter.FF2.RS1.Nor1.x[2]];
//   Counter.FF2.RS1.Nor1.y = pre(D.Tables.NotTable[Counter.FF2.RS1.Nor1.auxiliary[2]]);
//   Counter.FF2.RS1.Nor2.auxiliary[1] = Counter.FF2.RS1.Nor2.x[1];
//   Counter.FF2.RS1.Nor2.auxiliary[2] = D.Tables.OrTable[Counter.FF2.RS1.Nor2.auxiliary[1],Counter.FF2.RS1.Nor2.x[2]];
//   Counter.FF2.RS1.Nor2.y = pre(D.Tables.NotTable[Counter.FF2.RS1.Nor2.auxiliary[2]]);
//   Counter.FF2.RS1.TD1.x_delayed = DAE.CAST(T_ENUMERATION, integer(delay(Real(Counter.FF2.RS1.TD1.x),Counter.FF2.RS1.TD1.delayTime,Counter.FF2.RS1.TD1.delayTime)));
//   Counter.FF2.RS1.TD1.y = if Counter.FF2.RS1.TD1.delayTime > 0.0 then if time >= Counter.FF2.RS1.TD1.delayTime then Counter.FF2.RS1.TD1.x_delayed else Counter.FF2.RS1.TD1.y0 else pre(Counter.FF2.RS1.TD1.x);
//   Counter.FF2.RS2.Nor1.auxiliary[1] = Counter.FF2.RS2.Nor1.x[1];
//   Counter.FF2.RS2.Nor1.auxiliary[2] = D.Tables.OrTable[Counter.FF2.RS2.Nor1.auxiliary[1],Counter.FF2.RS2.Nor1.x[2]];
//   Counter.FF2.RS2.Nor1.y = pre(D.Tables.NotTable[Counter.FF2.RS2.Nor1.auxiliary[2]]);
//   Counter.FF2.RS2.Nor2.auxiliary[1] = Counter.FF2.RS2.Nor2.x[1];
//   Counter.FF2.RS2.Nor2.auxiliary[2] = D.Tables.OrTable[Counter.FF2.RS2.Nor2.auxiliary[1],Counter.FF2.RS2.Nor2.x[2]];
//   Counter.FF2.RS2.Nor2.y = pre(D.Tables.NotTable[Counter.FF2.RS2.Nor2.auxiliary[2]]);
//   Counter.FF2.RS2.TD1.x_delayed = DAE.CAST(T_ENUMERATION, integer(delay(Real(Counter.FF2.RS2.TD1.x),Counter.FF2.RS2.TD1.delayTime,Counter.FF2.RS2.TD1.delayTime)));
//   Counter.FF2.RS2.TD1.y = if Counter.FF2.RS2.TD1.delayTime > 0.0 then if time >= Counter.FF2.RS2.TD1.delayTime then Counter.FF2.RS2.TD1.x_delayed else Counter.FF2.RS2.TD1.y0 else pre(Counter.FF2.RS2.TD1.x);
//   Counter.FF2.And1.auxiliary[1] = Counter.FF2.And1.x[1];
//   Counter.FF2.And1.auxiliary[2] = D.Tables.AndTable[Counter.FF2.And1.auxiliary[1],Counter.FF2.And1.x[2]];
//   Counter.FF2.And1.auxiliary[3] = D.Tables.AndTable[Counter.FF2.And1.auxiliary[2],Counter.FF2.And1.x[3]];
//   Counter.FF2.And1.y = pre(Counter.FF2.And1.auxiliary[3]);
//   Counter.FF2.And2.auxiliary[1] = Counter.FF2.And2.x[1];
//   Counter.FF2.And2.auxiliary[2] = D.Tables.AndTable[Counter.FF2.And2.auxiliary[1],Counter.FF2.And2.x[2]];
//   Counter.FF2.And2.auxiliary[3] = D.Tables.AndTable[Counter.FF2.And2.auxiliary[2],Counter.FF2.And2.x[3]];
//   Counter.FF2.And2.y = pre(Counter.FF2.And2.auxiliary[3]);
//   Counter.FF2.And3.auxiliary[1] = Counter.FF2.And3.x[1];
//   Counter.FF2.And3.auxiliary[2] = D.Tables.AndTable[Counter.FF2.And3.auxiliary[1],Counter.FF2.And3.x[2]];
//   Counter.FF2.And3.y = pre(Counter.FF2.And3.auxiliary[2]);
//   Counter.FF2.And4.auxiliary[1] = Counter.FF2.And4.x[1];
//   Counter.FF2.And4.auxiliary[2] = D.Tables.AndTable[Counter.FF2.And4.auxiliary[1],Counter.FF2.And4.x[2]];
//   Counter.FF2.And4.y = pre(Counter.FF2.And4.auxiliary[2]);
//   Counter.FF2.Not1.auxiliary = D.Tables.NotTable[Counter.FF2.Not1.x];
//   Counter.FF2.Not1.y = pre(Counter.FF2.Not1.auxiliary);
//   Counter.FF3.RS1.Nor1.auxiliary[1] = Counter.FF3.RS1.Nor1.x[1];
//   Counter.FF3.RS1.Nor1.auxiliary[2] = D.Tables.OrTable[Counter.FF3.RS1.Nor1.auxiliary[1],Counter.FF3.RS1.Nor1.x[2]];
//   Counter.FF3.RS1.Nor1.y = pre(D.Tables.NotTable[Counter.FF3.RS1.Nor1.auxiliary[2]]);
//   Counter.FF3.RS1.Nor2.auxiliary[1] = Counter.FF3.RS1.Nor2.x[1];
//   Counter.FF3.RS1.Nor2.auxiliary[2] = D.Tables.OrTable[Counter.FF3.RS1.Nor2.auxiliary[1],Counter.FF3.RS1.Nor2.x[2]];
//   Counter.FF3.RS1.Nor2.y = pre(D.Tables.NotTable[Counter.FF3.RS1.Nor2.auxiliary[2]]);
//   Counter.FF3.RS1.TD1.x_delayed = DAE.CAST(T_ENUMERATION, integer(delay(Real(Counter.FF3.RS1.TD1.x),Counter.FF3.RS1.TD1.delayTime,Counter.FF3.RS1.TD1.delayTime)));
//   Counter.FF3.RS1.TD1.y = if Counter.FF3.RS1.TD1.delayTime > 0.0 then if time >= Counter.FF3.RS1.TD1.delayTime then Counter.FF3.RS1.TD1.x_delayed else Counter.FF3.RS1.TD1.y0 else pre(Counter.FF3.RS1.TD1.x);
//   Counter.FF3.RS2.Nor1.auxiliary[1] = Counter.FF3.RS2.Nor1.x[1];
//   Counter.FF3.RS2.Nor1.auxiliary[2] = D.Tables.OrTable[Counter.FF3.RS2.Nor1.auxiliary[1],Counter.FF3.RS2.Nor1.x[2]];
//   Counter.FF3.RS2.Nor1.y = pre(D.Tables.NotTable[Counter.FF3.RS2.Nor1.auxiliary[2]]);
//   Counter.FF3.RS2.Nor2.auxiliary[1] = Counter.FF3.RS2.Nor2.x[1];
//   Counter.FF3.RS2.Nor2.auxiliary[2] = D.Tables.OrTable[Counter.FF3.RS2.Nor2.auxiliary[1],Counter.FF3.RS2.Nor2.x[2]];
//   Counter.FF3.RS2.Nor2.y = pre(D.Tables.NotTable[Counter.FF3.RS2.Nor2.auxiliary[2]]);
//   Counter.FF3.RS2.TD1.x_delayed = DAE.CAST(T_ENUMERATION, integer(delay(Real(Counter.FF3.RS2.TD1.x),Counter.FF3.RS2.TD1.delayTime,Counter.FF3.RS2.TD1.delayTime)));
//   Counter.FF3.RS2.TD1.y = if Counter.FF3.RS2.TD1.delayTime > 0.0 then if time >= Counter.FF3.RS2.TD1.delayTime then Counter.FF3.RS2.TD1.x_delayed else Counter.FF3.RS2.TD1.y0 else pre(Counter.FF3.RS2.TD1.x);
//   Counter.FF3.And1.auxiliary[1] = Counter.FF3.And1.x[1];
//   Counter.FF3.And1.auxiliary[2] = D.Tables.AndTable[Counter.FF3.And1.auxiliary[1],Counter.FF3.And1.x[2]];
//   Counter.FF3.And1.auxiliary[3] = D.Tables.AndTable[Counter.FF3.And1.auxiliary[2],Counter.FF3.And1.x[3]];
//   Counter.FF3.And1.y = pre(Counter.FF3.And1.auxiliary[3]);
//   Counter.FF3.And2.auxiliary[1] = Counter.FF3.And2.x[1];
//   Counter.FF3.And2.auxiliary[2] = D.Tables.AndTable[Counter.FF3.And2.auxiliary[1],Counter.FF3.And2.x[2]];
//   Counter.FF3.And2.auxiliary[3] = D.Tables.AndTable[Counter.FF3.And2.auxiliary[2],Counter.FF3.And2.x[3]];
//   Counter.FF3.And2.y = pre(Counter.FF3.And2.auxiliary[3]);
//   Counter.FF3.And3.auxiliary[1] = Counter.FF3.And3.x[1];
//   Counter.FF3.And3.auxiliary[2] = D.Tables.AndTable[Counter.FF3.And3.auxiliary[1],Counter.FF3.And3.x[2]];
//   Counter.FF3.And3.y = pre(Counter.FF3.And3.auxiliary[2]);
//   Counter.FF3.And4.auxiliary[1] = Counter.FF3.And4.x[1];
//   Counter.FF3.And4.auxiliary[2] = D.Tables.AndTable[Counter.FF3.And4.auxiliary[1],Counter.FF3.And4.x[2]];
//   Counter.FF3.And4.y = pre(Counter.FF3.And4.auxiliary[2]);
//   Counter.FF3.Not1.auxiliary = D.Tables.NotTable[Counter.FF3.Not1.x];
//   Counter.FF3.Not1.y = pre(Counter.FF3.Not1.auxiliary);
//   Adder1.c_in = Counter.q0;
//   Adder1.b = Counter.q1;
//   Adder1.a = Counter.q2;
//   Counter.enable = Enable.y;
//   CLK.y = Counter.count;
//   Adder1.c_out = c_out.x[1];
//   Adder1.s = s.x[1];
//   Counter.FF2.q = Counter.FF3.clk;
//   Counter.FF2.q = Counter.q1;
//   Counter.FF1.q = Counter.FF2.clk;
//   Counter.FF1.q = Counter.q0;
//   Counter.FF3.q = Counter.q2;
//   Counter.FF1.j = Counter.FF1.k;
//   Counter.FF1.j = Counter.FF2.j;
//   Counter.FF1.j = Counter.FF2.k;
//   Counter.FF1.j = Counter.FF3.j;
//   Counter.FF1.j = Counter.FF3.k;
//   Counter.FF1.j = Counter.enable;
//   Counter.FF1.clk = Counter.count;
//   Counter.FF3.And2.x[1] = Counter.FF3.RS1.q;
//   Counter.FF3.And2.x[1] = Counter.FF3.qn;
//   Counter.FF3.And1.x[3] = Counter.FF3.RS1.qn;
//   Counter.FF3.And1.x[3] = Counter.FF3.q;
//   Counter.FF3.And1.x[2] = Counter.FF3.j;
//   Counter.FF3.And3.x[1] = Counter.FF3.And4.x[1];
//   Counter.FF3.And3.x[1] = Counter.FF3.Not1.y;
//   Counter.FF3.And1.x[1] = Counter.FF3.And2.x[3];
//   Counter.FF3.And1.x[1] = Counter.FF3.Not1.x;
//   Counter.FF3.And1.x[1] = Counter.FF3.clk;
//   Counter.FF3.And3.x[2] = Counter.FF3.RS2.q;
//   Counter.FF3.And4.x[2] = Counter.FF3.RS2.qn;
//   Counter.FF3.And3.y = Counter.FF3.RS1.s;
//   Counter.FF3.And4.y = Counter.FF3.RS1.r;
//   Counter.FF3.And2.x[2] = Counter.FF3.k;
//   Counter.FF3.And1.y = Counter.FF3.RS2.s;
//   Counter.FF3.And2.y = Counter.FF3.RS2.r;
//   Counter.FF3.RS2.Nor1.y = Counter.FF3.RS2.TD1.x;
//   Counter.FF3.RS2.Nor1.y = Counter.FF3.RS2.qn;
//   Counter.FF3.RS2.Nor2.x[2] = Counter.FF3.RS2.TD1.y;
//   Counter.FF3.RS2.Nor1.x[1] = Counter.FF3.RS2.Nor2.y;
//   Counter.FF3.RS2.Nor1.x[1] = Counter.FF3.RS2.q;
//   Counter.FF3.RS2.Nor2.x[1] = Counter.FF3.RS2.r;
//   Counter.FF3.RS2.Nor1.x[2] = Counter.FF3.RS2.s;
//   Counter.FF3.RS1.Nor1.y = Counter.FF3.RS1.TD1.x;
//   Counter.FF3.RS1.Nor1.y = Counter.FF3.RS1.qn;
//   Counter.FF3.RS1.Nor2.x[2] = Counter.FF3.RS1.TD1.y;
//   Counter.FF3.RS1.Nor1.x[1] = Counter.FF3.RS1.Nor2.y;
//   Counter.FF3.RS1.Nor1.x[1] = Counter.FF3.RS1.q;
//   Counter.FF3.RS1.Nor2.x[1] = Counter.FF3.RS1.r;
//   Counter.FF3.RS1.Nor1.x[2] = Counter.FF3.RS1.s;
//   Counter.FF2.And2.x[1] = Counter.FF2.RS1.q;
//   Counter.FF2.And2.x[1] = Counter.FF2.qn;
//   Counter.FF2.And1.x[3] = Counter.FF2.RS1.qn;
//   Counter.FF2.And1.x[3] = Counter.FF2.q;
//   Counter.FF2.And1.x[2] = Counter.FF2.j;
//   Counter.FF2.And3.x[1] = Counter.FF2.And4.x[1];
//   Counter.FF2.And3.x[1] = Counter.FF2.Not1.y;
//   Counter.FF2.And1.x[1] = Counter.FF2.And2.x[3];
//   Counter.FF2.And1.x[1] = Counter.FF2.Not1.x;
//   Counter.FF2.And1.x[1] = Counter.FF2.clk;
//   Counter.FF2.And3.x[2] = Counter.FF2.RS2.q;
//   Counter.FF2.And4.x[2] = Counter.FF2.RS2.qn;
//   Counter.FF2.And3.y = Counter.FF2.RS1.s;
//   Counter.FF2.And4.y = Counter.FF2.RS1.r;
//   Counter.FF2.And2.x[2] = Counter.FF2.k;
//   Counter.FF2.And1.y = Counter.FF2.RS2.s;
//   Counter.FF2.And2.y = Counter.FF2.RS2.r;
//   Counter.FF2.RS2.Nor1.y = Counter.FF2.RS2.TD1.x;
//   Counter.FF2.RS2.Nor1.y = Counter.FF2.RS2.qn;
//   Counter.FF2.RS2.Nor2.x[2] = Counter.FF2.RS2.TD1.y;
//   Counter.FF2.RS2.Nor1.x[1] = Counter.FF2.RS2.Nor2.y;
//   Counter.FF2.RS2.Nor1.x[1] = Counter.FF2.RS2.q;
//   Counter.FF2.RS2.Nor2.x[1] = Counter.FF2.RS2.r;
//   Counter.FF2.RS2.Nor1.x[2] = Counter.FF2.RS2.s;
//   Counter.FF2.RS1.Nor1.y = Counter.FF2.RS1.TD1.x;
//   Counter.FF2.RS1.Nor1.y = Counter.FF2.RS1.qn;
//   Counter.FF2.RS1.Nor2.x[2] = Counter.FF2.RS1.TD1.y;
//   Counter.FF2.RS1.Nor1.x[1] = Counter.FF2.RS1.Nor2.y;
//   Counter.FF2.RS1.Nor1.x[1] = Counter.FF2.RS1.q;
//   Counter.FF2.RS1.Nor2.x[1] = Counter.FF2.RS1.r;
//   Counter.FF2.RS1.Nor1.x[2] = Counter.FF2.RS1.s;
//   Counter.FF1.And2.x[1] = Counter.FF1.RS1.q;
//   Counter.FF1.And2.x[1] = Counter.FF1.qn;
//   Counter.FF1.And1.x[3] = Counter.FF1.RS1.qn;
//   Counter.FF1.And1.x[3] = Counter.FF1.q;
//   Counter.FF1.And1.x[2] = Counter.FF1.j;
//   Counter.FF1.And3.x[1] = Counter.FF1.And4.x[1];
//   Counter.FF1.And3.x[1] = Counter.FF1.Not1.y;
//   Counter.FF1.And1.x[1] = Counter.FF1.And2.x[3];
//   Counter.FF1.And1.x[1] = Counter.FF1.Not1.x;
//   Counter.FF1.And1.x[1] = Counter.FF1.clk;
//   Counter.FF1.And3.x[2] = Counter.FF1.RS2.q;
//   Counter.FF1.And4.x[2] = Counter.FF1.RS2.qn;
//   Counter.FF1.And3.y = Counter.FF1.RS1.s;
//   Counter.FF1.And4.y = Counter.FF1.RS1.r;
//   Counter.FF1.And2.x[2] = Counter.FF1.k;
//   Counter.FF1.And1.y = Counter.FF1.RS2.s;
//   Counter.FF1.And2.y = Counter.FF1.RS2.r;
//   Counter.FF1.RS2.Nor1.y = Counter.FF1.RS2.TD1.x;
//   Counter.FF1.RS2.Nor1.y = Counter.FF1.RS2.qn;
//   Counter.FF1.RS2.Nor2.x[2] = Counter.FF1.RS2.TD1.y;
//   Counter.FF1.RS2.Nor1.x[1] = Counter.FF1.RS2.Nor2.y;
//   Counter.FF1.RS2.Nor1.x[1] = Counter.FF1.RS2.q;
//   Counter.FF1.RS2.Nor2.x[1] = Counter.FF1.RS2.r;
//   Counter.FF1.RS2.Nor1.x[2] = Counter.FF1.RS2.s;
//   Counter.FF1.RS1.Nor1.y = Counter.FF1.RS1.TD1.x;
//   Counter.FF1.RS1.Nor1.y = Counter.FF1.RS1.qn;
//   Counter.FF1.RS1.Nor2.x[2] = Counter.FF1.RS1.TD1.y;
//   Counter.FF1.RS1.Nor1.x[1] = Counter.FF1.RS1.Nor2.y;
//   Counter.FF1.RS1.Nor1.x[1] = Counter.FF1.RS1.q;
//   Counter.FF1.RS1.Nor2.x[1] = Counter.FF1.RS1.r;
//   Counter.FF1.RS1.Nor1.x[2] = Counter.FF1.RS1.s;
//   Adder1.Adder2.b = Adder1.c_in;
//   Adder1.Adder1.c = Adder1.OR.x[1];
//   Adder1.Adder1.s = Adder1.Adder2.a;
//   Adder1.Adder1.b = Adder1.b;
//   Adder1.Adder1.a = Adder1.a;
//   Adder1.Adder2.s = Adder1.s;
//   Adder1.Adder2.c = Adder1.OR.x[2];
//   Adder1.OR.y = Adder1.c_out;
//   Adder1.Adder1.AND.x[2] = Adder1.Adder1.XOR.x[2];
//   Adder1.Adder1.AND.x[2] = Adder1.Adder1.a;
//   Adder1.Adder1.AND.x[1] = Adder1.Adder1.XOR.x[1];
//   Adder1.Adder1.AND.x[1] = Adder1.Adder1.b;
//   Adder1.Adder1.XOR.y = Adder1.Adder1.s;
//   Adder1.Adder1.AND.y = Adder1.Adder1.c;
//   Adder1.Adder1.XOR.G2.y = Adder1.Adder1.XOR.y;
//   Adder1.Adder1.XOR.G1.y = Adder1.Adder1.XOR.G2.x;
//   Adder1.Adder1.XOR.G1.x[1] = Adder1.Adder1.XOR.x[1];
//   Adder1.Adder1.XOR.G1.x[2] = Adder1.Adder1.XOR.x[2];
//   Adder1.Adder1.AND.G1.y = Adder1.Adder1.AND.G2.x;
//   Adder1.Adder1.AND.G2.y = Adder1.Adder1.AND.y;
//   Adder1.Adder1.AND.G1.x[1] = Adder1.Adder1.AND.x[1];
//   Adder1.Adder1.AND.G1.x[2] = Adder1.Adder1.AND.x[2];
//   Adder1.Adder2.AND.x[2] = Adder1.Adder2.XOR.x[2];
//   Adder1.Adder2.AND.x[2] = Adder1.Adder2.a;
//   Adder1.Adder2.AND.x[1] = Adder1.Adder2.XOR.x[1];
//   Adder1.Adder2.AND.x[1] = Adder1.Adder2.b;
//   Adder1.Adder2.XOR.y = Adder1.Adder2.s;
//   Adder1.Adder2.AND.y = Adder1.Adder2.c;
//   Adder1.Adder2.XOR.G2.y = Adder1.Adder2.XOR.y;
//   Adder1.Adder2.XOR.G1.y = Adder1.Adder2.XOR.G2.x;
//   Adder1.Adder2.XOR.G1.x[1] = Adder1.Adder2.XOR.x[1];
//   Adder1.Adder2.XOR.G1.x[2] = Adder1.Adder2.XOR.x[2];
//   Adder1.Adder2.AND.G1.y = Adder1.Adder2.AND.G2.x;
//   Adder1.Adder2.AND.G2.y = Adder1.Adder2.AND.y;
//   Adder1.Adder2.AND.G1.x[1] = Adder1.Adder2.AND.x[1];
//   Adder1.Adder2.AND.G1.x[2] = Adder1.Adder2.AND.x[2];
// algorithm
//   when {initial(),(Adder1.Adder2.AND.G2.tLH > 0.0 OR Adder1.Adder2.AND.G2.tHL > 0.0) AND change(Adder1.Adder2.AND.G2.x) AND  NOT initial()} then
//     Adder1.Adder2.AND.G2.x_old := if initial() OR pre(Adder1.Adder2.AND.G2.x) == DAE.CAST(T_ENUMERATION, 0) then Adder1.Adder2.AND.G2.y0 else pre(Adder1.Adder2.AND.G2.x);
//     Adder1.Adder2.AND.G2.lh := Adder1.Adder2.AND.G2.delayTable[Adder1.Adder2.AND.G2.x_old,Adder1.Adder2.AND.G2.x];
//     Adder1.Adder2.AND.G2.delayTime := if Adder1.Adder2.AND.G2.lh > 0 then Adder1.Adder2.AND.G2.tLH else if Adder1.Adder2.AND.G2.lh < 0 then Adder1.Adder2.AND.G2.tHL else 0.0;
//     Adder1.Adder2.AND.G2.t_next := time + Adder1.Adder2.AND.G2.delayTime;
//     if Adder1.Adder2.AND.G2.lh == 0 OR abs(Adder1.Adder2.AND.G2.delayTime) < 1e-60 then
//       Adder1.Adder2.AND.G2.y_auxiliary := Adder1.Adder2.AND.G2.x;
//     end if;
//   elsewhen time >= Adder1.Adder2.AND.G2.t_next then
//     Adder1.Adder2.AND.G2.y_auxiliary := Adder1.Adder2.AND.G2.x;
//   end when;
//   Adder1.Adder2.AND.G2.y := if Adder1.Adder2.AND.G2.tLH > 0.0 OR Adder1.Adder2.AND.G2.tHL > 0.0 then Adder1.Adder2.AND.G2.y_auxiliary else Adder1.Adder2.AND.G2.x;
//   when {initial(),(Adder1.Adder2.XOR.G2.tLH > 0.0 OR Adder1.Adder2.XOR.G2.tHL > 0.0) AND change(Adder1.Adder2.XOR.G2.x) AND  NOT initial()} then
//     Adder1.Adder2.XOR.G2.x_old := if initial() OR pre(Adder1.Adder2.XOR.G2.x) == DAE.CAST(T_ENUMERATION, 0) then Adder1.Adder2.XOR.G2.y0 else pre(Adder1.Adder2.XOR.G2.x);
//     Adder1.Adder2.XOR.G2.lh := Adder1.Adder2.XOR.G2.delayTable[Adder1.Adder2.XOR.G2.x_old,Adder1.Adder2.XOR.G2.x];
//     Adder1.Adder2.XOR.G2.delayTime := if Adder1.Adder2.XOR.G2.lh > 0 then Adder1.Adder2.XOR.G2.tLH else if Adder1.Adder2.XOR.G2.lh < 0 then Adder1.Adder2.XOR.G2.tHL else 0.0;
//     Adder1.Adder2.XOR.G2.t_next := time + Adder1.Adder2.XOR.G2.delayTime;
//     if Adder1.Adder2.XOR.G2.lh == 0 OR abs(Adder1.Adder2.XOR.G2.delayTime) < 1e-60 then
//       Adder1.Adder2.XOR.G2.y_auxiliary := Adder1.Adder2.XOR.G2.x;
//     end if;
//   elsewhen time >= Adder1.Adder2.XOR.G2.t_next then
//     Adder1.Adder2.XOR.G2.y_auxiliary := Adder1.Adder2.XOR.G2.x;
//   end when;
//   Adder1.Adder2.XOR.G2.y := if Adder1.Adder2.XOR.G2.tLH > 0.0 OR Adder1.Adder2.XOR.G2.tHL > 0.0 then Adder1.Adder2.XOR.G2.y_auxiliary else Adder1.Adder2.XOR.G2.x;
//   when {initial(),(Adder1.Adder1.AND.G2.tLH > 0.0 OR Adder1.Adder1.AND.G2.tHL > 0.0) AND change(Adder1.Adder1.AND.G2.x) AND  NOT initial()} then
//     Adder1.Adder1.AND.G2.x_old := if initial() OR pre(Adder1.Adder1.AND.G2.x) == DAE.CAST(T_ENUMERATION, 0) then Adder1.Adder1.AND.G2.y0 else pre(Adder1.Adder1.AND.G2.x);
//     Adder1.Adder1.AND.G2.lh := Adder1.Adder1.AND.G2.delayTable[Adder1.Adder1.AND.G2.x_old,Adder1.Adder1.AND.G2.x];
//     Adder1.Adder1.AND.G2.delayTime := if Adder1.Adder1.AND.G2.lh > 0 then Adder1.Adder1.AND.G2.tLH else if Adder1.Adder1.AND.G2.lh < 0 then Adder1.Adder1.AND.G2.tHL else 0.0;
//     Adder1.Adder1.AND.G2.t_next := time + Adder1.Adder1.AND.G2.delayTime;
//     if Adder1.Adder1.AND.G2.lh == 0 OR abs(Adder1.Adder1.AND.G2.delayTime) < 1e-60 then
//       Adder1.Adder1.AND.G2.y_auxiliary := Adder1.Adder1.AND.G2.x;
//     end if;
//   elsewhen time >= Adder1.Adder1.AND.G2.t_next then
//     Adder1.Adder1.AND.G2.y_auxiliary := Adder1.Adder1.AND.G2.x;
//   end when;
//   Adder1.Adder1.AND.G2.y := if Adder1.Adder1.AND.G2.tLH > 0.0 OR Adder1.Adder1.AND.G2.tHL > 0.0 then Adder1.Adder1.AND.G2.y_auxiliary else Adder1.Adder1.AND.G2.x;
//   when {initial(),(Adder1.Adder1.XOR.G2.tLH > 0.0 OR Adder1.Adder1.XOR.G2.tHL > 0.0) AND change(Adder1.Adder1.XOR.G2.x) AND  NOT initial()} then
//     Adder1.Adder1.XOR.G2.x_old := if initial() OR pre(Adder1.Adder1.XOR.G2.x) == DAE.CAST(T_ENUMERATION, 0) then Adder1.Adder1.XOR.G2.y0 else pre(Adder1.Adder1.XOR.G2.x);
//     Adder1.Adder1.XOR.G2.lh := Adder1.Adder1.XOR.G2.delayTable[Adder1.Adder1.XOR.G2.x_old,Adder1.Adder1.XOR.G2.x];
//     Adder1.Adder1.XOR.G2.delayTime := if Adder1.Adder1.XOR.G2.lh > 0 then Adder1.Adder1.XOR.G2.tLH else if Adder1.Adder1.XOR.G2.lh < 0 then Adder1.Adder1.XOR.G2.tHL else 0.0;
//     Adder1.Adder1.XOR.G2.t_next := time + Adder1.Adder1.XOR.G2.delayTime;
//     if Adder1.Adder1.XOR.G2.lh == 0 OR abs(Adder1.Adder1.XOR.G2.delayTime) < 1e-60 then
//       Adder1.Adder1.XOR.G2.y_auxiliary := Adder1.Adder1.XOR.G2.x;
//     end if;
//   elsewhen time >= Adder1.Adder1.XOR.G2.t_next then
//     Adder1.Adder1.XOR.G2.y_auxiliary := Adder1.Adder1.XOR.G2.x;
//   end when;
//   Adder1.Adder1.XOR.G2.y := if Adder1.Adder1.XOR.G2.tLH > 0.0 OR Adder1.Adder1.XOR.G2.tHL > 0.0 then Adder1.Adder1.XOR.G2.y_auxiliary else Adder1.Adder1.XOR.G2.x;
//   Enable.y := Enable.x;
//   when sample(CLK.startTime,CLK.period) then
//     CLK.t_i := time;
//   end when;
//   CLK.y := if  NOT time >= CLK.startTime OR time >= CLK.t_i + CLK.t_width then Modelica.Electrical.Digital.Interfaces.Logic.'0' else Modelica.Electrical.Digital.Interfaces.Logic.'1';
// end Modelica.Electrical.Digital.Examples.FullAdder;
// "
// ""
// "Check of Modelica.Electrical.Digital.Examples.FullAdder completed successfully.
// 
// 
// Class Modelica.Electrical.Digital.Examples.FullAdder has 613 equation(s) and 613 variable(s).
// 501 of these are trivial equation(s).
// "
// ""
// record SimulationResult
//     resultFile = "",
//     messages = "Simulation failed for model: Modelica.Electrical.Digital.Examples.FullAdder
// Error: Error building simulator. Buildlog: g++ -I. -o Modelica.Electrical.Digital.Examples.FullAdder.exe Modelica.Electrical.Digital.Examples.FullAdder.cpp Modelica.Electrical.Digital.Examples.FullAdder_functions.cpp -L"../../../../libraries/msl31//Modelica/Electrical"   -lsim -linteractive -I"c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc" -msse2 -mfpmath=sse  -lsendData -lQtNetwork-mingw -lQtCore-mingw -lQtGui-mingw -luuid -lole32 -lws2_32 -L"c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/lib/omc" -lc_runtime -lf2c Modelica.Electrical.Digital.Examples.FullAdder_records.c

// Modelica.Electrical.Digital.Examples.FullAdder.cpp: In function `int functionDAE_output()':

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5118: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5121: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5121: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5121: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5121: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5121: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5124: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5124: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5124: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5124: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5127: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5127: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5127: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5127: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5128: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5128: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5128: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5128: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5131: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5131: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5131: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5131: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5132: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5132: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5132: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5132: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5133: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5133: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5135: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5135: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5135: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5135: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5135: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5136: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5136: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5156: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5156: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5156: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5156: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5157: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5157: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5159: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5159: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5159: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5159: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5160: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5160: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5180: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5180: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5180: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5180: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5186: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5186: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5186: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5186: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5189: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5189: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5189: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5189: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5192: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5192: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5192: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5192: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5193: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5193: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5193: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5193: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5196: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5196: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5196: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5196: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5197: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5197: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5197: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5197: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5198: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5198: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5200: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5200: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5200: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5200: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5201: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5201: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5221: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5221: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5221: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5221: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5222: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5222: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5224: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5224: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5224: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5224: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5225: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5225: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5245: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5245: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5245: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5245: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5251: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5251: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5251: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5251: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5254: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5254: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5254: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5254: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5257: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5257: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5257: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5257: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5258: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5258: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5258: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5258: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5261: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5261: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5261: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5261: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5262: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5262: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5262: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5262: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5263: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5263: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5265: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5265: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5265: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5265: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5266: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5266: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5286: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5286: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5286: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5286: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5287: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5287: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5289: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5289: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5289: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5289: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5290: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5290: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5310: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5310: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5310: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5310: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5362: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5362: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5362: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5362: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5365: error: `$PD$PTables$PXorTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5365: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5365: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5365: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5365: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5368: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5368: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5368: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5368: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5371: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5371: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5371: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5371: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5374: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5374: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5374: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5374: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp: In function `int functionDAE_output2()':

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5768: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5825: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5882: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5939: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.FullAdder.cpp: In function `int function_updateDependents()':

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6737: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6740: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6740: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6740: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6740: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6740: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6743: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6743: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6743: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6743: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6746: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6746: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6746: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6746: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6747: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6747: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6747: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6747: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6750: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6750: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6750: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6750: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6751: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6751: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6751: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6751: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6752: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6752: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6754: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6754: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6754: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6754: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6754: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6755: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6755: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6775: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6775: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6775: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6775: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6776: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6776: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6778: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6778: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6778: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6778: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6779: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6779: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6799: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6799: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6799: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6799: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6805: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6805: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6805: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6805: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6808: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6808: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6808: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6808: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6811: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6811: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6811: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6811: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6812: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6812: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6812: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6812: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6815: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6815: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6815: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6815: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6816: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6816: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6816: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6816: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6817: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6817: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6819: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6819: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6819: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6819: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6820: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6820: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6840: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6840: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6840: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6840: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6841: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6841: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6843: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6843: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6843: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6843: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6844: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6844: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6864: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6864: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6864: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6864: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6870: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6870: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6870: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6870: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6873: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6873: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6873: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6873: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6876: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6876: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6876: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6876: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6877: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6877: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6877: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6877: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6880: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6880: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6880: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6880: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6881: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6881: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6881: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6881: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6882: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6882: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6884: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6884: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6884: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6884: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6885: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6885: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6905: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6905: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6905: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6905: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6906: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6906: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6908: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6908: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6908: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6908: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6909: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6909: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6929: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6929: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6929: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6929: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6981: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6981: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6981: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6981: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7065: error: `$PD$PTables$PXorTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7065: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7065: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7065: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7065: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7149: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7149: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7149: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7149: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7233: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7233: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7233: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7233: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7317: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7317: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7317: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7317: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7320: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7377: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7483: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7540: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7615: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7624: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7633: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7642: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.FullAdder.cpp: In function `int initial_residual()':

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7853: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7853: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7853: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7853: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7853: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7856: error: `$PD$PTables$PXorTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7856: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7856: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7856: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7856: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7859: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7859: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7859: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7859: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7862: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7862: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7862: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7862: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7865: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7865: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7865: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7865: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7865: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7966: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7966: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7966: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7966: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7967: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7967: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7967: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7969: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7969: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7969: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7969: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7970: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7970: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7988: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7988: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7988: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7988: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7989: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7989: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7991: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7991: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7991: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7991: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7992: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7992: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8010: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8010: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8010: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8010: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8011: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8011: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8011: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8011: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8014: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8014: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8014: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8014: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8015: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8015: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8015: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8015: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8018: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8018: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8018: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8018: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8021: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8021: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8021: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8021: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8027: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8027: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8027: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8027: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8028: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8028: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8030: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8030: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8030: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8030: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8031: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8031: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8049: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8049: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8049: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8049: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8050: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8050: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8052: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8052: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8052: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8052: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8053: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8053: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8071: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8071: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8071: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8071: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8072: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8072: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8072: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8072: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8075: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8075: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8075: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8075: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8076: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8076: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8076: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8076: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8079: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8079: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8079: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8079: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8082: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8082: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8082: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8082: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8088: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8088: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8088: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8088: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8089: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8089: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8091: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8091: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8091: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8091: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8092: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8092: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8110: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8110: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8110: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8110: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8111: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8111: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8113: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8113: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8113: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8113: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8114: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8114: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8132: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8132: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8132: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8132: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8133: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8133: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8133: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8133: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8136: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8136: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8136: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8136: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8137: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8137: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8137: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8137: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8140: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8140: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8140: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8140: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8143: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8143: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8143: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8143: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp: In function `int functionAlgebraics()':

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8940: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8943: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8943: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8943: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8943: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8943: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8946: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8946: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8946: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8946: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8949: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8949: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8949: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8949: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8950: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8950: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8950: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8950: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8953: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8953: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8953: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8953: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8954: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8954: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8954: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8954: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8955: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8955: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8957: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8957: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8957: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8957: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8957: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8958: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8958: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8978: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8978: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8978: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8978: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8979: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8979: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8981: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8981: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8981: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8981: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8982: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8982: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9002: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9002: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9002: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9002: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9008: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9008: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9008: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9008: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9011: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9011: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9011: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9011: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9014: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9014: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9014: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9014: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9015: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9015: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9015: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9015: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9018: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9018: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9018: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9018: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9019: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9019: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9019: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9019: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9020: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9020: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9022: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9022: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9022: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9022: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9023: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9023: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9043: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9043: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9043: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9043: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9044: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9044: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9046: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9046: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9046: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9046: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9047: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9047: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9067: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9067: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9067: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9067: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9073: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9073: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9073: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9073: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9076: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9076: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9076: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9076: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9079: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9079: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9079: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9079: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9080: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9080: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9080: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9080: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9083: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9083: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9083: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9083: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9084: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9084: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9084: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9084: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9085: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9085: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9087: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9087: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9087: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9087: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9088: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9088: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9108: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9108: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9108: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9108: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9109: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9109: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9111: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9111: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9111: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9111: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9112: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9112: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9132: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9132: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9132: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9132: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9184: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9184: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9184: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9184: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9187: error: `$PD$PTables$PXorTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9187: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9187: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9187: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9187: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9190: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9190: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9190: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9190: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9193: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9193: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9193: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9193: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9196: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9196: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9196: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9196: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp: In function `int functionDAE(int&)':

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9752: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9755: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9755: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9755: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9755: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9755: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9758: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9758: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9758: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9758: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9761: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9761: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9761: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9761: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9762: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9762: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9762: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9762: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9765: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9765: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9765: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9765: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9766: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9766: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9766: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9766: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9767: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9767: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9769: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9769: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9769: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9769: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9769: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9770: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9770: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9790: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9790: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9790: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9790: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9791: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9791: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9793: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9793: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9793: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9793: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9794: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9794: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9814: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9814: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9814: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9814: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9820: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9820: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9820: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9820: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9823: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9823: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9823: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9823: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9826: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9826: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9826: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9826: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9827: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9827: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9827: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9827: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9830: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9830: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9830: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9830: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9831: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9831: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9831: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9831: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9832: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9832: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9834: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9834: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9834: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9834: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9835: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9835: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9855: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9855: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9855: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9855: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9856: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9856: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9858: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9858: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9858: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9858: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9859: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9859: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9879: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9879: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9879: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9879: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9885: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9885: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9885: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9885: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9888: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9888: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9888: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9888: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9891: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9891: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9891: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9891: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9892: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9892: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9892: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9892: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9895: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9895: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9895: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9895: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9896: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9896: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9896: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9896: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9897: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9897: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9899: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9899: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9899: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9899: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9900: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9900: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9920: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9920: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9920: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9920: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9921: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9921: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9923: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9923: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9923: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9923: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9924: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9924: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9944: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9944: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9944: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9944: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9996: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9996: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9996: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9996: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10080: error: `$PD$PTables$PXorTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10080: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10080: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10080: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10080: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10164: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10164: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10164: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10164: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10248: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10248: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10248: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10248: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10332: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10332: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10332: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10332: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10335: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10392: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10498: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10555: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// mingw32-make: *** [Modelica.Electrical.Digital.Examples.FullAdder] Error 1

// 
// Error: Error building simulator. Buildlog: command g++ not found. Check $OPENMODELICAHOME
// Error: Error building simulator. Buildlog: command "c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/share/omc/scripts/Compile" not found. Check $OPENMODELICAHOME
// "
// end SimulationResult;
// ""
// "class Modelica.Electrical.Digital.Examples.Adder4
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') b4.x[1] = Modelica.Electrical.Digital.Interfaces.Logic.'1' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') b4.x[2] = Modelica.Electrical.Digital.Interfaces.Logic.'0' "vector of values";
//   parameter Real b4.t[1] = 1.0 "vector of corresponding time points";
//   parameter Real b4.t[2] = 3.0 "vector of corresponding time points";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') b4.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial output value";
//   parameter Integer b4.n = 2 "table size";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') b4.y;
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') b1.x[1] = Modelica.Electrical.Digital.Interfaces.Logic.'1' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') b1.x[2] = Modelica.Electrical.Digital.Interfaces.Logic.'0' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') b1.x[3] = Modelica.Electrical.Digital.Interfaces.Logic.'1' "vector of values";
//   parameter Real b1.t[1] = 1.0 "vector of corresponding time points";
//   parameter Real b1.t[2] = 2.0 "vector of corresponding time points";
//   parameter Real b1.t[3] = 3.0 "vector of corresponding time points";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') b1.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial output value";
//   parameter Integer b1.n = 3 "table size";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') b1.y;
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') b2.x[1] = Modelica.Electrical.Digital.Interfaces.Logic.'1' "vector of values";
//   parameter Real b2.t[1] = 4.0 "vector of corresponding time points";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') b2.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial output value";
//   parameter Integer b2.n = 1 "table size";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') b2.y;
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') b3.x[1] = Modelica.Electrical.Digital.Interfaces.Logic.'1' "vector of values";
//   parameter Real b3.t[1] = 1.0 "vector of corresponding time points";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') b3.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial output value";
//   parameter Integer b3.n = 1 "table size";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') b3.y;
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') a1.x[1] = Modelica.Electrical.Digital.Interfaces.Logic.'1' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') a1.x[2] = Modelica.Electrical.Digital.Interfaces.Logic.'0' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') a1.x[3] = Modelica.Electrical.Digital.Interfaces.Logic.'1' "vector of values";
//   parameter Real a1.t[1] = 1.0 "vector of corresponding time points";
//   parameter Real a1.t[2] = 2.0 "vector of corresponding time points";
//   parameter Real a1.t[3] = 3.0 "vector of corresponding time points";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') a1.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial output value";
//   parameter Integer a1.n = 3 "table size";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') a1.y;
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') a2.x[1] = Modelica.Electrical.Digital.Interfaces.Logic.'1' "vector of values";
//   parameter Real a2.t[1] = 1.0 "vector of corresponding time points";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') a2.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial output value";
//   parameter Integer a2.n = 1 "table size";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') a2.y;
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') a3.x[1] = Modelica.Electrical.Digital.Interfaces.Logic.'1' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') a3.x[2] = Modelica.Electrical.Digital.Interfaces.Logic.'0' "vector of values";
//   parameter Real a3.t[1] = 1.0 "vector of corresponding time points";
//   parameter Real a3.t[2] = 4.0 "vector of corresponding time points";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') a3.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial output value";
//   parameter Integer a3.n = 2 "table size";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') a3.y;
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') a4.x[1] = Modelica.Electrical.Digital.Interfaces.Logic.'0' "vector of values";
//   parameter Real a4.t[1] = 1.0 "vector of corresponding time points";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') a4.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial output value";
//   parameter Integer a4.n = 1 "table size";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') a4.y;
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Set.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'1') = Modelica.Electrical.Digital.Interfaces.Logic.'0' "Logic value to be set";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Set.y;
//   parameter Real Adder1.Adder2.delayTime = 0.001 "delay time";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.b;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.a;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.c;
//   parameter Integer Adder1.Adder2.AND.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.y "Connector of Digital output signal";
//   parameter Real Adder1.Adder2.AND.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder2.delayTime "rise inertial delay";
//   parameter Real Adder1.Adder2.AND.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder2.delayTime "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'U' "initial value of output";
//   parameter Integer Adder1.Adder2.AND.G1.n(min = 2) = Adder1.Adder2.AND.n "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.G1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.G1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.G1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.G1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.G1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.G2.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.G2.y "Connector of Digital output signal";
//   parameter Real Adder1.Adder2.AND.G2.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder2.AND.tLH "rise inertial delay";
//   parameter Real Adder1.Adder2.AND.G2.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder2.AND.tHL "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.G2.y0 = Adder1.Adder2.AND.y0 "initial value of output";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[1,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[1,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[1,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[1,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[1,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[1,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[1,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[1,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[1,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[2,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[2,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[2,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[2,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[2,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[2,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[2,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[2,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[2,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[3,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[3,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[3,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[3,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[3,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[3,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[3,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[3,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[3,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[4,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[4,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[4,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[4,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[4,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[4,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[4,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[4,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[4,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[5,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[5,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[5,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[5,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[5,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[5,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[5,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[5,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[5,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[6,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[6,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[6,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[6,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[6,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[6,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[6,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[6,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[6,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[7,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[7,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[7,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[7,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[7,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[7,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[7,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[7,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[7,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[8,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[8,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[8,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[8,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[8,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[8,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[8,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[8,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[8,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[9,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[9,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[9,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[9,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[9,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[9,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[9,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[9,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[9,9] = 0 "specification of delay according to signal change";
//   protected Real Adder1.Adder2.AND.G2.delayTime(quantity = "Time", unit = "s");
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.G2.y_auxiliary(start = Adder1.Adder2.AND.G2.y0, fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.G2.x_old(start = Adder1.Adder2.AND.G2.y0, fixed = true);
//   protected Integer Adder1.Adder2.AND.G2.lh;
//   protected discrete Real Adder1.Adder2.AND.G2.t_next(quantity = "Time", unit = "s");
//   parameter Real Adder1.Adder2.XOR.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder2.delayTime "rise inertial delay";
//   parameter Real Adder1.Adder2.XOR.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder2.delayTime "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'U' "initial value of output";
//   parameter Integer Adder1.Adder2.XOR.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.y "Connector of Digital output signal";
//   parameter Integer Adder1.Adder2.XOR.G1.n(min = 2) = Adder1.Adder2.XOR.n "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.G1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.G1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.G1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.G1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.G1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.G2.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.G2.y "Connector of Digital output signal";
//   parameter Real Adder1.Adder2.XOR.G2.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder2.XOR.tLH "rise inertial delay";
//   parameter Real Adder1.Adder2.XOR.G2.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder2.XOR.tHL "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.G2.y0 = Adder1.Adder2.XOR.y0 "initial value of output";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[1,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[1,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[1,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[1,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[1,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[1,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[1,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[1,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[1,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[2,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[2,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[2,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[2,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[2,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[2,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[2,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[2,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[2,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[3,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[3,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[3,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[3,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[3,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[3,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[3,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[3,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[3,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[4,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[4,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[4,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[4,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[4,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[4,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[4,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[4,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[4,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[5,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[5,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[5,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[5,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[5,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[5,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[5,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[5,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[5,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[6,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[6,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[6,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[6,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[6,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[6,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[6,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[6,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[6,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[7,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[7,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[7,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[7,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[7,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[7,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[7,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[7,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[7,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[8,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[8,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[8,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[8,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[8,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[8,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[8,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[8,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[8,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[9,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[9,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[9,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[9,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[9,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[9,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[9,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[9,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[9,9] = 0 "specification of delay according to signal change";
//   protected Real Adder1.Adder2.XOR.G2.delayTime(quantity = "Time", unit = "s");
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.G2.y_auxiliary(start = Adder1.Adder2.XOR.G2.y0, fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.G2.x_old(start = Adder1.Adder2.XOR.G2.y0, fixed = true);
//   protected Integer Adder1.Adder2.XOR.G2.lh;
//   protected discrete Real Adder1.Adder2.XOR.G2.t_next(quantity = "Time", unit = "s");
//   parameter Real Adder1.Adder1.delayTime = 0.001 "delay time";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.b;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.a;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.c;
//   parameter Integer Adder1.Adder1.AND.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.y "Connector of Digital output signal";
//   parameter Real Adder1.Adder1.AND.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder1.delayTime "rise inertial delay";
//   parameter Real Adder1.Adder1.AND.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder1.delayTime "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'U' "initial value of output";
//   parameter Integer Adder1.Adder1.AND.G1.n(min = 2) = Adder1.Adder1.AND.n "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.G1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.G1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.G1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.G1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.G1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.G2.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.G2.y "Connector of Digital output signal";
//   parameter Real Adder1.Adder1.AND.G2.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder1.AND.tLH "rise inertial delay";
//   parameter Real Adder1.Adder1.AND.G2.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder1.AND.tHL "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.G2.y0 = Adder1.Adder1.AND.y0 "initial value of output";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[1,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[1,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[1,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[1,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[1,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[1,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[1,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[1,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[1,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[2,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[2,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[2,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[2,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[2,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[2,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[2,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[2,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[2,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[3,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[3,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[3,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[3,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[3,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[3,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[3,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[3,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[3,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[4,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[4,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[4,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[4,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[4,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[4,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[4,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[4,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[4,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[5,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[5,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[5,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[5,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[5,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[5,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[5,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[5,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[5,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[6,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[6,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[6,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[6,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[6,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[6,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[6,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[6,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[6,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[7,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[7,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[7,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[7,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[7,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[7,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[7,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[7,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[7,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[8,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[8,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[8,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[8,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[8,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[8,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[8,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[8,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[8,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[9,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[9,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[9,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[9,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[9,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[9,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[9,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[9,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[9,9] = 0 "specification of delay according to signal change";
//   protected Real Adder1.Adder1.AND.G2.delayTime(quantity = "Time", unit = "s");
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.G2.y_auxiliary(start = Adder1.Adder1.AND.G2.y0, fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.G2.x_old(start = Adder1.Adder1.AND.G2.y0, fixed = true);
//   protected Integer Adder1.Adder1.AND.G2.lh;
//   protected discrete Real Adder1.Adder1.AND.G2.t_next(quantity = "Time", unit = "s");
//   parameter Real Adder1.Adder1.XOR.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder1.delayTime "rise inertial delay";
//   parameter Real Adder1.Adder1.XOR.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder1.delayTime "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'U' "initial value of output";
//   parameter Integer Adder1.Adder1.XOR.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.y "Connector of Digital output signal";
//   parameter Integer Adder1.Adder1.XOR.G1.n(min = 2) = Adder1.Adder1.XOR.n "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.G1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.G1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.G1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.G1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.G1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.G2.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.G2.y "Connector of Digital output signal";
//   parameter Real Adder1.Adder1.XOR.G2.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder1.XOR.tLH "rise inertial delay";
//   parameter Real Adder1.Adder1.XOR.G2.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder1.XOR.tHL "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.G2.y0 = Adder1.Adder1.XOR.y0 "initial value of output";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[1,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[1,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[1,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[1,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[1,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[1,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[1,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[1,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[1,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[2,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[2,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[2,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[2,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[2,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[2,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[2,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[2,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[2,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[3,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[3,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[3,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[3,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[3,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[3,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[3,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[3,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[3,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[4,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[4,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[4,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[4,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[4,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[4,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[4,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[4,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[4,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[5,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[5,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[5,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[5,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[5,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[5,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[5,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[5,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[5,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[6,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[6,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[6,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[6,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[6,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[6,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[6,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[6,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[6,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[7,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[7,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[7,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[7,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[7,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[7,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[7,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[7,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[7,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[8,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[8,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[8,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[8,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[8,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[8,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[8,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[8,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[8,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[9,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[9,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[9,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[9,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[9,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[9,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[9,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[9,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[9,9] = 0 "specification of delay according to signal change";
//   protected Real Adder1.Adder1.XOR.G2.delayTime(quantity = "Time", unit = "s");
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.G2.y_auxiliary(start = Adder1.Adder1.XOR.G2.y0, fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.G2.x_old(start = Adder1.Adder1.XOR.G2.y0, fixed = true);
//   protected Integer Adder1.Adder1.XOR.G2.lh;
//   protected discrete Real Adder1.Adder1.XOR.G2.t_next(quantity = "Time", unit = "s");
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.a;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.b;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.c_in;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.s;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.c_out;
//   parameter Integer Adder1.OR.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.OR.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.OR.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.OR.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.OR.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.OR.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Real Adder2.Adder2.delayTime = 0.001 "delay time";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.b;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.a;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.c;
//   parameter Integer Adder2.Adder2.AND.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.AND.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.AND.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.AND.y "Connector of Digital output signal";
//   parameter Real Adder2.Adder2.AND.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder2.Adder2.delayTime "rise inertial delay";
//   parameter Real Adder2.Adder2.AND.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder2.Adder2.delayTime "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.AND.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'U' "initial value of output";
//   parameter Integer Adder2.Adder2.AND.G1.n(min = 2) = Adder2.Adder2.AND.n "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.AND.G1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.AND.G1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.AND.G1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.AND.G1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.AND.G1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.AND.G2.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.AND.G2.y "Connector of Digital output signal";
//   parameter Real Adder2.Adder2.AND.G2.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder2.Adder2.AND.tLH "rise inertial delay";
//   parameter Real Adder2.Adder2.AND.G2.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder2.Adder2.AND.tHL "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.AND.G2.y0 = Adder2.Adder2.AND.y0 "initial value of output";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[1,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[1,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[1,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[1,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[1,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[1,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[1,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[1,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[1,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[2,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[2,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[2,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[2,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[2,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[2,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[2,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[2,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[2,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[3,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[3,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[3,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[3,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[3,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[3,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[3,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[3,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[3,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[4,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[4,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[4,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[4,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[4,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[4,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[4,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[4,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[4,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[5,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[5,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[5,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[5,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[5,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[5,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[5,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[5,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[5,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[6,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[6,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[6,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[6,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[6,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[6,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[6,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[6,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[6,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[7,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[7,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[7,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[7,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[7,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[7,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[7,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[7,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[7,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[8,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[8,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[8,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[8,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[8,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[8,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[8,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[8,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[8,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[9,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[9,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[9,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[9,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[9,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[9,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[9,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[9,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[9,9] = 0 "specification of delay according to signal change";
//   protected Real Adder2.Adder2.AND.G2.delayTime(quantity = "Time", unit = "s");
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.AND.G2.y_auxiliary(start = Adder2.Adder2.AND.G2.y0, fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.AND.G2.x_old(start = Adder2.Adder2.AND.G2.y0, fixed = true);
//   protected Integer Adder2.Adder2.AND.G2.lh;
//   protected discrete Real Adder2.Adder2.AND.G2.t_next(quantity = "Time", unit = "s");
//   parameter Real Adder2.Adder2.XOR.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder2.Adder2.delayTime "rise inertial delay";
//   parameter Real Adder2.Adder2.XOR.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder2.Adder2.delayTime "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.XOR.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'U' "initial value of output";
//   parameter Integer Adder2.Adder2.XOR.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.XOR.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.XOR.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.XOR.y "Connector of Digital output signal";
//   parameter Integer Adder2.Adder2.XOR.G1.n(min = 2) = Adder2.Adder2.XOR.n "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.XOR.G1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.XOR.G1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.XOR.G1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.XOR.G1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.XOR.G1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.XOR.G2.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.XOR.G2.y "Connector of Digital output signal";
//   parameter Real Adder2.Adder2.XOR.G2.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder2.Adder2.XOR.tLH "rise inertial delay";
//   parameter Real Adder2.Adder2.XOR.G2.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder2.Adder2.XOR.tHL "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.XOR.G2.y0 = Adder2.Adder2.XOR.y0 "initial value of output";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[1,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[1,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[1,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[1,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[1,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[1,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[1,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[1,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[1,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[2,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[2,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[2,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[2,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[2,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[2,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[2,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[2,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[2,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[3,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[3,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[3,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[3,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[3,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[3,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[3,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[3,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[3,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[4,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[4,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[4,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[4,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[4,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[4,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[4,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[4,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[4,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[5,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[5,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[5,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[5,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[5,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[5,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[5,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[5,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[5,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[6,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[6,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[6,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[6,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[6,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[6,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[6,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[6,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[6,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[7,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[7,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[7,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[7,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[7,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[7,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[7,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[7,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[7,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[8,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[8,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[8,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[8,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[8,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[8,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[8,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[8,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[8,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[9,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[9,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[9,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[9,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[9,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[9,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[9,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[9,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[9,9] = 0 "specification of delay according to signal change";
//   protected Real Adder2.Adder2.XOR.G2.delayTime(quantity = "Time", unit = "s");
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.XOR.G2.y_auxiliary(start = Adder2.Adder2.XOR.G2.y0, fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.XOR.G2.x_old(start = Adder2.Adder2.XOR.G2.y0, fixed = true);
//   protected Integer Adder2.Adder2.XOR.G2.lh;
//   protected discrete Real Adder2.Adder2.XOR.G2.t_next(quantity = "Time", unit = "s");
//   parameter Real Adder2.Adder1.delayTime = 0.001 "delay time";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.b;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.a;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.c;
//   parameter Integer Adder2.Adder1.AND.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.AND.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.AND.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.AND.y "Connector of Digital output signal";
//   parameter Real Adder2.Adder1.AND.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder2.Adder1.delayTime "rise inertial delay";
//   parameter Real Adder2.Adder1.AND.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder2.Adder1.delayTime "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.AND.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'U' "initial value of output";
//   parameter Integer Adder2.Adder1.AND.G1.n(min = 2) = Adder2.Adder1.AND.n "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.AND.G1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.AND.G1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.AND.G1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.AND.G1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.AND.G1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.AND.G2.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.AND.G2.y "Connector of Digital output signal";
//   parameter Real Adder2.Adder1.AND.G2.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder2.Adder1.AND.tLH "rise inertial delay";
//   parameter Real Adder2.Adder1.AND.G2.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder2.Adder1.AND.tHL "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.AND.G2.y0 = Adder2.Adder1.AND.y0 "initial value of output";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[1,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[1,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[1,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[1,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[1,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[1,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[1,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[1,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[1,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[2,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[2,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[2,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[2,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[2,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[2,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[2,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[2,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[2,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[3,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[3,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[3,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[3,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[3,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[3,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[3,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[3,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[3,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[4,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[4,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[4,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[4,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[4,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[4,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[4,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[4,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[4,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[5,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[5,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[5,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[5,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[5,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[5,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[5,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[5,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[5,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[6,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[6,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[6,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[6,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[6,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[6,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[6,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[6,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[6,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[7,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[7,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[7,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[7,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[7,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[7,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[7,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[7,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[7,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[8,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[8,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[8,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[8,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[8,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[8,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[8,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[8,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[8,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[9,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[9,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[9,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[9,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[9,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[9,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[9,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[9,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[9,9] = 0 "specification of delay according to signal change";
//   protected Real Adder2.Adder1.AND.G2.delayTime(quantity = "Time", unit = "s");
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.AND.G2.y_auxiliary(start = Adder2.Adder1.AND.G2.y0, fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.AND.G2.x_old(start = Adder2.Adder1.AND.G2.y0, fixed = true);
//   protected Integer Adder2.Adder1.AND.G2.lh;
//   protected discrete Real Adder2.Adder1.AND.G2.t_next(quantity = "Time", unit = "s");
//   parameter Real Adder2.Adder1.XOR.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder2.Adder1.delayTime "rise inertial delay";
//   parameter Real Adder2.Adder1.XOR.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder2.Adder1.delayTime "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.XOR.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'U' "initial value of output";
//   parameter Integer Adder2.Adder1.XOR.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.XOR.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.XOR.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.XOR.y "Connector of Digital output signal";
//   parameter Integer Adder2.Adder1.XOR.G1.n(min = 2) = Adder2.Adder1.XOR.n "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.XOR.G1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.XOR.G1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.XOR.G1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.XOR.G1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.XOR.G1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.XOR.G2.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.XOR.G2.y "Connector of Digital output signal";
//   parameter Real Adder2.Adder1.XOR.G2.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder2.Adder1.XOR.tLH "rise inertial delay";
//   parameter Real Adder2.Adder1.XOR.G2.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder2.Adder1.XOR.tHL "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.XOR.G2.y0 = Adder2.Adder1.XOR.y0 "initial value of output";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[1,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[1,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[1,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[1,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[1,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[1,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[1,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[1,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[1,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[2,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[2,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[2,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[2,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[2,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[2,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[2,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[2,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[2,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[3,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[3,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[3,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[3,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[3,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[3,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[3,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[3,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[3,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[4,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[4,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[4,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[4,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[4,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[4,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[4,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[4,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[4,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[5,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[5,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[5,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[5,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[5,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[5,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[5,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[5,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[5,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[6,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[6,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[6,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[6,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[6,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[6,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[6,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[6,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[6,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[7,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[7,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[7,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[7,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[7,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[7,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[7,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[7,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[7,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[8,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[8,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[8,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[8,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[8,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[8,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[8,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[8,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[8,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[9,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[9,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[9,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[9,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[9,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[9,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[9,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[9,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[9,9] = 0 "specification of delay according to signal change";
//   protected Real Adder2.Adder1.XOR.G2.delayTime(quantity = "Time", unit = "s");
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.XOR.G2.y_auxiliary(start = Adder2.Adder1.XOR.G2.y0, fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.XOR.G2.x_old(start = Adder2.Adder1.XOR.G2.y0, fixed = true);
//   protected Integer Adder2.Adder1.XOR.G2.lh;
//   protected discrete Real Adder2.Adder1.XOR.G2.t_next(quantity = "Time", unit = "s");
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.a;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.b;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.c_in;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.s;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.c_out;
//   parameter Integer Adder2.OR.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.OR.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.OR.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.OR.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.OR.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.OR.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Real Adder3.Adder2.delayTime = 0.001 "delay time";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.b;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.a;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.c;
//   parameter Integer Adder3.Adder2.AND.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.AND.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.AND.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.AND.y "Connector of Digital output signal";
//   parameter Real Adder3.Adder2.AND.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder3.Adder2.delayTime "rise inertial delay";
//   parameter Real Adder3.Adder2.AND.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder3.Adder2.delayTime "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.AND.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'U' "initial value of output";
//   parameter Integer Adder3.Adder2.AND.G1.n(min = 2) = Adder3.Adder2.AND.n "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.AND.G1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.AND.G1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.AND.G1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.AND.G1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.AND.G1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.AND.G2.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.AND.G2.y "Connector of Digital output signal";
//   parameter Real Adder3.Adder2.AND.G2.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder3.Adder2.AND.tLH "rise inertial delay";
//   parameter Real Adder3.Adder2.AND.G2.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder3.Adder2.AND.tHL "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.AND.G2.y0 = Adder3.Adder2.AND.y0 "initial value of output";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[1,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[1,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[1,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[1,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[1,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[1,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[1,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[1,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[1,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[2,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[2,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[2,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[2,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[2,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[2,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[2,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[2,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[2,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[3,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[3,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[3,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[3,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[3,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[3,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[3,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[3,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[3,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[4,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[4,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[4,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[4,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[4,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[4,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[4,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[4,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[4,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[5,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[5,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[5,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[5,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[5,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[5,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[5,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[5,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[5,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[6,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[6,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[6,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[6,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[6,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[6,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[6,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[6,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[6,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[7,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[7,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[7,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[7,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[7,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[7,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[7,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[7,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[7,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[8,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[8,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[8,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[8,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[8,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[8,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[8,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[8,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[8,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[9,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[9,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[9,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[9,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[9,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[9,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[9,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[9,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[9,9] = 0 "specification of delay according to signal change";
//   protected Real Adder3.Adder2.AND.G2.delayTime(quantity = "Time", unit = "s");
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.AND.G2.y_auxiliary(start = Adder3.Adder2.AND.G2.y0, fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.AND.G2.x_old(start = Adder3.Adder2.AND.G2.y0, fixed = true);
//   protected Integer Adder3.Adder2.AND.G2.lh;
//   protected discrete Real Adder3.Adder2.AND.G2.t_next(quantity = "Time", unit = "s");
//   parameter Real Adder3.Adder2.XOR.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder3.Adder2.delayTime "rise inertial delay";
//   parameter Real Adder3.Adder2.XOR.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder3.Adder2.delayTime "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.XOR.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'U' "initial value of output";
//   parameter Integer Adder3.Adder2.XOR.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.XOR.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.XOR.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.XOR.y "Connector of Digital output signal";
//   parameter Integer Adder3.Adder2.XOR.G1.n(min = 2) = Adder3.Adder2.XOR.n "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.XOR.G1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.XOR.G1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.XOR.G1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.XOR.G1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.XOR.G1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.XOR.G2.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.XOR.G2.y "Connector of Digital output signal";
//   parameter Real Adder3.Adder2.XOR.G2.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder3.Adder2.XOR.tLH "rise inertial delay";
//   parameter Real Adder3.Adder2.XOR.G2.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder3.Adder2.XOR.tHL "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.XOR.G2.y0 = Adder3.Adder2.XOR.y0 "initial value of output";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[1,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[1,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[1,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[1,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[1,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[1,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[1,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[1,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[1,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[2,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[2,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[2,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[2,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[2,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[2,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[2,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[2,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[2,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[3,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[3,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[3,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[3,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[3,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[3,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[3,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[3,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[3,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[4,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[4,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[4,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[4,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[4,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[4,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[4,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[4,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[4,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[5,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[5,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[5,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[5,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[5,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[5,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[5,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[5,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[5,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[6,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[6,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[6,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[6,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[6,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[6,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[6,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[6,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[6,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[7,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[7,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[7,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[7,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[7,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[7,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[7,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[7,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[7,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[8,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[8,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[8,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[8,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[8,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[8,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[8,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[8,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[8,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[9,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[9,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[9,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[9,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[9,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[9,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[9,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[9,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[9,9] = 0 "specification of delay according to signal change";
//   protected Real Adder3.Adder2.XOR.G2.delayTime(quantity = "Time", unit = "s");
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.XOR.G2.y_auxiliary(start = Adder3.Adder2.XOR.G2.y0, fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.XOR.G2.x_old(start = Adder3.Adder2.XOR.G2.y0, fixed = true);
//   protected Integer Adder3.Adder2.XOR.G2.lh;
//   protected discrete Real Adder3.Adder2.XOR.G2.t_next(quantity = "Time", unit = "s");
//   parameter Real Adder3.Adder1.delayTime = 0.001 "delay time";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.b;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.a;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.c;
//   parameter Integer Adder3.Adder1.AND.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.AND.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.AND.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.AND.y "Connector of Digital output signal";
//   parameter Real Adder3.Adder1.AND.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder3.Adder1.delayTime "rise inertial delay";
//   parameter Real Adder3.Adder1.AND.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder3.Adder1.delayTime "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.AND.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'U' "initial value of output";
//   parameter Integer Adder3.Adder1.AND.G1.n(min = 2) = Adder3.Adder1.AND.n "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.AND.G1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.AND.G1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.AND.G1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.AND.G1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.AND.G1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.AND.G2.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.AND.G2.y "Connector of Digital output signal";
//   parameter Real Adder3.Adder1.AND.G2.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder3.Adder1.AND.tLH "rise inertial delay";
//   parameter Real Adder3.Adder1.AND.G2.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder3.Adder1.AND.tHL "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.AND.G2.y0 = Adder3.Adder1.AND.y0 "initial value of output";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[1,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[1,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[1,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[1,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[1,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[1,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[1,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[1,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[1,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[2,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[2,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[2,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[2,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[2,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[2,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[2,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[2,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[2,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[3,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[3,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[3,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[3,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[3,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[3,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[3,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[3,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[3,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[4,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[4,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[4,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[4,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[4,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[4,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[4,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[4,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[4,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[5,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[5,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[5,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[5,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[5,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[5,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[5,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[5,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[5,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[6,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[6,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[6,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[6,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[6,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[6,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[6,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[6,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[6,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[7,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[7,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[7,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[7,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[7,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[7,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[7,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[7,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[7,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[8,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[8,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[8,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[8,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[8,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[8,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[8,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[8,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[8,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[9,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[9,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[9,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[9,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[9,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[9,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[9,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[9,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[9,9] = 0 "specification of delay according to signal change";
//   protected Real Adder3.Adder1.AND.G2.delayTime(quantity = "Time", unit = "s");
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.AND.G2.y_auxiliary(start = Adder3.Adder1.AND.G2.y0, fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.AND.G2.x_old(start = Adder3.Adder1.AND.G2.y0, fixed = true);
//   protected Integer Adder3.Adder1.AND.G2.lh;
//   protected discrete Real Adder3.Adder1.AND.G2.t_next(quantity = "Time", unit = "s");
//   parameter Real Adder3.Adder1.XOR.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder3.Adder1.delayTime "rise inertial delay";
//   parameter Real Adder3.Adder1.XOR.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder3.Adder1.delayTime "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.XOR.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'U' "initial value of output";
//   parameter Integer Adder3.Adder1.XOR.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.XOR.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.XOR.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.XOR.y "Connector of Digital output signal";
//   parameter Integer Adder3.Adder1.XOR.G1.n(min = 2) = Adder3.Adder1.XOR.n "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.XOR.G1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.XOR.G1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.XOR.G1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.XOR.G1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.XOR.G1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.XOR.G2.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.XOR.G2.y "Connector of Digital output signal";
//   parameter Real Adder3.Adder1.XOR.G2.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder3.Adder1.XOR.tLH "rise inertial delay";
//   parameter Real Adder3.Adder1.XOR.G2.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder3.Adder1.XOR.tHL "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.XOR.G2.y0 = Adder3.Adder1.XOR.y0 "initial value of output";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[1,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[1,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[1,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[1,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[1,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[1,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[1,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[1,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[1,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[2,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[2,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[2,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[2,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[2,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[2,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[2,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[2,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[2,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[3,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[3,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[3,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[3,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[3,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[3,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[3,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[3,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[3,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[4,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[4,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[4,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[4,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[4,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[4,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[4,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[4,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[4,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[5,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[5,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[5,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[5,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[5,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[5,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[5,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[5,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[5,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[6,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[6,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[6,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[6,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[6,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[6,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[6,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[6,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[6,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[7,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[7,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[7,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[7,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[7,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[7,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[7,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[7,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[7,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[8,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[8,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[8,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[8,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[8,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[8,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[8,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[8,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[8,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[9,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[9,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[9,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[9,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[9,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[9,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[9,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[9,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[9,9] = 0 "specification of delay according to signal change";
//   protected Real Adder3.Adder1.XOR.G2.delayTime(quantity = "Time", unit = "s");
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.XOR.G2.y_auxiliary(start = Adder3.Adder1.XOR.G2.y0, fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.XOR.G2.x_old(start = Adder3.Adder1.XOR.G2.y0, fixed = true);
//   protected Integer Adder3.Adder1.XOR.G2.lh;
//   protected discrete Real Adder3.Adder1.XOR.G2.t_next(quantity = "Time", unit = "s");
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.a;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.b;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.c_in;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.s;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.c_out;
//   parameter Integer Adder3.OR.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.OR.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.OR.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.OR.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.OR.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.OR.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Real Adder4.Adder2.delayTime = 0.001 "delay time";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.b;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.a;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.c;
//   parameter Integer Adder4.Adder2.AND.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.AND.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.AND.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.AND.y "Connector of Digital output signal";
//   parameter Real Adder4.Adder2.AND.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder4.Adder2.delayTime "rise inertial delay";
//   parameter Real Adder4.Adder2.AND.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder4.Adder2.delayTime "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.AND.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'U' "initial value of output";
//   parameter Integer Adder4.Adder2.AND.G1.n(min = 2) = Adder4.Adder2.AND.n "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.AND.G1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.AND.G1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.AND.G1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.AND.G1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.AND.G1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.AND.G2.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.AND.G2.y "Connector of Digital output signal";
//   parameter Real Adder4.Adder2.AND.G2.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder4.Adder2.AND.tLH "rise inertial delay";
//   parameter Real Adder4.Adder2.AND.G2.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder4.Adder2.AND.tHL "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.AND.G2.y0 = Adder4.Adder2.AND.y0 "initial value of output";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[1,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[1,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[1,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[1,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[1,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[1,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[1,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[1,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[1,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[2,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[2,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[2,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[2,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[2,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[2,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[2,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[2,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[2,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[3,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[3,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[3,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[3,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[3,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[3,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[3,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[3,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[3,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[4,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[4,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[4,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[4,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[4,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[4,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[4,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[4,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[4,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[5,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[5,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[5,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[5,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[5,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[5,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[5,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[5,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[5,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[6,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[6,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[6,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[6,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[6,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[6,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[6,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[6,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[6,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[7,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[7,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[7,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[7,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[7,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[7,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[7,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[7,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[7,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[8,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[8,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[8,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[8,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[8,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[8,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[8,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[8,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[8,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[9,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[9,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[9,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[9,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[9,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[9,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[9,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[9,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[9,9] = 0 "specification of delay according to signal change";
//   protected Real Adder4.Adder2.AND.G2.delayTime(quantity = "Time", unit = "s");
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.AND.G2.y_auxiliary(start = Adder4.Adder2.AND.G2.y0, fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.AND.G2.x_old(start = Adder4.Adder2.AND.G2.y0, fixed = true);
//   protected Integer Adder4.Adder2.AND.G2.lh;
//   protected discrete Real Adder4.Adder2.AND.G2.t_next(quantity = "Time", unit = "s");
//   parameter Real Adder4.Adder2.XOR.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder4.Adder2.delayTime "rise inertial delay";
//   parameter Real Adder4.Adder2.XOR.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder4.Adder2.delayTime "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.XOR.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'U' "initial value of output";
//   parameter Integer Adder4.Adder2.XOR.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.XOR.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.XOR.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.XOR.y "Connector of Digital output signal";
//   parameter Integer Adder4.Adder2.XOR.G1.n(min = 2) = Adder4.Adder2.XOR.n "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.XOR.G1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.XOR.G1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.XOR.G1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.XOR.G1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.XOR.G1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.XOR.G2.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.XOR.G2.y "Connector of Digital output signal";
//   parameter Real Adder4.Adder2.XOR.G2.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder4.Adder2.XOR.tLH "rise inertial delay";
//   parameter Real Adder4.Adder2.XOR.G2.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder4.Adder2.XOR.tHL "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.XOR.G2.y0 = Adder4.Adder2.XOR.y0 "initial value of output";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[1,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[1,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[1,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[1,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[1,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[1,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[1,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[1,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[1,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[2,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[2,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[2,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[2,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[2,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[2,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[2,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[2,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[2,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[3,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[3,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[3,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[3,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[3,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[3,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[3,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[3,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[3,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[4,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[4,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[4,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[4,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[4,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[4,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[4,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[4,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[4,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[5,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[5,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[5,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[5,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[5,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[5,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[5,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[5,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[5,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[6,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[6,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[6,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[6,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[6,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[6,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[6,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[6,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[6,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[7,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[7,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[7,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[7,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[7,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[7,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[7,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[7,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[7,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[8,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[8,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[8,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[8,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[8,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[8,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[8,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[8,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[8,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[9,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[9,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[9,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[9,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[9,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[9,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[9,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[9,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[9,9] = 0 "specification of delay according to signal change";
//   protected Real Adder4.Adder2.XOR.G2.delayTime(quantity = "Time", unit = "s");
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.XOR.G2.y_auxiliary(start = Adder4.Adder2.XOR.G2.y0, fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.XOR.G2.x_old(start = Adder4.Adder2.XOR.G2.y0, fixed = true);
//   protected Integer Adder4.Adder2.XOR.G2.lh;
//   protected discrete Real Adder4.Adder2.XOR.G2.t_next(quantity = "Time", unit = "s");
//   parameter Real Adder4.Adder1.delayTime = 0.001 "delay time";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.b;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.a;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.c;
//   parameter Integer Adder4.Adder1.AND.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.AND.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.AND.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.AND.y "Connector of Digital output signal";
//   parameter Real Adder4.Adder1.AND.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder4.Adder1.delayTime "rise inertial delay";
//   parameter Real Adder4.Adder1.AND.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder4.Adder1.delayTime "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.AND.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'U' "initial value of output";
//   parameter Integer Adder4.Adder1.AND.G1.n(min = 2) = Adder4.Adder1.AND.n "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.AND.G1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.AND.G1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.AND.G1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.AND.G1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.AND.G1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.AND.G2.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.AND.G2.y "Connector of Digital output signal";
//   parameter Real Adder4.Adder1.AND.G2.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder4.Adder1.AND.tLH "rise inertial delay";
//   parameter Real Adder4.Adder1.AND.G2.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder4.Adder1.AND.tHL "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.AND.G2.y0 = Adder4.Adder1.AND.y0 "initial value of output";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[1,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[1,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[1,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[1,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[1,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[1,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[1,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[1,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[1,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[2,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[2,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[2,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[2,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[2,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[2,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[2,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[2,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[2,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[3,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[3,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[3,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[3,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[3,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[3,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[3,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[3,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[3,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[4,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[4,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[4,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[4,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[4,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[4,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[4,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[4,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[4,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[5,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[5,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[5,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[5,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[5,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[5,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[5,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[5,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[5,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[6,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[6,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[6,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[6,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[6,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[6,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[6,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[6,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[6,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[7,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[7,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[7,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[7,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[7,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[7,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[7,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[7,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[7,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[8,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[8,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[8,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[8,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[8,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[8,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[8,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[8,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[8,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[9,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[9,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[9,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[9,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[9,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[9,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[9,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[9,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[9,9] = 0 "specification of delay according to signal change";
//   protected Real Adder4.Adder1.AND.G2.delayTime(quantity = "Time", unit = "s");
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.AND.G2.y_auxiliary(start = Adder4.Adder1.AND.G2.y0, fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.AND.G2.x_old(start = Adder4.Adder1.AND.G2.y0, fixed = true);
//   protected Integer Adder4.Adder1.AND.G2.lh;
//   protected discrete Real Adder4.Adder1.AND.G2.t_next(quantity = "Time", unit = "s");
//   parameter Real Adder4.Adder1.XOR.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder4.Adder1.delayTime "rise inertial delay";
//   parameter Real Adder4.Adder1.XOR.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder4.Adder1.delayTime "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.XOR.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'U' "initial value of output";
//   parameter Integer Adder4.Adder1.XOR.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.XOR.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.XOR.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.XOR.y "Connector of Digital output signal";
//   parameter Integer Adder4.Adder1.XOR.G1.n(min = 2) = Adder4.Adder1.XOR.n "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.XOR.G1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.XOR.G1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.XOR.G1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.XOR.G1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.XOR.G1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.XOR.G2.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.XOR.G2.y "Connector of Digital output signal";
//   parameter Real Adder4.Adder1.XOR.G2.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder4.Adder1.XOR.tLH "rise inertial delay";
//   parameter Real Adder4.Adder1.XOR.G2.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder4.Adder1.XOR.tHL "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.XOR.G2.y0 = Adder4.Adder1.XOR.y0 "initial value of output";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[1,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[1,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[1,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[1,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[1,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[1,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[1,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[1,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[1,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[2,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[2,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[2,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[2,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[2,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[2,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[2,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[2,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[2,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[3,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[3,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[3,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[3,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[3,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[3,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[3,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[3,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[3,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[4,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[4,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[4,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[4,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[4,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[4,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[4,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[4,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[4,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[5,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[5,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[5,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[5,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[5,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[5,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[5,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[5,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[5,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[6,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[6,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[6,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[6,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[6,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[6,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[6,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[6,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[6,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[7,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[7,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[7,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[7,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[7,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[7,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[7,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[7,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[7,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[8,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[8,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[8,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[8,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[8,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[8,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[8,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[8,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[8,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[9,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[9,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[9,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[9,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[9,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[9,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[9,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[9,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[9,9] = 0 "specification of delay according to signal change";
//   protected Real Adder4.Adder1.XOR.G2.delayTime(quantity = "Time", unit = "s");
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.XOR.G2.y_auxiliary(start = Adder4.Adder1.XOR.G2.y0, fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.XOR.G2.x_old(start = Adder4.Adder1.XOR.G2.y0, fixed = true);
//   protected Integer Adder4.Adder1.XOR.G2.lh;
//   protected discrete Real Adder4.Adder1.XOR.G2.t_next(quantity = "Time", unit = "s");
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.a;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.b;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.c_in;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.s;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.c_out;
//   parameter Integer Adder4.OR.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.OR.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.OR.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.OR.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.OR.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.OR.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
// equation
//   Adder1.Adder2.AND.G1.auxiliary[1] = Adder1.Adder2.AND.G1.x[1];
//   Adder1.Adder2.AND.G1.auxiliary[2] = D.Tables.AndTable[Adder1.Adder2.AND.G1.auxiliary[1],Adder1.Adder2.AND.G1.x[2]];
//   Adder1.Adder2.AND.G1.y = pre(Adder1.Adder2.AND.G1.auxiliary[2]);
//   Adder1.Adder2.XOR.G1.auxiliary[1] = Adder1.Adder2.XOR.G1.x[1];
//   Adder1.Adder2.XOR.G1.auxiliary[2] = D.Tables.XorTable[Adder1.Adder2.XOR.G1.auxiliary[1],Adder1.Adder2.XOR.G1.x[2]];
//   Adder1.Adder2.XOR.G1.y = pre(Adder1.Adder2.XOR.G1.auxiliary[2]);
//   Adder1.Adder1.AND.G1.auxiliary[1] = Adder1.Adder1.AND.G1.x[1];
//   Adder1.Adder1.AND.G1.auxiliary[2] = D.Tables.AndTable[Adder1.Adder1.AND.G1.auxiliary[1],Adder1.Adder1.AND.G1.x[2]];
//   Adder1.Adder1.AND.G1.y = pre(Adder1.Adder1.AND.G1.auxiliary[2]);
//   Adder1.Adder1.XOR.G1.auxiliary[1] = Adder1.Adder1.XOR.G1.x[1];
//   Adder1.Adder1.XOR.G1.auxiliary[2] = D.Tables.XorTable[Adder1.Adder1.XOR.G1.auxiliary[1],Adder1.Adder1.XOR.G1.x[2]];
//   Adder1.Adder1.XOR.G1.y = pre(Adder1.Adder1.XOR.G1.auxiliary[2]);
//   Adder1.OR.auxiliary[1] = Adder1.OR.x[1];
//   Adder1.OR.auxiliary[2] = D.Tables.OrTable[Adder1.OR.auxiliary[1],Adder1.OR.x[2]];
//   Adder1.OR.y = pre(Adder1.OR.auxiliary[2]);
//   Adder2.Adder2.AND.G1.auxiliary[1] = Adder2.Adder2.AND.G1.x[1];
//   Adder2.Adder2.AND.G1.auxiliary[2] = D.Tables.AndTable[Adder2.Adder2.AND.G1.auxiliary[1],Adder2.Adder2.AND.G1.x[2]];
//   Adder2.Adder2.AND.G1.y = pre(Adder2.Adder2.AND.G1.auxiliary[2]);
//   Adder2.Adder2.XOR.G1.auxiliary[1] = Adder2.Adder2.XOR.G1.x[1];
//   Adder2.Adder2.XOR.G1.auxiliary[2] = D.Tables.XorTable[Adder2.Adder2.XOR.G1.auxiliary[1],Adder2.Adder2.XOR.G1.x[2]];
//   Adder2.Adder2.XOR.G1.y = pre(Adder2.Adder2.XOR.G1.auxiliary[2]);
//   Adder2.Adder1.AND.G1.auxiliary[1] = Adder2.Adder1.AND.G1.x[1];
//   Adder2.Adder1.AND.G1.auxiliary[2] = D.Tables.AndTable[Adder2.Adder1.AND.G1.auxiliary[1],Adder2.Adder1.AND.G1.x[2]];
//   Adder2.Adder1.AND.G1.y = pre(Adder2.Adder1.AND.G1.auxiliary[2]);
//   Adder2.Adder1.XOR.G1.auxiliary[1] = Adder2.Adder1.XOR.G1.x[1];
//   Adder2.Adder1.XOR.G1.auxiliary[2] = D.Tables.XorTable[Adder2.Adder1.XOR.G1.auxiliary[1],Adder2.Adder1.XOR.G1.x[2]];
//   Adder2.Adder1.XOR.G1.y = pre(Adder2.Adder1.XOR.G1.auxiliary[2]);
//   Adder2.OR.auxiliary[1] = Adder2.OR.x[1];
//   Adder2.OR.auxiliary[2] = D.Tables.OrTable[Adder2.OR.auxiliary[1],Adder2.OR.x[2]];
//   Adder2.OR.y = pre(Adder2.OR.auxiliary[2]);
//   Adder3.Adder2.AND.G1.auxiliary[1] = Adder3.Adder2.AND.G1.x[1];
//   Adder3.Adder2.AND.G1.auxiliary[2] = D.Tables.AndTable[Adder3.Adder2.AND.G1.auxiliary[1],Adder3.Adder2.AND.G1.x[2]];
//   Adder3.Adder2.AND.G1.y = pre(Adder3.Adder2.AND.G1.auxiliary[2]);
//   Adder3.Adder2.XOR.G1.auxiliary[1] = Adder3.Adder2.XOR.G1.x[1];
//   Adder3.Adder2.XOR.G1.auxiliary[2] = D.Tables.XorTable[Adder3.Adder2.XOR.G1.auxiliary[1],Adder3.Adder2.XOR.G1.x[2]];
//   Adder3.Adder2.XOR.G1.y = pre(Adder3.Adder2.XOR.G1.auxiliary[2]);
//   Adder3.Adder1.AND.G1.auxiliary[1] = Adder3.Adder1.AND.G1.x[1];
//   Adder3.Adder1.AND.G1.auxiliary[2] = D.Tables.AndTable[Adder3.Adder1.AND.G1.auxiliary[1],Adder3.Adder1.AND.G1.x[2]];
//   Adder3.Adder1.AND.G1.y = pre(Adder3.Adder1.AND.G1.auxiliary[2]);
//   Adder3.Adder1.XOR.G1.auxiliary[1] = Adder3.Adder1.XOR.G1.x[1];
//   Adder3.Adder1.XOR.G1.auxiliary[2] = D.Tables.XorTable[Adder3.Adder1.XOR.G1.auxiliary[1],Adder3.Adder1.XOR.G1.x[2]];
//   Adder3.Adder1.XOR.G1.y = pre(Adder3.Adder1.XOR.G1.auxiliary[2]);
//   Adder3.OR.auxiliary[1] = Adder3.OR.x[1];
//   Adder3.OR.auxiliary[2] = D.Tables.OrTable[Adder3.OR.auxiliary[1],Adder3.OR.x[2]];
//   Adder3.OR.y = pre(Adder3.OR.auxiliary[2]);
//   Adder4.Adder2.AND.G1.auxiliary[1] = Adder4.Adder2.AND.G1.x[1];
//   Adder4.Adder2.AND.G1.auxiliary[2] = D.Tables.AndTable[Adder4.Adder2.AND.G1.auxiliary[1],Adder4.Adder2.AND.G1.x[2]];
//   Adder4.Adder2.AND.G1.y = pre(Adder4.Adder2.AND.G1.auxiliary[2]);
//   Adder4.Adder2.XOR.G1.auxiliary[1] = Adder4.Adder2.XOR.G1.x[1];
//   Adder4.Adder2.XOR.G1.auxiliary[2] = D.Tables.XorTable[Adder4.Adder2.XOR.G1.auxiliary[1],Adder4.Adder2.XOR.G1.x[2]];
//   Adder4.Adder2.XOR.G1.y = pre(Adder4.Adder2.XOR.G1.auxiliary[2]);
//   Adder4.Adder1.AND.G1.auxiliary[1] = Adder4.Adder1.AND.G1.x[1];
//   Adder4.Adder1.AND.G1.auxiliary[2] = D.Tables.AndTable[Adder4.Adder1.AND.G1.auxiliary[1],Adder4.Adder1.AND.G1.x[2]];
//   Adder4.Adder1.AND.G1.y = pre(Adder4.Adder1.AND.G1.auxiliary[2]);
//   Adder4.Adder1.XOR.G1.auxiliary[1] = Adder4.Adder1.XOR.G1.x[1];
//   Adder4.Adder1.XOR.G1.auxiliary[2] = D.Tables.XorTable[Adder4.Adder1.XOR.G1.auxiliary[1],Adder4.Adder1.XOR.G1.x[2]];
//   Adder4.Adder1.XOR.G1.y = pre(Adder4.Adder1.XOR.G1.auxiliary[2]);
//   Adder4.OR.auxiliary[1] = Adder4.OR.x[1];
//   Adder4.OR.auxiliary[2] = D.Tables.OrTable[Adder4.OR.auxiliary[1],Adder4.OR.x[2]];
//   Adder4.OR.y = pre(Adder4.OR.auxiliary[2]);
//   Adder4.a = a4.y;
//   Adder4.b = b4.y;
//   Adder3.a = a3.y;
//   Adder3.b = b3.y;
//   Adder2.a = a2.y;
//   Adder2.b = b2.y;
//   Adder3.c_out = Adder4.c_in;
//   Adder2.c_out = Adder3.c_in;
//   Adder1.c_out = Adder2.c_in;
//   Adder1.c_in = Set.y;
//   Adder1.a = a1.y;
//   Adder1.b = b1.y;
//   Adder4.Adder2.b = Adder4.c_in;
//   Adder4.Adder1.c = Adder4.OR.x[1];
//   Adder4.Adder1.s = Adder4.Adder2.a;
//   Adder4.Adder1.b = Adder4.b;
//   Adder4.Adder1.a = Adder4.a;
//   Adder4.Adder2.s = Adder4.s;
//   Adder4.Adder2.c = Adder4.OR.x[2];
//   Adder4.OR.y = Adder4.c_out;
//   Adder4.Adder1.AND.x[2] = Adder4.Adder1.XOR.x[2];
//   Adder4.Adder1.AND.x[2] = Adder4.Adder1.a;
//   Adder4.Adder1.AND.x[1] = Adder4.Adder1.XOR.x[1];
//   Adder4.Adder1.AND.x[1] = Adder4.Adder1.b;
//   Adder4.Adder1.XOR.y = Adder4.Adder1.s;
//   Adder4.Adder1.AND.y = Adder4.Adder1.c;
//   Adder4.Adder1.XOR.G2.y = Adder4.Adder1.XOR.y;
//   Adder4.Adder1.XOR.G1.y = Adder4.Adder1.XOR.G2.x;
//   Adder4.Adder1.XOR.G1.x[1] = Adder4.Adder1.XOR.x[1];
//   Adder4.Adder1.XOR.G1.x[2] = Adder4.Adder1.XOR.x[2];
//   Adder4.Adder1.AND.G1.y = Adder4.Adder1.AND.G2.x;
//   Adder4.Adder1.AND.G2.y = Adder4.Adder1.AND.y;
//   Adder4.Adder1.AND.G1.x[1] = Adder4.Adder1.AND.x[1];
//   Adder4.Adder1.AND.G1.x[2] = Adder4.Adder1.AND.x[2];
//   Adder4.Adder2.AND.x[2] = Adder4.Adder2.XOR.x[2];
//   Adder4.Adder2.AND.x[2] = Adder4.Adder2.a;
//   Adder4.Adder2.AND.x[1] = Adder4.Adder2.XOR.x[1];
//   Adder4.Adder2.AND.x[1] = Adder4.Adder2.b;
//   Adder4.Adder2.XOR.y = Adder4.Adder2.s;
//   Adder4.Adder2.AND.y = Adder4.Adder2.c;
//   Adder4.Adder2.XOR.G2.y = Adder4.Adder2.XOR.y;
//   Adder4.Adder2.XOR.G1.y = Adder4.Adder2.XOR.G2.x;
//   Adder4.Adder2.XOR.G1.x[1] = Adder4.Adder2.XOR.x[1];
//   Adder4.Adder2.XOR.G1.x[2] = Adder4.Adder2.XOR.x[2];
//   Adder4.Adder2.AND.G1.y = Adder4.Adder2.AND.G2.x;
//   Adder4.Adder2.AND.G2.y = Adder4.Adder2.AND.y;
//   Adder4.Adder2.AND.G1.x[1] = Adder4.Adder2.AND.x[1];
//   Adder4.Adder2.AND.G1.x[2] = Adder4.Adder2.AND.x[2];
//   Adder3.Adder2.b = Adder3.c_in;
//   Adder3.Adder1.c = Adder3.OR.x[1];
//   Adder3.Adder1.s = Adder3.Adder2.a;
//   Adder3.Adder1.b = Adder3.b;
//   Adder3.Adder1.a = Adder3.a;
//   Adder3.Adder2.s = Adder3.s;
//   Adder3.Adder2.c = Adder3.OR.x[2];
//   Adder3.OR.y = Adder3.c_out;
//   Adder3.Adder1.AND.x[2] = Adder3.Adder1.XOR.x[2];
//   Adder3.Adder1.AND.x[2] = Adder3.Adder1.a;
//   Adder3.Adder1.AND.x[1] = Adder3.Adder1.XOR.x[1];
//   Adder3.Adder1.AND.x[1] = Adder3.Adder1.b;
//   Adder3.Adder1.XOR.y = Adder3.Adder1.s;
//   Adder3.Adder1.AND.y = Adder3.Adder1.c;
//   Adder3.Adder1.XOR.G2.y = Adder3.Adder1.XOR.y;
//   Adder3.Adder1.XOR.G1.y = Adder3.Adder1.XOR.G2.x;
//   Adder3.Adder1.XOR.G1.x[1] = Adder3.Adder1.XOR.x[1];
//   Adder3.Adder1.XOR.G1.x[2] = Adder3.Adder1.XOR.x[2];
//   Adder3.Adder1.AND.G1.y = Adder3.Adder1.AND.G2.x;
//   Adder3.Adder1.AND.G2.y = Adder3.Adder1.AND.y;
//   Adder3.Adder1.AND.G1.x[1] = Adder3.Adder1.AND.x[1];
//   Adder3.Adder1.AND.G1.x[2] = Adder3.Adder1.AND.x[2];
//   Adder3.Adder2.AND.x[2] = Adder3.Adder2.XOR.x[2];
//   Adder3.Adder2.AND.x[2] = Adder3.Adder2.a;
//   Adder3.Adder2.AND.x[1] = Adder3.Adder2.XOR.x[1];
//   Adder3.Adder2.AND.x[1] = Adder3.Adder2.b;
//   Adder3.Adder2.XOR.y = Adder3.Adder2.s;
//   Adder3.Adder2.AND.y = Adder3.Adder2.c;
//   Adder3.Adder2.XOR.G2.y = Adder3.Adder2.XOR.y;
//   Adder3.Adder2.XOR.G1.y = Adder3.Adder2.XOR.G2.x;
//   Adder3.Adder2.XOR.G1.x[1] = Adder3.Adder2.XOR.x[1];
//   Adder3.Adder2.XOR.G1.x[2] = Adder3.Adder2.XOR.x[2];
//   Adder3.Adder2.AND.G1.y = Adder3.Adder2.AND.G2.x;
//   Adder3.Adder2.AND.G2.y = Adder3.Adder2.AND.y;
//   Adder3.Adder2.AND.G1.x[1] = Adder3.Adder2.AND.x[1];
//   Adder3.Adder2.AND.G1.x[2] = Adder3.Adder2.AND.x[2];
//   Adder2.Adder2.b = Adder2.c_in;
//   Adder2.Adder1.c = Adder2.OR.x[1];
//   Adder2.Adder1.s = Adder2.Adder2.a;
//   Adder2.Adder1.b = Adder2.b;
//   Adder2.Adder1.a = Adder2.a;
//   Adder2.Adder2.s = Adder2.s;
//   Adder2.Adder2.c = Adder2.OR.x[2];
//   Adder2.OR.y = Adder2.c_out;
//   Adder2.Adder1.AND.x[2] = Adder2.Adder1.XOR.x[2];
//   Adder2.Adder1.AND.x[2] = Adder2.Adder1.a;
//   Adder2.Adder1.AND.x[1] = Adder2.Adder1.XOR.x[1];
//   Adder2.Adder1.AND.x[1] = Adder2.Adder1.b;
//   Adder2.Adder1.XOR.y = Adder2.Adder1.s;
//   Adder2.Adder1.AND.y = Adder2.Adder1.c;
//   Adder2.Adder1.XOR.G2.y = Adder2.Adder1.XOR.y;
//   Adder2.Adder1.XOR.G1.y = Adder2.Adder1.XOR.G2.x;
//   Adder2.Adder1.XOR.G1.x[1] = Adder2.Adder1.XOR.x[1];
//   Adder2.Adder1.XOR.G1.x[2] = Adder2.Adder1.XOR.x[2];
//   Adder2.Adder1.AND.G1.y = Adder2.Adder1.AND.G2.x;
//   Adder2.Adder1.AND.G2.y = Adder2.Adder1.AND.y;
//   Adder2.Adder1.AND.G1.x[1] = Adder2.Adder1.AND.x[1];
//   Adder2.Adder1.AND.G1.x[2] = Adder2.Adder1.AND.x[2];
//   Adder2.Adder2.AND.x[2] = Adder2.Adder2.XOR.x[2];
//   Adder2.Adder2.AND.x[2] = Adder2.Adder2.a;
//   Adder2.Adder2.AND.x[1] = Adder2.Adder2.XOR.x[1];
//   Adder2.Adder2.AND.x[1] = Adder2.Adder2.b;
//   Adder2.Adder2.XOR.y = Adder2.Adder2.s;
//   Adder2.Adder2.AND.y = Adder2.Adder2.c;
//   Adder2.Adder2.XOR.G2.y = Adder2.Adder2.XOR.y;
//   Adder2.Adder2.XOR.G1.y = Adder2.Adder2.XOR.G2.x;
//   Adder2.Adder2.XOR.G1.x[1] = Adder2.Adder2.XOR.x[1];
//   Adder2.Adder2.XOR.G1.x[2] = Adder2.Adder2.XOR.x[2];
//   Adder2.Adder2.AND.G1.y = Adder2.Adder2.AND.G2.x;
//   Adder2.Adder2.AND.G2.y = Adder2.Adder2.AND.y;
//   Adder2.Adder2.AND.G1.x[1] = Adder2.Adder2.AND.x[1];
//   Adder2.Adder2.AND.G1.x[2] = Adder2.Adder2.AND.x[2];
//   Adder1.Adder2.b = Adder1.c_in;
//   Adder1.Adder1.c = Adder1.OR.x[1];
//   Adder1.Adder1.s = Adder1.Adder2.a;
//   Adder1.Adder1.b = Adder1.b;
//   Adder1.Adder1.a = Adder1.a;
//   Adder1.Adder2.s = Adder1.s;
//   Adder1.Adder2.c = Adder1.OR.x[2];
//   Adder1.OR.y = Adder1.c_out;
//   Adder1.Adder1.AND.x[2] = Adder1.Adder1.XOR.x[2];
//   Adder1.Adder1.AND.x[2] = Adder1.Adder1.a;
//   Adder1.Adder1.AND.x[1] = Adder1.Adder1.XOR.x[1];
//   Adder1.Adder1.AND.x[1] = Adder1.Adder1.b;
//   Adder1.Adder1.XOR.y = Adder1.Adder1.s;
//   Adder1.Adder1.AND.y = Adder1.Adder1.c;
//   Adder1.Adder1.XOR.G2.y = Adder1.Adder1.XOR.y;
//   Adder1.Adder1.XOR.G1.y = Adder1.Adder1.XOR.G2.x;
//   Adder1.Adder1.XOR.G1.x[1] = Adder1.Adder1.XOR.x[1];
//   Adder1.Adder1.XOR.G1.x[2] = Adder1.Adder1.XOR.x[2];
//   Adder1.Adder1.AND.G1.y = Adder1.Adder1.AND.G2.x;
//   Adder1.Adder1.AND.G2.y = Adder1.Adder1.AND.y;
//   Adder1.Adder1.AND.G1.x[1] = Adder1.Adder1.AND.x[1];
//   Adder1.Adder1.AND.G1.x[2] = Adder1.Adder1.AND.x[2];
//   Adder1.Adder2.AND.x[2] = Adder1.Adder2.XOR.x[2];
//   Adder1.Adder2.AND.x[2] = Adder1.Adder2.a;
//   Adder1.Adder2.AND.x[1] = Adder1.Adder2.XOR.x[1];
//   Adder1.Adder2.AND.x[1] = Adder1.Adder2.b;
//   Adder1.Adder2.XOR.y = Adder1.Adder2.s;
//   Adder1.Adder2.AND.y = Adder1.Adder2.c;
//   Adder1.Adder2.XOR.G2.y = Adder1.Adder2.XOR.y;
//   Adder1.Adder2.XOR.G1.y = Adder1.Adder2.XOR.G2.x;
//   Adder1.Adder2.XOR.G1.x[1] = Adder1.Adder2.XOR.x[1];
//   Adder1.Adder2.XOR.G1.x[2] = Adder1.Adder2.XOR.x[2];
//   Adder1.Adder2.AND.G1.y = Adder1.Adder2.AND.G2.x;
//   Adder1.Adder2.AND.G2.y = Adder1.Adder2.AND.y;
//   Adder1.Adder2.AND.G1.x[1] = Adder1.Adder2.AND.x[1];
//   Adder1.Adder2.AND.G1.x[2] = Adder1.Adder2.AND.x[2];
// algorithm
//   if initial() then
//     assert(b4.n > 0, "Invalid size of table (n < 1)");
//     for i in 1:b4.n loop
//     end for;
//   end if;
//   b4.y := b4.y0;
//   for i in 1:b4.n loop
//     if time >= b4.t[i] then
//       b4.y := b4.x[i];
//     end if;
//   end for;
//   if initial() then
//     assert(b1.n > 0, "Invalid size of table (n < 1)");
//     for i in 1:b1.n loop
//     end for;
//   end if;
//   b1.y := b1.y0;
//   for i in 1:b1.n loop
//     if time >= b1.t[i] then
//       b1.y := b1.x[i];
//     end if;
//   end for;
//   if initial() then
//     assert(b2.n > 0, "Invalid size of table (n < 1)");
//     for i in 1:b2.n loop
//     end for;
//   end if;
//   b2.y := b2.y0;
//   for i in 1:b2.n loop
//     if time >= b2.t[i] then
//       b2.y := b2.x[i];
//     end if;
//   end for;
//   if initial() then
//     assert(b3.n > 0, "Invalid size of table (n < 1)");
//     for i in 1:b3.n loop
//     end for;
//   end if;
//   b3.y := b3.y0;
//   for i in 1:b3.n loop
//     if time >= b3.t[i] then
//       b3.y := b3.x[i];
//     end if;
//   end for;
//   if initial() then
//     assert(a1.n > 0, "Invalid size of table (n < 1)");
//     for i in 1:a1.n loop
//     end for;
//   end if;
//   a1.y := a1.y0;
//   for i in 1:a1.n loop
//     if time >= a1.t[i] then
//       a1.y := a1.x[i];
//     end if;
//   end for;
//   if initial() then
//     assert(a2.n > 0, "Invalid size of table (n < 1)");
//     for i in 1:a2.n loop
//     end for;
//   end if;
//   a2.y := a2.y0;
//   for i in 1:a2.n loop
//     if time >= a2.t[i] then
//       a2.y := a2.x[i];
//     end if;
//   end for;
//   if initial() then
//     assert(a3.n > 0, "Invalid size of table (n < 1)");
//     for i in 1:a3.n loop
//     end for;
//   end if;
//   a3.y := a3.y0;
//   for i in 1:a3.n loop
//     if time >= a3.t[i] then
//       a3.y := a3.x[i];
//     end if;
//   end for;
//   if initial() then
//     assert(a4.n > 0, "Invalid size of table (n < 1)");
//     for i in 1:a4.n loop
//     end for;
//   end if;
//   a4.y := a4.y0;
//   for i in 1:a4.n loop
//     if time >= a4.t[i] then
//       a4.y := a4.x[i];
//     end if;
//   end for;
//   Set.y := Set.x;
//   when {initial(),(Adder1.Adder2.AND.G2.tLH > 0.0 OR Adder1.Adder2.AND.G2.tHL > 0.0) AND change(Adder1.Adder2.AND.G2.x) AND  NOT initial()} then
//     Adder1.Adder2.AND.G2.x_old := if initial() OR pre(Adder1.Adder2.AND.G2.x) == DAE.CAST(T_ENUMERATION, 0) then Adder1.Adder2.AND.G2.y0 else pre(Adder1.Adder2.AND.G2.x);
//     Adder1.Adder2.AND.G2.lh := Adder1.Adder2.AND.G2.delayTable[Adder1.Adder2.AND.G2.x_old,Adder1.Adder2.AND.G2.x];
//     Adder1.Adder2.AND.G2.delayTime := if Adder1.Adder2.AND.G2.lh > 0 then Adder1.Adder2.AND.G2.tLH else if Adder1.Adder2.AND.G2.lh < 0 then Adder1.Adder2.AND.G2.tHL else 0.0;
//     Adder1.Adder2.AND.G2.t_next := time + Adder1.Adder2.AND.G2.delayTime;
//     if Adder1.Adder2.AND.G2.lh == 0 OR abs(Adder1.Adder2.AND.G2.delayTime) < 1e-60 then
//       Adder1.Adder2.AND.G2.y_auxiliary := Adder1.Adder2.AND.G2.x;
//     end if;
//   elsewhen time >= Adder1.Adder2.AND.G2.t_next then
//     Adder1.Adder2.AND.G2.y_auxiliary := Adder1.Adder2.AND.G2.x;
//   end when;
//   Adder1.Adder2.AND.G2.y := if Adder1.Adder2.AND.G2.tLH > 0.0 OR Adder1.Adder2.AND.G2.tHL > 0.0 then Adder1.Adder2.AND.G2.y_auxiliary else Adder1.Adder2.AND.G2.x;
//   when {initial(),(Adder1.Adder2.XOR.G2.tLH > 0.0 OR Adder1.Adder2.XOR.G2.tHL > 0.0) AND change(Adder1.Adder2.XOR.G2.x) AND  NOT initial()} then
//     Adder1.Adder2.XOR.G2.x_old := if initial() OR pre(Adder1.Adder2.XOR.G2.x) == DAE.CAST(T_ENUMERATION, 0) then Adder1.Adder2.XOR.G2.y0 else pre(Adder1.Adder2.XOR.G2.x);
//     Adder1.Adder2.XOR.G2.lh := Adder1.Adder2.XOR.G2.delayTable[Adder1.Adder2.XOR.G2.x_old,Adder1.Adder2.XOR.G2.x];
//     Adder1.Adder2.XOR.G2.delayTime := if Adder1.Adder2.XOR.G2.lh > 0 then Adder1.Adder2.XOR.G2.tLH else if Adder1.Adder2.XOR.G2.lh < 0 then Adder1.Adder2.XOR.G2.tHL else 0.0;
//     Adder1.Adder2.XOR.G2.t_next := time + Adder1.Adder2.XOR.G2.delayTime;
//     if Adder1.Adder2.XOR.G2.lh == 0 OR abs(Adder1.Adder2.XOR.G2.delayTime) < 1e-60 then
//       Adder1.Adder2.XOR.G2.y_auxiliary := Adder1.Adder2.XOR.G2.x;
//     end if;
//   elsewhen time >= Adder1.Adder2.XOR.G2.t_next then
//     Adder1.Adder2.XOR.G2.y_auxiliary := Adder1.Adder2.XOR.G2.x;
//   end when;
//   Adder1.Adder2.XOR.G2.y := if Adder1.Adder2.XOR.G2.tLH > 0.0 OR Adder1.Adder2.XOR.G2.tHL > 0.0 then Adder1.Adder2.XOR.G2.y_auxiliary else Adder1.Adder2.XOR.G2.x;
//   when {initial(),(Adder1.Adder1.AND.G2.tLH > 0.0 OR Adder1.Adder1.AND.G2.tHL > 0.0) AND change(Adder1.Adder1.AND.G2.x) AND  NOT initial()} then
//     Adder1.Adder1.AND.G2.x_old := if initial() OR pre(Adder1.Adder1.AND.G2.x) == DAE.CAST(T_ENUMERATION, 0) then Adder1.Adder1.AND.G2.y0 else pre(Adder1.Adder1.AND.G2.x);
//     Adder1.Adder1.AND.G2.lh := Adder1.Adder1.AND.G2.delayTable[Adder1.Adder1.AND.G2.x_old,Adder1.Adder1.AND.G2.x];
//     Adder1.Adder1.AND.G2.delayTime := if Adder1.Adder1.AND.G2.lh > 0 then Adder1.Adder1.AND.G2.tLH else if Adder1.Adder1.AND.G2.lh < 0 then Adder1.Adder1.AND.G2.tHL else 0.0;
//     Adder1.Adder1.AND.G2.t_next := time + Adder1.Adder1.AND.G2.delayTime;
//     if Adder1.Adder1.AND.G2.lh == 0 OR abs(Adder1.Adder1.AND.G2.delayTime) < 1e-60 then
//       Adder1.Adder1.AND.G2.y_auxiliary := Adder1.Adder1.AND.G2.x;
//     end if;
//   elsewhen time >= Adder1.Adder1.AND.G2.t_next then
//     Adder1.Adder1.AND.G2.y_auxiliary := Adder1.Adder1.AND.G2.x;
//   end when;
//   Adder1.Adder1.AND.G2.y := if Adder1.Adder1.AND.G2.tLH > 0.0 OR Adder1.Adder1.AND.G2.tHL > 0.0 then Adder1.Adder1.AND.G2.y_auxiliary else Adder1.Adder1.AND.G2.x;
//   when {initial(),(Adder1.Adder1.XOR.G2.tLH > 0.0 OR Adder1.Adder1.XOR.G2.tHL > 0.0) AND change(Adder1.Adder1.XOR.G2.x) AND  NOT initial()} then
//     Adder1.Adder1.XOR.G2.x_old := if initial() OR pre(Adder1.Adder1.XOR.G2.x) == DAE.CAST(T_ENUMERATION, 0) then Adder1.Adder1.XOR.G2.y0 else pre(Adder1.Adder1.XOR.G2.x);
//     Adder1.Adder1.XOR.G2.lh := Adder1.Adder1.XOR.G2.delayTable[Adder1.Adder1.XOR.G2.x_old,Adder1.Adder1.XOR.G2.x];
//     Adder1.Adder1.XOR.G2.delayTime := if Adder1.Adder1.XOR.G2.lh > 0 then Adder1.Adder1.XOR.G2.tLH else if Adder1.Adder1.XOR.G2.lh < 0 then Adder1.Adder1.XOR.G2.tHL else 0.0;
//     Adder1.Adder1.XOR.G2.t_next := time + Adder1.Adder1.XOR.G2.delayTime;
//     if Adder1.Adder1.XOR.G2.lh == 0 OR abs(Adder1.Adder1.XOR.G2.delayTime) < 1e-60 then
//       Adder1.Adder1.XOR.G2.y_auxiliary := Adder1.Adder1.XOR.G2.x;
//     end if;
//   elsewhen time >= Adder1.Adder1.XOR.G2.t_next then
//     Adder1.Adder1.XOR.G2.y_auxiliary := Adder1.Adder1.XOR.G2.x;
//   end when;
//   Adder1.Adder1.XOR.G2.y := if Adder1.Adder1.XOR.G2.tLH > 0.0 OR Adder1.Adder1.XOR.G2.tHL > 0.0 then Adder1.Adder1.XOR.G2.y_auxiliary else Adder1.Adder1.XOR.G2.x;
//   when {initial(),(Adder2.Adder2.AND.G2.tLH > 0.0 OR Adder2.Adder2.AND.G2.tHL > 0.0) AND change(Adder2.Adder2.AND.G2.x) AND  NOT initial()} then
//     Adder2.Adder2.AND.G2.x_old := if initial() OR pre(Adder2.Adder2.AND.G2.x) == DAE.CAST(T_ENUMERATION, 0) then Adder2.Adder2.AND.G2.y0 else pre(Adder2.Adder2.AND.G2.x);
//     Adder2.Adder2.AND.G2.lh := Adder2.Adder2.AND.G2.delayTable[Adder2.Adder2.AND.G2.x_old,Adder2.Adder2.AND.G2.x];
//     Adder2.Adder2.AND.G2.delayTime := if Adder2.Adder2.AND.G2.lh > 0 then Adder2.Adder2.AND.G2.tLH else if Adder2.Adder2.AND.G2.lh < 0 then Adder2.Adder2.AND.G2.tHL else 0.0;
//     Adder2.Adder2.AND.G2.t_next := time + Adder2.Adder2.AND.G2.delayTime;
//     if Adder2.Adder2.AND.G2.lh == 0 OR abs(Adder2.Adder2.AND.G2.delayTime) < 1e-60 then
//       Adder2.Adder2.AND.G2.y_auxiliary := Adder2.Adder2.AND.G2.x;
//     end if;
//   elsewhen time >= Adder2.Adder2.AND.G2.t_next then
//     Adder2.Adder2.AND.G2.y_auxiliary := Adder2.Adder2.AND.G2.x;
//   end when;
//   Adder2.Adder2.AND.G2.y := if Adder2.Adder2.AND.G2.tLH > 0.0 OR Adder2.Adder2.AND.G2.tHL > 0.0 then Adder2.Adder2.AND.G2.y_auxiliary else Adder2.Adder2.AND.G2.x;
//   when {initial(),(Adder2.Adder2.XOR.G2.tLH > 0.0 OR Adder2.Adder2.XOR.G2.tHL > 0.0) AND change(Adder2.Adder2.XOR.G2.x) AND  NOT initial()} then
//     Adder2.Adder2.XOR.G2.x_old := if initial() OR pre(Adder2.Adder2.XOR.G2.x) == DAE.CAST(T_ENUMERATION, 0) then Adder2.Adder2.XOR.G2.y0 else pre(Adder2.Adder2.XOR.G2.x);
//     Adder2.Adder2.XOR.G2.lh := Adder2.Adder2.XOR.G2.delayTable[Adder2.Adder2.XOR.G2.x_old,Adder2.Adder2.XOR.G2.x];
//     Adder2.Adder2.XOR.G2.delayTime := if Adder2.Adder2.XOR.G2.lh > 0 then Adder2.Adder2.XOR.G2.tLH else if Adder2.Adder2.XOR.G2.lh < 0 then Adder2.Adder2.XOR.G2.tHL else 0.0;
//     Adder2.Adder2.XOR.G2.t_next := time + Adder2.Adder2.XOR.G2.delayTime;
//     if Adder2.Adder2.XOR.G2.lh == 0 OR abs(Adder2.Adder2.XOR.G2.delayTime) < 1e-60 then
//       Adder2.Adder2.XOR.G2.y_auxiliary := Adder2.Adder2.XOR.G2.x;
//     end if;
//   elsewhen time >= Adder2.Adder2.XOR.G2.t_next then
//     Adder2.Adder2.XOR.G2.y_auxiliary := Adder2.Adder2.XOR.G2.x;
//   end when;
//   Adder2.Adder2.XOR.G2.y := if Adder2.Adder2.XOR.G2.tLH > 0.0 OR Adder2.Adder2.XOR.G2.tHL > 0.0 then Adder2.Adder2.XOR.G2.y_auxiliary else Adder2.Adder2.XOR.G2.x;
//   when {initial(),(Adder2.Adder1.AND.G2.tLH > 0.0 OR Adder2.Adder1.AND.G2.tHL > 0.0) AND change(Adder2.Adder1.AND.G2.x) AND  NOT initial()} then
//     Adder2.Adder1.AND.G2.x_old := if initial() OR pre(Adder2.Adder1.AND.G2.x) == DAE.CAST(T_ENUMERATION, 0) then Adder2.Adder1.AND.G2.y0 else pre(Adder2.Adder1.AND.G2.x);
//     Adder2.Adder1.AND.G2.lh := Adder2.Adder1.AND.G2.delayTable[Adder2.Adder1.AND.G2.x_old,Adder2.Adder1.AND.G2.x];
//     Adder2.Adder1.AND.G2.delayTime := if Adder2.Adder1.AND.G2.lh > 0 then Adder2.Adder1.AND.G2.tLH else if Adder2.Adder1.AND.G2.lh < 0 then Adder2.Adder1.AND.G2.tHL else 0.0;
//     Adder2.Adder1.AND.G2.t_next := time + Adder2.Adder1.AND.G2.delayTime;
//     if Adder2.Adder1.AND.G2.lh == 0 OR abs(Adder2.Adder1.AND.G2.delayTime) < 1e-60 then
//       Adder2.Adder1.AND.G2.y_auxiliary := Adder2.Adder1.AND.G2.x;
//     end if;
//   elsewhen time >= Adder2.Adder1.AND.G2.t_next then
//     Adder2.Adder1.AND.G2.y_auxiliary := Adder2.Adder1.AND.G2.x;
//   end when;
//   Adder2.Adder1.AND.G2.y := if Adder2.Adder1.AND.G2.tLH > 0.0 OR Adder2.Adder1.AND.G2.tHL > 0.0 then Adder2.Adder1.AND.G2.y_auxiliary else Adder2.Adder1.AND.G2.x;
//   when {initial(),(Adder2.Adder1.XOR.G2.tLH > 0.0 OR Adder2.Adder1.XOR.G2.tHL > 0.0) AND change(Adder2.Adder1.XOR.G2.x) AND  NOT initial()} then
//     Adder2.Adder1.XOR.G2.x_old := if initial() OR pre(Adder2.Adder1.XOR.G2.x) == DAE.CAST(T_ENUMERATION, 0) then Adder2.Adder1.XOR.G2.y0 else pre(Adder2.Adder1.XOR.G2.x);
//     Adder2.Adder1.XOR.G2.lh := Adder2.Adder1.XOR.G2.delayTable[Adder2.Adder1.XOR.G2.x_old,Adder2.Adder1.XOR.G2.x];
//     Adder2.Adder1.XOR.G2.delayTime := if Adder2.Adder1.XOR.G2.lh > 0 then Adder2.Adder1.XOR.G2.tLH else if Adder2.Adder1.XOR.G2.lh < 0 then Adder2.Adder1.XOR.G2.tHL else 0.0;
//     Adder2.Adder1.XOR.G2.t_next := time + Adder2.Adder1.XOR.G2.delayTime;
//     if Adder2.Adder1.XOR.G2.lh == 0 OR abs(Adder2.Adder1.XOR.G2.delayTime) < 1e-60 then
//       Adder2.Adder1.XOR.G2.y_auxiliary := Adder2.Adder1.XOR.G2.x;
//     end if;
//   elsewhen time >= Adder2.Adder1.XOR.G2.t_next then
//     Adder2.Adder1.XOR.G2.y_auxiliary := Adder2.Adder1.XOR.G2.x;
//   end when;
//   Adder2.Adder1.XOR.G2.y := if Adder2.Adder1.XOR.G2.tLH > 0.0 OR Adder2.Adder1.XOR.G2.tHL > 0.0 then Adder2.Adder1.XOR.G2.y_auxiliary else Adder2.Adder1.XOR.G2.x;
//   when {initial(),(Adder3.Adder2.AND.G2.tLH > 0.0 OR Adder3.Adder2.AND.G2.tHL > 0.0) AND change(Adder3.Adder2.AND.G2.x) AND  NOT initial()} then
//     Adder3.Adder2.AND.G2.x_old := if initial() OR pre(Adder3.Adder2.AND.G2.x) == DAE.CAST(T_ENUMERATION, 0) then Adder3.Adder2.AND.G2.y0 else pre(Adder3.Adder2.AND.G2.x);
//     Adder3.Adder2.AND.G2.lh := Adder3.Adder2.AND.G2.delayTable[Adder3.Adder2.AND.G2.x_old,Adder3.Adder2.AND.G2.x];
//     Adder3.Adder2.AND.G2.delayTime := if Adder3.Adder2.AND.G2.lh > 0 then Adder3.Adder2.AND.G2.tLH else if Adder3.Adder2.AND.G2.lh < 0 then Adder3.Adder2.AND.G2.tHL else 0.0;
//     Adder3.Adder2.AND.G2.t_next := time + Adder3.Adder2.AND.G2.delayTime;
//     if Adder3.Adder2.AND.G2.lh == 0 OR abs(Adder3.Adder2.AND.G2.delayTime) < 1e-60 then
//       Adder3.Adder2.AND.G2.y_auxiliary := Adder3.Adder2.AND.G2.x;
//     end if;
//   elsewhen time >= Adder3.Adder2.AND.G2.t_next then
//     Adder3.Adder2.AND.G2.y_auxiliary := Adder3.Adder2.AND.G2.x;
//   end when;
//   Adder3.Adder2.AND.G2.y := if Adder3.Adder2.AND.G2.tLH > 0.0 OR Adder3.Adder2.AND.G2.tHL > 0.0 then Adder3.Adder2.AND.G2.y_auxiliary else Adder3.Adder2.AND.G2.x;
//   when {initial(),(Adder3.Adder2.XOR.G2.tLH > 0.0 OR Adder3.Adder2.XOR.G2.tHL > 0.0) AND change(Adder3.Adder2.XOR.G2.x) AND  NOT initial()} then
//     Adder3.Adder2.XOR.G2.x_old := if initial() OR pre(Adder3.Adder2.XOR.G2.x) == DAE.CAST(T_ENUMERATION, 0) then Adder3.Adder2.XOR.G2.y0 else pre(Adder3.Adder2.XOR.G2.x);
//     Adder3.Adder2.XOR.G2.lh := Adder3.Adder2.XOR.G2.delayTable[Adder3.Adder2.XOR.G2.x_old,Adder3.Adder2.XOR.G2.x];
//     Adder3.Adder2.XOR.G2.delayTime := if Adder3.Adder2.XOR.G2.lh > 0 then Adder3.Adder2.XOR.G2.tLH else if Adder3.Adder2.XOR.G2.lh < 0 then Adder3.Adder2.XOR.G2.tHL else 0.0;
//     Adder3.Adder2.XOR.G2.t_next := time + Adder3.Adder2.XOR.G2.delayTime;
//     if Adder3.Adder2.XOR.G2.lh == 0 OR abs(Adder3.Adder2.XOR.G2.delayTime) < 1e-60 then
//       Adder3.Adder2.XOR.G2.y_auxiliary := Adder3.Adder2.XOR.G2.x;
//     end if;
//   elsewhen time >= Adder3.Adder2.XOR.G2.t_next then
//     Adder3.Adder2.XOR.G2.y_auxiliary := Adder3.Adder2.XOR.G2.x;
//   end when;
//   Adder3.Adder2.XOR.G2.y := if Adder3.Adder2.XOR.G2.tLH > 0.0 OR Adder3.Adder2.XOR.G2.tHL > 0.0 then Adder3.Adder2.XOR.G2.y_auxiliary else Adder3.Adder2.XOR.G2.x;
//   when {initial(),(Adder3.Adder1.AND.G2.tLH > 0.0 OR Adder3.Adder1.AND.G2.tHL > 0.0) AND change(Adder3.Adder1.AND.G2.x) AND  NOT initial()} then
//     Adder3.Adder1.AND.G2.x_old := if initial() OR pre(Adder3.Adder1.AND.G2.x) == DAE.CAST(T_ENUMERATION, 0) then Adder3.Adder1.AND.G2.y0 else pre(Adder3.Adder1.AND.G2.x);
//     Adder3.Adder1.AND.G2.lh := Adder3.Adder1.AND.G2.delayTable[Adder3.Adder1.AND.G2.x_old,Adder3.Adder1.AND.G2.x];
//     Adder3.Adder1.AND.G2.delayTime := if Adder3.Adder1.AND.G2.lh > 0 then Adder3.Adder1.AND.G2.tLH else if Adder3.Adder1.AND.G2.lh < 0 then Adder3.Adder1.AND.G2.tHL else 0.0;
//     Adder3.Adder1.AND.G2.t_next := time + Adder3.Adder1.AND.G2.delayTime;
//     if Adder3.Adder1.AND.G2.lh == 0 OR abs(Adder3.Adder1.AND.G2.delayTime) < 1e-60 then
//       Adder3.Adder1.AND.G2.y_auxiliary := Adder3.Adder1.AND.G2.x;
//     end if;
//   elsewhen time >= Adder3.Adder1.AND.G2.t_next then
//     Adder3.Adder1.AND.G2.y_auxiliary := Adder3.Adder1.AND.G2.x;
//   end when;
//   Adder3.Adder1.AND.G2.y := if Adder3.Adder1.AND.G2.tLH > 0.0 OR Adder3.Adder1.AND.G2.tHL > 0.0 then Adder3.Adder1.AND.G2.y_auxiliary else Adder3.Adder1.AND.G2.x;
//   when {initial(),(Adder3.Adder1.XOR.G2.tLH > 0.0 OR Adder3.Adder1.XOR.G2.tHL > 0.0) AND change(Adder3.Adder1.XOR.G2.x) AND  NOT initial()} then
//     Adder3.Adder1.XOR.G2.x_old := if initial() OR pre(Adder3.Adder1.XOR.G2.x) == DAE.CAST(T_ENUMERATION, 0) then Adder3.Adder1.XOR.G2.y0 else pre(Adder3.Adder1.XOR.G2.x);
//     Adder3.Adder1.XOR.G2.lh := Adder3.Adder1.XOR.G2.delayTable[Adder3.Adder1.XOR.G2.x_old,Adder3.Adder1.XOR.G2.x];
//     Adder3.Adder1.XOR.G2.delayTime := if Adder3.Adder1.XOR.G2.lh > 0 then Adder3.Adder1.XOR.G2.tLH else if Adder3.Adder1.XOR.G2.lh < 0 then Adder3.Adder1.XOR.G2.tHL else 0.0;
//     Adder3.Adder1.XOR.G2.t_next := time + Adder3.Adder1.XOR.G2.delayTime;
//     if Adder3.Adder1.XOR.G2.lh == 0 OR abs(Adder3.Adder1.XOR.G2.delayTime) < 1e-60 then
//       Adder3.Adder1.XOR.G2.y_auxiliary := Adder3.Adder1.XOR.G2.x;
//     end if;
//   elsewhen time >= Adder3.Adder1.XOR.G2.t_next then
//     Adder3.Adder1.XOR.G2.y_auxiliary := Adder3.Adder1.XOR.G2.x;
//   end when;
//   Adder3.Adder1.XOR.G2.y := if Adder3.Adder1.XOR.G2.tLH > 0.0 OR Adder3.Adder1.XOR.G2.tHL > 0.0 then Adder3.Adder1.XOR.G2.y_auxiliary else Adder3.Adder1.XOR.G2.x;
//   when {initial(),(Adder4.Adder2.AND.G2.tLH > 0.0 OR Adder4.Adder2.AND.G2.tHL > 0.0) AND change(Adder4.Adder2.AND.G2.x) AND  NOT initial()} then
//     Adder4.Adder2.AND.G2.x_old := if initial() OR pre(Adder4.Adder2.AND.G2.x) == DAE.CAST(T_ENUMERATION, 0) then Adder4.Adder2.AND.G2.y0 else pre(Adder4.Adder2.AND.G2.x);
//     Adder4.Adder2.AND.G2.lh := Adder4.Adder2.AND.G2.delayTable[Adder4.Adder2.AND.G2.x_old,Adder4.Adder2.AND.G2.x];
//     Adder4.Adder2.AND.G2.delayTime := if Adder4.Adder2.AND.G2.lh > 0 then Adder4.Adder2.AND.G2.tLH else if Adder4.Adder2.AND.G2.lh < 0 then Adder4.Adder2.AND.G2.tHL else 0.0;
//     Adder4.Adder2.AND.G2.t_next := time + Adder4.Adder2.AND.G2.delayTime;
//     if Adder4.Adder2.AND.G2.lh == 0 OR abs(Adder4.Adder2.AND.G2.delayTime) < 1e-60 then
//       Adder4.Adder2.AND.G2.y_auxiliary := Adder4.Adder2.AND.G2.x;
//     end if;
//   elsewhen time >= Adder4.Adder2.AND.G2.t_next then
//     Adder4.Adder2.AND.G2.y_auxiliary := Adder4.Adder2.AND.G2.x;
//   end when;
//   Adder4.Adder2.AND.G2.y := if Adder4.Adder2.AND.G2.tLH > 0.0 OR Adder4.Adder2.AND.G2.tHL > 0.0 then Adder4.Adder2.AND.G2.y_auxiliary else Adder4.Adder2.AND.G2.x;
//   when {initial(),(Adder4.Adder2.XOR.G2.tLH > 0.0 OR Adder4.Adder2.XOR.G2.tHL > 0.0) AND change(Adder4.Adder2.XOR.G2.x) AND  NOT initial()} then
//     Adder4.Adder2.XOR.G2.x_old := if initial() OR pre(Adder4.Adder2.XOR.G2.x) == DAE.CAST(T_ENUMERATION, 0) then Adder4.Adder2.XOR.G2.y0 else pre(Adder4.Adder2.XOR.G2.x);
//     Adder4.Adder2.XOR.G2.lh := Adder4.Adder2.XOR.G2.delayTable[Adder4.Adder2.XOR.G2.x_old,Adder4.Adder2.XOR.G2.x];
//     Adder4.Adder2.XOR.G2.delayTime := if Adder4.Adder2.XOR.G2.lh > 0 then Adder4.Adder2.XOR.G2.tLH else if Adder4.Adder2.XOR.G2.lh < 0 then Adder4.Adder2.XOR.G2.tHL else 0.0;
//     Adder4.Adder2.XOR.G2.t_next := time + Adder4.Adder2.XOR.G2.delayTime;
//     if Adder4.Adder2.XOR.G2.lh == 0 OR abs(Adder4.Adder2.XOR.G2.delayTime) < 1e-60 then
//       Adder4.Adder2.XOR.G2.y_auxiliary := Adder4.Adder2.XOR.G2.x;
//     end if;
//   elsewhen time >= Adder4.Adder2.XOR.G2.t_next then
//     Adder4.Adder2.XOR.G2.y_auxiliary := Adder4.Adder2.XOR.G2.x;
//   end when;
//   Adder4.Adder2.XOR.G2.y := if Adder4.Adder2.XOR.G2.tLH > 0.0 OR Adder4.Adder2.XOR.G2.tHL > 0.0 then Adder4.Adder2.XOR.G2.y_auxiliary else Adder4.Adder2.XOR.G2.x;
//   when {initial(),(Adder4.Adder1.AND.G2.tLH > 0.0 OR Adder4.Adder1.AND.G2.tHL > 0.0) AND change(Adder4.Adder1.AND.G2.x) AND  NOT initial()} then
//     Adder4.Adder1.AND.G2.x_old := if initial() OR pre(Adder4.Adder1.AND.G2.x) == DAE.CAST(T_ENUMERATION, 0) then Adder4.Adder1.AND.G2.y0 else pre(Adder4.Adder1.AND.G2.x);
//     Adder4.Adder1.AND.G2.lh := Adder4.Adder1.AND.G2.delayTable[Adder4.Adder1.AND.G2.x_old,Adder4.Adder1.AND.G2.x];
//     Adder4.Adder1.AND.G2.delayTime := if Adder4.Adder1.AND.G2.lh > 0 then Adder4.Adder1.AND.G2.tLH else if Adder4.Adder1.AND.G2.lh < 0 then Adder4.Adder1.AND.G2.tHL else 0.0;
//     Adder4.Adder1.AND.G2.t_next := time + Adder4.Adder1.AND.G2.delayTime;
//     if Adder4.Adder1.AND.G2.lh == 0 OR abs(Adder4.Adder1.AND.G2.delayTime) < 1e-60 then
//       Adder4.Adder1.AND.G2.y_auxiliary := Adder4.Adder1.AND.G2.x;
//     end if;
//   elsewhen time >= Adder4.Adder1.AND.G2.t_next then
//     Adder4.Adder1.AND.G2.y_auxiliary := Adder4.Adder1.AND.G2.x;
//   end when;
//   Adder4.Adder1.AND.G2.y := if Adder4.Adder1.AND.G2.tLH > 0.0 OR Adder4.Adder1.AND.G2.tHL > 0.0 then Adder4.Adder1.AND.G2.y_auxiliary else Adder4.Adder1.AND.G2.x;
//   when {initial(),(Adder4.Adder1.XOR.G2.tLH > 0.0 OR Adder4.Adder1.XOR.G2.tHL > 0.0) AND change(Adder4.Adder1.XOR.G2.x) AND  NOT initial()} then
//     Adder4.Adder1.XOR.G2.x_old := if initial() OR pre(Adder4.Adder1.XOR.G2.x) == DAE.CAST(T_ENUMERATION, 0) then Adder4.Adder1.XOR.G2.y0 else pre(Adder4.Adder1.XOR.G2.x);
//     Adder4.Adder1.XOR.G2.lh := Adder4.Adder1.XOR.G2.delayTable[Adder4.Adder1.XOR.G2.x_old,Adder4.Adder1.XOR.G2.x];
//     Adder4.Adder1.XOR.G2.delayTime := if Adder4.Adder1.XOR.G2.lh > 0 then Adder4.Adder1.XOR.G2.tLH else if Adder4.Adder1.XOR.G2.lh < 0 then Adder4.Adder1.XOR.G2.tHL else 0.0;
//     Adder4.Adder1.XOR.G2.t_next := time + Adder4.Adder1.XOR.G2.delayTime;
//     if Adder4.Adder1.XOR.G2.lh == 0 OR abs(Adder4.Adder1.XOR.G2.delayTime) < 1e-60 then
//       Adder4.Adder1.XOR.G2.y_auxiliary := Adder4.Adder1.XOR.G2.x;
//     end if;
//   elsewhen time >= Adder4.Adder1.XOR.G2.t_next then
//     Adder4.Adder1.XOR.G2.y_auxiliary := Adder4.Adder1.XOR.G2.x;
//   end when;
//   Adder4.Adder1.XOR.G2.y := if Adder4.Adder1.XOR.G2.tLH > 0.0 OR Adder4.Adder1.XOR.G2.tHL > 0.0 then Adder4.Adder1.XOR.G2.y_auxiliary else Adder4.Adder1.XOR.G2.x;
// end Modelica.Electrical.Digital.Examples.Adder4;
// "
// "[Digital.mo:499:7-503:28:writable] Warning: Component Set has the same name as its type Modelica.Electrical.Digital.Examples.Adder4.Sources.Set.
// 	This is forbidden by Modelica specification and may lead to lookup errors.
// "
// "Check of Modelica.Electrical.Digital.Examples.Adder4 completed successfully.
// 
// [Digital.mo:499:7-503:28:writable] Warning: Component Set has the same name as its type Modelica.Electrical.Digital.Examples.Adder4.Sources.Set.
// 	This is forbidden by Modelica specification and may lead to lookup errors.
// 
// Class Modelica.Electrical.Digital.Examples.Adder4 has 1617 equation(s) and 1617 variable(s).
// 1472 of these are trivial equation(s).
// "
// ""
// record SimulationResult
//     resultFile = "",
//     messages = "Simulation failed for model: Modelica.Electrical.Digital.Examples.Adder4
// [Digital.mo:499:7-503:28:writable] Warning: Component Set has the same name as its type Modelica.Electrical.Digital.Examples.Adder4.Sources.Set.
// 	This is forbidden by Modelica specification and may lead to lookup errors.
// Error: Error building simulator. Buildlog: g++ -I. -o Modelica.Electrical.Digital.Examples.Adder4.exe Modelica.Electrical.Digital.Examples.Adder4.cpp Modelica.Electrical.Digital.Examples.Adder4_functions.cpp -L"../../../../libraries/msl31//Modelica/Electrical"   -lsim -linteractive -I"c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc" -msse2 -mfpmath=sse  -lsendData -lQtNetwork-mingw -lQtCore-mingw -lQtGui-mingw -luuid -lole32 -lws2_32 -L"c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/lib/omc" -lc_runtime -lf2c Modelica.Electrical.Digital.Examples.Adder4_records.c

// Modelica.Electrical.Digital.Examples.Adder4.cpp: In function `int functionDAE_output()':

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11631: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11631: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11631: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11631: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11631: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11634: error: `$PD$PTables$PXorTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11634: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11634: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11634: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11634: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11637: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11637: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11637: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11637: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11637: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11640: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11640: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11640: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11640: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11643: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11643: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11643: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11643: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11646: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11646: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11646: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11646: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11649: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11649: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11649: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11649: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11652: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11652: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11652: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11652: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11655: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11655: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11655: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11655: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11658: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11658: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11658: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11658: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11661: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11661: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11661: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11661: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11664: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11664: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11664: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11664: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11667: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11667: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11667: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11667: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11670: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11670: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11670: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11670: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11673: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11673: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11673: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11673: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11676: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11676: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11676: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11676: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11679: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11679: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11679: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11679: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11682: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11682: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11682: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11682: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11685: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11685: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11685: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11685: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11688: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11688: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11688: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11688: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp: In function `int functionDAE_output2()':

// Modelica.Electrical.Digital.Examples.Adder4.cpp:12671: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:12728: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:12785: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:12842: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:12899: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:12956: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13013: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13070: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13127: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13184: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13241: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13298: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13355: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13412: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13469: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13526: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp: In function `int function_zeroCrossing(fortran_integer*, double*, double*, fortran_integer*, double*, double*, fortran_integer*)':

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13858: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13858: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13860: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13860: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13862: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13862: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13864: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13864: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13866: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13866: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13868: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13868: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13870: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13870: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13872: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13872: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp: In function `int function_updateDependents()':

// Modelica.Electrical.Digital.Examples.Adder4.cpp:14727: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:14727: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:14727: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:14727: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:14727: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:14811: error: `$PD$PTables$PXorTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:14811: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:14811: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:14811: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:14811: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:14895: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:14895: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:14895: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:14895: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:14895: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:14979: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:14979: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:14979: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:14979: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15063: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15063: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15063: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15063: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15066: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15066: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15066: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15066: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15150: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15150: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15150: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15150: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15234: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15234: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15234: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15234: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15318: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15318: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15318: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15318: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15402: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15402: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15402: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15402: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15405: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15405: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15405: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15405: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15489: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15489: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15489: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15489: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15573: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15573: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15573: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15573: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15657: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15657: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15657: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15657: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15741: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15741: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15741: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15741: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15744: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15744: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15744: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15744: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15828: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15828: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15828: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15828: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15912: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15912: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15912: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15912: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15996: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15996: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15996: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15996: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16080: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16080: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16080: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16080: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16316: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16373: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16430: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16487: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16544: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16601: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16658: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16715: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16772: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16829: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16886: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16943: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17000: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17057: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17114: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17171: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17230: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17239: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17248: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17257: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17266: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17275: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17284: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17293: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17302: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17311: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17320: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17329: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17338: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17347: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17356: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17365: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp: In function `int initial_residual()':

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17534: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17534: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17534: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17534: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17534: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17537: error: `$PD$PTables$PXorTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17537: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17537: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17537: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17537: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17540: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17540: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17540: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17540: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17543: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17543: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17543: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17543: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17546: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17546: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17546: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17546: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17546: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17549: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17549: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17549: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17549: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17552: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17552: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17552: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17552: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17555: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17555: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17555: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17555: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17558: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17558: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17558: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17558: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17561: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17561: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17561: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17561: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17564: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17564: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17564: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17564: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17567: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17567: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17567: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17567: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17570: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17570: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17570: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17570: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17573: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17573: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17573: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17573: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17576: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17576: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17576: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17576: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17579: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17579: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17579: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17579: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17582: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17582: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17582: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17582: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17585: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17585: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17585: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17585: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17588: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17588: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17588: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17588: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17591: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17591: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17591: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17591: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp: In function `int functionAlgebraics()':

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19449: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19449: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19449: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19449: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19449: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19452: error: `$PD$PTables$PXorTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19452: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19452: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19452: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19452: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19455: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19455: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19455: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19455: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19455: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19458: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19458: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19458: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19458: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19461: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19461: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19461: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19461: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19464: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19464: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19464: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19464: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19467: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19467: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19467: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19467: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19470: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19470: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19470: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19470: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19473: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19473: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19473: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19473: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19476: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19476: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19476: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19476: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19479: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19479: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19479: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19479: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19482: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19482: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19482: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19482: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19485: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19485: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19485: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19485: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19488: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19488: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19488: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19488: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19491: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19491: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19491: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19491: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19494: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19494: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19494: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19494: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19497: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19497: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19497: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19497: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19500: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19500: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19500: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19500: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19503: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19503: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19503: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19503: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19506: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19506: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19506: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19506: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp: In function `int functionDAE(int&)':

// Modelica.Electrical.Digital.Examples.Adder4.cpp:20665: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:20665: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:20665: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:20665: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:20665: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:20749: error: `$PD$PTables$PXorTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:20749: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:20749: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:20749: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:20749: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:20833: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:20833: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:20833: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:20833: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:20833: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:20917: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:20917: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:20917: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:20917: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21001: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21001: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21001: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21001: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21004: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21004: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21004: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21004: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21088: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21088: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21088: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21088: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21172: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21172: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21172: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21172: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21256: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21256: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21256: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21256: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21340: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21340: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21340: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21340: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21343: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21343: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21343: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21343: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21427: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21427: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21427: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21427: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21511: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21511: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21511: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21511: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21595: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21595: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21595: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21595: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21679: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21679: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21679: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21679: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21682: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21682: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21682: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21682: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21766: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21766: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21766: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21766: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21850: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21850: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21850: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21850: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21934: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21934: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21934: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21934: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22018: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22018: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22018: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22018: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22254: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22311: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22368: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22425: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22482: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22539: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22596: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22653: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22710: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22767: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22824: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22881: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22938: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22995: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:23052: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp:23109: error: no matching function for call to `change(modelica_integer)'

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:73: note: candidates are: bool change(double&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:74: note:                 bool change(modelica_integer&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:75: note:                 bool change(modelica_boolean&)

// c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc/simulation_events.h:76: note:                 bool change(const char*&)

// Modelica.Electrical.Digital.Examples.Adder4.cpp: In function `int function_onlyZeroCrossings(double*, double*)':

// Modelica.Electrical.Digital.Examples.Adder4.cpp:23201: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:23201: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:23203: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:23203: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:23205: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:23205: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:23207: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:23207: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:23209: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:23209: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:23211: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:23211: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:23213: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:23213: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:23215: error: `$Pi' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:23215: error: `$Pi' was not declared in this scope

// mingw32-make: *** [Modelica.Electrical.Digital.Examples.Adder4] Error 1

// 
// Error: Error building simulator. Buildlog: command g++ not found. Check $OPENMODELICAHOME
// Error: Error building simulator. Buildlog: command "c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/share/omc/scripts/Compile" not found. Check $OPENMODELICAHOME
// "
// end SimulationResult;
// ""
// "class Modelica.Electrical.Digital.Examples.Counter3
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Enable.before(start = Modelica.Electrical.Digital.Interfaces.Logic.'0') "Logic value before step";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Enable.after(start = Modelica.Electrical.Digital.Interfaces.Logic.'1') "Logic value after step";
//   parameter Real Enable.stepTime(start = 1.0) "step time";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Enable.y;
//   parameter Real Clock.startTime(quantity = "Time", unit = "s", start = 0.0) "Output = offset for time < startTime";
//   parameter Real Clock.period(quantity = "Time", unit = "s", min = 1e-60, start = 1.0) "Time for one period";
//   parameter Real Clock.width(min = 1e-60, max = 100.0, start = 50.0) "Width of pulses in % of period";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Clock.y "Connector of Digital output signal";
//   protected Real Clock.t_i(quantity = "Time", unit = "s", start = Clock.startTime) "Start time of current period";
//   protected Real Clock.t_width(quantity = "Time", unit = "s") = Clock.period * Clock.width / 100.0;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.enable;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.q2;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.count;
//   parameter Real Counter.FF1.delayTime(quantity = "Time", unit = "s") = 0.001 "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.q0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial value";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.j;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.qn "not Q";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.clk;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.k;
//   parameter Real Counter.FF1.RS1.delayTime(quantity = "Time", unit = "s") = Counter.FF1.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.q0 = Counter.FF1.q0 "initial value of output";
//   parameter Integer Counter.FF1.RS1.Nor1.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.Nor1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.Nor1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.Nor1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.Nor1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.Nor1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF1.RS1.Nor2.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.Nor2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.Nor2.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.Nor2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.Nor2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.Nor2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.r;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.qn;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.TD1.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.TD1.y "Connector of Digital output signal";
//   parameter Real Counter.FF1.RS1.TD1.delayTime(quantity = "Time", unit = "s", start = 0.0) = Counter.FF1.RS1.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.TD1.y0 = Counter.FF1.RS1.q0 "initial value of output";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.TD1.x_delayed;
//   parameter Real Counter.FF1.RS2.delayTime(quantity = "Time", unit = "s") = Counter.FF1.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.q0 = Counter.FF1.q0 "initial value of output";
//   parameter Integer Counter.FF1.RS2.Nor1.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.Nor1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.Nor1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.Nor1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.Nor1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.Nor1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF1.RS2.Nor2.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.Nor2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.Nor2.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.Nor2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.Nor2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.Nor2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.r;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.qn;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.TD1.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.TD1.y "Connector of Digital output signal";
//   parameter Real Counter.FF1.RS2.TD1.delayTime(quantity = "Time", unit = "s", start = 0.0) = Counter.FF1.RS2.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.TD1.y0 = Counter.FF1.RS2.q0 "initial value of output";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.TD1.x_delayed;
//   parameter Integer Counter.FF1.And1.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And1.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And1.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And1.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF1.And2.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And2.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And2.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And2.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF1.And3.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And3.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And3.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And3.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And3.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And3.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF1.And4.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And4.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And4.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And4.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And4.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And4.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.Not1.x "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.Not1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.Not1.auxiliary(start = Modelica.Electrical.Digital.Interfaces.Logic.'0', fixed = true);
//   parameter Real Counter.FF2.delayTime(quantity = "Time", unit = "s") = 0.001 "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.q0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial value";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.j;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.qn "not Q";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.clk;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.k;
//   parameter Real Counter.FF2.RS1.delayTime(quantity = "Time", unit = "s") = Counter.FF2.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.q0 = Counter.FF2.q0 "initial value of output";
//   parameter Integer Counter.FF2.RS1.Nor1.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.Nor1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.Nor1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.Nor1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.Nor1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.Nor1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF2.RS1.Nor2.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.Nor2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.Nor2.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.Nor2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.Nor2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.Nor2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.r;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.qn;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.TD1.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.TD1.y "Connector of Digital output signal";
//   parameter Real Counter.FF2.RS1.TD1.delayTime(quantity = "Time", unit = "s", start = 0.0) = Counter.FF2.RS1.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.TD1.y0 = Counter.FF2.RS1.q0 "initial value of output";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.TD1.x_delayed;
//   parameter Real Counter.FF2.RS2.delayTime(quantity = "Time", unit = "s") = Counter.FF2.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.q0 = Counter.FF2.q0 "initial value of output";
//   parameter Integer Counter.FF2.RS2.Nor1.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.Nor1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.Nor1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.Nor1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.Nor1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.Nor1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF2.RS2.Nor2.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.Nor2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.Nor2.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.Nor2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.Nor2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.Nor2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.r;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.qn;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.TD1.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.TD1.y "Connector of Digital output signal";
//   parameter Real Counter.FF2.RS2.TD1.delayTime(quantity = "Time", unit = "s", start = 0.0) = Counter.FF2.RS2.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.TD1.y0 = Counter.FF2.RS2.q0 "initial value of output";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.TD1.x_delayed;
//   parameter Integer Counter.FF2.And1.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And1.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And1.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And1.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF2.And2.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And2.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And2.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And2.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF2.And3.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And3.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And3.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And3.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And3.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And3.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF2.And4.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And4.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And4.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And4.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And4.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And4.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.Not1.x "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.Not1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.Not1.auxiliary(start = Modelica.Electrical.Digital.Interfaces.Logic.'0', fixed = true);
//   parameter Real Counter.FF3.delayTime(quantity = "Time", unit = "s") = 0.001 "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.q0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial value";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.j;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.qn "not Q";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.clk;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.k;
//   parameter Real Counter.FF3.RS1.delayTime(quantity = "Time", unit = "s") = Counter.FF3.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.q0 = Counter.FF3.q0 "initial value of output";
//   parameter Integer Counter.FF3.RS1.Nor1.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.Nor1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.Nor1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.Nor1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.Nor1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.Nor1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF3.RS1.Nor2.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.Nor2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.Nor2.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.Nor2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.Nor2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.Nor2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.r;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.qn;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.TD1.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.TD1.y "Connector of Digital output signal";
//   parameter Real Counter.FF3.RS1.TD1.delayTime(quantity = "Time", unit = "s", start = 0.0) = Counter.FF3.RS1.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.TD1.y0 = Counter.FF3.RS1.q0 "initial value of output";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.TD1.x_delayed;
//   parameter Real Counter.FF3.RS2.delayTime(quantity = "Time", unit = "s") = Counter.FF3.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.q0 = Counter.FF3.q0 "initial value of output";
//   parameter Integer Counter.FF3.RS2.Nor1.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.Nor1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.Nor1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.Nor1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.Nor1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.Nor1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF3.RS2.Nor2.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.Nor2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.Nor2.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.Nor2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.Nor2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.Nor2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.r;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.qn;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.TD1.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.TD1.y "Connector of Digital output signal";
//   parameter Real Counter.FF3.RS2.TD1.delayTime(quantity = "Time", unit = "s", start = 0.0) = Counter.FF3.RS2.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.TD1.y0 = Counter.FF3.RS2.q0 "initial value of output";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.TD1.x_delayed;
//   parameter Integer Counter.FF3.And1.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And1.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And1.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And1.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF3.And2.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And2.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And2.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And2.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF3.And3.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And3.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And3.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And3.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And3.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And3.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF3.And4.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And4.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And4.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And4.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And4.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And4.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.Not1.x "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.Not1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.Not1.auxiliary(start = Modelica.Electrical.Digital.Interfaces.Logic.'0', fixed = true);
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.q1;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.q0;
// equation
//   Counter.FF1.RS1.Nor1.auxiliary[1] = Counter.FF1.RS1.Nor1.x[1];
//   Counter.FF1.RS1.Nor1.auxiliary[2] = D.Tables.OrTable[Counter.FF1.RS1.Nor1.auxiliary[1],Counter.FF1.RS1.Nor1.x[2]];
//   Counter.FF1.RS1.Nor1.y = pre(D.Tables.NotTable[Counter.FF1.RS1.Nor1.auxiliary[2]]);
//   Counter.FF1.RS1.Nor2.auxiliary[1] = Counter.FF1.RS1.Nor2.x[1];
//   Counter.FF1.RS1.Nor2.auxiliary[2] = D.Tables.OrTable[Counter.FF1.RS1.Nor2.auxiliary[1],Counter.FF1.RS1.Nor2.x[2]];
//   Counter.FF1.RS1.Nor2.y = pre(D.Tables.NotTable[Counter.FF1.RS1.Nor2.auxiliary[2]]);
//   Counter.FF1.RS1.TD1.x_delayed = DAE.CAST(T_ENUMERATION, integer(delay(Real(Counter.FF1.RS1.TD1.x),Counter.FF1.RS1.TD1.delayTime,Counter.FF1.RS1.TD1.delayTime)));
//   Counter.FF1.RS1.TD1.y = if Counter.FF1.RS1.TD1.delayTime > 0.0 then if time >= Counter.FF1.RS1.TD1.delayTime then Counter.FF1.RS1.TD1.x_delayed else Counter.FF1.RS1.TD1.y0 else pre(Counter.FF1.RS1.TD1.x);
//   Counter.FF1.RS2.Nor1.auxiliary[1] = Counter.FF1.RS2.Nor1.x[1];
//   Counter.FF1.RS2.Nor1.auxiliary[2] = D.Tables.OrTable[Counter.FF1.RS2.Nor1.auxiliary[1],Counter.FF1.RS2.Nor1.x[2]];
//   Counter.FF1.RS2.Nor1.y = pre(D.Tables.NotTable[Counter.FF1.RS2.Nor1.auxiliary[2]]);
//   Counter.FF1.RS2.Nor2.auxiliary[1] = Counter.FF1.RS2.Nor2.x[1];
//   Counter.FF1.RS2.Nor2.auxiliary[2] = D.Tables.OrTable[Counter.FF1.RS2.Nor2.auxiliary[1],Counter.FF1.RS2.Nor2.x[2]];
//   Counter.FF1.RS2.Nor2.y = pre(D.Tables.NotTable[Counter.FF1.RS2.Nor2.auxiliary[2]]);
//   Counter.FF1.RS2.TD1.x_delayed = DAE.CAST(T_ENUMERATION, integer(delay(Real(Counter.FF1.RS2.TD1.x),Counter.FF1.RS2.TD1.delayTime,Counter.FF1.RS2.TD1.delayTime)));
//   Counter.FF1.RS2.TD1.y = if Counter.FF1.RS2.TD1.delayTime > 0.0 then if time >= Counter.FF1.RS2.TD1.delayTime then Counter.FF1.RS2.TD1.x_delayed else Counter.FF1.RS2.TD1.y0 else pre(Counter.FF1.RS2.TD1.x);
//   Counter.FF1.And1.auxiliary[1] = Counter.FF1.And1.x[1];
//   Counter.FF1.And1.auxiliary[2] = D.Tables.AndTable[Counter.FF1.And1.auxiliary[1],Counter.FF1.And1.x[2]];
//   Counter.FF1.And1.auxiliary[3] = D.Tables.AndTable[Counter.FF1.And1.auxiliary[2],Counter.FF1.And1.x[3]];
//   Counter.FF1.And1.y = pre(Counter.FF1.And1.auxiliary[3]);
//   Counter.FF1.And2.auxiliary[1] = Counter.FF1.And2.x[1];
//   Counter.FF1.And2.auxiliary[2] = D.Tables.AndTable[Counter.FF1.And2.auxiliary[1],Counter.FF1.And2.x[2]];
//   Counter.FF1.And2.auxiliary[3] = D.Tables.AndTable[Counter.FF1.And2.auxiliary[2],Counter.FF1.And2.x[3]];
//   Counter.FF1.And2.y = pre(Counter.FF1.And2.auxiliary[3]);
//   Counter.FF1.And3.auxiliary[1] = Counter.FF1.And3.x[1];
//   Counter.FF1.And3.auxiliary[2] = D.Tables.AndTable[Counter.FF1.And3.auxiliary[1],Counter.FF1.And3.x[2]];
//   Counter.FF1.And3.y = pre(Counter.FF1.And3.auxiliary[2]);
//   Counter.FF1.And4.auxiliary[1] = Counter.FF1.And4.x[1];
//   Counter.FF1.And4.auxiliary[2] = D.Tables.AndTable[Counter.FF1.And4.auxiliary[1],Counter.FF1.And4.x[2]];
//   Counter.FF1.And4.y = pre(Counter.FF1.And4.auxiliary[2]);
//   Counter.FF1.Not1.auxiliary = D.Tables.NotTable[Counter.FF1.Not1.x];
//   Counter.FF1.Not1.y = pre(Counter.FF1.Not1.auxiliary);
//   Counter.FF2.RS1.Nor1.auxiliary[1] = Counter.FF2.RS1.Nor1.x[1];
//   Counter.FF2.RS1.Nor1.auxiliary[2] = D.Tables.OrTable[Counter.FF2.RS1.Nor1.auxiliary[1],Counter.FF2.RS1.Nor1.x[2]];
//   Counter.FF2.RS1.Nor1.y = pre(D.Tables.NotTable[Counter.FF2.RS1.Nor1.auxiliary[2]]);
//   Counter.FF2.RS1.Nor2.auxiliary[1] = Counter.FF2.RS1.Nor2.x[1];
//   Counter.FF2.RS1.Nor2.auxiliary[2] = D.Tables.OrTable[Counter.FF2.RS1.Nor2.auxiliary[1],Counter.FF2.RS1.Nor2.x[2]];
//   Counter.FF2.RS1.Nor2.y = pre(D.Tables.NotTable[Counter.FF2.RS1.Nor2.auxiliary[2]]);
//   Counter.FF2.RS1.TD1.x_delayed = DAE.CAST(T_ENUMERATION, integer(delay(Real(Counter.FF2.RS1.TD1.x),Counter.FF2.RS1.TD1.delayTime,Counter.FF2.RS1.TD1.delayTime)));
//   Counter.FF2.RS1.TD1.y = if Counter.FF2.RS1.TD1.delayTime > 0.0 then if time >= Counter.FF2.RS1.TD1.delayTime then Counter.FF2.RS1.TD1.x_delayed else Counter.FF2.RS1.TD1.y0 else pre(Counter.FF2.RS1.TD1.x);
//   Counter.FF2.RS2.Nor1.auxiliary[1] = Counter.FF2.RS2.Nor1.x[1];
//   Counter.FF2.RS2.Nor1.auxiliary[2] = D.Tables.OrTable[Counter.FF2.RS2.Nor1.auxiliary[1],Counter.FF2.RS2.Nor1.x[2]];
//   Counter.FF2.RS2.Nor1.y = pre(D.Tables.NotTable[Counter.FF2.RS2.Nor1.auxiliary[2]]);
//   Counter.FF2.RS2.Nor2.auxiliary[1] = Counter.FF2.RS2.Nor2.x[1];
//   Counter.FF2.RS2.Nor2.auxiliary[2] = D.Tables.OrTable[Counter.FF2.RS2.Nor2.auxiliary[1],Counter.FF2.RS2.Nor2.x[2]];
//   Counter.FF2.RS2.Nor2.y = pre(D.Tables.NotTable[Counter.FF2.RS2.Nor2.auxiliary[2]]);
//   Counter.FF2.RS2.TD1.x_delayed = DAE.CAST(T_ENUMERATION, integer(delay(Real(Counter.FF2.RS2.TD1.x),Counter.FF2.RS2.TD1.delayTime,Counter.FF2.RS2.TD1.delayTime)));
//   Counter.FF2.RS2.TD1.y = if Counter.FF2.RS2.TD1.delayTime > 0.0 then if time >= Counter.FF2.RS2.TD1.delayTime then Counter.FF2.RS2.TD1.x_delayed else Counter.FF2.RS2.TD1.y0 else pre(Counter.FF2.RS2.TD1.x);
//   Counter.FF2.And1.auxiliary[1] = Counter.FF2.And1.x[1];
//   Counter.FF2.And1.auxiliary[2] = D.Tables.AndTable[Counter.FF2.And1.auxiliary[1],Counter.FF2.And1.x[2]];
//   Counter.FF2.And1.auxiliary[3] = D.Tables.AndTable[Counter.FF2.And1.auxiliary[2],Counter.FF2.And1.x[3]];
//   Counter.FF2.And1.y = pre(Counter.FF2.And1.auxiliary[3]);
//   Counter.FF2.And2.auxiliary[1] = Counter.FF2.And2.x[1];
//   Counter.FF2.And2.auxiliary[2] = D.Tables.AndTable[Counter.FF2.And2.auxiliary[1],Counter.FF2.And2.x[2]];
//   Counter.FF2.And2.auxiliary[3] = D.Tables.AndTable[Counter.FF2.And2.auxiliary[2],Counter.FF2.And2.x[3]];
//   Counter.FF2.And2.y = pre(Counter.FF2.And2.auxiliary[3]);
//   Counter.FF2.And3.auxiliary[1] = Counter.FF2.And3.x[1];
//   Counter.FF2.And3.auxiliary[2] = D.Tables.AndTable[Counter.FF2.And3.auxiliary[1],Counter.FF2.And3.x[2]];
//   Counter.FF2.And3.y = pre(Counter.FF2.And3.auxiliary[2]);
//   Counter.FF2.And4.auxiliary[1] = Counter.FF2.And4.x[1];
//   Counter.FF2.And4.auxiliary[2] = D.Tables.AndTable[Counter.FF2.And4.auxiliary[1],Counter.FF2.And4.x[2]];
//   Counter.FF2.And4.y = pre(Counter.FF2.And4.auxiliary[2]);
//   Counter.FF2.Not1.auxiliary = D.Tables.NotTable[Counter.FF2.Not1.x];
//   Counter.FF2.Not1.y = pre(Counter.FF2.Not1.auxiliary);
//   Counter.FF3.RS1.Nor1.auxiliary[1] = Counter.FF3.RS1.Nor1.x[1];
//   Counter.FF3.RS1.Nor1.auxiliary[2] = D.Tables.OrTable[Counter.FF3.RS1.Nor1.auxiliary[1],Counter.FF3.RS1.Nor1.x[2]];
//   Counter.FF3.RS1.Nor1.y = pre(D.Tables.NotTable[Counter.FF3.RS1.Nor1.auxiliary[2]]);
//   Counter.FF3.RS1.Nor2.auxiliary[1] = Counter.FF3.RS1.Nor2.x[1];
//   Counter.FF3.RS1.Nor2.auxiliary[2] = D.Tables.OrTable[Counter.FF3.RS1.Nor2.auxiliary[1],Counter.FF3.RS1.Nor2.x[2]];
//   Counter.FF3.RS1.Nor2.y = pre(D.Tables.NotTable[Counter.FF3.RS1.Nor2.auxiliary[2]]);
//   Counter.FF3.RS1.TD1.x_delayed = DAE.CAST(T_ENUMERATION, integer(delay(Real(Counter.FF3.RS1.TD1.x),Counter.FF3.RS1.TD1.delayTime,Counter.FF3.RS1.TD1.delayTime)));
//   Counter.FF3.RS1.TD1.y = if Counter.FF3.RS1.TD1.delayTime > 0.0 then if time >= Counter.FF3.RS1.TD1.delayTime then Counter.FF3.RS1.TD1.x_delayed else Counter.FF3.RS1.TD1.y0 else pre(Counter.FF3.RS1.TD1.x);
//   Counter.FF3.RS2.Nor1.auxiliary[1] = Counter.FF3.RS2.Nor1.x[1];
//   Counter.FF3.RS2.Nor1.auxiliary[2] = D.Tables.OrTable[Counter.FF3.RS2.Nor1.auxiliary[1],Counter.FF3.RS2.Nor1.x[2]];
//   Counter.FF3.RS2.Nor1.y = pre(D.Tables.NotTable[Counter.FF3.RS2.Nor1.auxiliary[2]]);
//   Counter.FF3.RS2.Nor2.auxiliary[1] = Counter.FF3.RS2.Nor2.x[1];
//   Counter.FF3.RS2.Nor2.auxiliary[2] = D.Tables.OrTable[Counter.FF3.RS2.Nor2.auxiliary[1],Counter.FF3.RS2.Nor2.x[2]];
//   Counter.FF3.RS2.Nor2.y = pre(D.Tables.NotTable[Counter.FF3.RS2.Nor2.auxiliary[2]]);
//   Counter.FF3.RS2.TD1.x_delayed = DAE.CAST(T_ENUMERATION, integer(delay(Real(Counter.FF3.RS2.TD1.x),Counter.FF3.RS2.TD1.delayTime,Counter.FF3.RS2.TD1.delayTime)));
//   Counter.FF3.RS2.TD1.y = if Counter.FF3.RS2.TD1.delayTime > 0.0 then if time >= Counter.FF3.RS2.TD1.delayTime then Counter.FF3.RS2.TD1.x_delayed else Counter.FF3.RS2.TD1.y0 else pre(Counter.FF3.RS2.TD1.x);
//   Counter.FF3.And1.auxiliary[1] = Counter.FF3.And1.x[1];
//   Counter.FF3.And1.auxiliary[2] = D.Tables.AndTable[Counter.FF3.And1.auxiliary[1],Counter.FF3.And1.x[2]];
//   Counter.FF3.And1.auxiliary[3] = D.Tables.AndTable[Counter.FF3.And1.auxiliary[2],Counter.FF3.And1.x[3]];
//   Counter.FF3.And1.y = pre(Counter.FF3.And1.auxiliary[3]);
//   Counter.FF3.And2.auxiliary[1] = Counter.FF3.And2.x[1];
//   Counter.FF3.And2.auxiliary[2] = D.Tables.AndTable[Counter.FF3.And2.auxiliary[1],Counter.FF3.And2.x[2]];
//   Counter.FF3.And2.auxiliary[3] = D.Tables.AndTable[Counter.FF3.And2.auxiliary[2],Counter.FF3.And2.x[3]];
//   Counter.FF3.And2.y = pre(Counter.FF3.And2.auxiliary[3]);
//   Counter.FF3.And3.auxiliary[1] = Counter.FF3.And3.x[1];
//   Counter.FF3.And3.auxiliary[2] = D.Tables.AndTable[Counter.FF3.And3.auxiliary[1],Counter.FF3.And3.x[2]];
//   Counter.FF3.And3.y = pre(Counter.FF3.And3.auxiliary[2]);
//   Counter.FF3.And4.auxiliary[1] = Counter.FF3.And4.x[1];
//   Counter.FF3.And4.auxiliary[2] = D.Tables.AndTable[Counter.FF3.And4.auxiliary[1],Counter.FF3.And4.x[2]];
//   Counter.FF3.And4.y = pre(Counter.FF3.And4.auxiliary[2]);
//   Counter.FF3.Not1.auxiliary = D.Tables.NotTable[Counter.FF3.Not1.x];
//   Counter.FF3.Not1.y = pre(Counter.FF3.Not1.auxiliary);
//   Clock.y = Counter.count;
//   Counter.enable = Enable.y;
//   Counter.FF2.q = Counter.FF3.clk;
//   Counter.FF2.q = Counter.q1;
//   Counter.FF1.q = Counter.FF2.clk;
//   Counter.FF1.q = Counter.q0;
//   Counter.FF3.q = Counter.q2;
//   Counter.FF1.j = Counter.FF1.k;
//   Counter.FF1.j = Counter.FF2.j;
//   Counter.FF1.j = Counter.FF2.k;
//   Counter.FF1.j = Counter.FF3.j;
//   Counter.FF1.j = Counter.FF3.k;
//   Counter.FF1.j = Counter.enable;
//   Counter.FF1.clk = Counter.count;
//   Counter.FF3.And2.x[1] = Counter.FF3.RS1.q;
//   Counter.FF3.And2.x[1] = Counter.FF3.qn;
//   Counter.FF3.And1.x[3] = Counter.FF3.RS1.qn;
//   Counter.FF3.And1.x[3] = Counter.FF3.q;
//   Counter.FF3.And1.x[2] = Counter.FF3.j;
//   Counter.FF3.And3.x[1] = Counter.FF3.And4.x[1];
//   Counter.FF3.And3.x[1] = Counter.FF3.Not1.y;
//   Counter.FF3.And1.x[1] = Counter.FF3.And2.x[3];
//   Counter.FF3.And1.x[1] = Counter.FF3.Not1.x;
//   Counter.FF3.And1.x[1] = Counter.FF3.clk;
//   Counter.FF3.And3.x[2] = Counter.FF3.RS2.q;
//   Counter.FF3.And4.x[2] = Counter.FF3.RS2.qn;
//   Counter.FF3.And3.y = Counter.FF3.RS1.s;
//   Counter.FF3.And4.y = Counter.FF3.RS1.r;
//   Counter.FF3.And2.x[2] = Counter.FF3.k;
//   Counter.FF3.And1.y = Counter.FF3.RS2.s;
//   Counter.FF3.And2.y = Counter.FF3.RS2.r;
//   Counter.FF3.RS2.Nor1.y = Counter.FF3.RS2.TD1.x;
//   Counter.FF3.RS2.Nor1.y = Counter.FF3.RS2.qn;
//   Counter.FF3.RS2.Nor2.x[2] = Counter.FF3.RS2.TD1.y;
//   Counter.FF3.RS2.Nor1.x[1] = Counter.FF3.RS2.Nor2.y;
//   Counter.FF3.RS2.Nor1.x[1] = Counter.FF3.RS2.q;
//   Counter.FF3.RS2.Nor2.x[1] = Counter.FF3.RS2.r;
//   Counter.FF3.RS2.Nor1.x[2] = Counter.FF3.RS2.s;
//   Counter.FF3.RS1.Nor1.y = Counter.FF3.RS1.TD1.x;
//   Counter.FF3.RS1.Nor1.y = Counter.FF3.RS1.qn;
//   Counter.FF3.RS1.Nor2.x[2] = Counter.FF3.RS1.TD1.y;
//   Counter.FF3.RS1.Nor1.x[1] = Counter.FF3.RS1.Nor2.y;
//   Counter.FF3.RS1.Nor1.x[1] = Counter.FF3.RS1.q;
//   Counter.FF3.RS1.Nor2.x[1] = Counter.FF3.RS1.r;
//   Counter.FF3.RS1.Nor1.x[2] = Counter.FF3.RS1.s;
//   Counter.FF2.And2.x[1] = Counter.FF2.RS1.q;
//   Counter.FF2.And2.x[1] = Counter.FF2.qn;
//   Counter.FF2.And1.x[3] = Counter.FF2.RS1.qn;
//   Counter.FF2.And1.x[3] = Counter.FF2.q;
//   Counter.FF2.And1.x[2] = Counter.FF2.j;
//   Counter.FF2.And3.x[1] = Counter.FF2.And4.x[1];
//   Counter.FF2.And3.x[1] = Counter.FF2.Not1.y;
//   Counter.FF2.And1.x[1] = Counter.FF2.And2.x[3];
//   Counter.FF2.And1.x[1] = Counter.FF2.Not1.x;
//   Counter.FF2.And1.x[1] = Counter.FF2.clk;
//   Counter.FF2.And3.x[2] = Counter.FF2.RS2.q;
//   Counter.FF2.And4.x[2] = Counter.FF2.RS2.qn;
//   Counter.FF2.And3.y = Counter.FF2.RS1.s;
//   Counter.FF2.And4.y = Counter.FF2.RS1.r;
//   Counter.FF2.And2.x[2] = Counter.FF2.k;
//   Counter.FF2.And1.y = Counter.FF2.RS2.s;
//   Counter.FF2.And2.y = Counter.FF2.RS2.r;
//   Counter.FF2.RS2.Nor1.y = Counter.FF2.RS2.TD1.x;
//   Counter.FF2.RS2.Nor1.y = Counter.FF2.RS2.qn;
//   Counter.FF2.RS2.Nor2.x[2] = Counter.FF2.RS2.TD1.y;
//   Counter.FF2.RS2.Nor1.x[1] = Counter.FF2.RS2.Nor2.y;
//   Counter.FF2.RS2.Nor1.x[1] = Counter.FF2.RS2.q;
//   Counter.FF2.RS2.Nor2.x[1] = Counter.FF2.RS2.r;
//   Counter.FF2.RS2.Nor1.x[2] = Counter.FF2.RS2.s;
//   Counter.FF2.RS1.Nor1.y = Counter.FF2.RS1.TD1.x;
//   Counter.FF2.RS1.Nor1.y = Counter.FF2.RS1.qn;
//   Counter.FF2.RS1.Nor2.x[2] = Counter.FF2.RS1.TD1.y;
//   Counter.FF2.RS1.Nor1.x[1] = Counter.FF2.RS1.Nor2.y;
//   Counter.FF2.RS1.Nor1.x[1] = Counter.FF2.RS1.q;
//   Counter.FF2.RS1.Nor2.x[1] = Counter.FF2.RS1.r;
//   Counter.FF2.RS1.Nor1.x[2] = Counter.FF2.RS1.s;
//   Counter.FF1.And2.x[1] = Counter.FF1.RS1.q;
//   Counter.FF1.And2.x[1] = Counter.FF1.qn;
//   Counter.FF1.And1.x[3] = Counter.FF1.RS1.qn;
//   Counter.FF1.And1.x[3] = Counter.FF1.q;
//   Counter.FF1.And1.x[2] = Counter.FF1.j;
//   Counter.FF1.And3.x[1] = Counter.FF1.And4.x[1];
//   Counter.FF1.And3.x[1] = Counter.FF1.Not1.y;
//   Counter.FF1.And1.x[1] = Counter.FF1.And2.x[3];
//   Counter.FF1.And1.x[1] = Counter.FF1.Not1.x;
//   Counter.FF1.And1.x[1] = Counter.FF1.clk;
//   Counter.FF1.And3.x[2] = Counter.FF1.RS2.q;
//   Counter.FF1.And4.x[2] = Counter.FF1.RS2.qn;
//   Counter.FF1.And3.y = Counter.FF1.RS1.s;
//   Counter.FF1.And4.y = Counter.FF1.RS1.r;
//   Counter.FF1.And2.x[2] = Counter.FF1.k;
//   Counter.FF1.And1.y = Counter.FF1.RS2.s;
//   Counter.FF1.And2.y = Counter.FF1.RS2.r;
//   Counter.FF1.RS2.Nor1.y = Counter.FF1.RS2.TD1.x;
//   Counter.FF1.RS2.Nor1.y = Counter.FF1.RS2.qn;
//   Counter.FF1.RS2.Nor2.x[2] = Counter.FF1.RS2.TD1.y;
//   Counter.FF1.RS2.Nor1.x[1] = Counter.FF1.RS2.Nor2.y;
//   Counter.FF1.RS2.Nor1.x[1] = Counter.FF1.RS2.q;
//   Counter.FF1.RS2.Nor2.x[1] = Counter.FF1.RS2.r;
//   Counter.FF1.RS2.Nor1.x[2] = Counter.FF1.RS2.s;
//   Counter.FF1.RS1.Nor1.y = Counter.FF1.RS1.TD1.x;
//   Counter.FF1.RS1.Nor1.y = Counter.FF1.RS1.qn;
//   Counter.FF1.RS1.Nor2.x[2] = Counter.FF1.RS1.TD1.y;
//   Counter.FF1.RS1.Nor1.x[1] = Counter.FF1.RS1.Nor2.y;
//   Counter.FF1.RS1.Nor1.x[1] = Counter.FF1.RS1.q;
//   Counter.FF1.RS1.Nor2.x[1] = Counter.FF1.RS1.r;
//   Counter.FF1.RS1.Nor1.x[2] = Counter.FF1.RS1.s;
// algorithm
//   when initial() then
//     Enable.y := Enable.before;
//   end when;
//   if time >= Enable.stepTime then
//     Enable.y := Enable.after;
//   else
//     Enable.y := Enable.before;
//   end if;
//   when sample(Clock.startTime,Clock.period) then
//     Clock.t_i := time;
//   end when;
//   Clock.y := if  NOT time >= Clock.startTime OR time >= Clock.t_i + Clock.t_width then Modelica.Electrical.Digital.Interfaces.Logic.'0' else Modelica.Electrical.Digital.Interfaces.Logic.'1';
// end Modelica.Electrical.Digital.Examples.Counter3;
// "
// "[Digital.mo:610:7-611:51:writable] Warning: Component Clock has the same name as its type Modelica.Electrical.Digital.Examples.Counter3.D.Sources.Clock.
// 	This is forbidden by Modelica specification and may lead to lookup errors.
// "
// "Check of Modelica.Electrical.Digital.Examples.Counter3 completed successfully.
// 
// [Digital.mo:610:7-611:51:writable] Warning: Component Clock has the same name as its type Modelica.Electrical.Digital.Examples.Counter3.D.Sources.Clock.
// 	This is forbidden by Modelica specification and may lead to lookup errors.
// 
// Class Modelica.Electrical.Digital.Examples.Counter3 has 207 equation(s) and 207 variable(s).
// 131 of these are trivial equation(s).
// "
// ""
// record SimulationResult
//     resultFile = "",
//     messages = "Simulation failed for model: Modelica.Electrical.Digital.Examples.Counter3
// [Digital.mo:610:7-611:51:writable] Warning: Component Clock has the same name as its type Modelica.Electrical.Digital.Examples.Counter3.D.Sources.Clock.
// 	This is forbidden by Modelica specification and may lead to lookup errors.
// Error: Error building simulator. Buildlog: g++ -I. -o Modelica.Electrical.Digital.Examples.Counter3.exe Modelica.Electrical.Digital.Examples.Counter3.cpp Modelica.Electrical.Digital.Examples.Counter3_functions.cpp -L"../../../../libraries/msl31//Modelica/Electrical"   -lsim -linteractive -I"c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc" -msse2 -mfpmath=sse  -lsendData -lQtNetwork-mingw -lQtCore-mingw -lQtGui-mingw -luuid -lole32 -lws2_32 -L"c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/lib/omc" -lc_runtime -lf2c Modelica.Electrical.Digital.Examples.Counter3_records.c

// Modelica.Electrical.Digital.Examples.Counter3.cpp: In function `int functionDAE_output()':

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2272: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2275: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2275: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2275: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2275: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2275: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2278: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2278: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2278: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2278: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2281: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2281: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2281: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2281: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2282: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2282: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2282: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2282: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2285: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2285: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2285: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2285: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2286: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2286: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2286: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2286: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2287: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2287: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2289: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2289: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2289: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2289: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2289: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2290: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2290: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2310: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2310: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2310: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2310: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2311: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2311: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2313: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2313: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2313: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2313: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2314: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2314: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2334: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2334: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2334: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2334: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2340: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2340: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2340: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2340: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2343: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2343: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2343: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2343: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2346: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2346: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2346: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2346: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2347: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2347: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2347: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2347: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2350: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2350: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2350: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2350: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2351: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2351: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2351: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2351: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2352: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2352: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2354: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2354: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2354: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2354: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2355: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2355: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2375: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2375: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2375: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2375: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2376: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2376: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2378: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2378: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2378: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2378: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2379: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2379: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2399: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2399: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2399: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2399: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2405: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2405: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2405: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2405: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2408: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2408: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2408: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2408: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2411: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2411: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2411: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2411: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2412: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2412: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2412: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2412: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2415: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2415: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2415: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2415: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2416: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2416: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2416: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2416: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2417: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2417: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2419: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2419: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2419: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2419: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2420: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2420: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2440: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2440: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2440: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2440: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2441: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2441: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2443: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2443: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2443: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2443: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2444: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2444: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2464: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2464: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2464: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2464: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp: In function `int function_updateDependents()':

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3025: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3028: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3028: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3028: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3028: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3028: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3031: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3031: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3031: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3031: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3034: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3034: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3034: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3034: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3035: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3035: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3035: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3035: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3038: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3038: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3038: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3038: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3039: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3039: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3039: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3039: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3040: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3040: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3042: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3042: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3042: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3042: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3042: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3043: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3043: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3063: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3063: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3063: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3063: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3064: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3064: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3066: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3066: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3066: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3066: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3067: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3067: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3087: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3087: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3087: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3087: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3093: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3093: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3093: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3093: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3096: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3096: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3096: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3096: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3099: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3099: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3099: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3099: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3100: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3100: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3100: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3100: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3103: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3103: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3103: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3103: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3104: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3104: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3104: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3104: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3105: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3105: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3107: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3107: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3107: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3107: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3108: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3108: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3128: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3128: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3128: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3128: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3129: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3129: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3131: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3131: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3131: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3131: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3132: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3132: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3152: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3152: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3152: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3152: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3158: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3158: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3158: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3158: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3161: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3161: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3161: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3161: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3164: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3164: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3164: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3164: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3165: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3165: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3165: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3165: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3168: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3168: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3168: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3168: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3169: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3169: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3169: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3169: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3170: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3170: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3172: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3172: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3172: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3172: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3173: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3173: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3193: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3193: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3193: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3193: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3194: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3194: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3196: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3196: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3196: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3196: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3197: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3197: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3217: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3217: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3217: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3217: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp: In function `int initial_residual()':

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3403: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3403: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3403: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3403: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3403: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3404: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3404: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3404: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3406: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3406: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3406: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3406: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3407: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3407: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3425: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3425: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3425: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3425: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3426: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3426: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3428: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3428: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3428: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3428: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3429: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3429: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3447: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3447: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3447: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3447: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3447: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3448: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3448: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3448: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3448: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3451: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3451: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3451: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3451: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3452: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3452: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3452: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3452: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3455: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3455: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3455: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3455: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3458: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3458: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3458: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3458: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3464: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3464: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3464: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3464: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3465: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3465: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3467: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3467: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3467: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3467: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3468: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3468: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3486: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3486: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3486: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3486: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3487: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3487: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3489: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3489: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3489: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3489: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3490: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3490: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3508: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3508: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3508: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3508: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3509: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3509: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3509: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3509: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3512: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3512: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3512: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3512: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3513: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3513: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3513: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3513: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3516: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3516: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3516: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3516: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3519: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3519: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3519: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3519: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3525: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3525: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3525: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3525: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3526: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3526: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3528: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3528: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3528: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3528: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3529: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3529: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3547: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3547: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3547: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3547: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3548: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3548: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3550: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3550: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3550: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3550: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3551: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3551: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3569: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3569: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3569: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3569: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3570: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3570: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3570: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3570: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3573: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3573: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3573: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3573: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3574: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3574: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3574: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3574: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3577: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3577: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3577: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3577: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3580: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3580: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3580: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3580: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp: In function `int functionAlgebraics()':

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3909: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3912: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3912: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3912: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3912: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3912: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3915: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3915: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3915: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3915: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3918: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3918: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3918: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3918: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3919: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3919: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3919: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3919: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3922: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3922: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3922: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3922: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3923: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3923: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3923: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3923: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3924: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3924: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3926: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3926: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3926: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3926: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3926: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3927: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3927: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3947: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3947: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3947: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3947: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3948: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3948: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3950: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3950: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3950: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3950: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3951: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3951: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3971: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3971: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3971: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3971: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3977: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3977: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3977: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3977: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3980: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3980: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3980: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3980: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3983: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3983: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3983: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3983: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3984: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3984: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3984: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3984: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3987: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3987: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3987: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3987: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3988: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3988: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3988: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3988: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3989: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3989: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3991: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3991: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3991: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3991: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3992: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3992: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4012: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4012: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4012: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4012: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4013: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4013: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4015: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4015: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4015: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4015: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4016: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4016: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4036: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4036: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4036: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4036: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4042: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4042: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4042: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4042: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4045: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4045: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4045: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4045: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4048: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4048: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4048: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4048: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4049: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4049: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4049: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4049: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4052: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4052: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4052: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4052: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4053: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4053: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4053: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4053: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4054: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4054: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4056: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4056: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4056: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4056: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4057: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4057: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4077: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4077: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4077: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4077: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4078: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4078: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4080: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4080: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4080: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4080: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4081: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4081: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4101: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4101: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4101: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4101: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp: In function `int functionDAE(int&)':

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4355: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4358: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4358: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4358: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4358: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4358: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4361: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4361: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4361: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4361: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4364: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4364: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4364: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4364: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4365: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4365: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4365: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4365: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4368: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4368: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4368: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4368: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4369: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4369: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4369: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4369: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4370: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4370: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4372: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4372: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4372: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4372: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4372: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4373: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4373: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4393: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4393: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4393: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4393: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4394: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4394: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4396: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4396: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4396: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4396: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4397: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4397: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4417: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4417: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4417: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4417: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4423: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4423: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4423: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4423: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4426: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4426: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4426: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4426: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4429: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4429: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4429: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4429: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4430: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4430: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4430: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4430: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4433: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4433: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4433: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4433: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4434: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4434: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4434: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4434: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4435: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4435: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4437: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4437: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4437: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4437: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4438: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4438: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4458: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4458: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4458: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4458: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4459: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4459: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4461: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4461: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4461: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4461: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4462: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4462: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4482: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4482: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4482: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4482: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4488: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4488: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4488: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4488: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4491: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4491: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4491: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4491: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4494: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4494: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4494: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4494: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4495: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4495: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4495: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4495: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4498: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4498: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4498: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4498: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4499: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4499: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4499: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4499: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4500: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4500: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4502: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4502: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4502: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4502: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4503: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4503: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4523: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4523: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4523: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4523: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4524: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4524: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4526: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4526: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4526: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4526: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4527: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4527: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4547: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4547: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4547: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4547: error: non-lvalue in unary `&'

// mingw32-make: *** [Modelica.Electrical.Digital.Examples.Counter3] Error 1

// 
// Error: Error building simulator. Buildlog: command g++ not found. Check $OPENMODELICAHOME
// Error: Error building simulator. Buildlog: command "c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/share/omc/scripts/Compile" not found. Check $OPENMODELICAHOME
// "
// end SimulationResult;
// ""
// "class Modelica.Electrical.Digital.Examples.Counter
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Enable.before(start = Modelica.Electrical.Digital.Interfaces.Logic.'0') "Logic value before step";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Enable.after(start = Modelica.Electrical.Digital.Interfaces.Logic.'1') "Logic value after step";
//   parameter Real Enable.stepTime(start = 1.0) "step time";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Enable.y;
//   parameter Real Clock.startTime(quantity = "Time", unit = "s", start = 0.0) "Output = offset for time < startTime";
//   parameter Real Clock.period(quantity = "Time", unit = "s", min = 1e-60, start = 1.0) "Time for one period";
//   parameter Real Clock.width(min = 1e-60, max = 100.0, start = 50.0) "Width of pulses in % of period";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Clock.y "Connector of Digital output signal";
//   protected Real Clock.t_i(quantity = "Time", unit = "s", start = Clock.startTime) "Start time of current period";
//   protected Real Clock.t_width(quantity = "Time", unit = "s") = Clock.period * Clock.width / 100.0;
//   parameter Integer Counter.n = 4 "number of bits";
//   parameter Real Counter.delayTime(quantity = "Time", unit = "s") = 0.001 "delay of each JKFF";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.q0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial value";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.enable;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.count;
//   parameter Real Counter.FF[1].delayTime(quantity = "Time", unit = "s") = Counter.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].q0 = Counter.q0 "initial value";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].j;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].qn "not Q";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].clk;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].k;
//   parameter Real Counter.FF[1].RS1.delayTime(quantity = "Time", unit = "s") = Counter.FF[1].delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS1.q0 = Counter.FF[1].q0 "initial value of output";
//   parameter Integer Counter.FF[1].RS1.Nor1.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS1.Nor1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS1.Nor1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS1.Nor1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS1.Nor1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS1.Nor1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF[1].RS1.Nor2.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS1.Nor2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS1.Nor2.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS1.Nor2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS1.Nor2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS1.Nor2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS1.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS1.r;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS1.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS1.qn;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS1.TD1.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS1.TD1.y "Connector of Digital output signal";
//   parameter Real Counter.FF[1].RS1.TD1.delayTime(quantity = "Time", unit = "s", start = 0.0) = Counter.FF[1].RS1.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS1.TD1.y0 = Counter.FF[1].RS1.q0 "initial value of output";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS1.TD1.x_delayed;
//   parameter Real Counter.FF[1].RS2.delayTime(quantity = "Time", unit = "s") = Counter.FF[1].delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS2.q0 = Counter.FF[1].q0 "initial value of output";
//   parameter Integer Counter.FF[1].RS2.Nor1.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS2.Nor1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS2.Nor1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS2.Nor1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS2.Nor1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS2.Nor1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF[1].RS2.Nor2.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS2.Nor2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS2.Nor2.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS2.Nor2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS2.Nor2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS2.Nor2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS2.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS2.r;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS2.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS2.qn;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS2.TD1.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS2.TD1.y "Connector of Digital output signal";
//   parameter Real Counter.FF[1].RS2.TD1.delayTime(quantity = "Time", unit = "s", start = 0.0) = Counter.FF[1].RS2.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS2.TD1.y0 = Counter.FF[1].RS2.q0 "initial value of output";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS2.TD1.x_delayed;
//   parameter Integer Counter.FF[1].And1.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].And1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].And1.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].And1.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].And1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].And1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].And1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].And1.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF[1].And2.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].And2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].And2.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].And2.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].And2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].And2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].And2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].And2.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF[1].And3.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].And3.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].And3.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].And3.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].And3.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].And3.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF[1].And4.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].And4.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].And4.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].And4.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].And4.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].And4.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].Not1.x "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].Not1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].Not1.auxiliary(start = Modelica.Electrical.Digital.Interfaces.Logic.'0', fixed = true);
//   parameter Real Counter.FF[2].delayTime(quantity = "Time", unit = "s") = Counter.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].q0 = Counter.q0 "initial value";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].j;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].qn "not Q";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].clk;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].k;
//   parameter Real Counter.FF[2].RS1.delayTime(quantity = "Time", unit = "s") = Counter.FF[2].delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS1.q0 = Counter.FF[2].q0 "initial value of output";
//   parameter Integer Counter.FF[2].RS1.Nor1.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS1.Nor1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS1.Nor1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS1.Nor1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS1.Nor1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS1.Nor1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF[2].RS1.Nor2.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS1.Nor2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS1.Nor2.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS1.Nor2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS1.Nor2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS1.Nor2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS1.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS1.r;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS1.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS1.qn;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS1.TD1.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS1.TD1.y "Connector of Digital output signal";
//   parameter Real Counter.FF[2].RS1.TD1.delayTime(quantity = "Time", unit = "s", start = 0.0) = Counter.FF[2].RS1.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS1.TD1.y0 = Counter.FF[2].RS1.q0 "initial value of output";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS1.TD1.x_delayed;
//   parameter Real Counter.FF[2].RS2.delayTime(quantity = "Time", unit = "s") = Counter.FF[2].delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS2.q0 = Counter.FF[2].q0 "initial value of output";
//   parameter Integer Counter.FF[2].RS2.Nor1.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS2.Nor1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS2.Nor1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS2.Nor1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS2.Nor1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS2.Nor1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF[2].RS2.Nor2.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS2.Nor2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS2.Nor2.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS2.Nor2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS2.Nor2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS2.Nor2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS2.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS2.r;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS2.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS2.qn;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS2.TD1.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS2.TD1.y "Connector of Digital output signal";
//   parameter Real Counter.FF[2].RS2.TD1.delayTime(quantity = "Time", unit = "s", start = 0.0) = Counter.FF[2].RS2.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS2.TD1.y0 = Counter.FF[2].RS2.q0 "initial value of output";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS2.TD1.x_delayed;
//   parameter Integer Counter.FF[2].And1.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].And1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].And1.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].And1.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].And1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].And1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].And1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].And1.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF[2].And2.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].And2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].And2.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].And2.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].And2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].And2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].And2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].And2.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF[2].And3.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].And3.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].And3.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].And3.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].And3.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].And3.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF[2].And4.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].And4.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].And4.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].And4.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].And4.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].And4.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].Not1.x "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].Not1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].Not1.auxiliary(start = Modelica.Electrical.Digital.Interfaces.Logic.'0', fixed = true);
//   parameter Real Counter.FF[3].delayTime(quantity = "Time", unit = "s") = Counter.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].q0 = Counter.q0 "initial value";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].j;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].qn "not Q";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].clk;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].k;
//   parameter Real Counter.FF[3].RS1.delayTime(quantity = "Time", unit = "s") = Counter.FF[3].delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS1.q0 = Counter.FF[3].q0 "initial value of output";
//   parameter Integer Counter.FF[3].RS1.Nor1.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS1.Nor1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS1.Nor1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS1.Nor1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS1.Nor1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS1.Nor1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF[3].RS1.Nor2.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS1.Nor2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS1.Nor2.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS1.Nor2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS1.Nor2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS1.Nor2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS1.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS1.r;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS1.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS1.qn;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS1.TD1.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS1.TD1.y "Connector of Digital output signal";
//   parameter Real Counter.FF[3].RS1.TD1.delayTime(quantity = "Time", unit = "s", start = 0.0) = Counter.FF[3].RS1.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS1.TD1.y0 = Counter.FF[3].RS1.q0 "initial value of output";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS1.TD1.x_delayed;
//   parameter Real Counter.FF[3].RS2.delayTime(quantity = "Time", unit = "s") = Counter.FF[3].delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS2.q0 = Counter.FF[3].q0 "initial value of output";
//   parameter Integer Counter.FF[3].RS2.Nor1.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS2.Nor1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS2.Nor1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS2.Nor1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS2.Nor1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS2.Nor1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF[3].RS2.Nor2.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS2.Nor2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS2.Nor2.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS2.Nor2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS2.Nor2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS2.Nor2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS2.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS2.r;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS2.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS2.qn;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS2.TD1.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS2.TD1.y "Connector of Digital output signal";
//   parameter Real Counter.FF[3].RS2.TD1.delayTime(quantity = "Time", unit = "s", start = 0.0) = Counter.FF[3].RS2.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS2.TD1.y0 = Counter.FF[3].RS2.q0 "initial value of output";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS2.TD1.x_delayed;
//   parameter Integer Counter.FF[3].And1.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].And1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].And1.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].And1.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].And1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].And1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].And1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].And1.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF[3].And2.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].And2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].And2.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].And2.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].And2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].And2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].And2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].And2.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF[3].And3.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].And3.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].And3.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].And3.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].And3.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].And3.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF[3].And4.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].And4.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].And4.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].And4.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].And4.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].And4.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].Not1.x "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].Not1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].Not1.auxiliary(start = Modelica.Electrical.Digital.Interfaces.Logic.'0', fixed = true);
//   parameter Real Counter.FF[4].delayTime(quantity = "Time", unit = "s") = Counter.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].q0 = Counter.q0 "initial value";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].j;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].qn "not Q";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].clk;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].k;
//   parameter Real Counter.FF[4].RS1.delayTime(quantity = "Time", unit = "s") = Counter.FF[4].delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS1.q0 = Counter.FF[4].q0 "initial value of output";
//   parameter Integer Counter.FF[4].RS1.Nor1.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS1.Nor1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS1.Nor1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS1.Nor1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS1.Nor1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS1.Nor1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF[4].RS1.Nor2.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS1.Nor2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS1.Nor2.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS1.Nor2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS1.Nor2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS1.Nor2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS1.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS1.r;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS1.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS1.qn;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS1.TD1.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS1.TD1.y "Connector of Digital output signal";
//   parameter Real Counter.FF[4].RS1.TD1.delayTime(quantity = "Time", unit = "s", start = 0.0) = Counter.FF[4].RS1.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS1.TD1.y0 = Counter.FF[4].RS1.q0 "initial value of output";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS1.TD1.x_delayed;
//   parameter Real Counter.FF[4].RS2.delayTime(quantity = "Time", unit = "s") = Counter.FF[4].delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS2.q0 = Counter.FF[4].q0 "initial value of output";
//   parameter Integer Counter.FF[4].RS2.Nor1.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS2.Nor1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS2.Nor1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS2.Nor1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS2.Nor1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS2.Nor1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF[4].RS2.Nor2.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS2.Nor2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS2.Nor2.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS2.Nor2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS2.Nor2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS2.Nor2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS2.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS2.r;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS2.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS2.qn;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS2.TD1.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS2.TD1.y "Connector of Digital output signal";
//   parameter Real Counter.FF[4].RS2.TD1.delayTime(quantity = "Time", unit = "s", start = 0.0) = Counter.FF[4].RS2.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS2.TD1.y0 = Counter.FF[4].RS2.q0 "initial value of output";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS2.TD1.x_delayed;
//   parameter Integer Counter.FF[4].And1.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].And1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].And1.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].And1.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].And1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].And1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].And1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].And1.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF[4].And2.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].And2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].And2.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].And2.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].And2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].And2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].And2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].And2.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF[4].And3.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].And3.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].And3.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].And3.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].And3.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].And3.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF[4].And4.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].And4.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].And4.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].And4.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].And4.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].And4.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].Not1.x "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].Not1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].Not1.auxiliary(start = Modelica.Electrical.Digital.Interfaces.Logic.'0', fixed = true);
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.q[1];
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.q[2];
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.q[3];
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.q[4];
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Q0.x[1];
//   output Real Q0.y[1];
//   parameter Integer Q0.n(min = 1, start = 1) "signal width";
//   parameter Real Q0.value_U(start = 0.5) "value for digital U (uninitialized)";
//   parameter Real Q0.value_X(start = 0.5) "value for digital X (Forcing Unknown)";
//   parameter Real Q0.value_0(start = 0.0) "value for digital 0   (Forcing 0)";
//   parameter Real Q0.value_1(start = 1.0) "value for digital 1 (Forcing 1)";
//   parameter Real Q0.value_Z(start = 0.5) "value for digital Z (High Impedance)";
//   parameter Real Q0.value_W(start = 0.5) "value for digital W (Weak    Unknown)";
//   parameter Real Q0.value_L(start = 0.0) "value for digital L (Weak    0)";
//   parameter Real Q0.value_H(start = 1.0) "value for digital H (Weak    1)";
//   parameter Real Q0.value_m(start = 0.5) "value for digital m (Don't care)";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Q1.x[1];
//   output Real Q1.y[1];
//   parameter Integer Q1.n(min = 1, start = 1) "signal width";
//   parameter Real Q1.value_U(start = 0.5) "value for digital U (uninitialized)";
//   parameter Real Q1.value_X(start = 0.5) "value for digital X (Forcing Unknown)";
//   parameter Real Q1.value_0(start = 0.0) "value for digital 0   (Forcing 0)";
//   parameter Real Q1.value_1(start = 1.0) "value for digital 1 (Forcing 1)";
//   parameter Real Q1.value_Z(start = 0.5) "value for digital Z (High Impedance)";
//   parameter Real Q1.value_W(start = 0.5) "value for digital W (Weak    Unknown)";
//   parameter Real Q1.value_L(start = 0.0) "value for digital L (Weak    0)";
//   parameter Real Q1.value_H(start = 1.0) "value for digital H (Weak    1)";
//   parameter Real Q1.value_m(start = 0.5) "value for digital m (Don't care)";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Q2.x[1];
//   output Real Q2.y[1];
//   parameter Integer Q2.n(min = 1, start = 1) "signal width";
//   parameter Real Q2.value_U(start = 0.5) "value for digital U (uninitialized)";
//   parameter Real Q2.value_X(start = 0.5) "value for digital X (Forcing Unknown)";
//   parameter Real Q2.value_0(start = 0.0) "value for digital 0   (Forcing 0)";
//   parameter Real Q2.value_1(start = 1.0) "value for digital 1 (Forcing 1)";
//   parameter Real Q2.value_Z(start = 0.5) "value for digital Z (High Impedance)";
//   parameter Real Q2.value_W(start = 0.5) "value for digital W (Weak    Unknown)";
//   parameter Real Q2.value_L(start = 0.0) "value for digital L (Weak    0)";
//   parameter Real Q2.value_H(start = 1.0) "value for digital H (Weak    1)";
//   parameter Real Q2.value_m(start = 0.5) "value for digital m (Don't care)";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Q3.x[1];
//   output Real Q3.y[1];
//   parameter Integer Q3.n(min = 1, start = 1) "signal width";
//   parameter Real Q3.value_U(start = 0.5) "value for digital U (uninitialized)";
//   parameter Real Q3.value_X(start = 0.5) "value for digital X (Forcing Unknown)";
//   parameter Real Q3.value_0(start = 0.0) "value for digital 0   (Forcing 0)";
//   parameter Real Q3.value_1(start = 1.0) "value for digital 1 (Forcing 1)";
//   parameter Real Q3.value_Z(start = 0.5) "value for digital Z (High Impedance)";
//   parameter Real Q3.value_W(start = 0.5) "value for digital W (Weak    Unknown)";
//   parameter Real Q3.value_L(start = 0.0) "value for digital L (Weak    0)";
//   parameter Real Q3.value_H(start = 1.0) "value for digital H (Weak    1)";
//   parameter Real Q3.value_m(start = 0.5) "value for digital m (Don't care)";
// equation
//   Counter.FF[1].RS1.Nor1.auxiliary[1] = Counter.FF[1].RS1.Nor1.x[1];
//   Counter.FF[1].RS1.Nor1.auxiliary[2] = D.Tables.OrTable[Counter.FF[1].RS1.Nor1.auxiliary[1],Counter.FF[1].RS1.Nor1.x[2]];
//   Counter.FF[1].RS1.Nor1.y = pre(D.Tables.NotTable[Counter.FF[1].RS1.Nor1.auxiliary[2]]);
//   Counter.FF[1].RS1.Nor2.auxiliary[1] = Counter.FF[1].RS1.Nor2.x[1];
//   Counter.FF[1].RS1.Nor2.auxiliary[2] = D.Tables.OrTable[Counter.FF[1].RS1.Nor2.auxiliary[1],Counter.FF[1].RS1.Nor2.x[2]];
//   Counter.FF[1].RS1.Nor2.y = pre(D.Tables.NotTable[Counter.FF[1].RS1.Nor2.auxiliary[2]]);
//   Counter.FF[1].RS1.TD1.x_delayed = DAE.CAST(T_ENUMERATION, integer(delay(Real(Counter.FF[1].RS1.TD1.x),Counter.FF[1].RS1.TD1.delayTime,Counter.FF[1].RS1.TD1.delayTime)));
//   Counter.FF[1].RS1.TD1.y = if Counter.FF[1].RS1.TD1.delayTime > 0.0 then if time >= Counter.FF[1].RS1.TD1.delayTime then Counter.FF[1].RS1.TD1.x_delayed else Counter.FF[1].RS1.TD1.y0 else pre(Counter.FF[1].RS1.TD1.x);
//   Counter.FF[1].RS2.Nor1.auxiliary[1] = Counter.FF[1].RS2.Nor1.x[1];
//   Counter.FF[1].RS2.Nor1.auxiliary[2] = D.Tables.OrTable[Counter.FF[1].RS2.Nor1.auxiliary[1],Counter.FF[1].RS2.Nor1.x[2]];
//   Counter.FF[1].RS2.Nor1.y = pre(D.Tables.NotTable[Counter.FF[1].RS2.Nor1.auxiliary[2]]);
//   Counter.FF[1].RS2.Nor2.auxiliary[1] = Counter.FF[1].RS2.Nor2.x[1];
//   Counter.FF[1].RS2.Nor2.auxiliary[2] = D.Tables.OrTable[Counter.FF[1].RS2.Nor2.auxiliary[1],Counter.FF[1].RS2.Nor2.x[2]];
//   Counter.FF[1].RS2.Nor2.y = pre(D.Tables.NotTable[Counter.FF[1].RS2.Nor2.auxiliary[2]]);
//   Counter.FF[1].RS2.TD1.x_delayed = DAE.CAST(T_ENUMERATION, integer(delay(Real(Counter.FF[1].RS2.TD1.x),Counter.FF[1].RS2.TD1.delayTime,Counter.FF[1].RS2.TD1.delayTime)));
//   Counter.FF[1].RS2.TD1.y = if Counter.FF[1].RS2.TD1.delayTime > 0.0 then if time >= Counter.FF[1].RS2.TD1.delayTime then Counter.FF[1].RS2.TD1.x_delayed else Counter.FF[1].RS2.TD1.y0 else pre(Counter.FF[1].RS2.TD1.x);
//   Counter.FF[1].And1.auxiliary[1] = Counter.FF[1].And1.x[1];
//   Counter.FF[1].And1.auxiliary[2] = D.Tables.AndTable[Counter.FF[1].And1.auxiliary[1],Counter.FF[1].And1.x[2]];
//   Counter.FF[1].And1.auxiliary[3] = D.Tables.AndTable[Counter.FF[1].And1.auxiliary[2],Counter.FF[1].And1.x[3]];
//   Counter.FF[1].And1.y = pre(Counter.FF[1].And1.auxiliary[3]);
//   Counter.FF[1].And2.auxiliary[1] = Counter.FF[1].And2.x[1];
//   Counter.FF[1].And2.auxiliary[2] = D.Tables.AndTable[Counter.FF[1].And2.auxiliary[1],Counter.FF[1].And2.x[2]];
//   Counter.FF[1].And2.auxiliary[3] = D.Tables.AndTable[Counter.FF[1].And2.auxiliary[2],Counter.FF[1].And2.x[3]];
//   Counter.FF[1].And2.y = pre(Counter.FF[1].And2.auxiliary[3]);
//   Counter.FF[1].And3.auxiliary[1] = Counter.FF[1].And3.x[1];
//   Counter.FF[1].And3.auxiliary[2] = D.Tables.AndTable[Counter.FF[1].And3.auxiliary[1],Counter.FF[1].And3.x[2]];
//   Counter.FF[1].And3.y = pre(Counter.FF[1].And3.auxiliary[2]);
//   Counter.FF[1].And4.auxiliary[1] = Counter.FF[1].And4.x[1];
//   Counter.FF[1].And4.auxiliary[2] = D.Tables.AndTable[Counter.FF[1].And4.auxiliary[1],Counter.FF[1].And4.x[2]];
//   Counter.FF[1].And4.y = pre(Counter.FF[1].And4.auxiliary[2]);
//   Counter.FF[1].Not1.auxiliary = D.Tables.NotTable[Counter.FF[1].Not1.x];
//   Counter.FF[1].Not1.y = pre(Counter.FF[1].Not1.auxiliary);
//   Counter.FF[2].RS1.Nor1.auxiliary[1] = Counter.FF[2].RS1.Nor1.x[1];
//   Counter.FF[2].RS1.Nor1.auxiliary[2] = D.Tables.OrTable[Counter.FF[2].RS1.Nor1.auxiliary[1],Counter.FF[2].RS1.Nor1.x[2]];
//   Counter.FF[2].RS1.Nor1.y = pre(D.Tables.NotTable[Counter.FF[2].RS1.Nor1.auxiliary[2]]);
//   Counter.FF[2].RS1.Nor2.auxiliary[1] = Counter.FF[2].RS1.Nor2.x[1];
//   Counter.FF[2].RS1.Nor2.auxiliary[2] = D.Tables.OrTable[Counter.FF[2].RS1.Nor2.auxiliary[1],Counter.FF[2].RS1.Nor2.x[2]];
//   Counter.FF[2].RS1.Nor2.y = pre(D.Tables.NotTable[Counter.FF[2].RS1.Nor2.auxiliary[2]]);
//   Counter.FF[2].RS1.TD1.x_delayed = DAE.CAST(T_ENUMERATION, integer(delay(Real(Counter.FF[2].RS1.TD1.x),Counter.FF[2].RS1.TD1.delayTime,Counter.FF[2].RS1.TD1.delayTime)));
//   Counter.FF[2].RS1.TD1.y = if Counter.FF[2].RS1.TD1.delayTime > 0.0 then if time >= Counter.FF[2].RS1.TD1.delayTime then Counter.FF[2].RS1.TD1.x_delayed else Counter.FF[2].RS1.TD1.y0 else pre(Counter.FF[2].RS1.TD1.x);
//   Counter.FF[2].RS2.Nor1.auxiliary[1] = Counter.FF[2].RS2.Nor1.x[1];
//   Counter.FF[2].RS2.Nor1.auxiliary[2] = D.Tables.OrTable[Counter.FF[2].RS2.Nor1.auxiliary[1],Counter.FF[2].RS2.Nor1.x[2]];
//   Counter.FF[2].RS2.Nor1.y = pre(D.Tables.NotTable[Counter.FF[2].RS2.Nor1.auxiliary[2]]);
//   Counter.FF[2].RS2.Nor2.auxiliary[1] = Counter.FF[2].RS2.Nor2.x[1];
//   Counter.FF[2].RS2.Nor2.auxiliary[2] = D.Tables.OrTable[Counter.FF[2].RS2.Nor2.auxiliary[1],Counter.FF[2].RS2.Nor2.x[2]];
//   Counter.FF[2].RS2.Nor2.y = pre(D.Tables.NotTable[Counter.FF[2].RS2.Nor2.auxiliary[2]]);
//   Counter.FF[2].RS2.TD1.x_delayed = DAE.CAST(T_ENUMERATION, integer(delay(Real(Counter.FF[2].RS2.TD1.x),Counter.FF[2].RS2.TD1.delayTime,Counter.FF[2].RS2.TD1.delayTime)));
//   Counter.FF[2].RS2.TD1.y = if Counter.FF[2].RS2.TD1.delayTime > 0.0 then if time >= Counter.FF[2].RS2.TD1.delayTime then Counter.FF[2].RS2.TD1.x_delayed else Counter.FF[2].RS2.TD1.y0 else pre(Counter.FF[2].RS2.TD1.x);
//   Counter.FF[2].And1.auxiliary[1] = Counter.FF[2].And1.x[1];
//   Counter.FF[2].And1.auxiliary[2] = D.Tables.AndTable[Counter.FF[2].And1.auxiliary[1],Counter.FF[2].And1.x[2]];
//   Counter.FF[2].And1.auxiliary[3] = D.Tables.AndTable[Counter.FF[2].And1.auxiliary[2],Counter.FF[2].And1.x[3]];
//   Counter.FF[2].And1.y = pre(Counter.FF[2].And1.auxiliary[3]);
//   Counter.FF[2].And2.auxiliary[1] = Counter.FF[2].And2.x[1];
//   Counter.FF[2].And2.auxiliary[2] = D.Tables.AndTable[Counter.FF[2].And2.auxiliary[1],Counter.FF[2].And2.x[2]];
//   Counter.FF[2].And2.auxiliary[3] = D.Tables.AndTable[Counter.FF[2].And2.auxiliary[2],Counter.FF[2].And2.x[3]];
//   Counter.FF[2].And2.y = pre(Counter.FF[2].And2.auxiliary[3]);
//   Counter.FF[2].And3.auxiliary[1] = Counter.FF[2].And3.x[1];
//   Counter.FF[2].And3.auxiliary[2] = D.Tables.AndTable[Counter.FF[2].And3.auxiliary[1],Counter.FF[2].And3.x[2]];
//   Counter.FF[2].And3.y = pre(Counter.FF[2].And3.auxiliary[2]);
//   Counter.FF[2].And4.auxiliary[1] = Counter.FF[2].And4.x[1];
//   Counter.FF[2].And4.auxiliary[2] = D.Tables.AndTable[Counter.FF[2].And4.auxiliary[1],Counter.FF[2].And4.x[2]];
//   Counter.FF[2].And4.y = pre(Counter.FF[2].And4.auxiliary[2]);
//   Counter.FF[2].Not1.auxiliary = D.Tables.NotTable[Counter.FF[2].Not1.x];
//   Counter.FF[2].Not1.y = pre(Counter.FF[2].Not1.auxiliary);
//   Counter.FF[3].RS1.Nor1.auxiliary[1] = Counter.FF[3].RS1.Nor1.x[1];
//   Counter.FF[3].RS1.Nor1.auxiliary[2] = D.Tables.OrTable[Counter.FF[3].RS1.Nor1.auxiliary[1],Counter.FF[3].RS1.Nor1.x[2]];
//   Counter.FF[3].RS1.Nor1.y = pre(D.Tables.NotTable[Counter.FF[3].RS1.Nor1.auxiliary[2]]);
//   Counter.FF[3].RS1.Nor2.auxiliary[1] = Counter.FF[3].RS1.Nor2.x[1];
//   Counter.FF[3].RS1.Nor2.auxiliary[2] = D.Tables.OrTable[Counter.FF[3].RS1.Nor2.auxiliary[1],Counter.FF[3].RS1.Nor2.x[2]];
//   Counter.FF[3].RS1.Nor2.y = pre(D.Tables.NotTable[Counter.FF[3].RS1.Nor2.auxiliary[2]]);
//   Counter.FF[3].RS1.TD1.x_delayed = DAE.CAST(T_ENUMERATION, integer(delay(Real(Counter.FF[3].RS1.TD1.x),Counter.FF[3].RS1.TD1.delayTime,Counter.FF[3].RS1.TD1.delayTime)));
//   Counter.FF[3].RS1.TD1.y = if Counter.FF[3].RS1.TD1.delayTime > 0.0 then if time >= Counter.FF[3].RS1.TD1.delayTime then Counter.FF[3].RS1.TD1.x_delayed else Counter.FF[3].RS1.TD1.y0 else pre(Counter.FF[3].RS1.TD1.x);
//   Counter.FF[3].RS2.Nor1.auxiliary[1] = Counter.FF[3].RS2.Nor1.x[1];
//   Counter.FF[3].RS2.Nor1.auxiliary[2] = D.Tables.OrTable[Counter.FF[3].RS2.Nor1.auxiliary[1],Counter.FF[3].RS2.Nor1.x[2]];
//   Counter.FF[3].RS2.Nor1.y = pre(D.Tables.NotTable[Counter.FF[3].RS2.Nor1.auxiliary[2]]);
//   Counter.FF[3].RS2.Nor2.auxiliary[1] = Counter.FF[3].RS2.Nor2.x[1];
//   Counter.FF[3].RS2.Nor2.auxiliary[2] = D.Tables.OrTable[Counter.FF[3].RS2.Nor2.auxiliary[1],Counter.FF[3].RS2.Nor2.x[2]];
//   Counter.FF[3].RS2.Nor2.y = pre(D.Tables.NotTable[Counter.FF[3].RS2.Nor2.auxiliary[2]]);
//   Counter.FF[3].RS2.TD1.x_delayed = DAE.CAST(T_ENUMERATION, integer(delay(Real(Counter.FF[3].RS2.TD1.x),Counter.FF[3].RS2.TD1.delayTime,Counter.FF[3].RS2.TD1.delayTime)));
//   Counter.FF[3].RS2.TD1.y = if Counter.FF[3].RS2.TD1.delayTime > 0.0 then if time >= Counter.FF[3].RS2.TD1.delayTime then Counter.FF[3].RS2.TD1.x_delayed else Counter.FF[3].RS2.TD1.y0 else pre(Counter.FF[3].RS2.TD1.x);
//   Counter.FF[3].And1.auxiliary[1] = Counter.FF[3].And1.x[1];
//   Counter.FF[3].And1.auxiliary[2] = D.Tables.AndTable[Counter.FF[3].And1.auxiliary[1],Counter.FF[3].And1.x[2]];
//   Counter.FF[3].And1.auxiliary[3] = D.Tables.AndTable[Counter.FF[3].And1.auxiliary[2],Counter.FF[3].And1.x[3]];
//   Counter.FF[3].And1.y = pre(Counter.FF[3].And1.auxiliary[3]);
//   Counter.FF[3].And2.auxiliary[1] = Counter.FF[3].And2.x[1];
//   Counter.FF[3].And2.auxiliary[2] = D.Tables.AndTable[Counter.FF[3].And2.auxiliary[1],Counter.FF[3].And2.x[2]];
//   Counter.FF[3].And2.auxiliary[3] = D.Tables.AndTable[Counter.FF[3].And2.auxiliary[2],Counter.FF[3].And2.x[3]];
//   Counter.FF[3].And2.y = pre(Counter.FF[3].And2.auxiliary[3]);
//   Counter.FF[3].And3.auxiliary[1] = Counter.FF[3].And3.x[1];
//   Counter.FF[3].And3.auxiliary[2] = D.Tables.AndTable[Counter.FF[3].And3.auxiliary[1],Counter.FF[3].And3.x[2]];
//   Counter.FF[3].And3.y = pre(Counter.FF[3].And3.auxiliary[2]);
//   Counter.FF[3].And4.auxiliary[1] = Counter.FF[3].And4.x[1];
//   Counter.FF[3].And4.auxiliary[2] = D.Tables.AndTable[Counter.FF[3].And4.auxiliary[1],Counter.FF[3].And4.x[2]];
//   Counter.FF[3].And4.y = pre(Counter.FF[3].And4.auxiliary[2]);
//   Counter.FF[3].Not1.auxiliary = D.Tables.NotTable[Counter.FF[3].Not1.x];
//   Counter.FF[3].Not1.y = pre(Counter.FF[3].Not1.auxiliary);
//   Counter.FF[4].RS1.Nor1.auxiliary[1] = Counter.FF[4].RS1.Nor1.x[1];
//   Counter.FF[4].RS1.Nor1.auxiliary[2] = D.Tables.OrTable[Counter.FF[4].RS1.Nor1.auxiliary[1],Counter.FF[4].RS1.Nor1.x[2]];
//   Counter.FF[4].RS1.Nor1.y = pre(D.Tables.NotTable[Counter.FF[4].RS1.Nor1.auxiliary[2]]);
//   Counter.FF[4].RS1.Nor2.auxiliary[1] = Counter.FF[4].RS1.Nor2.x[1];
//   Counter.FF[4].RS1.Nor2.auxiliary[2] = D.Tables.OrTable[Counter.FF[4].RS1.Nor2.auxiliary[1],Counter.FF[4].RS1.Nor2.x[2]];
//   Counter.FF[4].RS1.Nor2.y = pre(D.Tables.NotTable[Counter.FF[4].RS1.Nor2.auxiliary[2]]);
//   Counter.FF[4].RS1.TD1.x_delayed = DAE.CAST(T_ENUMERATION, integer(delay(Real(Counter.FF[4].RS1.TD1.x),Counter.FF[4].RS1.TD1.delayTime,Counter.FF[4].RS1.TD1.delayTime)));
//   Counter.FF[4].RS1.TD1.y = if Counter.FF[4].RS1.TD1.delayTime > 0.0 then if time >= Counter.FF[4].RS1.TD1.delayTime then Counter.FF[4].RS1.TD1.x_delayed else Counter.FF[4].RS1.TD1.y0 else pre(Counter.FF[4].RS1.TD1.x);
//   Counter.FF[4].RS2.Nor1.auxiliary[1] = Counter.FF[4].RS2.Nor1.x[1];
//   Counter.FF[4].RS2.Nor1.auxiliary[2] = D.Tables.OrTable[Counter.FF[4].RS2.Nor1.auxiliary[1],Counter.FF[4].RS2.Nor1.x[2]];
//   Counter.FF[4].RS2.Nor1.y = pre(D.Tables.NotTable[Counter.FF[4].RS2.Nor1.auxiliary[2]]);
//   Counter.FF[4].RS2.Nor2.auxiliary[1] = Counter.FF[4].RS2.Nor2.x[1];
//   Counter.FF[4].RS2.Nor2.auxiliary[2] = D.Tables.OrTable[Counter.FF[4].RS2.Nor2.auxiliary[1],Counter.FF[4].RS2.Nor2.x[2]];
//   Counter.FF[4].RS2.Nor2.y = pre(D.Tables.NotTable[Counter.FF[4].RS2.Nor2.auxiliary[2]]);
//   Counter.FF[4].RS2.TD1.x_delayed = DAE.CAST(T_ENUMERATION, integer(delay(Real(Counter.FF[4].RS2.TD1.x),Counter.FF[4].RS2.TD1.delayTime,Counter.FF[4].RS2.TD1.delayTime)));
//   Counter.FF[4].RS2.TD1.y = if Counter.FF[4].RS2.TD1.delayTime > 0.0 then if time >= Counter.FF[4].RS2.TD1.delayTime then Counter.FF[4].RS2.TD1.x_delayed else Counter.FF[4].RS2.TD1.y0 else pre(Counter.FF[4].RS2.TD1.x);
//   Counter.FF[4].And1.auxiliary[1] = Counter.FF[4].And1.x[1];
//   Counter.FF[4].And1.auxiliary[2] = D.Tables.AndTable[Counter.FF[4].And1.auxiliary[1],Counter.FF[4].And1.x[2]];
//   Counter.FF[4].And1.auxiliary[3] = D.Tables.AndTable[Counter.FF[4].And1.auxiliary[2],Counter.FF[4].And1.x[3]];
//   Counter.FF[4].And1.y = pre(Counter.FF[4].And1.auxiliary[3]);
//   Counter.FF[4].And2.auxiliary[1] = Counter.FF[4].And2.x[1];
//   Counter.FF[4].And2.auxiliary[2] = D.Tables.AndTable[Counter.FF[4].And2.auxiliary[1],Counter.FF[4].And2.x[2]];
//   Counter.FF[4].And2.auxiliary[3] = D.Tables.AndTable[Counter.FF[4].And2.auxiliary[2],Counter.FF[4].And2.x[3]];
//   Counter.FF[4].And2.y = pre(Counter.FF[4].And2.auxiliary[3]);
//   Counter.FF[4].And3.auxiliary[1] = Counter.FF[4].And3.x[1];
//   Counter.FF[4].And3.auxiliary[2] = D.Tables.AndTable[Counter.FF[4].And3.auxiliary[1],Counter.FF[4].And3.x[2]];
//   Counter.FF[4].And3.y = pre(Counter.FF[4].And3.auxiliary[2]);
//   Counter.FF[4].And4.auxiliary[1] = Counter.FF[4].And4.x[1];
//   Counter.FF[4].And4.auxiliary[2] = D.Tables.AndTable[Counter.FF[4].And4.auxiliary[1],Counter.FF[4].And4.x[2]];
//   Counter.FF[4].And4.y = pre(Counter.FF[4].And4.auxiliary[2]);
//   Counter.FF[4].Not1.auxiliary = D.Tables.NotTable[Counter.FF[4].Not1.x];
//   Counter.FF[4].Not1.y = pre(Counter.FF[4].Not1.auxiliary);
//   Q0.y[1] = if Q0.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'U' then Q0.value_U else if Q0.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'X' then Q0.value_X else if Q0.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'0' then Q0.value_0 else if Q0.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'1' then Q0.value_1 else if Q0.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'Z' then Q0.value_Z else if Q0.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'W' then Q0.value_W else if Q0.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'L' then Q0.value_L else if Q0.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'H' then Q0.value_H else Q0.value_m;
//   Q1.y[1] = if Q1.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'U' then Q1.value_U else if Q1.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'X' then Q1.value_X else if Q1.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'0' then Q1.value_0 else if Q1.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'1' then Q1.value_1 else if Q1.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'Z' then Q1.value_Z else if Q1.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'W' then Q1.value_W else if Q1.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'L' then Q1.value_L else if Q1.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'H' then Q1.value_H else Q1.value_m;
//   Q2.y[1] = if Q2.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'U' then Q2.value_U else if Q2.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'X' then Q2.value_X else if Q2.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'0' then Q2.value_0 else if Q2.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'1' then Q2.value_1 else if Q2.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'Z' then Q2.value_Z else if Q2.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'W' then Q2.value_W else if Q2.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'L' then Q2.value_L else if Q2.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'H' then Q2.value_H else Q2.value_m;
//   Q3.y[1] = if Q3.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'U' then Q3.value_U else if Q3.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'X' then Q3.value_X else if Q3.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'0' then Q3.value_0 else if Q3.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'1' then Q3.value_1 else if Q3.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'Z' then Q3.value_Z else if Q3.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'W' then Q3.value_W else if Q3.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'L' then Q3.value_L else if Q3.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'H' then Q3.value_H else Q3.value_m;
//   Counter.q[4] = Q3.x[1];
//   Counter.q[3] = Q2.x[1];
//   Counter.q[2] = Q1.x[1];
//   Counter.q[1] = Q0.x[1];
//   Clock.y = Counter.count;
//   Counter.enable = Enable.y;
//   Counter.FF[4].q = Counter.q[4];
//   Counter.FF[3].q = Counter.FF[4].clk;
//   Counter.FF[3].q = Counter.q[3];
//   Counter.FF[1].j = Counter.FF[1].k;
//   Counter.FF[1].j = Counter.FF[2].j;
//   Counter.FF[1].j = Counter.FF[2].k;
//   Counter.FF[1].j = Counter.FF[3].j;
//   Counter.FF[1].j = Counter.FF[3].k;
//   Counter.FF[1].j = Counter.FF[4].j;
//   Counter.FF[1].j = Counter.FF[4].k;
//   Counter.FF[1].j = Counter.enable;
//   Counter.FF[2].q = Counter.FF[3].clk;
//   Counter.FF[2].q = Counter.q[2];
//   Counter.FF[1].q = Counter.FF[2].clk;
//   Counter.FF[1].q = Counter.q[1];
//   Counter.FF[1].clk = Counter.count;
//   Counter.FF[4].And2.x[1] = Counter.FF[4].RS1.q;
//   Counter.FF[4].And2.x[1] = Counter.FF[4].qn;
//   Counter.FF[4].And1.x[3] = Counter.FF[4].RS1.qn;
//   Counter.FF[4].And1.x[3] = Counter.FF[4].q;
//   Counter.FF[4].And1.x[2] = Counter.FF[4].j;
//   Counter.FF[4].And3.x[1] = Counter.FF[4].And4.x[1];
//   Counter.FF[4].And3.x[1] = Counter.FF[4].Not1.y;
//   Counter.FF[4].And1.x[1] = Counter.FF[4].And2.x[3];
//   Counter.FF[4].And1.x[1] = Counter.FF[4].Not1.x;
//   Counter.FF[4].And1.x[1] = Counter.FF[4].clk;
//   Counter.FF[4].And3.x[2] = Counter.FF[4].RS2.q;
//   Counter.FF[4].And4.x[2] = Counter.FF[4].RS2.qn;
//   Counter.FF[4].And3.y = Counter.FF[4].RS1.s;
//   Counter.FF[4].And4.y = Counter.FF[4].RS1.r;
//   Counter.FF[4].And2.x[2] = Counter.FF[4].k;
//   Counter.FF[4].And1.y = Counter.FF[4].RS2.s;
//   Counter.FF[4].And2.y = Counter.FF[4].RS2.r;
//   Counter.FF[4].RS2.Nor1.y = Counter.FF[4].RS2.TD1.x;
//   Counter.FF[4].RS2.Nor1.y = Counter.FF[4].RS2.qn;
//   Counter.FF[4].RS2.Nor2.x[2] = Counter.FF[4].RS2.TD1.y;
//   Counter.FF[4].RS2.Nor1.x[1] = Counter.FF[4].RS2.Nor2.y;
//   Counter.FF[4].RS2.Nor1.x[1] = Counter.FF[4].RS2.q;
//   Counter.FF[4].RS2.Nor2.x[1] = Counter.FF[4].RS2.r;
//   Counter.FF[4].RS2.Nor1.x[2] = Counter.FF[4].RS2.s;
//   Counter.FF[4].RS1.Nor1.y = Counter.FF[4].RS1.TD1.x;
//   Counter.FF[4].RS1.Nor1.y = Counter.FF[4].RS1.qn;
//   Counter.FF[4].RS1.Nor2.x[2] = Counter.FF[4].RS1.TD1.y;
//   Counter.FF[4].RS1.Nor1.x[1] = Counter.FF[4].RS1.Nor2.y;
//   Counter.FF[4].RS1.Nor1.x[1] = Counter.FF[4].RS1.q;
//   Counter.FF[4].RS1.Nor2.x[1] = Counter.FF[4].RS1.r;
//   Counter.FF[4].RS1.Nor1.x[2] = Counter.FF[4].RS1.s;
//   Counter.FF[3].And2.x[1] = Counter.FF[3].RS1.q;
//   Counter.FF[3].And2.x[1] = Counter.FF[3].qn;
//   Counter.FF[3].And1.x[3] = Counter.FF[3].RS1.qn;
//   Counter.FF[3].And1.x[3] = Counter.FF[3].q;
//   Counter.FF[3].And1.x[2] = Counter.FF[3].j;
//   Counter.FF[3].And3.x[1] = Counter.FF[3].And4.x[1];
//   Counter.FF[3].And3.x[1] = Counter.FF[3].Not1.y;
//   Counter.FF[3].And1.x[1] = Counter.FF[3].And2.x[3];
//   Counter.FF[3].And1.x[1] = Counter.FF[3].Not1.x;
//   Counter.FF[3].And1.x[1] = Counter.FF[3].clk;
//   Counter.FF[3].And3.x[2] = Counter.FF[3].RS2.q;
//   Counter.FF[3].And4.x[2] = Counter.FF[3].RS2.qn;
//   Counter.FF[3].And3.y = Counter.FF[3].RS1.s;
//   Counter.FF[3].And4.y = Counter.FF[3].RS1.r;
//   Counter.FF[3].And2.x[2] = Counter.FF[3].k;
//   Counter.FF[3].And1.y = Counter.FF[3].RS2.s;
//   Counter.FF[3].And2.y = Counter.FF[3].RS2.r;
//   Counter.FF[3].RS2.Nor1.y = Counter.FF[3].RS2.TD1.x;
//   Counter.FF[3].RS2.Nor1.y = Counter.FF[3].RS2.qn;
//   Counter.FF[3].RS2.Nor2.x[2] = Counter.FF[3].RS2.TD1.y;
//   Counter.FF[3].RS2.Nor1.x[1] = Counter.FF[3].RS2.Nor2.y;
//   Counter.FF[3].RS2.Nor1.x[1] = Counter.FF[3].RS2.q;
//   Counter.FF[3].RS2.Nor2.x[1] = Counter.FF[3].RS2.r;
//   Counter.FF[3].RS2.Nor1.x[2] = Counter.FF[3].RS2.s;
//   Counter.FF[3].RS1.Nor1.y = Counter.FF[3].RS1.TD1.x;
//   Counter.FF[3].RS1.Nor1.y = Counter.FF[3].RS1.qn;
//   Counter.FF[3].RS1.Nor2.x[2] = Counter.FF[3].RS1.TD1.y;
//   Counter.FF[3].RS1.Nor1.x[1] = Counter.FF[3].RS1.Nor2.y;
//   Counter.FF[3].RS1.Nor1.x[1] = Counter.FF[3].RS1.q;
//   Counter.FF[3].RS1.Nor2.x[1] = Counter.FF[3].RS1.r;
//   Counter.FF[3].RS1.Nor1.x[2] = Counter.FF[3].RS1.s;
//   Counter.FF[2].And2.x[1] = Counter.FF[2].RS1.q;
//   Counter.FF[2].And2.x[1] = Counter.FF[2].qn;
//   Counter.FF[2].And1.x[3] = Counter.FF[2].RS1.qn;
//   Counter.FF[2].And1.x[3] = Counter.FF[2].q;
//   Counter.FF[2].And1.x[2] = Counter.FF[2].j;
//   Counter.FF[2].And3.x[1] = Counter.FF[2].And4.x[1];
//   Counter.FF[2].And3.x[1] = Counter.FF[2].Not1.y;
//   Counter.FF[2].And1.x[1] = Counter.FF[2].And2.x[3];
//   Counter.FF[2].And1.x[1] = Counter.FF[2].Not1.x;
//   Counter.FF[2].And1.x[1] = Counter.FF[2].clk;
//   Counter.FF[2].And3.x[2] = Counter.FF[2].RS2.q;
//   Counter.FF[2].And4.x[2] = Counter.FF[2].RS2.qn;
//   Counter.FF[2].And3.y = Counter.FF[2].RS1.s;
//   Counter.FF[2].And4.y = Counter.FF[2].RS1.r;
//   Counter.FF[2].And2.x[2] = Counter.FF[2].k;
//   Counter.FF[2].And1.y = Counter.FF[2].RS2.s;
//   Counter.FF[2].And2.y = Counter.FF[2].RS2.r;
//   Counter.FF[2].RS2.Nor1.y = Counter.FF[2].RS2.TD1.x;
//   Counter.FF[2].RS2.Nor1.y = Counter.FF[2].RS2.qn;
//   Counter.FF[2].RS2.Nor2.x[2] = Counter.FF[2].RS2.TD1.y;
//   Counter.FF[2].RS2.Nor1.x[1] = Counter.FF[2].RS2.Nor2.y;
//   Counter.FF[2].RS2.Nor1.x[1] = Counter.FF[2].RS2.q;
//   Counter.FF[2].RS2.Nor2.x[1] = Counter.FF[2].RS2.r;
//   Counter.FF[2].RS2.Nor1.x[2] = Counter.FF[2].RS2.s;
//   Counter.FF[2].RS1.Nor1.y = Counter.FF[2].RS1.TD1.x;
//   Counter.FF[2].RS1.Nor1.y = Counter.FF[2].RS1.qn;
//   Counter.FF[2].RS1.Nor2.x[2] = Counter.FF[2].RS1.TD1.y;
//   Counter.FF[2].RS1.Nor1.x[1] = Counter.FF[2].RS1.Nor2.y;
//   Counter.FF[2].RS1.Nor1.x[1] = Counter.FF[2].RS1.q;
//   Counter.FF[2].RS1.Nor2.x[1] = Counter.FF[2].RS1.r;
//   Counter.FF[2].RS1.Nor1.x[2] = Counter.FF[2].RS1.s;
//   Counter.FF[1].And2.x[1] = Counter.FF[1].RS1.q;
//   Counter.FF[1].And2.x[1] = Counter.FF[1].qn;
//   Counter.FF[1].And1.x[3] = Counter.FF[1].RS1.qn;
//   Counter.FF[1].And1.x[3] = Counter.FF[1].q;
//   Counter.FF[1].And1.x[2] = Counter.FF[1].j;
//   Counter.FF[1].And3.x[1] = Counter.FF[1].And4.x[1];
//   Counter.FF[1].And3.x[1] = Counter.FF[1].Not1.y;
//   Counter.FF[1].And1.x[1] = Counter.FF[1].And2.x[3];
//   Counter.FF[1].And1.x[1] = Counter.FF[1].Not1.x;
//   Counter.FF[1].And1.x[1] = Counter.FF[1].clk;
//   Counter.FF[1].And3.x[2] = Counter.FF[1].RS2.q;
//   Counter.FF[1].And4.x[2] = Counter.FF[1].RS2.qn;
//   Counter.FF[1].And3.y = Counter.FF[1].RS1.s;
//   Counter.FF[1].And4.y = Counter.FF[1].RS1.r;
//   Counter.FF[1].And2.x[2] = Counter.FF[1].k;
//   Counter.FF[1].And1.y = Counter.FF[1].RS2.s;
//   Counter.FF[1].And2.y = Counter.FF[1].RS2.r;
//   Counter.FF[1].RS2.Nor1.y = Counter.FF[1].RS2.TD1.x;
//   Counter.FF[1].RS2.Nor1.y = Counter.FF[1].RS2.qn;
//   Counter.FF[1].RS2.Nor2.x[2] = Counter.FF[1].RS2.TD1.y;
//   Counter.FF[1].RS2.Nor1.x[1] = Counter.FF[1].RS2.Nor2.y;
//   Counter.FF[1].RS2.Nor1.x[1] = Counter.FF[1].RS2.q;
//   Counter.FF[1].RS2.Nor2.x[1] = Counter.FF[1].RS2.r;
//   Counter.FF[1].RS2.Nor1.x[2] = Counter.FF[1].RS2.s;
//   Counter.FF[1].RS1.Nor1.y = Counter.FF[1].RS1.TD1.x;
//   Counter.FF[1].RS1.Nor1.y = Counter.FF[1].RS1.qn;
//   Counter.FF[1].RS1.Nor2.x[2] = Counter.FF[1].RS1.TD1.y;
//   Counter.FF[1].RS1.Nor1.x[1] = Counter.FF[1].RS1.Nor2.y;
//   Counter.FF[1].RS1.Nor1.x[1] = Counter.FF[1].RS1.q;
//   Counter.FF[1].RS1.Nor2.x[1] = Counter.FF[1].RS1.r;
//   Counter.FF[1].RS1.Nor1.x[2] = Counter.FF[1].RS1.s;
// algorithm
//   when initial() then
//     Enable.y := Enable.before;
//   end when;
//   if time >= Enable.stepTime then
//     Enable.y := Enable.after;
//   else
//     Enable.y := Enable.before;
//   end if;
//   when sample(Clock.startTime,Clock.period) then
//     Clock.t_i := time;
//   end when;
//   Clock.y := if  NOT time >= Clock.startTime OR time >= Clock.t_i + Clock.t_width then Modelica.Electrical.Digital.Interfaces.Logic.'0' else Modelica.Electrical.Digital.Interfaces.Logic.'1';
// end Modelica.Electrical.Digital.Examples.Counter;
// "
// "[Digital.mo:646:7-647:51:writable] Warning: Component Clock has the same name as its type Modelica.Electrical.Digital.Examples.Counter.D.Sources.Clock.
// 	This is forbidden by Modelica specification and may lead to lookup errors.
// [Digital.mo:648:7-650:28:writable] Warning: Component Counter has the same name as its type Modelica.Electrical.Digital.Examples.Counter.D.Examples.Utilities.Counter.
// 	This is forbidden by Modelica specification and may lead to lookup errors.
// "
// "Check of Modelica.Electrical.Digital.Examples.Counter completed successfully.
// 
// [Digital.mo:646:7-647:51:writable] Warning: Component Clock has the same name as its type Modelica.Electrical.Digital.Examples.Counter.D.Sources.Clock.
// 	This is forbidden by Modelica specification and may lead to lookup errors.
// [Digital.mo:648:7-650:28:writable] Warning: Component Counter has the same name as its type Modelica.Electrical.Digital.Examples.Counter.D.Examples.Utilities.Counter.
// 	This is forbidden by Modelica specification and may lead to lookup errors.
// 
// Class Modelica.Electrical.Digital.Examples.Counter has 282 equation(s) and 282 variable(s).
// 178 of these are trivial equation(s).
// "
// ""
// record SimulationResult
//     resultFile = "",
//     messages = "Simulation failed for model: Modelica.Electrical.Digital.Examples.Counter
// [Digital.mo:646:7-647:51:writable] Warning: Component Clock has the same name as its type Modelica.Electrical.Digital.Examples.Counter.D.Sources.Clock.
// 	This is forbidden by Modelica specification and may lead to lookup errors.
// [Digital.mo:648:7-650:28:writable] Warning: Component Counter has the same name as its type Modelica.Electrical.Digital.Examples.Counter.D.Examples.Utilities.Counter.
// 	This is forbidden by Modelica specification and may lead to lookup errors.
// Error: Error building simulator. Buildlog: g++ -I. -o Modelica.Electrical.Digital.Examples.Counter.exe Modelica.Electrical.Digital.Examples.Counter.cpp Modelica.Electrical.Digital.Examples.Counter_functions.cpp -L"../../../../libraries/msl31//Modelica/Electrical"   -lsim -linteractive -I"c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc" -msse2 -mfpmath=sse  -lsendData -lQtNetwork-mingw -lQtCore-mingw -lQtGui-mingw -luuid -lole32 -lws2_32 -L"c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/lib/omc" -lc_runtime -lf2c Modelica.Electrical.Digital.Examples.Counter_records.c

// Modelica.Electrical.Digital.Examples.Counter.cpp: In function `int functionDAE_output()':

// Modelica.Electrical.Digital.Examples.Counter.cpp:3234: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter.cpp:3237: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter.cpp:3237: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3237: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3237: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3237: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3240: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3240: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3240: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3240: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3243: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3243: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3243: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3243: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3244: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3244: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3244: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3244: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3247: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3247: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3247: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3247: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3248: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3248: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3248: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3248: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3249: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3249: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3251: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter.cpp:3251: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3251: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3251: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3251: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3252: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3252: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3272: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3272: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3272: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3272: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3273: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3273: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3275: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3275: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3275: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3275: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3276: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3276: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3345: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3345: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3345: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3345: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3351: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3351: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3351: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3351: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3354: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3354: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3354: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3354: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3357: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3357: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3357: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3357: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3358: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3358: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3358: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3358: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3361: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3361: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3361: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3361: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3362: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3362: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3362: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3362: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3363: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3363: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3365: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3365: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3365: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3365: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3366: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3366: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3386: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3386: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3386: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3386: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3387: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3387: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3389: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3389: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3389: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3389: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3390: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3390: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3459: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3459: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3459: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3459: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3465: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3465: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3465: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3465: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3468: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3468: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3468: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3468: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3471: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3471: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3471: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3471: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3472: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3472: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3472: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3472: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3475: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3475: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3475: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3475: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3476: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3476: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3476: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3476: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3477: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3477: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3479: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3479: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3479: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3479: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3480: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3480: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3500: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3500: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3500: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3500: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3501: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3501: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3503: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3503: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3503: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3503: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3504: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3504: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3573: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3573: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3573: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3573: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3579: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3579: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3579: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3579: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3582: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3582: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3582: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3582: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3585: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3585: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3585: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3585: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3586: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3586: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3586: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3586: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3589: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3589: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3589: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3589: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3590: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3590: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3590: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3590: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3591: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3591: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3593: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3593: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3593: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3593: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3594: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3594: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3614: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3614: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3614: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3614: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3615: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3615: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3617: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3617: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3617: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3617: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3618: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3618: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3687: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3687: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3687: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3687: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp: In function `int function_updateDependents()':

// Modelica.Electrical.Digital.Examples.Counter.cpp:4633: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter.cpp:4636: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter.cpp:4636: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4636: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4636: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4636: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4639: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4639: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4639: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4639: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4642: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4642: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4642: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4642: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4643: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4643: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4643: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4643: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4646: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4646: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4646: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4646: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4647: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4647: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4647: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4647: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4648: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4648: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4650: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter.cpp:4650: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4650: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4650: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4650: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4651: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4651: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4671: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4671: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4671: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4671: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4672: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4672: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4674: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4674: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4674: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4674: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4675: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4675: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4744: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4744: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4744: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4744: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4750: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4750: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4750: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4750: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4753: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4753: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4753: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4753: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4756: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4756: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4756: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4756: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4757: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4757: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4757: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4757: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4760: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4760: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4760: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4760: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4761: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4761: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4761: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4761: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4762: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4762: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4764: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4764: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4764: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4764: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4765: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4765: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4785: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4785: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4785: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4785: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4786: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4786: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4788: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4788: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4788: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4788: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4789: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4789: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4858: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4858: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4858: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4858: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4864: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4864: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4864: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4864: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4867: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4867: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4867: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4867: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4870: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4870: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4870: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4870: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4871: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4871: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4871: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4871: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4874: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4874: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4874: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4874: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4875: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4875: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4875: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4875: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4876: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4876: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4878: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4878: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4878: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4878: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4879: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4879: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4899: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4899: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4899: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4899: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4900: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4900: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4902: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4902: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4902: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4902: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4903: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4903: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4972: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4972: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4972: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4972: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4978: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4978: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4978: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4978: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4981: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4981: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4981: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4981: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4984: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4984: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4984: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4984: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4985: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4985: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4985: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4985: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4988: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4988: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4988: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4988: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4989: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4989: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4989: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4989: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4990: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4990: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4992: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4992: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4992: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4992: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4993: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4993: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5013: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5013: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5013: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5013: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5014: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5014: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5016: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5016: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5016: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5016: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5017: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5017: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5086: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5086: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5086: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5086: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp: In function `int initial_residual()':

// Modelica.Electrical.Digital.Examples.Counter.cpp:5359: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter.cpp:5359: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5359: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5359: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5359: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5360: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter.cpp:5360: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5360: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5362: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5362: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5362: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5362: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5363: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5363: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5381: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5381: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5381: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5381: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5382: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5382: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5384: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5384: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5384: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5384: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5385: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5385: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5403: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter.cpp:5403: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5403: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5403: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5403: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5404: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5404: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5404: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5404: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5407: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5407: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5407: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5407: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5408: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5408: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5408: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5408: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5411: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5411: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5411: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5411: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5414: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5414: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5414: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5414: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5420: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5420: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5420: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5420: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5421: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5421: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5423: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5423: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5423: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5423: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5424: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5424: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5442: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5442: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5442: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5442: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5443: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5443: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5445: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5445: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5445: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5445: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5446: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5446: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5464: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5464: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5464: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5464: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5465: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5465: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5465: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5465: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5468: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5468: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5468: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5468: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5469: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5469: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5469: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5469: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5472: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5472: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5472: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5472: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5475: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5475: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5475: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5475: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5481: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5481: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5481: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5481: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5482: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5482: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5484: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5484: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5484: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5484: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5485: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5485: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5503: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5503: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5503: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5503: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5504: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5504: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5506: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5506: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5506: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5506: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5507: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5507: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5525: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5525: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5525: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5525: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5526: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5526: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5526: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5526: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5529: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5529: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5529: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5529: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5530: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5530: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5530: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5530: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5533: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5533: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5533: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5533: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5536: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5536: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5536: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5536: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5542: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5542: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5542: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5542: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5543: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5543: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5545: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5545: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5545: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5545: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5546: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5546: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5564: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5564: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5564: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5564: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5565: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5565: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5567: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5567: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5567: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5567: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5568: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5568: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5586: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5586: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5586: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5586: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5587: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5587: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5587: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5587: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5590: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5590: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5590: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5590: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5591: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5591: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5591: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5591: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5594: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5594: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5594: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5594: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5597: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5597: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5597: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5597: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp: In function `int functionAlgebraics()':

// Modelica.Electrical.Digital.Examples.Counter.cpp:6306: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter.cpp:6309: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter.cpp:6309: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6309: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6309: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6309: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6312: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6312: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6312: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6312: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6315: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6315: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6315: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6315: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6316: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6316: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6316: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6316: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6319: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6319: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6319: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6319: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6320: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6320: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6320: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6320: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6321: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6321: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6323: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter.cpp:6323: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6323: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6323: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6323: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6324: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6324: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6344: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6344: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6344: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6344: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6345: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6345: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6347: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6347: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6347: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6347: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6348: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6348: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6417: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6417: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6417: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6417: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6423: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6423: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6423: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6423: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6426: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6426: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6426: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6426: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6429: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6429: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6429: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6429: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6430: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6430: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6430: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6430: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6433: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6433: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6433: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6433: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6434: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6434: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6434: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6434: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6435: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6435: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6437: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6437: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6437: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6437: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6438: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6438: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6458: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6458: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6458: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6458: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6459: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6459: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6461: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6461: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6461: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6461: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6462: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6462: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6531: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6531: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6531: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6531: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6537: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6537: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6537: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6537: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6540: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6540: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6540: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6540: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6543: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6543: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6543: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6543: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6544: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6544: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6544: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6544: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6547: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6547: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6547: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6547: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6548: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6548: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6548: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6548: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6549: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6549: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6551: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6551: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6551: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6551: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6552: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6552: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6572: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6572: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6572: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6572: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6573: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6573: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6575: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6575: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6575: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6575: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6576: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6576: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6645: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6645: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6645: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6645: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6651: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6651: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6651: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6651: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6654: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6654: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6654: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6654: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6657: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6657: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6657: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6657: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6658: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6658: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6658: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6658: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6661: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6661: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6661: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6661: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6662: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6662: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6662: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6662: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6663: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6663: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6665: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6665: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6665: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6665: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6666: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6666: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6686: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6686: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6686: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6686: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6687: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6687: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6689: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6689: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6689: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6689: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6690: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6690: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6759: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6759: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6759: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6759: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp: In function `int functionDAE(int&)':

// Modelica.Electrical.Digital.Examples.Counter.cpp:7181: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter.cpp:7184: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter.cpp:7184: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7184: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7184: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7184: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7187: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7187: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7187: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7187: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7190: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7190: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7190: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7190: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7191: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7191: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7191: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7191: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7194: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7194: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7194: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7194: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7195: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7195: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7195: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7195: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7196: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7196: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7198: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter.cpp:7198: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7198: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7198: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7198: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7199: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7199: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7219: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7219: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7219: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7219: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7220: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7220: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7222: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7222: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7222: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7222: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7223: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7223: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7292: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7292: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7292: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7292: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7298: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7298: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7298: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7298: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7301: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7301: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7301: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7301: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7304: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7304: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7304: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7304: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7305: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7305: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7305: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7305: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7308: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7308: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7308: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7308: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7309: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7309: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7309: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7309: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7310: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7310: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7312: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7312: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7312: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7312: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7313: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7313: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7333: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7333: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7333: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7333: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7334: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7334: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7336: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7336: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7336: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7336: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7337: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7337: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7406: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7406: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7406: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7406: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7412: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7412: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7412: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7412: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7415: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7415: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7415: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7415: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7418: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7418: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7418: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7418: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7419: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7419: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7419: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7419: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7422: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7422: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7422: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7422: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7423: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7423: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7423: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7423: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7424: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7424: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7426: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7426: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7426: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7426: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7427: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7427: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7447: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7447: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7447: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7447: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7448: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7448: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7450: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7450: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7450: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7450: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7451: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7451: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7520: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7520: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7520: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7520: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7526: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7526: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7526: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7526: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7529: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7529: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7529: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7529: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7532: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7532: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7532: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7532: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7533: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7533: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7533: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7533: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7536: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7536: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7536: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7536: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7537: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7537: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7537: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7537: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7538: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7538: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7540: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7540: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7540: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7540: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7541: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7541: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7561: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7561: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7561: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7561: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7562: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7562: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7564: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7564: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7564: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7564: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7565: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7565: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7634: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7634: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7634: error: non-lvalue in unary `&'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7634: error: non-lvalue in unary `&'

// mingw32-make: *** [Modelica.Electrical.Digital.Examples.Counter] Error 1

// 
// Error: Error building simulator. Buildlog: command g++ not found. Check $OPENMODELICAHOME
// Error: Error building simulator. Buildlog: command "c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/share/omc/scripts/Compile" not found. Check $OPENMODELICAHOME
// "
// end SimulationResult;
// ""
// 0
// endResult
