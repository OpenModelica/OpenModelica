// name:     Modelica.Electrical.Spice3.Examples.Spice3BenchmarkFourBitBinaryAdder
// keywords: simulation MSL Examples
// status: correct
// cflags: -d=-newInst
//
// Simulation Results
// Modelica Standard Library
//

runScript("../common/ModelTestingDefaults.mos"); getErrorString();

stopTime := 1e-9;
modelTestingType := OpenModelicaModelTesting.Kind.VerifiedSimulation;
diffAlgorithm := OpenModelicaModelTesting.DiffAlgorithm.diffSimulationResults;
modelName := $TypeName(Modelica.Electrical.Spice3.Examples.Spice3BenchmarkFourBitBinaryAdder);
timeout := 600 "Need a little more time for this test...";
GC_expand_hp(1000*1024*1024); // Help 4-bit a little
compareVars :=
{
   "X1.X1.X1.X1.Q1.vbe",
   "X1.X1.X1.X1.Q2.vbc",
   "X1.X1.X1.X1.Q2.vbe",
   "X1.X1.X1.X1.Q3.vbc",
   "X1.X1.X1.X1.Q3.vbe",
   "X1.X1.X1.X1.Q4.vbc",
   "X1.X1.X1.X1.Q4.vbe",
   "X1.X1.X1.X1.Q5.vbc",
   "X1.X1.X1.X1.Q5.vbe",
   "X1.X1.X1.X2.Q1.vbc",
   "X1.X1.X1.X2.Q1.vbe",
   "X1.X1.X1.X2.Q2.vbe",
   "X1.X1.X1.X2.Q3.vbc",
   "X1.X1.X1.X2.Q3.vbe",
   "X1.X1.X1.X2.Q4.vbc",
   "X1.X1.X1.X2.Q4.vbe",
   "X1.X1.X1.X2.Q5.vbc",
   "X1.X1.X1.X2.Q5.vbe",
   "X1.X1.X2.X3.Q1.vbc",
   "X1.X1.X2.X3.Q1.vbe",
   "X1.X1.X2.X3.Q2.vbe",
   "X1.X1.X2.X3.Q3.vbc",
   "X1.X1.X2.X3.Q3.vbe",
   "X1.X1.X2.X3.Q4.vbc",
   "X1.X1.X2.X3.Q4.vbe",
   "X1.X1.X2.X3.Q5.vbe",
   "X1.X1.X2.X4.Q1.vbc",
   "X1.X1.X2.X4.Q1.vbe",
   "X1.X1.X2.X4.Q2.vbc",
   "X1.X1.X2.X4.Q2.vbe",
   "X1.X1.X2.X4.Q3.vbc",
   "X1.X1.X2.X4.Q3.vbe",
   "X1.X1.X2.X4.Q4.vbc",
   "X1.X1.X2.X4.Q4.vbe",
   "X1.X1.X2.X4.Q5.vbc",
   "X1.X1.X2.X4.Q5.vbe",
   "X1.X2.X2.X9.Q1.vbc",
   "X1.X2.X2.X9.Q1.vbe",
   "X1.X2.X2.X9.Q2.vbc",
   "X1.X2.X2.X9.Q2.vbe",
   "X1.X2.X2.X9.Q3.vbc",
   "X1.X2.X2.X9.Q3.vbe",
   "X1.X2.X2.X9.Q4.vbc",
   "X1.X2.X2.X9.Q4.vbe",
   "X1.X2.X2.X9.Q5.vbc",
   "X1.X2.X2.X9.Q5.vbe"
};

runScript(modelTesting);getErrorString();

// Result:
// "true
// "
// ""
// 1e-09
// OpenModelicaModelTesting.Kind.VerifiedSimulation
// OpenModelicaModelTesting.DiffAlgorithm.diffSimulationResults
// Modelica.Electrical.Spice3.Examples.Spice3BenchmarkFourBitBinaryAdder
// 600
// true
// {"X1.X1.X1.X1.Q1.vbe","X1.X1.X1.X1.Q2.vbc","X1.X1.X1.X1.Q2.vbe","X1.X1.X1.X1.Q3.vbc","X1.X1.X1.X1.Q3.vbe","X1.X1.X1.X1.Q4.vbc","X1.X1.X1.X1.Q4.vbe","X1.X1.X1.X1.Q5.vbc","X1.X1.X1.X1.Q5.vbe","X1.X1.X1.X2.Q1.vbc","X1.X1.X1.X2.Q1.vbe","X1.X1.X1.X2.Q2.vbe","X1.X1.X1.X2.Q3.vbc","X1.X1.X1.X2.Q3.vbe","X1.X1.X1.X2.Q4.vbc","X1.X1.X1.X2.Q4.vbe","X1.X1.X1.X2.Q5.vbc","X1.X1.X1.X2.Q5.vbe","X1.X1.X2.X3.Q1.vbc","X1.X1.X2.X3.Q1.vbe","X1.X1.X2.X3.Q2.vbe","X1.X1.X2.X3.Q3.vbc","X1.X1.X2.X3.Q3.vbe","X1.X1.X2.X3.Q4.vbc","X1.X1.X2.X3.Q4.vbe","X1.X1.X2.X3.Q5.vbe","X1.X1.X2.X4.Q1.vbc","X1.X1.X2.X4.Q1.vbe","X1.X1.X2.X4.Q2.vbc","X1.X1.X2.X4.Q2.vbe","X1.X1.X2.X4.Q3.vbc","X1.X1.X2.X4.Q3.vbe","X1.X1.X2.X4.Q4.vbc","X1.X1.X2.X4.Q4.vbe","X1.X1.X2.X4.Q5.vbc","X1.X1.X2.X4.Q5.vbe","X1.X2.X2.X9.Q1.vbc","X1.X2.X2.X9.Q1.vbe","X1.X2.X2.X9.Q2.vbc","X1.X2.X2.X9.Q2.vbe","X1.X2.X2.X9.Q3.vbc","X1.X2.X2.X9.Q3.vbe","X1.X2.X2.X9.Q4.vbc","X1.X2.X2.X9.Q4.vbe","X1.X2.X2.X9.Q5.vbc","X1.X2.X2.X9.Q5.vbe"}
// Simulation options: startTime = 0.0, stopTime = 1e-09, numberOfIntervals = 999, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'Modelica.Electrical.Spice3.Examples.Spice3BenchmarkFourBitBinaryAdder', options = '', outputFormat = 'mat', variableFilter = 'time|X1.X1.X1.X1.Q1.vbe|X1.X1.X1.X1.Q2.vbc|X1.X1.X1.X1.Q2.vbe|X1.X1.X1.X1.Q3.vbc|X1.X1.X1.X1.Q3.vbe|X1.X1.X1.X1.Q4.vbc|X1.X1.X1.X1.Q4.vbe|X1.X1.X1.X1.Q5.vbc|X1.X1.X1.X1.Q5.vbe|X1.X1.X1.X2.Q1.vbc|X1.X1.X1.X2.Q1.vbe|X1.X1.X1.X2.Q2.vbe|X1.X1.X1.X2.Q3.vbc|X1.X1.X1.X2.Q3.vbe|X1.X1.X1.X2.Q4.vbc|X1.X1.X1.X2.Q4.vbe|X1.X1.X1.X2.Q5.vbc|X1.X1.X1.X2.Q5.vbe|X1.X1.X2.X3.Q1.vbc|X1.X1.X2.X3.Q1.vbe|X1.X1.X2.X3.Q2.vbe|X1.X1.X2.X3.Q3.vbc|X1.X1.X2.X3.Q3.vbe|X1.X1.X2.X3.Q4.vbc|X1.X1.X2.X3.Q4.vbe|X1.X1.X2.X3.Q5.vbe|X1.X1.X2.X4.Q1.vbc|X1.X1.X2.X4.Q1.vbe|X1.X1.X2.X4.Q2.vbc|X1.X1.X2.X4.Q2.vbe|X1.X1.X2.X4.Q3.vbc|X1.X1.X2.X4.Q3.vbe|X1.X1.X2.X4.Q4.vbc|X1.X1.X2.X4.Q4.vbe|X1.X1.X2.X4.Q5.vbc|X1.X1.X2.X4.Q5.vbe|X1.X2.X2.X9.Q1.vbc|X1.X2.X2.X9.Q1.vbe|X1.X2.X2.X9.Q2.vbc|X1.X2.X2.X9.Q2.vbe|X1.X2.X2.X9.Q3.vbc|X1.X2.X2.X9.Q3.vbe|X1.X2.X2.X9.Q4.vbc|X1.X2.X2.X9.Q4.vbe|X1.X2.X2.X9.Q5.vbc|X1.X2.X2.X9.Q5.vbe', cflags = '', simflags = ' -abortSlowSimulation -alarm=360 -emit_protected'
// Result file: Modelica.Electrical.Spice3.Examples.Spice3BenchmarkFourBitBinaryAdder_res.mat
// Messages: stdout            | info    | Using sparse solver for linear system 12,
// |                 | |       | because density of 0.175 remains under threshold of 0.200 or size of 24 exceeds threshold of 201.
// |                 | |       | The maximum density and the minimal system size for using sparse solvers can be specified
// |                 | |       | using the runtime flags '<-lssMaxDensity=value>' and '<-lssMinSize=value>'.
// stdout            | info    | Using sparse solver for linear system 25,
// |                 | |       | because density of 0.179 remains under threshold of 0.200 or size of 26 exceeds threshold of 201.
// |                 | |       | The maximum density and the minimal system size for using sparse solvers can be specified
// |                 | |       | using the runtime flags '<-lssMaxDensity=value>' and '<-lssMinSize=value>'.
// stdout            | info    | Using sparse solver for linear system 38,
// |                 | |       | because density of 0.179 remains under threshold of 0.200 or size of 26 exceeds threshold of 201.
// |                 | |       | The maximum density and the minimal system size for using sparse solvers can be specified
// |                 | |       | using the runtime flags '<-lssMaxDensity=value>' and '<-lssMinSize=value>'.
// stdout            | info    | Using sparse solver for linear system 51,
// |                 | |       | because density of 0.186 remains under threshold of 0.200 or size of 26 exceeds threshold of 201.
// |                 | |       | The maximum density and the minimal system size for using sparse solvers can be specified
// |                 | |       | using the runtime flags '<-lssMaxDensity=value>' and '<-lssMinSize=value>'.
// stdout            | info    | Using sparse solver for linear system 75,
// |                 | |       | because density of 0.182 remains under threshold of 0.200 or size of 30 exceeds threshold of 201.
// |                 | |       | The maximum density and the minimal system size for using sparse solvers can be specified
// |                 | |       | using the runtime flags '<-lssMaxDensity=value>' and '<-lssMinSize=value>'.
// stdout            | info    | Using sparse solver for linear system 87,
// |                 | |       | because density of 0.162 remains under threshold of 0.200 or size of 30 exceeds threshold of 201.
// |                 | |       | The maximum density and the minimal system size for using sparse solvers can be specified
// |                 | |       | using the runtime flags '<-lssMaxDensity=value>' and '<-lssMinSize=value>'.
// stdout            | info    | Using sparse solver for linear system 97,
// |                 | |       | because density of 0.173 remains under threshold of 0.200 or size of 30 exceeds threshold of 201.
// |                 | |       | The maximum density and the minimal system size for using sparse solvers can be specified
// |                 | |       | using the runtime flags '<-lssMaxDensity=value>' and '<-lssMinSize=value>'.
// stdout            | info    | Using sparse solver for linear system 102,
// |                 | |       | because density of 0.168 remains under threshold of 0.200 or size of 28 exceeds threshold of 201.
// |                 | |       | The maximum density and the minimal system size for using sparse solvers can be specified
// |                 | |       | using the runtime flags '<-lssMaxDensity=value>' and '<-lssMinSize=value>'.
// LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
//
// Files Equal!
// "true
// "
// ""
// endResult
