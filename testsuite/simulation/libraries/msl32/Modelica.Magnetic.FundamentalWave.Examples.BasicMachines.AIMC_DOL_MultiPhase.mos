// name:     Modelica.Magnetic.FundamentalWave.Examples.BasicMachines.AIMC_DOL_MultiPhase
// keywords: simulation MSL Examples
// status: correct
// cflags: -d=-newInst
//
// Simulation Results
// Modelica Standard Library
//

runScript("../common/ModelTestingDefaults.mos"); getErrorString();

modelTestingType := OpenModelicaModelTesting.Kind.VerifiedSimulation;
modelName := $TypeName(Modelica.Magnetic.FundamentalWave.Examples.BasicMachines.AIMC_DOL_MultiPhase);
compareVars :=
{
   "aimc3.stator.electroMagneticConverter.singlePhaseElectroMagneticConverter[1].Phi.re",
   "aimc3.stator.electroMagneticConverter.singlePhaseElectroMagneticConverter[2].Phi.im",
   "aimc3.stator.strayReluctance.port_p.Phi.im",
   "aimc3.stator.strayReluctance.port_p.Phi.re",
   "aimcM.rotorCage.strayInductor.inductor[4].i",
   "aimcM.rotorCage.strayInductor.inductor[5].i",
   "aimcM.stator.electroMagneticConverter.singlePhaseElectroMagneticConverter[1].Phi.re",
   "aimcM.stator.electroMagneticConverter.singlePhaseElectroMagneticConverter[2].Phi.im",
   "aimcM.stator.strayReluctance.port_p.Phi.im",
   "aimcM.stator.strayReluctance.port_p.Phi.re",
   "loadInertia3.phi",
   "loadInertia3.w",
   "loadInertiaM.phi",
   "loadInertiaM.w"
};

runScript(modelTesting);getErrorString();

// Result:
// "true
// "
// ""
// OpenModelicaModelTesting.Kind.VerifiedSimulation
// Modelica.Magnetic.FundamentalWave.Examples.BasicMachines.AIMC_DOL_MultiPhase
// {"aimc3.stator.electroMagneticConverter.singlePhaseElectroMagneticConverter[1].Phi.re","aimc3.stator.electroMagneticConverter.singlePhaseElectroMagneticConverter[2].Phi.im","aimc3.stator.strayReluctance.port_p.Phi.im","aimc3.stator.strayReluctance.port_p.Phi.re","aimcM.rotorCage.strayInductor.inductor[4].i","aimcM.rotorCage.strayInductor.inductor[5].i","aimcM.stator.electroMagneticConverter.singlePhaseElectroMagneticConverter[1].Phi.re","aimcM.stator.electroMagneticConverter.singlePhaseElectroMagneticConverter[2].Phi.im","aimcM.stator.strayReluctance.port_p.Phi.im","aimcM.stator.strayReluctance.port_p.Phi.re","loadInertia3.phi","loadInertia3.w","loadInertiaM.phi","loadInertiaM.w"}
// Simulation options: startTime = 0.0, stopTime = 1.5, numberOfIntervals = 7500, tolerance = 1e-05, method = 'dassl', fileNamePrefix = 'Modelica.Magnetic.FundamentalWave.Examples.BasicMachines.AIMC_DOL_MultiPhase', options = '', outputFormat = 'mat', variableFilter = 'time|aimc3.stator.electroMagneticConverter.singlePhaseElectroMagneticConverter.1..Phi.re|aimc3.stator.electroMagneticConverter.singlePhaseElectroMagneticConverter.2..Phi.im|aimc3.stator.strayReluctance.port_p.Phi.im|aimc3.stator.strayReluctance.port_p.Phi.re|aimcM.rotorCage.strayInductor.inductor.4..i|aimcM.rotorCage.strayInductor.inductor.5..i|aimcM.stator.electroMagneticConverter.singlePhaseElectroMagneticConverter.1..Phi.re|aimcM.stator.electroMagneticConverter.singlePhaseElectroMagneticConverter.2..Phi.im|aimcM.stator.strayReluctance.port_p.Phi.im|aimcM.stator.strayReluctance.port_p.Phi.re|loadInertia3.phi|loadInertia3.w|loadInertiaM.phi|loadInertiaM.w', cflags = '', simflags = ' -abortSlowSimulation -alarm=360 -emit_protected'
// Result file: Modelica.Magnetic.FundamentalWave.Examples.BasicMachines.AIMC_DOL_MultiPhase_res.mat
// Messages: LOG_SUCCESS       | info    | The initialization finished successfully without homotopy method.
// LOG_SUCCESS       | info    | The simulation finished successfully.
//
// Files Equal!
// "true
// "
// ""
// endResult
