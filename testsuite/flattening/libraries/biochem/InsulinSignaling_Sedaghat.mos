//name:         InsulinSignaling_Sedaghat
//keyword:      instantiating msl221
//status:       correct
// cflags: -d=-newInst
//
// instantiate example
//

loadModel(BioChem); getErrorString();
instantiateModel(BioChem.Examples.InsulinSignaling_Sedaghat); getErrorString();
checkModel(BioChem.Examples.InsulinSignaling_Sedaghat); getErrorString();

// Result:
// true
// ""
// "class BioChem.Examples.InsulinSignaling_Sedaghat \"Metabolic insulin signaling pathway in rat adipocytes\"
//   Real V(quantity = \"Volume\", unit = \"l\", start = 1.0, stateSelect = StateSelect.prefer) \"Compartment volume\";
//   Real irPMembIns.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0, start = 0.0, stateSelect = StateSelect.prefer) \"Current concentration of substance (mM)\";
//   Real irPMembIns.rNet(quantity = \"Molar flow rate\", unit = \"mol/s\") \"Net flow rate of substance into the node\";
//   Real irPMembIns.n(quantity = \"AmountOfSubstance\", unit = \"mol\", min = 0.0, stateSelect = StateSelect.prefer) \"Number of moles of substance in pool (mol)\";
//   Real irPMembIns.n1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real irPMembIns.n1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real irPMembIns.n1.V(quantity = \"Volume\", unit = \"l\");
//   Real uui.rr(quantity = \"Reaction rate\", unit = \"mol/s\") \"Rate of the reaction\";
//   Real uui.s1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real uui.s1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real uui.s1.V(quantity = \"Volume\", unit = \"l\");
//   Real uui.p1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real uui.p1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real uui.p1.V(quantity = \"Volume\", unit = \"l\");
//   Real uui.nS1(quantity = \"Stoichiometric coefficient\", unit = \"1\") = 1.0 \"Stoichiometric coefficient for the substrate\";
//   Real uui.nP1(quantity = \"Stoichiometric coefficient\", unit = \"1\") = 1.0 \"Stoichiometric coefficient for the product\";
//   parameter Real uui.k1(quantity = \"Reaction coefficient\", unit = \"1\") = 41.66666666666666 \"Forwards reaction coefficient for the reaction\";
//   Real irInt.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0, start = 1e-13, stateSelect = StateSelect.prefer) \"Current concentration of substance (mM)\";
//   Real irInt.rNet(quantity = \"Molar flow rate\", unit = \"mol/s\") \"Net flow rate of substance into the node\";
//   Real irInt.n(quantity = \"AmountOfSubstance\", unit = \"mol\", min = 0.0, stateSelect = StateSelect.prefer) \"Number of moles of substance in pool (mol)\";
//   Real irInt.n1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real irInt.n1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real irInt.n1.V(quantity = \"Volume\", unit = \"l\");
//   Real irPIntIns.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0, start = 0.0, stateSelect = StateSelect.prefer) \"Current concentration of substance (mM)\";
//   Real irPIntIns.rNet(quantity = \"Molar flow rate\", unit = \"mol/s\") \"Net flow rate of substance into the node\";
//   Real irPIntIns.n(quantity = \"AmountOfSubstance\", unit = \"mol\", min = 0.0, stateSelect = StateSelect.prefer) \"Number of moles of substance in pool (mol)\";
//   Real irPIntIns.n1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real irPIntIns.n1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real irPIntIns.n1.V(quantity = \"Volume\", unit = \"l\");
//   Real irPInt2Ins.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0, start = 0.0, stateSelect = StateSelect.prefer) \"Current concentration of substance (mM)\";
//   Real irPInt2Ins.rNet(quantity = \"Molar flow rate\", unit = \"mol/s\") \"Net flow rate of substance into the node\";
//   Real irPInt2Ins.n(quantity = \"AmountOfSubstance\", unit = \"mol\", min = 0.0, stateSelect = StateSelect.prefer) \"Number of moles of substance in pool (mol)\";
//   Real irPInt2Ins.n1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real irPInt2Ins.n1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real irPInt2Ins.n1.V(quantity = \"Volume\", unit = \"l\");
//   Real uui2.rr(quantity = \"Reaction rate\", unit = \"mol/s\") \"Rate of the reaction\";
//   Real uui2.s1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real uui2.s1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real uui2.s1.V(quantity = \"Volume\", unit = \"l\");
//   Real uui2.p1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real uui2.p1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real uui2.p1.V(quantity = \"Volume\", unit = \"l\");
//   Real uui2.nS1(quantity = \"Stoichiometric coefficient\", unit = \"1\") = 1.0 \"Stoichiometric coefficient for the substrate\";
//   Real uui2.nP1(quantity = \"Stoichiometric coefficient\", unit = \"1\") = 1.0 \"Stoichiometric coefficient for the product\";
//   parameter Real uui2.k1(quantity = \"Reaction coefficient\", unit = \"1\") = 0.007683333333333334 \"Forwards reaction coefficient for the reaction\";
//   Real bur2.rr(quantity = \"Reaction rate\", unit = \"mol/s\") \"Rate of the reaction\";
//   Real bur2.s1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real bur2.s1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real bur2.s1.V(quantity = \"Volume\", unit = \"l\");
//   Real bur2.s2.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real bur2.s2.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real bur2.s2.V(quantity = \"Volume\", unit = \"l\");
//   Real bur2.p1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real bur2.p1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real bur2.p1.V(quantity = \"Volume\", unit = \"l\");
//   Real bur2.nS1(quantity = \"Stoichiometric coefficient\", unit = \"1\") = 1.0 \"Stoichiometric coefficient for substrate 1\";
//   Real bur2.nS2(quantity = \"Stoichiometric coefficient\", unit = \"1\") = 1.0 \"Stoichiometric coefficient for substrate 2\";
//   Real bur2.nP1(quantity = \"Stoichiometric coefficient\", unit = \"1\") = 1.0 \"Stoichiometric coefficient for the product\";
//   parameter Real bur2.k1(quantity = \"Reaction coefficient\", unit = \"1\") = 1000000.0 \"Forwards reaction coefficient for the reaction\";
//   parameter Real bur2.k2(quantity = \"Reaction coefficient\", unit = \"1\") = 0.3333333333333333 \"Backwards reaction coefficient for the reaction\";
//   Real bur1.rr(quantity = \"Reaction rate\", unit = \"mol/s\") \"Rate of the reaction\";
//   Real bur1.s1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real bur1.s1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real bur1.s1.V(quantity = \"Volume\", unit = \"l\");
//   Real bur1.s2.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real bur1.s2.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real bur1.s2.V(quantity = \"Volume\", unit = \"l\");
//   Real bur1.p1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real bur1.p1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real bur1.p1.V(quantity = \"Volume\", unit = \"l\");
//   Real bur1.nS1(quantity = \"Stoichiometric coefficient\", unit = \"1\") = 1.0 \"Stoichiometric coefficient for substrate 1\";
//   Real bur1.nS2(quantity = \"Stoichiometric coefficient\", unit = \"1\") = 1.0 \"Stoichiometric coefficient for substrate 2\";
//   Real bur1.nP1(quantity = \"Stoichiometric coefficient\", unit = \"1\") = 1.0 \"Stoichiometric coefficient for the product\";
//   parameter Real bur1.k1(quantity = \"Reaction coefficient\", unit = \"1\") = 1000000.0 \"Forwards reaction coefficient for the reaction\";
//   parameter Real bur1.k2(quantity = \"Reaction coefficient\", unit = \"1\") = 0.003333333333333334 \"Backwards reaction coefficient for the reaction\";
//   Real uur5.rr(quantity = \"Reaction rate\", unit = \"mol/s\") \"Rate of the reaction\";
//   Real uur5.s1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real uur5.s1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real uur5.s1.V(quantity = \"Volume\", unit = \"l\");
//   Real uur5.p1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real uur5.p1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real uur5.p1.V(quantity = \"Volume\", unit = \"l\");
//   Real uur5.nS1(quantity = \"Stoichiometric coefficient\", unit = \"1\") = 1.0 \"Stoichiometric coefficient for the substrate\";
//   Real uur5.nP1(quantity = \"Stoichiometric coefficient\", unit = \"1\") = 1.0 \"Stoichiometric coefficient for the product\";
//   parameter Real uur5.k1(quantity = \"Reaction coefficient\", unit = \"1\") = 5.555555555555555e-06 \"Forwards reaction coefficient for the reaction\";
//   parameter Real uur5.k2(quantity = \"Reaction coefficient\", unit = \"1\") = 5e-05 \"Backwards reaction coefficient for the reaction\";
//   Real uur3.rr(quantity = \"Reaction rate\", unit = \"mol/s\") \"Rate of the reaction\";
//   Real uur3.s1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real uur3.s1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real uur3.s1.V(quantity = \"Volume\", unit = \"l\");
//   Real uur3.p1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real uur3.p1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real uur3.p1.V(quantity = \"Volume\", unit = \"l\");
//   Real uur3.nS1(quantity = \"Stoichiometric coefficient\", unit = \"1\") = 1.0 \"Stoichiometric coefficient for the substrate\";
//   Real uur3.nP1(quantity = \"Stoichiometric coefficient\", unit = \"1\") = 1.0 \"Stoichiometric coefficient for the product\";
//   parameter Real uur3.k1(quantity = \"Reaction coefficient\", unit = \"1\") = 3.5e-06 \"Forwards reaction coefficient for the reaction\";
//   parameter Real uur3.k2(quantity = \"Reaction coefficient\", unit = \"1\") = 3.5e-05 \"Backwards reaction coefficient for the reaction\";
//   Real uui1.rr(quantity = \"Reaction rate\", unit = \"mol/s\") \"Rate of the reaction\";
//   Real uui1.s1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real uui1.s1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real uui1.s1.V(quantity = \"Volume\", unit = \"l\");
//   Real uui1.p1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real uui1.p1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real uui1.p1.V(quantity = \"Volume\", unit = \"l\");
//   Real uui1.nS1(quantity = \"Stoichiometric coefficient\", unit = \"1\") = 1.0 \"Stoichiometric coefficient for the substrate\";
//   Real uui1.nP1(quantity = \"Stoichiometric coefficient\", unit = \"1\") = 1.0 \"Stoichiometric coefficient for the product\";
//   parameter Real uui1.k1(quantity = \"Reaction coefficient\", unit = \"1\") = 0.007683333333333334 \"Forwards reaction coefficient for the reaction\";
//   Real uui3.rr(quantity = \"Reaction rate\", unit = \"mol/s\") \"Rate of the reaction\";
//   Real uui3.s1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real uui3.s1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real uui3.s1.V(quantity = \"Volume\", unit = \"l\");
//   Real uui3.p1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real uui3.p1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real uui3.p1.V(quantity = \"Volume\", unit = \"l\");
//   Real uui3.nS1(quantity = \"Stoichiometric coefficient\", unit = \"1\") = 1.0 \"Stoichiometric coefficient for the substrate\";
//   Real uui3.nP1(quantity = \"Stoichiometric coefficient\", unit = \"1\") = 1.0 \"Stoichiometric coefficient for the product\";
//   parameter Real uui3.k1(quantity = \"Reaction coefficient\", unit = \"1\") = 0.003333333333333334 \"Forwards reaction coefficient for the reaction\";
//   Real Insulin.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0, start = 1e-07, stateSelect = StateSelect.prefer) \"Current concentration of substance (mM)\";
//   Real Insulin.rNet(quantity = \"Molar flow rate\", unit = \"mol/s\") \"Net flow rate of substance into the node\";
//   Real Insulin.n(quantity = \"AmountOfSubstance\", unit = \"mol\", min = 0.0, stateSelect = StateSelect.prefer) \"Number of moles of substance in pool (mol)\";
//   Real Insulin.n1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real Insulin.n1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real Insulin.n1.V(quantity = \"Volume\", unit = \"l\");
//   Real uur2.rr(quantity = \"Reaction rate\", unit = \"mol/s\") \"Rate of the reaction\";
//   Real uur2.s1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real uur2.s1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real uur2.s1.V(quantity = \"Volume\", unit = \"l\");
//   Real uur2.p1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real uur2.p1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real uur2.p1.V(quantity = \"Volume\", unit = \"l\");
//   Real uur2.nS1(quantity = \"Stoichiometric coefficient\", unit = \"1\") = 1.0 \"Stoichiometric coefficient for the substrate\";
//   Real uur2.nP1(quantity = \"Stoichiometric coefficient\", unit = \"1\") = 1.0 \"Stoichiometric coefficient for the product\";
//   parameter Real uur2.k1(quantity = \"Reaction coefficient\", unit = \"1\") = 3.5e-06 \"Forwards reaction coefficient for the reaction\";
//   parameter Real uur2.k2(quantity = \"Reaction coefficient\", unit = \"1\") = 3.5e-05 \"Backwards reaction coefficient for the reaction\";
//   Real irMembIns.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0, start = 0.0, stateSelect = StateSelect.prefer) \"Current concentration of substance (mM)\";
//   Real irMembIns.rNet(quantity = \"Molar flow rate\", unit = \"mol/s\") \"Net flow rate of substance into the node\";
//   Real irMembIns.n(quantity = \"AmountOfSubstance\", unit = \"mol\", min = 0.0, stateSelect = StateSelect.prefer) \"Number of moles of substance in pool (mol)\";
//   Real irMembIns.n1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real irMembIns.n1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real irMembIns.n1.V(quantity = \"Volume\", unit = \"l\");
//   Real irMemb.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0, start = 9e-13, stateSelect = StateSelect.prefer) \"Current concentration of substance (mM)\";
//   Real irMemb.rNet(quantity = \"Molar flow rate\", unit = \"mol/s\") \"Net flow rate of substance into the node\";
//   Real irMemb.n(quantity = \"AmountOfSubstance\", unit = \"mol\", min = 0.0, stateSelect = StateSelect.prefer) \"Number of moles of substance in pool (mol)\";
//   Real irMemb.n1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real irMemb.n1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real irMemb.n1.V(quantity = \"Volume\", unit = \"l\");
//   Real irPMemb2Ins.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0, start = 0.0, stateSelect = StateSelect.prefer) \"Current concentration of substance (mM)\";
//   Real irPMemb2Ins.rNet(quantity = \"Molar flow rate\", unit = \"mol/s\") \"Net flow rate of substance into the node\";
//   Real irPMemb2Ins.n(quantity = \"AmountOfSubstance\", unit = \"mol\", min = 0.0, stateSelect = StateSelect.prefer) \"Number of moles of substance in pool (mol)\";
//   Real irPMemb2Ins.n1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real irPMemb2Ins.n1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real irPMemb2Ins.n1.V(quantity = \"Volume\", unit = \"l\");
//   Real sInsulin.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real sInsulin.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   output Real sInsulin.V(quantity = \"Volume\", unit = \"l\");
// equation
//   der(irPMembIns.n) = irPMembIns.rNet;
//   irPMembIns.rNet = irPMembIns.n1.r;
//   irPMembIns.c = irPMembIns.n1.c;
//   V = irPMembIns.n1.V;
//   irPMembIns.c = irPMembIns.n / V;
//   uui.rr = uui.k1 * uui.s1.c ^ uui.nS1 * uui.s1.V;
//   uui.s1.r = uui.nS1 * uui.rr;
//   uui.p1.r = (-uui.nP1) * uui.rr;
//   der(irInt.n) = irInt.rNet;
//   irInt.rNet = irInt.n1.r;
//   irInt.c = irInt.n1.c;
//   V = irInt.n1.V;
//   irInt.c = irInt.n / V;
//   der(irPIntIns.n) = irPIntIns.rNet;
//   irPIntIns.rNet = irPIntIns.n1.r;
//   irPIntIns.c = irPIntIns.n1.c;
//   V = irPIntIns.n1.V;
//   irPIntIns.c = irPIntIns.n / V;
//   der(irPInt2Ins.n) = irPInt2Ins.rNet;
//   irPInt2Ins.rNet = irPInt2Ins.n1.r;
//   irPInt2Ins.c = irPInt2Ins.n1.c;
//   V = irPInt2Ins.n1.V;
//   irPInt2Ins.c = irPInt2Ins.n / V;
//   uui2.rr = uui2.k1 * uui2.s1.c ^ uui2.nS1 * uui2.s1.V;
//   uui2.s1.r = uui2.nS1 * uui2.rr;
//   uui2.p1.r = (-uui2.nP1) * uui2.rr;
//   bur2.rr = bur2.k1 * bur2.s1.c ^ bur2.nS1 * bur2.s2.c ^ bur2.nS2 * bur2.s1.V - bur2.k2 * bur2.p1.c ^ bur2.nP1 * bur2.p1.V;
//   bur2.s1.r = bur2.nS1 * bur2.rr;
//   bur2.s2.r = bur2.nS2 * bur2.rr;
//   bur2.p1.r = (-bur2.nP1) * bur2.rr;
//   bur1.rr = bur1.k1 * bur1.s1.c ^ bur1.nS1 * bur1.s2.c ^ bur1.nS2 * bur1.s1.V - bur1.k2 * bur1.p1.c ^ bur1.nP1 * bur1.p1.V;
//   bur1.s1.r = bur1.nS1 * bur1.rr;
//   bur1.s2.r = bur1.nS2 * bur1.rr;
//   bur1.p1.r = (-bur1.nP1) * bur1.rr;
//   uur5.rr = uur5.k1 * uur5.s1.c ^ uur5.nS1 * uur5.s1.V - uur5.k2 * uur5.p1.c ^ uur5.nP1 * uur5.p1.V;
//   uur5.s1.r = uur5.nS1 * uur5.rr;
//   uur5.p1.r = (-uur5.nP1) * uur5.rr;
//   uur3.rr = uur3.k1 * uur3.s1.c ^ uur3.nS1 * uur3.s1.V - uur3.k2 * uur3.p1.c ^ uur3.nP1 * uur3.p1.V;
//   uur3.s1.r = uur3.nS1 * uur3.rr;
//   uur3.p1.r = (-uur3.nP1) * uur3.rr;
//   uui1.rr = uui1.k1 * uui1.s1.c ^ uui1.nS1 * uui1.s1.V;
//   uui1.s1.r = uui1.nS1 * uui1.rr;
//   uui1.p1.r = (-uui1.nP1) * uui1.rr;
//   uui3.rr = uui3.k1 * uui3.s1.c ^ uui3.nS1 * uui3.s1.V;
//   uui3.s1.r = uui3.nS1 * uui3.rr;
//   uui3.p1.r = (-uui3.nP1) * uui3.rr;
//   der(Insulin.n) = Insulin.rNet;
//   Insulin.rNet = Insulin.n1.r;
//   Insulin.c = Insulin.n1.c;
//   V = Insulin.n1.V;
//   Insulin.c = Insulin.n / V;
//   uur2.rr = uur2.k1 * uur2.s1.c ^ uur2.nS1 * uur2.s1.V - uur2.k2 * uur2.p1.c ^ uur2.nP1 * uur2.p1.V;
//   uur2.s1.r = uur2.nS1 * uur2.rr;
//   uur2.p1.r = (-uur2.nP1) * uur2.rr;
//   der(irMembIns.n) = irMembIns.rNet;
//   irMembIns.rNet = irMembIns.n1.r;
//   irMembIns.c = irMembIns.n1.c;
//   V = irMembIns.n1.V;
//   irMembIns.c = irMembIns.n / V;
//   der(irMemb.n) = irMemb.rNet;
//   irMemb.rNet = irMemb.n1.r;
//   irMemb.c = irMemb.n1.c;
//   V = irMemb.n1.V;
//   irMemb.c = irMemb.n / V;
//   der(irPMemb2Ins.n) = irPMemb2Ins.rNet;
//   irPMemb2Ins.rNet = irPMemb2Ins.n1.r;
//   irPMemb2Ins.c = irPMemb2Ins.n1.c;
//   V = irPMemb2Ins.n1.V;
//   irPMemb2Ins.c = irPMemb2Ins.n / V;
//   der(V) = 0.0 \"Compartment volume is constant\";
//   irPMembIns.n1.r + uui.p1.r + bur2.s2.r + uur2.p1.r = 0.0;
//   uui.s1.r + bur1.p1.r + irMembIns.n1.r = 0.0;
//   irInt.n1.r + uui2.p1.r + uur5.p1.r + uui1.p1.r = 0.0;
//   irPIntIns.n1.r + uui1.s1.r + uui3.s1.r + uur2.s1.r = 0.0;
//   irPInt2Ins.n1.r + uui2.s1.r + uur3.s1.r = 0.0;
//   bur2.s1.r + bur1.s1.r + Insulin.n1.r + (-sInsulin.r) = 0.0;
//   bur2.p1.r + uur3.p1.r + irPMemb2Ins.n1.r = 0.0;
//   bur1.s2.r + uur5.s1.r + uui3.p1.r + irMemb.n1.r = 0.0;
//   sInsulin.r = 0.0;
//   Insulin.n1.V = bur1.s1.V;
//   Insulin.n1.V = bur2.s1.V;
//   Insulin.n1.V = sInsulin.V;
//   Insulin.n1.c = bur1.s1.c;
//   Insulin.n1.c = bur2.s1.c;
//   Insulin.n1.c = sInsulin.c;
//   irPInt2Ins.n1.V = uui2.s1.V;
//   irPInt2Ins.n1.V = uur3.s1.V;
//   irPInt2Ins.n1.c = uui2.s1.c;
//   irPInt2Ins.n1.c = uur3.s1.c;
//   irInt.n1.V = uui1.p1.V;
//   irInt.n1.V = uui2.p1.V;
//   irInt.n1.V = uur5.p1.V;
//   irInt.n1.c = uui1.p1.c;
//   irInt.n1.c = uui2.p1.c;
//   irInt.n1.c = uur5.p1.c;
//   bur2.s2.V = irPMembIns.n1.V;
//   bur2.s2.V = uui.p1.V;
//   bur2.s2.V = uur2.p1.V;
//   bur2.s2.c = irPMembIns.n1.c;
//   bur2.s2.c = uui.p1.c;
//   bur2.s2.c = uur2.p1.c;
//   irPIntIns.n1.V = uui1.s1.V;
//   irPIntIns.n1.V = uui3.s1.V;
//   irPIntIns.n1.V = uur2.s1.V;
//   irPIntIns.n1.c = uui1.s1.c;
//   irPIntIns.n1.c = uui3.s1.c;
//   irPIntIns.n1.c = uur2.s1.c;
//   bur1.p1.V = irMembIns.n1.V;
//   bur1.p1.V = uui.s1.V;
//   bur1.p1.c = irMembIns.n1.c;
//   bur1.p1.c = uui.s1.c;
//   bur1.s2.V = irMemb.n1.V;
//   bur1.s2.V = uui3.p1.V;
//   bur1.s2.V = uur5.s1.V;
//   bur1.s2.c = irMemb.n1.c;
//   bur1.s2.c = uui3.p1.c;
//   bur1.s2.c = uur5.s1.c;
//   bur2.p1.V = irPMemb2Ins.n1.V;
//   bur2.p1.V = uur3.p1.V;
//   bur2.p1.c = irPMemb2Ins.n1.c;
//   bur2.p1.c = uur3.p1.c;
// end BioChem.Examples.InsulinSignaling_Sedaghat;
// "
// ""
// "Check of BioChem.Examples.InsulinSignaling_Sedaghat completed successfully.
// Class BioChem.Examples.InsulinSignaling_Sedaghat has 141 equation(s) and 141 variable(s).
// 96 of these are trivial equation(s)."
// ""
// endResult
