//name:         Glycolysis
//keyword:      instantiating msl221
//status:       correct
// cflags: -d=-newInst
//
// instantiate example
//

loadModel(BioChem); getErrorString();

instantiateModel(BioChem.Examples.Glycolysis);
checkModel(BioChem.Examples.Glycolysis);

getErrorString();
// Result:
// true
// ""
// "class BioChem.Examples.Glycolysis \"Glycolysis\"
//   Real V(quantity = \"Volume\", unit = \"l\", start = 1.0, stateSelect = StateSelect.prefer) \"Compartment volume\";
//   Real uui1.rr(quantity = \"Reaction rate\", unit = \"mol/s\") \"Rate of the reaction\";
//   Real uui1.s1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real uui1.s1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real uui1.s1.V(quantity = \"Volume\", unit = \"l\");
//   Real uui1.p1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real uui1.p1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real uui1.p1.V(quantity = \"Volume\", unit = \"l\");
//   Real uui1.nS1(quantity = \"Stoichiometric coefficient\", unit = \"1\") = 1.0 \"Stoichiometric coefficient for the substrate\";
//   Real uui1.nP1(quantity = \"Stoichiometric coefficient\", unit = \"1\") = 1.0 \"Stoichiometric coefficient for the product\";
//   parameter Real uui1.k1(quantity = \"Reaction coefficient\", unit = \"1\") = 1.0 \"Forwards reaction coefficient for the reaction\";
//   Real PEP1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0, start = 0.0, stateSelect = StateSelect.prefer) \"Current concentration of substance (mM)\";
//   Real PEP1.rNet(quantity = \"Molar flow rate\", unit = \"mol/s\") \"Net flow rate of substance into the node\";
//   Real PEP1.n(quantity = \"AmountOfSubstance\", unit = \"mol\", min = 0.0, stateSelect = StateSelect.prefer) \"Number of moles of substance in pool (mol)\";
//   Real PEP1.n1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real PEP1.n1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real PEP1.n1.V(quantity = \"Volume\", unit = \"l\");
//   Real uui4.rr(quantity = \"Reaction rate\", unit = \"mol/s\") \"Rate of the reaction\";
//   Real uui4.s1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real uui4.s1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real uui4.s1.V(quantity = \"Volume\", unit = \"l\");
//   Real uui4.p1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real uui4.p1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real uui4.p1.V(quantity = \"Volume\", unit = \"l\");
//   Real uui4.nS1(quantity = \"Stoichiometric coefficient\", unit = \"1\") = 1.0 \"Stoichiometric coefficient for the substrate\";
//   Real uui4.nP1(quantity = \"Stoichiometric coefficient\", unit = \"1\") = 1.0 \"Stoichiometric coefficient for the product\";
//   parameter Real uui4.k1(quantity = \"Reaction coefficient\", unit = \"1\") = 1.0 \"Forwards reaction coefficient for the reaction\";
//   Real uur2.rr(quantity = \"Reaction rate\", unit = \"mol/s\") \"Rate of the reaction\";
//   Real uur2.s1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real uur2.s1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real uur2.s1.V(quantity = \"Volume\", unit = \"l\");
//   Real uur2.p1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real uur2.p1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real uur2.p1.V(quantity = \"Volume\", unit = \"l\");
//   Real uur2.nS1(quantity = \"Stoichiometric coefficient\", unit = \"1\") = 1.0 \"Stoichiometric coefficient for the substrate\";
//   Real uur2.nP1(quantity = \"Stoichiometric coefficient\", unit = \"1\") = 1.0 \"Stoichiometric coefficient for the product\";
//   parameter Real uur2.k1(quantity = \"Reaction coefficient\", unit = \"1\") = 1.0 \"Forwards reaction coefficient for the reaction\";
//   parameter Real uur2.k2(quantity = \"Reaction coefficient\", unit = \"1\") = 1.0 \"Backwards reaction coefficient for the reaction\";
//   Real G13BP.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0, start = 0.0, stateSelect = StateSelect.prefer) \"Current concentration of substance (mM)\";
//   Real G13BP.rNet(quantity = \"Molar flow rate\", unit = \"mol/s\") \"Net flow rate of substance into the node\";
//   Real G13BP.n(quantity = \"AmountOfSubstance\", unit = \"mol\", min = 0.0, stateSelect = StateSelect.prefer) \"Number of moles of substance in pool (mol)\";
//   Real G13BP.n1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real G13BP.n1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real G13BP.n1.V(quantity = \"Volume\", unit = \"l\");
//   Real uur.rr(quantity = \"Reaction rate\", unit = \"mol/s\") \"Rate of the reaction\";
//   Real uur.s1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real uur.s1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real uur.s1.V(quantity = \"Volume\", unit = \"l\");
//   Real uur.p1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real uur.p1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real uur.p1.V(quantity = \"Volume\", unit = \"l\");
//   Real uur.nS1(quantity = \"Stoichiometric coefficient\", unit = \"1\") = 1.0 \"Stoichiometric coefficient for the substrate\";
//   Real uur.nP1(quantity = \"Stoichiometric coefficient\", unit = \"1\") = 1.0 \"Stoichiometric coefficient for the product\";
//   parameter Real uur.k1(quantity = \"Reaction coefficient\", unit = \"1\") = 1.0 \"Forwards reaction coefficient for the reaction\";
//   parameter Real uur.k2(quantity = \"Reaction coefficient\", unit = \"1\") = 1.0 \"Backwards reaction coefficient for the reaction\";
//   Real uur1.rr(quantity = \"Reaction rate\", unit = \"mol/s\") \"Rate of the reaction\";
//   Real uur1.s1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real uur1.s1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real uur1.s1.V(quantity = \"Volume\", unit = \"l\");
//   Real uur1.p1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real uur1.p1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real uur1.p1.V(quantity = \"Volume\", unit = \"l\");
//   Real uur1.nS1(quantity = \"Stoichiometric coefficient\", unit = \"1\") = 1.0 \"Stoichiometric coefficient for the substrate\";
//   Real uur1.nP1(quantity = \"Stoichiometric coefficient\", unit = \"1\") = 1.0 \"Stoichiometric coefficient for the product\";
//   parameter Real uur1.k1(quantity = \"Reaction coefficient\", unit = \"1\") = 1.0 \"Forwards reaction coefficient for the reaction\";
//   parameter Real uur1.k2(quantity = \"Reaction coefficient\", unit = \"1\") = 1.0 \"Backwards reaction coefficient for the reaction\";
//   Real ubi.rr(quantity = \"Reaction rate\", unit = \"mol/s\") \"Rate of the reaction\";
//   Real ubi.s1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real ubi.s1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real ubi.s1.V(quantity = \"Volume\", unit = \"l\");
//   Real ubi.p2.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real ubi.p2.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real ubi.p2.V(quantity = \"Volume\", unit = \"l\");
//   Real ubi.p1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real ubi.p1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real ubi.p1.V(quantity = \"Volume\", unit = \"l\");
//   Real ubi.nS1(quantity = \"Stoichiometric coefficient\", unit = \"1\") = 1.0 \"Stoichiometric coefficient for the substrate\";
//   Real ubi.nP1(quantity = \"Stoichiometric coefficient\", unit = \"1\") = 1.0 \"Stoichiometric coefficient for product 1\";
//   Real ubi.nP2(quantity = \"Stoichiometric coefficient\", unit = \"1\") = 1.0 \"Stoichiometric coefficient for product 2\";
//   parameter Real ubi.k1(quantity = \"Reaction coefficient\", unit = \"1\") = 1.0 \"Forwards reaction coefficient for the reaction\";
//   Real uui3.rr(quantity = \"Reaction rate\", unit = \"mol/s\") \"Rate of the reaction\";
//   Real uui3.s1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real uui3.s1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real uui3.s1.V(quantity = \"Volume\", unit = \"l\");
//   Real uui3.p1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real uui3.p1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real uui3.p1.V(quantity = \"Volume\", unit = \"l\");
//   Real uui3.nS1(quantity = \"Stoichiometric coefficient\", unit = \"1\") = 1.0 \"Stoichiometric coefficient for the substrate\";
//   Real uui3.nP1(quantity = \"Stoichiometric coefficient\", unit = \"1\") = 1.0 \"Stoichiometric coefficient for the product\";
//   parameter Real uui3.k1(quantity = \"Reaction coefficient\", unit = \"1\") = 1.0 \"Forwards reaction coefficient for the reaction\";
//   Real G2P1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0, start = 0.0, stateSelect = StateSelect.prefer) \"Current concentration of substance (mM)\";
//   Real G2P1.rNet(quantity = \"Molar flow rate\", unit = \"mol/s\") \"Net flow rate of substance into the node\";
//   Real G2P1.n(quantity = \"AmountOfSubstance\", unit = \"mol\", min = 0.0, stateSelect = StateSelect.prefer) \"Number of moles of substance in pool (mol)\";
//   Real G2P1.n1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real G2P1.n1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real G2P1.n1.V(quantity = \"Volume\", unit = \"l\");
//   Real uui2.rr(quantity = \"Reaction rate\", unit = \"mol/s\") \"Rate of the reaction\";
//   Real uui2.s1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real uui2.s1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real uui2.s1.V(quantity = \"Volume\", unit = \"l\");
//   Real uui2.p1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real uui2.p1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real uui2.p1.V(quantity = \"Volume\", unit = \"l\");
//   Real uui2.nS1(quantity = \"Stoichiometric coefficient\", unit = \"1\") = 1.0 \"Stoichiometric coefficient for the substrate\";
//   Real uui2.nP1(quantity = \"Stoichiometric coefficient\", unit = \"1\") = 1.0 \"Stoichiometric coefficient for the product\";
//   parameter Real uui2.k1(quantity = \"Reaction coefficient\", unit = \"1\") = 1.0 \"Forwards reaction coefficient for the reaction\";
//   Real GA3P.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0, start = 0.0, stateSelect = StateSelect.prefer) \"Current concentration of substance (mM)\";
//   Real GA3P.rNet(quantity = \"Molar flow rate\", unit = \"mol/s\") \"Net flow rate of substance into the node\";
//   Real GA3P.n(quantity = \"AmountOfSubstance\", unit = \"mol\", min = 0.0, stateSelect = StateSelect.prefer) \"Number of moles of substance in pool (mol)\";
//   Real GA3P.n1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real GA3P.n1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real GA3P.n1.V(quantity = \"Volume\", unit = \"l\");
//   Real uui5.rr(quantity = \"Reaction rate\", unit = \"mol/s\") \"Rate of the reaction\";
//   Real uui5.s1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real uui5.s1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real uui5.s1.V(quantity = \"Volume\", unit = \"l\");
//   Real uui5.p1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real uui5.p1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real uui5.p1.V(quantity = \"Volume\", unit = \"l\");
//   Real uui5.nS1(quantity = \"Stoichiometric coefficient\", unit = \"1\") = 1.0 \"Stoichiometric coefficient for the substrate\";
//   Real uui5.nP1(quantity = \"Stoichiometric coefficient\", unit = \"1\") = 1.0 \"Stoichiometric coefficient for the product\";
//   parameter Real uui5.k1(quantity = \"Reaction coefficient\", unit = \"1\") = 1.0 \"Forwards reaction coefficient for the reaction\";
//   Real uui.rr(quantity = \"Reaction rate\", unit = \"mol/s\") \"Rate of the reaction\";
//   Real uui.s1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real uui.s1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real uui.s1.V(quantity = \"Volume\", unit = \"l\");
//   Real uui.p1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real uui.p1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real uui.p1.V(quantity = \"Volume\", unit = \"l\");
//   Real uui.nS1(quantity = \"Stoichiometric coefficient\", unit = \"1\") = 1.0 \"Stoichiometric coefficient for the substrate\";
//   Real uui.nP1(quantity = \"Stoichiometric coefficient\", unit = \"1\") = 1.0 \"Stoichiometric coefficient for the product\";
//   parameter Real uui.k1(quantity = \"Reaction coefficient\", unit = \"1\") = 1.0 \"Forwards reaction coefficient for the reaction\";
//   Real Pyruvate.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0, start = 0.0, stateSelect = StateSelect.prefer) \"Current concentration of substance (mM)\";
//   Real Pyruvate.rNet(quantity = \"Molar flow rate\", unit = \"mol/s\") \"Net flow rate of substance into the node\";
//   Real Pyruvate.n(quantity = \"AmountOfSubstance\", unit = \"mol\", min = 0.0, stateSelect = StateSelect.prefer) \"Number of moles of substance in pool (mol)\";
//   Real Pyruvate.n1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real Pyruvate.n1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real Pyruvate.n1.V(quantity = \"Volume\", unit = \"l\");
//   Real Glucose.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0, start = 1.0, stateSelect = StateSelect.prefer) \"Current concentration of substance (mM)\";
//   Real Glucose.rNet(quantity = \"Molar flow rate\", unit = \"mol/s\") \"Net flow rate of substance into the node\";
//   Real Glucose.n(quantity = \"AmountOfSubstance\", unit = \"mol\", min = 0.0, stateSelect = StateSelect.prefer) \"Number of moles of substance in pool (mol)\";
//   Real Glucose.n1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real Glucose.n1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real Glucose.n1.V(quantity = \"Volume\", unit = \"l\");
//   Real G6P.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0, start = 0.0, stateSelect = StateSelect.prefer) \"Current concentration of substance (mM)\";
//   Real G6P.rNet(quantity = \"Molar flow rate\", unit = \"mol/s\") \"Net flow rate of substance into the node\";
//   Real G6P.n(quantity = \"AmountOfSubstance\", unit = \"mol\", min = 0.0, stateSelect = StateSelect.prefer) \"Number of moles of substance in pool (mol)\";
//   Real G6P.n1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real G6P.n1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real G6P.n1.V(quantity = \"Volume\", unit = \"l\");
//   Real F6P.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0, start = 0.0, stateSelect = StateSelect.prefer) \"Current concentration of substance (mM)\";
//   Real F6P.rNet(quantity = \"Molar flow rate\", unit = \"mol/s\") \"Net flow rate of substance into the node\";
//   Real F6P.n(quantity = \"AmountOfSubstance\", unit = \"mol\", min = 0.0, stateSelect = StateSelect.prefer) \"Number of moles of substance in pool (mol)\";
//   Real F6P.n1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real F6P.n1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real F6P.n1.V(quantity = \"Volume\", unit = \"l\");
//   Real F16BP.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0, start = 0.0, stateSelect = StateSelect.prefer) \"Current concentration of substance (mM)\";
//   Real F16BP.rNet(quantity = \"Molar flow rate\", unit = \"mol/s\") \"Net flow rate of substance into the node\";
//   Real F16BP.n(quantity = \"AmountOfSubstance\", unit = \"mol\", min = 0.0, stateSelect = StateSelect.prefer) \"Number of moles of substance in pool (mol)\";
//   Real F16BP.n1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real F16BP.n1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real F16BP.n1.V(quantity = \"Volume\", unit = \"l\");
//   Real G3P.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0, start = 0.0, stateSelect = StateSelect.prefer) \"Current concentration of substance (mM)\";
//   Real G3P.rNet(quantity = \"Molar flow rate\", unit = \"mol/s\") \"Net flow rate of substance into the node\";
//   Real G3P.n(quantity = \"AmountOfSubstance\", unit = \"mol\", min = 0.0, stateSelect = StateSelect.prefer) \"Number of moles of substance in pool (mol)\";
//   Real G3P.n1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real G3P.n1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real G3P.n1.V(quantity = \"Volume\", unit = \"l\");
//   Real DHAP.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0, start = 0.0, stateSelect = StateSelect.prefer) \"Current concentration of substance (mM)\";
//   Real DHAP.rNet(quantity = \"Molar flow rate\", unit = \"mol/s\") \"Net flow rate of substance into the node\";
//   Real DHAP.n(quantity = \"AmountOfSubstance\", unit = \"mol\", min = 0.0, stateSelect = StateSelect.prefer) \"Number of moles of substance in pool (mol)\";
//   Real DHAP.n1.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real DHAP.n1.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   Real DHAP.n1.V(quantity = \"Volume\", unit = \"l\");
//   Real sGlucose.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real sGlucose.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   output Real sGlucose.V(quantity = \"Volume\", unit = \"l\");
//   Real sPyruvate.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real sPyruvate.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   output Real sPyruvate.V(quantity = \"Volume\", unit = \"l\");
//   Real sPyruvate4.c(quantity = \"Concentration\", unit = \"mol/l\", min = 0.0);
//   Real sPyruvate4.r(quantity = \"Molar flow rate\", unit = \"mol/s\");
//   output Real sPyruvate4.V(quantity = \"Volume\", unit = \"l\");
// equation
//   uui1.rr = uui1.k1 * uui1.s1.c ^ uui1.nS1 * uui1.s1.V;
//   uui1.s1.r = uui1.nS1 * uui1.rr;
//   uui1.p1.r = (-uui1.nP1) * uui1.rr;
//   der(PEP1.n) = PEP1.rNet;
//   PEP1.rNet = PEP1.n1.r;
//   PEP1.c = PEP1.n1.c;
//   V = PEP1.n1.V;
//   PEP1.c = PEP1.n / V;
//   uui4.rr = uui4.k1 * uui4.s1.c ^ uui4.nS1 * uui4.s1.V;
//   uui4.s1.r = uui4.nS1 * uui4.rr;
//   uui4.p1.r = (-uui4.nP1) * uui4.rr;
//   uur2.rr = uur2.k1 * uur2.s1.c ^ uur2.nS1 * uur2.s1.V - uur2.k2 * uur2.p1.c ^ uur2.nP1 * uur2.p1.V;
//   uur2.s1.r = uur2.nS1 * uur2.rr;
//   uur2.p1.r = (-uur2.nP1) * uur2.rr;
//   der(G13BP.n) = G13BP.rNet;
//   G13BP.rNet = G13BP.n1.r;
//   G13BP.c = G13BP.n1.c;
//   V = G13BP.n1.V;
//   G13BP.c = G13BP.n / V;
//   uur.rr = uur.k1 * uur.s1.c ^ uur.nS1 * uur.s1.V - uur.k2 * uur.p1.c ^ uur.nP1 * uur.p1.V;
//   uur.s1.r = uur.nS1 * uur.rr;
//   uur.p1.r = (-uur.nP1) * uur.rr;
//   uur1.rr = uur1.k1 * uur1.s1.c ^ uur1.nS1 * uur1.s1.V - uur1.k2 * uur1.p1.c ^ uur1.nP1 * uur1.p1.V;
//   uur1.s1.r = uur1.nS1 * uur1.rr;
//   uur1.p1.r = (-uur1.nP1) * uur1.rr;
//   ubi.rr = ubi.k1 * ubi.s1.c ^ ubi.nS1 * ubi.s1.V;
//   ubi.s1.r = ubi.nS1 * ubi.rr;
//   ubi.p1.r = (-ubi.nP1) * ubi.rr;
//   ubi.p2.r = (-ubi.nP2) * ubi.rr;
//   uui3.rr = uui3.k1 * uui3.s1.c ^ uui3.nS1 * uui3.s1.V;
//   uui3.s1.r = uui3.nS1 * uui3.rr;
//   uui3.p1.r = (-uui3.nP1) * uui3.rr;
//   der(G2P1.n) = G2P1.rNet;
//   G2P1.rNet = G2P1.n1.r;
//   G2P1.c = G2P1.n1.c;
//   V = G2P1.n1.V;
//   G2P1.c = G2P1.n / V;
//   uui2.rr = uui2.k1 * uui2.s1.c ^ uui2.nS1 * uui2.s1.V;
//   uui2.s1.r = uui2.nS1 * uui2.rr;
//   uui2.p1.r = (-uui2.nP1) * uui2.rr;
//   der(GA3P.n) = GA3P.rNet;
//   GA3P.rNet = GA3P.n1.r;
//   GA3P.c = GA3P.n1.c;
//   V = GA3P.n1.V;
//   GA3P.c = GA3P.n / V;
//   uui5.rr = uui5.k1 * uui5.s1.c ^ uui5.nS1 * uui5.s1.V;
//   uui5.s1.r = uui5.nS1 * uui5.rr;
//   uui5.p1.r = (-uui5.nP1) * uui5.rr;
//   uui.rr = uui.k1 * uui.s1.c ^ uui.nS1 * uui.s1.V;
//   uui.s1.r = uui.nS1 * uui.rr;
//   uui.p1.r = (-uui.nP1) * uui.rr;
//   der(Pyruvate.n) = Pyruvate.rNet;
//   Pyruvate.rNet = Pyruvate.n1.r;
//   Pyruvate.c = Pyruvate.n1.c;
//   V = Pyruvate.n1.V;
//   Pyruvate.c = Pyruvate.n / V;
//   der(Glucose.n) = Glucose.rNet;
//   Glucose.rNet = Glucose.n1.r;
//   Glucose.c = Glucose.n1.c;
//   V = Glucose.n1.V;
//   Glucose.c = Glucose.n / V;
//   der(G6P.n) = G6P.rNet;
//   G6P.rNet = G6P.n1.r;
//   G6P.c = G6P.n1.c;
//   V = G6P.n1.V;
//   G6P.c = G6P.n / V;
//   der(F6P.n) = F6P.rNet;
//   F6P.rNet = F6P.n1.r;
//   F6P.c = F6P.n1.c;
//   V = F6P.n1.V;
//   F6P.c = F6P.n / V;
//   der(F16BP.n) = F16BP.rNet;
//   F16BP.rNet = F16BP.n1.r;
//   F16BP.c = F16BP.n1.c;
//   V = F16BP.n1.V;
//   F16BP.c = F16BP.n / V;
//   der(G3P.n) = G3P.rNet;
//   G3P.rNet = G3P.n1.r;
//   G3P.c = G3P.n1.c;
//   V = G3P.n1.V;
//   G3P.c = G3P.n / V;
//   der(DHAP.n) = DHAP.rNet;
//   DHAP.rNet = DHAP.n1.r;
//   DHAP.c = DHAP.n1.c;
//   V = DHAP.n1.V;
//   DHAP.c = DHAP.n / V;
//   der(V) = 0.0 \"Compartment volume is constant\";
//   uui1.s1.r + uur1.s1.r + ubi.p2.r + G3P.n1.r = 0.0;
//   uui1.p1.r + G13BP.n1.r + uui2.s1.r = 0.0;
//   PEP1.n1.r + uui4.s1.r + uui3.p1.r = 0.0;
//   uui4.p1.r + Pyruvate.n1.r + (-sPyruvate.r) + (-sPyruvate4.r) = 0.0;
//   uur2.s1.r + uui3.s1.r + G2P1.n1.r = 0.0;
//   uur2.p1.r + uui2.p1.r + GA3P.n1.r = 0.0;
//   uur.s1.r + uui5.p1.r + G6P.n1.r = 0.0;
//   uur.p1.r + uui.s1.r + F6P.n1.r = 0.0;
//   uur1.p1.r + ubi.p1.r + DHAP.n1.r = 0.0;
//   ubi.s1.r + uui.p1.r + F16BP.n1.r = 0.0;
//   uui5.s1.r + Glucose.n1.r + (-sGlucose.r) = 0.0;
//   sGlucose.r = 0.0;
//   sPyruvate.r = 0.0;
//   sPyruvate4.r = 0.0;
//   Pyruvate.n1.V = sPyruvate.V;
//   Pyruvate.n1.V = sPyruvate4.V;
//   Pyruvate.n1.V = uui4.p1.V;
//   Pyruvate.n1.c = sPyruvate.c;
//   Pyruvate.n1.c = sPyruvate4.c;
//   Pyruvate.n1.c = uui4.p1.c;
//   Glucose.n1.V = sGlucose.V;
//   Glucose.n1.V = uui5.s1.V;
//   Glucose.n1.c = sGlucose.c;
//   Glucose.n1.c = uui5.s1.c;
//   GA3P.n1.V = uui2.p1.V;
//   GA3P.n1.V = uur2.p1.V;
//   GA3P.n1.c = uui2.p1.c;
//   GA3P.n1.c = uur2.p1.c;
//   G2P1.n1.V = uui3.s1.V;
//   G2P1.n1.V = uur2.s1.V;
//   G2P1.n1.c = uui3.s1.c;
//   G2P1.n1.c = uur2.s1.c;
//   PEP1.n1.V = uui3.p1.V;
//   PEP1.n1.V = uui4.s1.V;
//   PEP1.n1.c = uui3.p1.c;
//   PEP1.n1.c = uui4.s1.c;
//   G13BP.n1.V = uui1.p1.V;
//   G13BP.n1.V = uui2.s1.V;
//   G13BP.n1.c = uui1.p1.c;
//   G13BP.n1.c = uui2.s1.c;
//   G6P.n1.V = uui5.p1.V;
//   G6P.n1.V = uur.s1.V;
//   G6P.n1.c = uui5.p1.c;
//   G6P.n1.c = uur.s1.c;
//   F6P.n1.V = uui.s1.V;
//   F6P.n1.V = uur.p1.V;
//   F6P.n1.c = uui.s1.c;
//   F6P.n1.c = uur.p1.c;
//   F16BP.n1.V = ubi.s1.V;
//   F16BP.n1.V = uui.p1.V;
//   F16BP.n1.c = ubi.s1.c;
//   F16BP.n1.c = uui.p1.c;
//   G3P.n1.V = ubi.p2.V;
//   G3P.n1.V = uui1.s1.V;
//   G3P.n1.V = uur1.s1.V;
//   G3P.n1.c = ubi.p2.c;
//   G3P.n1.c = uui1.s1.c;
//   G3P.n1.c = uur1.s1.c;
//   DHAP.n1.V = ubi.p1.V;
//   DHAP.n1.V = uur1.p1.V;
//   DHAP.n1.c = ubi.p1.c;
//   DHAP.n1.c = uur1.p1.c;
// end BioChem.Examples.Glycolysis;
// "
// "Check of BioChem.Examples.Glycolysis completed successfully.
// Class BioChem.Examples.Glycolysis has 170 equation(s) and 170 variable(s).
// 117 of these are trivial equation(s)."
// ""
// endResult
