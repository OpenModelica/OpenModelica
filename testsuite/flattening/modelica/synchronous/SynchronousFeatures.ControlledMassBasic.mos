// name: SynchronousFeatures.ControlledMassBasic
// keywords: synchronous features
// status: correct
// cflags: -d=-newInst

loadFile("SynchronousFeatures.mo"); getErrorString();

instantiateModel(SynchronousFeatures.ControlledMassBasic); getErrorString();

// Result:
// true
// ""
// "class SynchronousFeatures.ControlledMassBasic \"Discrete-time State Variables\"
//   parameter Real m(quantity = \"Mass\", unit = \"kg\", min = 0.0) = 1.0;
//   parameter Real k(unit = \"N/m\") = 1.0;
//   parameter Real d(unit = \"N.s/m\") = 0.1;
//   Real x(quantity = \"Length\", unit = \"m\", start = 1.0, fixed = true) \"Position\";
//   Real v(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, fixed = true) \"Velocity\";
//   Real f(quantity = \"Force\", unit = \"N\") \"Force\";
//   parameter Real KOuter = 10.0 \"Gain of position PI controller\";
//   parameter Real KInner = 20.0 \"Gain of speed P controller\";
//   parameter Real Ti = 10.0 \"Integral time for pos. PI controller\";
//   parameter Real xref = 10.0 \"Position reference\";
//   discrete Real xd;
//   discrete Real eOuter;
//   discrete Real intE(start = 0.0);
//   discrete Real uOuter;
//   discrete Real vd;
//   discrete Real vref;
//   discrete Real uInner(start = 0.0);
// equation
//   xd = sample(x, Clock(0.01));
//   eOuter = xref - xd;
//   intE = previous(intE) + eOuter;
//   uOuter = KOuter * (eOuter + intE / Ti);
//   vd = sample(v, Clock());
//   vref = uOuter;
//   uInner = KInner * (vref - vd);
//   f = hold(uInner);
//   der(x) = v;
//   m * der(v) = f + (-k) * x - d * v;
// end SynchronousFeatures.ControlledMassBasic;
// "
// ""
// endResult
