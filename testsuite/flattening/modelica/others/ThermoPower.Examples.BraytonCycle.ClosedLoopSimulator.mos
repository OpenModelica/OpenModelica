// name:     ThermoPower.Examples.BraytonCycle.ClosedLoopSimulator.mos
// keywords: lookup
// status:   correct
//
// Tests that lookup works as it should and not give this error:
// Error: Variable Choices.System.Dynamics.DynamicFreeInitial not found in scope ThermoPower.System.
// cflags: -d=-newInst
//

loadFile("ThermoPower.Examples.BraytonCycle.ClosedLoopSimulator.mo"); getErrorString();
instantiateModel(ThermoPower.Examples.BraytonCycle.ClosedLoopSimulator); getErrorString();

// Result:
// true
// ""
// "function Modelica.Blocks.Tables.CombiTable2D$plant$compressor$Eta.getTableValue
//   input Modelica.Blocks.Types.ExternalCombiTable2D tableID;
//   input Real u1;
//   input Real u2;
//   input Real tableAvailable;
//   output Real y;
//
//   external \"C\" y = ModelicaStandardTables_CombiTable2D_getValue(tableID, u1, u2);
// end Modelica.Blocks.Tables.CombiTable2D$plant$compressor$Eta.getTableValue;
//
// function Modelica.Blocks.Tables.CombiTable2D$plant$compressor$Phic.getTableValue
//   input Modelica.Blocks.Types.ExternalCombiTable2D tableID;
//   input Real u1;
//   input Real u2;
//   input Real tableAvailable;
//   output Real y;
//
//   external \"C\" y = ModelicaStandardTables_CombiTable2D_getValue(tableID, u1, u2);
// end Modelica.Blocks.Tables.CombiTable2D$plant$compressor$Phic.getTableValue;
//
// function Modelica.Blocks.Tables.CombiTable2D$plant$compressor$PressRatio.getTableValue
//   input Modelica.Blocks.Types.ExternalCombiTable2D tableID;
//   input Real u1;
//   input Real u2;
//   input Real tableAvailable;
//   output Real y;
//
//   external \"C\" y = ModelicaStandardTables_CombiTable2D_getValue(tableID, u1, u2);
// end Modelica.Blocks.Tables.CombiTable2D$plant$compressor$PressRatio.getTableValue;
//
// function Modelica.Blocks.Tables.CombiTable2D$plant$turbine$Eta.getTableValue
//   input Modelica.Blocks.Types.ExternalCombiTable2D tableID;
//   input Real u1;
//   input Real u2;
//   input Real tableAvailable;
//   output Real y;
//
//   external \"C\" y = ModelicaStandardTables_CombiTable2D_getValue(tableID, u1, u2);
// end Modelica.Blocks.Tables.CombiTable2D$plant$turbine$Eta.getTableValue;
//
// function Modelica.Blocks.Tables.CombiTable2D$plant$turbine$Phic.getTableValue
//   input Modelica.Blocks.Types.ExternalCombiTable2D tableID;
//   input Real u1;
//   input Real u2;
//   input Real tableAvailable;
//   output Real y;
//
//   external \"C\" y = ModelicaStandardTables_CombiTable2D_getValue(tableID, u1, u2);
// end Modelica.Blocks.Tables.CombiTable2D$plant$turbine$Phic.getTableValue;
//
// function Modelica.Blocks.Types.ExternalCombiTable2D.constructor
//   input String tableName;
//   input String fileName;
//   input Real[:, :] table;
//   input enumeration(LinearSegments, ContinuousDerivative, ConstantSegments) smoothness;
//   output Modelica.Blocks.Types.ExternalCombiTable2D externalCombiTable2D;
//
//   external \"C\" externalCombiTable2D = ModelicaStandardTables_CombiTable2D_init(tableName, fileName, table, size(table, 1), size(table, 2), smoothness);
// end Modelica.Blocks.Types.ExternalCombiTable2D.constructor;
//
// function Modelica.Blocks.Types.ExternalCombiTable2D.destructor
//   input Modelica.Blocks.Types.ExternalCombiTable2D externalCombiTable2D;
//
//   external \"C\" ModelicaStandardTables_CombiTable2D_close(externalCombiTable2D);
// end Modelica.Blocks.Types.ExternalCombiTable2D.destructor;
//
// function Modelica.Media.IdealGases.Common.DataRecord \"Automatically generated record constructor for Modelica.Media.IdealGases.Common.DataRecord\"
//   input String name;
//   input Real MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.0);
//   input Real Hf(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   input Real H0(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   input Real Tlimit(quantity = \"ThermodynamicTemperature\", unit = \"K\", min = 0.0, start = 288.15, nominal = 300.0, displayUnit = \"degC\");
//   input Real[7] alow;
//   input Real[2] blow;
//   input Real[7] ahigh;
//   input Real[2] bhigh;
//   input Real R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\");
//   output DataRecord res;
// end Modelica.Media.IdealGases.Common.DataRecord;
//
// function Modelica.Media.IdealGases.Common.DataRecord$Ar \"Automatically generated record constructor for Modelica.Media.IdealGases.Common.DataRecord$Ar\"
//   input String name;
//   input Real MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.0);
//   input Real Hf(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   input Real H0(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   input Real Tlimit(quantity = \"ThermodynamicTemperature\", unit = \"K\", min = 0.0, start = 288.15, nominal = 300.0, displayUnit = \"degC\");
//   input Real[7] alow;
//   input Real[2] blow;
//   input Real[7] ahigh;
//   input Real[2] bhigh;
//   input Real R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\");
//   output DataRecord$Ar res;
// end Modelica.Media.IdealGases.Common.DataRecord$Ar;
//
// function Modelica.Media.IdealGases.Common.DataRecord$CH4 \"Automatically generated record constructor for Modelica.Media.IdealGases.Common.DataRecord$CH4\"
//   input String name;
//   input Real MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.0);
//   input Real Hf(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   input Real H0(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   input Real Tlimit(quantity = \"ThermodynamicTemperature\", unit = \"K\", min = 0.0, start = 288.15, nominal = 300.0, displayUnit = \"degC\");
//   input Real[7] alow;
//   input Real[2] blow;
//   input Real[7] ahigh;
//   input Real[2] bhigh;
//   input Real R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\");
//   output DataRecord$CH4 res;
// end Modelica.Media.IdealGases.Common.DataRecord$CH4;
//
// function Modelica.Media.IdealGases.Common.DataRecord$CO2 \"Automatically generated record constructor for Modelica.Media.IdealGases.Common.DataRecord$CO2\"
//   input String name;
//   input Real MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.0);
//   input Real Hf(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   input Real H0(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   input Real Tlimit(quantity = \"ThermodynamicTemperature\", unit = \"K\", min = 0.0, start = 288.15, nominal = 300.0, displayUnit = \"degC\");
//   input Real[7] alow;
//   input Real[2] blow;
//   input Real[7] ahigh;
//   input Real[2] bhigh;
//   input Real R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\");
//   output DataRecord$CO2 res;
// end Modelica.Media.IdealGases.Common.DataRecord$CO2;
//
// function Modelica.Media.IdealGases.Common.DataRecord$H2O \"Automatically generated record constructor for Modelica.Media.IdealGases.Common.DataRecord$H2O\"
//   input String name;
//   input Real MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.0);
//   input Real Hf(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   input Real H0(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   input Real Tlimit(quantity = \"ThermodynamicTemperature\", unit = \"K\", min = 0.0, start = 288.15, nominal = 300.0, displayUnit = \"degC\");
//   input Real[7] alow;
//   input Real[2] blow;
//   input Real[7] ahigh;
//   input Real[2] bhigh;
//   input Real R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\");
//   output DataRecord$H2O res;
// end Modelica.Media.IdealGases.Common.DataRecord$H2O;
//
// function Modelica.Media.IdealGases.Common.DataRecord$N2 \"Automatically generated record constructor for Modelica.Media.IdealGases.Common.DataRecord$N2\"
//   input String name;
//   input Real MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.0);
//   input Real Hf(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   input Real H0(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   input Real Tlimit(quantity = \"ThermodynamicTemperature\", unit = \"K\", min = 0.0, start = 288.15, nominal = 300.0, displayUnit = \"degC\");
//   input Real[7] alow;
//   input Real[2] blow;
//   input Real[7] ahigh;
//   input Real[2] bhigh;
//   input Real R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\");
//   output DataRecord$N2 res;
// end Modelica.Media.IdealGases.Common.DataRecord$N2;
//
// function Modelica.Media.IdealGases.Common.DataRecord$O2 \"Automatically generated record constructor for Modelica.Media.IdealGases.Common.DataRecord$O2\"
//   input String name;
//   input Real MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.0);
//   input Real Hf(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   input Real H0(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   input Real Tlimit(quantity = \"ThermodynamicTemperature\", unit = \"K\", min = 0.0, start = 288.15, nominal = 300.0, displayUnit = \"degC\");
//   input Real[7] alow;
//   input Real[2] blow;
//   input Real[7] ahigh;
//   input Real[2] bhigh;
//   input Real R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\");
//   output DataRecord$O2 res;
// end Modelica.Media.IdealGases.Common.DataRecord$O2;
//
// function Modelica.Media.IdealGases.Common.Functions.cp_T
//   input Modelica.Media.IdealGases.Common.DataRecord data;
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   output Real cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\");
// algorithm
//   cp := smooth(0, if T < data.Tlimit then data.R * T ^ (-2.0) * (data.alow[1] + T * (data.alow[2] + T * (data.alow[3] + T * (data.alow[4] + T * (data.alow[5] + T * (data.alow[6] + data.alow[7] * T)))))) else data.R * T ^ (-2.0) * (data.ahigh[1] + T * (data.ahigh[2] + T * (data.ahigh[3] + T * (data.ahigh[4] + T * (data.ahigh[5] + T * (data.ahigh[6] + data.ahigh[7] * T)))))));
// end Modelica.Media.IdealGases.Common.Functions.cp_T;
//
// function Modelica.Media.IdealGases.Common.Functions.h_T
//   input Modelica.Media.IdealGases.Common.DataRecord data;
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   input Boolean exclEnthForm = true;
//   input enumeration(ZeroAt0K, ZeroAt25C, UserDefined) refChoice = Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K;
//   input Real h_off(quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\");
// algorithm
//   h := smooth(0, (if T < data.Tlimit then data.R * (T * (data.blow[1] + data.alow[2] * log(T) + T * (data.alow[3] + T * (0.5 * data.alow[4] + T * (0.3333333333333333 * data.alow[5] + T * (0.25 * data.alow[6] + 0.2 * data.alow[7] * T))))) - data.alow[1]) / T else data.R * (T * (data.bhigh[1] + data.ahigh[2] * log(T) + T * (data.ahigh[3] + T * (0.5 * data.ahigh[4] + T * (0.3333333333333333 * data.ahigh[5] + T * (0.25 * data.ahigh[6] + 0.2 * data.ahigh[7] * T))))) - data.ahigh[1]) / T) + (if exclEnthForm then -data.Hf else 0.0) + (if refChoice == Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K then data.H0 else 0.0) + (if refChoice == Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.UserDefined then h_off else 0.0));
// end Modelica.Media.IdealGases.Common.Functions.h_T;
//
// function Modelica.Media.IdealGases.Common.Functions.s0_T
//   input Modelica.Media.IdealGases.Common.DataRecord data;
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   output Real s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\");
// algorithm
//   s := if T < data.Tlimit then data.R * (data.blow[2] + (-0.5) * data.alow[1] / T ^ 2.0 + data.alow[3] * log(T) + T * (data.alow[4] + T * (0.5 * data.alow[5] + T * (0.3333333333333333 * data.alow[6] + 0.25 * data.alow[7] * T))) - data.alow[2] / T) else data.R * (data.bhigh[2] + (-0.5) * data.ahigh[1] / T ^ 2.0 + data.ahigh[3] * log(T) + T * (data.ahigh[4] + T * (0.5 * data.ahigh[5] + T * (0.3333333333333333 * data.ahigh[6] + 0.25 * data.ahigh[7] * T))) - data.ahigh[2] / T);
// end Modelica.Media.IdealGases.Common.Functions.s0_T;
//
// function Modelica.Media.Interfaces.Types.IdealGas.FluidConstants \"Automatically generated record constructor for Modelica.Media.Interfaces.Types.IdealGas.FluidConstants\"
//   input String iupacName;
//   input String casRegistryNumber;
//   input String chemicalFormula;
//   input String structureFormula;
//   input Real molarMass(min = 0.001, max = 0.25, nominal = 0.032, quantity = \"MolarMass\", unit = \"kg/mol\");
//   input Real criticalTemperature(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real criticalPressure(min = 0.0, max = 100000000.0, nominal = 100000.0, start = 100000.0, quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real criticalMolarVolume(min = 1e-06, max = 1000000.0, nominal = 1.0, quantity = \"MolarVolume\", unit = \"m3/mol\");
//   input Real acentricFactor;
//   input Real meltingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real normalBoilingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real dipoleMoment(min = 0.0, max = 2.0, unit = \"debye\", quantity = \"ElectricDipoleMoment\");
//   input Boolean hasIdealGasHeatCapacity = false;
//   input Boolean hasCriticalData = false;
//   input Boolean hasDipoleMoment = false;
//   input Boolean hasFundamentalEquation = false;
//   input Boolean hasLiquidHeatCapacity = false;
//   input Boolean hasSolidHeatCapacity = false;
//   input Boolean hasAccurateViscosityData = false;
//   input Boolean hasAccurateConductivityData = false;
//   input Boolean hasVapourPressureCurve = false;
//   input Boolean hasAcentricFactor = false;
//   input Real HCRIT0(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real SCRIT0(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   input Real deltah(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real deltas(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   output FluidConstants res;
// end Modelica.Media.Interfaces.Types.IdealGas.FluidConstants;
//
// function Modelica.Media.Interfaces.Types.IdealGas.FluidConstants$Ar \"Automatically generated record constructor for Modelica.Media.Interfaces.Types.IdealGas.FluidConstants$Ar\"
//   input String iupacName;
//   input String casRegistryNumber;
//   input String chemicalFormula;
//   input String structureFormula;
//   input Real molarMass(min = 0.001, max = 0.25, nominal = 0.032, quantity = \"MolarMass\", unit = \"kg/mol\");
//   input Real criticalTemperature(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real criticalPressure(min = 0.0, max = 100000000.0, nominal = 100000.0, start = 100000.0, quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real criticalMolarVolume(min = 1e-06, max = 1000000.0, nominal = 1.0, quantity = \"MolarVolume\", unit = \"m3/mol\");
//   input Real acentricFactor;
//   input Real meltingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real normalBoilingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real dipoleMoment(min = 0.0, max = 2.0, unit = \"debye\", quantity = \"ElectricDipoleMoment\");
//   input Boolean hasIdealGasHeatCapacity = false;
//   input Boolean hasCriticalData = false;
//   input Boolean hasDipoleMoment = false;
//   input Boolean hasFundamentalEquation = false;
//   input Boolean hasLiquidHeatCapacity = false;
//   input Boolean hasSolidHeatCapacity = false;
//   input Boolean hasAccurateViscosityData = false;
//   input Boolean hasAccurateConductivityData = false;
//   input Boolean hasVapourPressureCurve = false;
//   input Boolean hasAcentricFactor = false;
//   input Real HCRIT0(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real SCRIT0(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   input Real deltah(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real deltas(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   output FluidConstants$Ar res;
// end Modelica.Media.Interfaces.Types.IdealGas.FluidConstants$Ar;
//
// function Modelica.Media.Interfaces.Types.IdealGas.FluidConstants$CO2 \"Automatically generated record constructor for Modelica.Media.Interfaces.Types.IdealGas.FluidConstants$CO2\"
//   input String iupacName;
//   input String casRegistryNumber;
//   input String chemicalFormula;
//   input String structureFormula;
//   input Real molarMass(min = 0.001, max = 0.25, nominal = 0.032, quantity = \"MolarMass\", unit = \"kg/mol\");
//   input Real criticalTemperature(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real criticalPressure(min = 0.0, max = 100000000.0, nominal = 100000.0, start = 100000.0, quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real criticalMolarVolume(min = 1e-06, max = 1000000.0, nominal = 1.0, quantity = \"MolarVolume\", unit = \"m3/mol\");
//   input Real acentricFactor;
//   input Real meltingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real normalBoilingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real dipoleMoment(min = 0.0, max = 2.0, unit = \"debye\", quantity = \"ElectricDipoleMoment\");
//   input Boolean hasIdealGasHeatCapacity = false;
//   input Boolean hasCriticalData = false;
//   input Boolean hasDipoleMoment = false;
//   input Boolean hasFundamentalEquation = false;
//   input Boolean hasLiquidHeatCapacity = false;
//   input Boolean hasSolidHeatCapacity = false;
//   input Boolean hasAccurateViscosityData = false;
//   input Boolean hasAccurateConductivityData = false;
//   input Boolean hasVapourPressureCurve = false;
//   input Boolean hasAcentricFactor = false;
//   input Real HCRIT0(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real SCRIT0(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   input Real deltah(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real deltas(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   output FluidConstants$CO2 res;
// end Modelica.Media.Interfaces.Types.IdealGas.FluidConstants$CO2;
//
// function Modelica.Media.Interfaces.Types.IdealGas.FluidConstants$H2O \"Automatically generated record constructor for Modelica.Media.Interfaces.Types.IdealGas.FluidConstants$H2O\"
//   input String iupacName;
//   input String casRegistryNumber;
//   input String chemicalFormula;
//   input String structureFormula;
//   input Real molarMass(min = 0.001, max = 0.25, nominal = 0.032, quantity = \"MolarMass\", unit = \"kg/mol\");
//   input Real criticalTemperature(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real criticalPressure(min = 0.0, max = 100000000.0, nominal = 100000.0, start = 100000.0, quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real criticalMolarVolume(min = 1e-06, max = 1000000.0, nominal = 1.0, quantity = \"MolarVolume\", unit = \"m3/mol\");
//   input Real acentricFactor;
//   input Real meltingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real normalBoilingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real dipoleMoment(min = 0.0, max = 2.0, unit = \"debye\", quantity = \"ElectricDipoleMoment\");
//   input Boolean hasIdealGasHeatCapacity = false;
//   input Boolean hasCriticalData = false;
//   input Boolean hasDipoleMoment = false;
//   input Boolean hasFundamentalEquation = false;
//   input Boolean hasLiquidHeatCapacity = false;
//   input Boolean hasSolidHeatCapacity = false;
//   input Boolean hasAccurateViscosityData = false;
//   input Boolean hasAccurateConductivityData = false;
//   input Boolean hasVapourPressureCurve = false;
//   input Boolean hasAcentricFactor = false;
//   input Real HCRIT0(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real SCRIT0(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   input Real deltah(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real deltas(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   output FluidConstants$H2O res;
// end Modelica.Media.Interfaces.Types.IdealGas.FluidConstants$H2O;
//
// function Modelica.Media.Interfaces.Types.IdealGas.FluidConstants$N2 \"Automatically generated record constructor for Modelica.Media.Interfaces.Types.IdealGas.FluidConstants$N2\"
//   input String iupacName;
//   input String casRegistryNumber;
//   input String chemicalFormula;
//   input String structureFormula;
//   input Real molarMass(min = 0.001, max = 0.25, nominal = 0.032, quantity = \"MolarMass\", unit = \"kg/mol\");
//   input Real criticalTemperature(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real criticalPressure(min = 0.0, max = 100000000.0, nominal = 100000.0, start = 100000.0, quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real criticalMolarVolume(min = 1e-06, max = 1000000.0, nominal = 1.0, quantity = \"MolarVolume\", unit = \"m3/mol\");
//   input Real acentricFactor;
//   input Real meltingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real normalBoilingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real dipoleMoment(min = 0.0, max = 2.0, unit = \"debye\", quantity = \"ElectricDipoleMoment\");
//   input Boolean hasIdealGasHeatCapacity = false;
//   input Boolean hasCriticalData = false;
//   input Boolean hasDipoleMoment = false;
//   input Boolean hasFundamentalEquation = false;
//   input Boolean hasLiquidHeatCapacity = false;
//   input Boolean hasSolidHeatCapacity = false;
//   input Boolean hasAccurateViscosityData = false;
//   input Boolean hasAccurateConductivityData = false;
//   input Boolean hasVapourPressureCurve = false;
//   input Boolean hasAcentricFactor = false;
//   input Real HCRIT0(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real SCRIT0(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   input Real deltah(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real deltas(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   output FluidConstants$N2 res;
// end Modelica.Media.Interfaces.Types.IdealGas.FluidConstants$N2;
//
// function Modelica.Media.Interfaces.Types.IdealGas.FluidConstants$O2 \"Automatically generated record constructor for Modelica.Media.Interfaces.Types.IdealGas.FluidConstants$O2\"
//   input String iupacName;
//   input String casRegistryNumber;
//   input String chemicalFormula;
//   input String structureFormula;
//   input Real molarMass(min = 0.001, max = 0.25, nominal = 0.032, quantity = \"MolarMass\", unit = \"kg/mol\");
//   input Real criticalTemperature(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real criticalPressure(min = 0.0, max = 100000000.0, nominal = 100000.0, start = 100000.0, quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real criticalMolarVolume(min = 1e-06, max = 1000000.0, nominal = 1.0, quantity = \"MolarVolume\", unit = \"m3/mol\");
//   input Real acentricFactor;
//   input Real meltingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real normalBoilingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real dipoleMoment(min = 0.0, max = 2.0, unit = \"debye\", quantity = \"ElectricDipoleMoment\");
//   input Boolean hasIdealGasHeatCapacity = false;
//   input Boolean hasCriticalData = false;
//   input Boolean hasDipoleMoment = false;
//   input Boolean hasFundamentalEquation = false;
//   input Boolean hasLiquidHeatCapacity = false;
//   input Boolean hasSolidHeatCapacity = false;
//   input Boolean hasAccurateViscosityData = false;
//   input Boolean hasAccurateConductivityData = false;
//   input Boolean hasVapourPressureCurve = false;
//   input Boolean hasAcentricFactor = false;
//   input Real HCRIT0(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real SCRIT0(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   input Real deltah(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real deltas(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   output FluidConstants$O2 res;
// end Modelica.Media.Interfaces.Types.IdealGas.FluidConstants$O2;
//
// function Modelica.SIunits.Conversions.to_bar
//   input Real Pa(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   output Real bar(quantity = \"Pressure\", unit = \"bar\");
// algorithm
//   bar := 1e-05 * Pa;
// end Modelica.SIunits.Conversions.to_bar;
//
// function Modelica.SIunits.Conversions.to_degC
//   input Real Kelvin(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   output Real Celsius(quantity = \"ThermodynamicTemperature\", unit = \"degC\");
// algorithm
//   Celsius := -273.15 + Kelvin;
// end Modelica.SIunits.Conversions.to_degC;
//
// function Modelica.SIunits.Conversions.to_rpm
//   input Real rs(quantity = \"AngularVelocity\", unit = \"rad/s\");
//   output Real rpm(quantity = \"AngularVelocity\", unit = \"1/min\");
// algorithm
//   rpm := 9.549296585513721 * rs;
// end Modelica.SIunits.Conversions.to_rpm;
//
// function Modelica.Utilities.Streams.error
//   input String string;
//
//   external \"C\" ModelicaError(string);
// end Modelica.Utilities.Streams.error;
//
// function Modelica.Utilities.Strings.Advanced.skipWhiteSpace
//   input String string;
//   input Integer startIndex(min = 1) = 1;
//   output Integer nextIndex;
//
//   external \"C\" nextIndex = ModelicaStrings_skipWhiteSpace(string, startIndex);
// end Modelica.Utilities.Strings.Advanced.skipWhiteSpace;
//
// function Modelica.Utilities.Strings.isEmpty
//   input String string;
//   output Boolean result;
//   protected Integer nextIndex;
//   protected Integer len;
// algorithm
//   nextIndex := Modelica.Utilities.Strings.Advanced.skipWhiteSpace(string, 1);
//   len := Modelica.Utilities.Strings.length(string);
//   if len < 1 or nextIndex > len then
//     result := true;
//   else
//     result := false;
//   end if;
// end Modelica.Utilities.Strings.isEmpty;
//
// function Modelica.Utilities.Strings.length
//   input String string;
//   output Integer result;
//
//   external \"C\" result = ModelicaStrings_length(string);
// end Modelica.Utilities.Strings.length;
//
// function ThermoPower.Gas.CombustionChamber$plant$CombustionChamber1.Air.FluidConstants \"Automatically generated record constructor for ThermoPower.Gas.CombustionChamber$plant$CombustionChamber1.Air.FluidConstants\"
//   input String iupacName;
//   input String casRegistryNumber;
//   input String chemicalFormula;
//   input String structureFormula;
//   input Real molarMass(min = 0.001, max = 0.25, nominal = 0.032, quantity = \"MolarMass\", unit = \"kg/mol\");
//   input Real criticalTemperature(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real criticalPressure(min = 0.0, max = 100000000.0, nominal = 100000.0, start = 100000.0, quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real criticalMolarVolume(min = 1e-06, max = 1000000.0, nominal = 1.0, quantity = \"MolarVolume\", unit = \"m3/mol\");
//   input Real acentricFactor;
//   input Real meltingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real normalBoilingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real dipoleMoment(min = 0.0, max = 2.0, unit = \"debye\", quantity = \"ElectricDipoleMoment\");
//   input Boolean hasIdealGasHeatCapacity = false;
//   input Boolean hasCriticalData = false;
//   input Boolean hasDipoleMoment = false;
//   input Boolean hasFundamentalEquation = false;
//   input Boolean hasLiquidHeatCapacity = false;
//   input Boolean hasSolidHeatCapacity = false;
//   input Boolean hasAccurateViscosityData = false;
//   input Boolean hasAccurateConductivityData = false;
//   input Boolean hasVapourPressureCurve = false;
//   input Boolean hasAcentricFactor = false;
//   input Real HCRIT0(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real SCRIT0(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   input Real deltah(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real deltas(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   output FluidConstants res;
// end ThermoPower.Gas.CombustionChamber$plant$CombustionChamber1.Air.FluidConstants;
//
// function ThermoPower.Gas.CombustionChamber$plant$CombustionChamber1.Exhaust.FluidConstants \"Automatically generated record constructor for ThermoPower.Gas.CombustionChamber$plant$CombustionChamber1.Exhaust.FluidConstants\"
//   input String iupacName;
//   input String casRegistryNumber;
//   input String chemicalFormula;
//   input String structureFormula;
//   input Real molarMass(min = 0.001, max = 0.25, nominal = 0.032, quantity = \"MolarMass\", unit = \"kg/mol\");
//   input Real criticalTemperature(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real criticalPressure(min = 0.0, max = 100000000.0, nominal = 100000.0, start = 100000.0, quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real criticalMolarVolume(min = 1e-06, max = 1000000.0, nominal = 1.0, quantity = \"MolarVolume\", unit = \"m3/mol\");
//   input Real acentricFactor;
//   input Real meltingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real normalBoilingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real dipoleMoment(min = 0.0, max = 2.0, unit = \"debye\", quantity = \"ElectricDipoleMoment\");
//   input Boolean hasIdealGasHeatCapacity = false;
//   input Boolean hasCriticalData = false;
//   input Boolean hasDipoleMoment = false;
//   input Boolean hasFundamentalEquation = false;
//   input Boolean hasLiquidHeatCapacity = false;
//   input Boolean hasSolidHeatCapacity = false;
//   input Boolean hasAccurateViscosityData = false;
//   input Boolean hasAccurateConductivityData = false;
//   input Boolean hasVapourPressureCurve = false;
//   input Boolean hasAcentricFactor = false;
//   input Real HCRIT0(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real SCRIT0(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   input Real deltah(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real deltas(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   output FluidConstants res;
// end ThermoPower.Gas.CombustionChamber$plant$CombustionChamber1.Exhaust.FluidConstants;
//
// function ThermoPower.Gas.CombustionChamber$plant$CombustionChamber1.Exhaust.ThermodynamicState \"Automatically generated record constructor for ThermoPower.Gas.CombustionChamber$plant$CombustionChamber1.Exhaust.ThermodynamicState\"
//   input Real p(start = 1000000.0, nominal = 1000000.0, min = 0.0, max = 100000000.0, quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real T(min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real[5] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   output ThermodynamicState res;
// end ThermoPower.Gas.CombustionChamber$plant$CombustionChamber1.Exhaust.ThermodynamicState;
//
// function ThermoPower.Gas.CombustionChamber$plant$CombustionChamber1.Exhaust.h_TX
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = {0.23, 0.02, 0.01, 0.04, 0.7};
//   input Boolean exclEnthForm = true;
//   input enumeration(ZeroAt0K, ZeroAt25C, UserDefined) refChoice = Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K;
//   input Real h_off(quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\");
// algorithm
//   h := X * {Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"O2\", 0.0319988, 0, 271263.4223783392, 1000, {-34255.6342, 484.700097, 1.119010961, 0.00429388924, -6.83630052e-07, -2.0233727e-09, 1.039040018e-12}, {-3391.45487, 18.4969947}, {-1037939.022, 2344.830282, 1.819732036, 0.001267847582, -2.188067988e-07, 2.053719572e-11, -8.193467050000001e-16}, {-16890.10929, 17.38716506}, 259.8369938872708), T, exclEnthForm, refChoice, h_off), Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"Ar\", 0.039948, 0, 155137.3785921698, 1000, {0.0, 0.0, 2.5, 0.0, 0.0, 0.0, 0.0}, {-745.375, 4.37967491}, {20.10538475, -0.05992661069999999, 2.500069401, -3.99214116e-08, 1.20527214e-11, -1.819015576e-15, 1.078576636e-19}, {-744.993961, 4.37918011}, 208.1323720837088), T, exclEnthForm, refChoice, h_off), Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), T, exclEnthForm, refChoice, h_off), Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"CO2\", 0.0440095, -8941478.544405185, 212805.6215135368, 1000, {49436.5054, -626.411601, 5.30172524, 0.002503813816, -2.127308728e-07, -7.68998878e-10, 2.849677801e-13}, {-45281.9846, -7.04827944}, {117696.2419, -1788.791477, 8.291523189999999, -9.22315678e-05, 4.86367688e-09, -1.891053312e-12, 6.330036589999999e-16}, {-39083.5059, -26.52669281}, 188.9244822140674), T, exclEnthForm, refChoice, h_off), Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"N2\", 0.0280134, 0, 309498.4543111511, 1000, {22103.71497, -381.846182, 6.08273836, -0.00853091441, 1.384646189e-05, -9.62579362e-09, 2.519705809e-12}, {710.846086, -10.76003744}, {587712.406, -2239.249073, 6.06694922, -0.00061396855, 1.491806679e-07, -1.923105485e-11, 1.061954386e-15}, {12832.10415, -15.86640027}, 296.8033869505308), T, exclEnthForm, refChoice, h_off)};
// end ThermoPower.Gas.CombustionChamber$plant$CombustionChamber1.Exhaust.h_TX;
//
// function ThermoPower.Gas.CombustionChamber$plant$CombustionChamber1.Exhaust.molarMass
//   input ThermoPower.Gas.CombustionChamber$plant$CombustionChamber1.Exhaust.ThermodynamicState state;
//   output Real MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
// algorithm
//   MM := 0.0319988 / (state.X[1] + state.X[2] + state.X[3] + state.X[4] + state.X[5]);
// end ThermoPower.Gas.CombustionChamber$plant$CombustionChamber1.Exhaust.molarMass;
//
// function ThermoPower.Gas.CombustionChamber$plant$CombustionChamber1.Fuel.FluidConstants \"Automatically generated record constructor for ThermoPower.Gas.CombustionChamber$plant$CombustionChamber1.Fuel.FluidConstants\"
//   input String iupacName;
//   input String casRegistryNumber;
//   input String chemicalFormula;
//   input String structureFormula;
//   input Real molarMass(min = 0.001, max = 0.25, nominal = 0.032, quantity = \"MolarMass\", unit = \"kg/mol\");
//   input Real criticalTemperature(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real criticalPressure(min = 0.0, max = 100000000.0, nominal = 100000.0, start = 100000.0, quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real criticalMolarVolume(min = 1e-06, max = 1000000.0, nominal = 1.0, quantity = \"MolarVolume\", unit = \"m3/mol\");
//   input Real acentricFactor;
//   input Real meltingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real normalBoilingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real dipoleMoment(min = 0.0, max = 2.0, unit = \"debye\", quantity = \"ElectricDipoleMoment\");
//   input Boolean hasIdealGasHeatCapacity = false;
//   input Boolean hasCriticalData = false;
//   input Boolean hasDipoleMoment = false;
//   input Boolean hasFundamentalEquation = false;
//   input Boolean hasLiquidHeatCapacity = false;
//   input Boolean hasSolidHeatCapacity = false;
//   input Boolean hasAccurateViscosityData = false;
//   input Boolean hasAccurateConductivityData = false;
//   input Boolean hasVapourPressureCurve = false;
//   input Boolean hasAcentricFactor = false;
//   input Real HCRIT0(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real SCRIT0(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   input Real deltah(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real deltas(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   output FluidConstants res;
// end ThermoPower.Gas.CombustionChamber$plant$CombustionChamber1.Fuel.FluidConstants;
//
// function ThermoPower.Gas.Compressor$plant$compressor.Medium.FluidConstants \"Automatically generated record constructor for ThermoPower.Gas.Compressor$plant$compressor.Medium.FluidConstants\"
//   input String iupacName;
//   input String casRegistryNumber;
//   input String chemicalFormula;
//   input String structureFormula;
//   input Real molarMass(min = 0.001, max = 0.25, nominal = 0.032, quantity = \"MolarMass\", unit = \"kg/mol\");
//   input Real criticalTemperature(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real criticalPressure(min = 0.0, max = 100000000.0, nominal = 100000.0, start = 100000.0, quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real criticalMolarVolume(min = 1e-06, max = 1000000.0, nominal = 1.0, quantity = \"MolarVolume\", unit = \"m3/mol\");
//   input Real acentricFactor;
//   input Real meltingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real normalBoilingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real dipoleMoment(min = 0.0, max = 2.0, unit = \"debye\", quantity = \"ElectricDipoleMoment\");
//   input Boolean hasIdealGasHeatCapacity = false;
//   input Boolean hasCriticalData = false;
//   input Boolean hasDipoleMoment = false;
//   input Boolean hasFundamentalEquation = false;
//   input Boolean hasLiquidHeatCapacity = false;
//   input Boolean hasSolidHeatCapacity = false;
//   input Boolean hasAccurateViscosityData = false;
//   input Boolean hasAccurateConductivityData = false;
//   input Boolean hasVapourPressureCurve = false;
//   input Boolean hasAcentricFactor = false;
//   input Real HCRIT0(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real SCRIT0(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   input Real deltah(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real deltas(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   output FluidConstants res;
// end ThermoPower.Gas.Compressor$plant$compressor.Medium.FluidConstants;
//
// function ThermoPower.Gas.Compressor$plant$compressor.Medium.T_psX
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0);
//   input Real s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\", min = -10000000.0, max = 10000000.0, nominal = 1000.0);
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   output Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0);
//   protected Real[4] Xfull(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = if size(X, 1) == 4 then X else cat(1, X, {1.0 - sum(X)});
// algorithm
//   T := ThermoPower.Gas.Compressor$plant$compressor.Medium.T_psX.Internal.solve(s, 200.0, 6000.0, p, {Xfull[1], Xfull[2], Xfull[3], Xfull[4]}, ThermoPower.Gas.Compressor$plant$compressor.Medium.T_psX.Internal.f_nonlinear_Data(\"O2\", 0.0319988, 0, 271263.4223783392, 1000, {-34255.6342, 484.700097, 1.119010961, 0.00429388924, -6.83630052e-07, -2.0233727e-09, 1.039040018e-12}, {-3391.45487, 18.4969947}, {-1037939.022, 2344.830282, 1.819732036, 0.001267847582, -2.188067988e-07, 2.053719572e-11, -8.193467050000001e-16}, {-16890.10929, 17.38716506}, 259.8369938872708), 1e-13);
// end ThermoPower.Gas.Compressor$plant$compressor.Medium.T_psX;
//
// function ThermoPower.Gas.Compressor$plant$compressor.Medium.T_psX.Internal.f_nonlinear
//   input Real x;
//   input Real p = 0.0;
//   input Real[:] X = {};
//   input ThermoPower.Gas.Compressor$plant$compressor.Medium.T_psX.Internal.f_nonlinear_Data f_nonlinear_data;
//   output Real y;
//   protected Real[4] Xfull(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = if size(X, 1) == 4 then X else cat(1, X, {1.0 - sum(X)});
//   protected Real[4] Y(unit = \"mol/mol\") = ThermoPower.Gas.Compressor$plant$compressor.Medium.massToMoleFractions(if size(X, 1) == 4 then X else cat(1, X, {1.0 - sum(X)}), {0.0319988, 0.01801528, 0.039948, 0.0280134});
// algorithm
//   y := ThermoPower.Gas.Compressor$plant$compressor.Medium.s_TX(x, {Xfull[1], Xfull[2], Xfull[3], Xfull[4]}) + (-8.314472) * (31.25117191894696 * Xfull[1] * (if Xfull[1] < 1e-15 then Y[1] else log(9.869232667160129e-06 * Y[1] * p)) + 55.50843506179199 * Xfull[2] * (if Xfull[2] < 1e-15 then Y[2] else log(9.869232667160129e-06 * Y[2] * p)) + 25.0325423049965 * Xfull[3] * (if Xfull[3] < 1e-15 then Y[3] else log(9.869232667160129e-06 * Y[3] * p)) + 35.69720205330306 * Xfull[4] * (if Xfull[4] < 1e-15 then Y[4] else log(9.869232667160129e-06 * Y[4] * p)));
// end ThermoPower.Gas.Compressor$plant$compressor.Medium.T_psX.Internal.f_nonlinear;
//
// function ThermoPower.Gas.Compressor$plant$compressor.Medium.T_psX.Internal.f_nonlinear_Data \"Automatically generated record constructor for ThermoPower.Gas.Compressor$plant$compressor.Medium.T_psX.Internal.f_nonlinear_Data\"
//   input String name;
//   input Real MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.0);
//   input Real Hf(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   input Real H0(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   input Real Tlimit(quantity = \"ThermodynamicTemperature\", unit = \"K\", min = 0.0, start = 288.15, nominal = 300.0, displayUnit = \"degC\");
//   input Real[7] alow;
//   input Real[2] blow;
//   input Real[7] ahigh;
//   input Real[2] bhigh;
//   input Real R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\");
//   output f_nonlinear_Data res;
// end ThermoPower.Gas.Compressor$plant$compressor.Medium.T_psX.Internal.f_nonlinear_Data;
//
// function ThermoPower.Gas.Compressor$plant$compressor.Medium.T_psX.Internal.solve
//   input Real y_zero;
//   input Real x_min;
//   input Real x_max;
//   input Real pressure = 0.0;
//   input Real[:] X = {};
//   input ThermoPower.Gas.Compressor$plant$compressor.Medium.T_psX.Internal.f_nonlinear_Data f_nonlinear_data;
//   input Real x_tol = 1e-13;
//   output Real x_zero;
//   protected constant Real eps = 1e-15;
//   protected constant Real x_eps = 1e-10;
//   protected Real c;
//   protected Real d;
//   protected Real e;
//   protected Real m;
//   protected Real s;
//   protected Real p;
//   protected Real q;
//   protected Real r;
//   protected Real tol;
//   protected Real fa;
//   protected Real fb;
//   protected Real fc;
//   protected Boolean found = false;
//   protected Real x_min2 = -1e-10 + x_min;
//   protected Real x_max2 = 1e-10 + x_max;
//   protected Real a = x_min2;
//   protected Real b = x_max2;
// algorithm
//   fa := ThermoPower.Gas.Compressor$plant$compressor.Medium.T_psX.Internal.f_nonlinear(x_min2, pressure, X, f_nonlinear_data) - y_zero;
//   fb := ThermoPower.Gas.Compressor$plant$compressor.Medium.T_psX.Internal.f_nonlinear(x_max2, pressure, X, f_nonlinear_data) - y_zero;
//   fc := fb;
//   if fa > 0.0 and fb > 0.0 or fa < 0.0 and fb < 0.0 then
//     Modelica.Utilities.Streams.error(\"The arguments x_min and x_max to OneNonLinearEquation.solve(..)
//     do not bracket the root of the single non-linear equation:
//       x_min  = \" + String(x_min2, 6, 0, true) + \"
//     \" + \"  x_max  = \" + String(x_max2, 6, 0, true) + \"
//     \" + \"  y_zero = \" + String(y_zero, 6, 0, true) + \"
//     \" + \"  fa = f(x_min) - y_zero = \" + String(fa, 6, 0, true) + \"
//     \" + \"  fb = f(x_max) - y_zero = \" + String(fb, 6, 0, true) + \"
//     \" + \"fa and fb must have opposite sign which is not the case\");
//   end if;
//   c := a;
//   fc := fa;
//   e := b - a;
//   d := e;
//   while not found loop
//     if abs(fc) < abs(fb) then
//       a := b;
//       b := c;
//       c := a;
//       fa := fb;
//       fb := fc;
//       fc := fa;
//     end if;
//     tol := 2e-15 * abs(b) + x_tol;
//     m := 0.5 * (c - b);
//     if abs(m) <= tol or fb == 0.0 then
//       found := true;
//       x_zero := b;
//     else
//       if abs(e) < tol or abs(fa) <= abs(fb) then
//         e := m;
//         d := e;
//       else
//         s := fb / fa;
//         if a == c then
//           p := 2.0 * m * s;
//           q := 1.0 - s;
//         else
//           q := fa / fc;
//           r := fb / fc;
//           p := s * (2.0 * m * q * (q - r) + (a - b) * (-1.0 + r));
//           q := (-1.0 + q) * (-1.0 + r) * (-1.0 + s);
//         end if;
//         if p > 0.0 then
//           q := -q;
//         else
//           p := -p;
//         end if;
//         s := e;
//         e := d;
//         if 2.0 * p < 3.0 * m * q - abs(tol * q) and p < abs(0.5 * s * q) then
//           d := p / q;
//         else
//           e := m;
//           d := e;
//         end if;
//       end if;
//       a := b;
//       fa := fb;
//       b := b + (if abs(d) > tol then d else if m > 0.0 then tol else -tol);
//       fb := ThermoPower.Gas.Compressor$plant$compressor.Medium.T_psX.Internal.f_nonlinear(b, pressure, X, f_nonlinear_data) - y_zero;
//       if fb > 0.0 and fc > 0.0 or fb < 0.0 and fc < 0.0 then
//         c := a;
//         fc := fa;
//         e := b - a;
//         d := e;
//       end if;
//     end if;
//   end while;
// end ThermoPower.Gas.Compressor$plant$compressor.Medium.T_psX.Internal.solve;
//
// function ThermoPower.Gas.Compressor$plant$compressor.Medium.ThermodynamicState \"Automatically generated record constructor for ThermoPower.Gas.Compressor$plant$compressor.Medium.ThermodynamicState\"
//   input Real p(start = 1000000.0, nominal = 1000000.0, min = 0.0, max = 100000000.0, quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real T(min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real[4] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   output ThermodynamicState res;
// end ThermoPower.Gas.Compressor$plant$compressor.Medium.ThermodynamicState;
//
// function ThermoPower.Gas.Compressor$plant$compressor.Medium.gasConstant
//   input ThermoPower.Gas.Compressor$plant$compressor.Medium.ThermodynamicState state;
//   output Real R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\");
// algorithm
//   R := 259.8369938872708 * state.X[1] + 461.5233290850878 * state.X[2] + 208.1323720837088 * state.X[3] + 296.8033869505308 * state.X[4];
// end ThermoPower.Gas.Compressor$plant$compressor.Medium.gasConstant;
//
// function ThermoPower.Gas.Compressor$plant$compressor.Medium.h_TX
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = {0.23, 0.015, 0.005, 0.75};
//   input Boolean exclEnthForm = true;
//   input enumeration(ZeroAt0K, ZeroAt25C, UserDefined) refChoice = Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K;
//   input Real h_off(quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\");
// algorithm
//   h := X * {Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"O2\", 0.0319988, 0, 271263.4223783392, 1000, {-34255.6342, 484.700097, 1.119010961, 0.00429388924, -6.83630052e-07, -2.0233727e-09, 1.039040018e-12}, {-3391.45487, 18.4969947}, {-1037939.022, 2344.830282, 1.819732036, 0.001267847582, -2.188067988e-07, 2.053719572e-11, -8.193467050000001e-16}, {-16890.10929, 17.38716506}, 259.8369938872708), T, exclEnthForm, refChoice, h_off), Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), T, exclEnthForm, refChoice, h_off), Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"Ar\", 0.039948, 0, 155137.3785921698, 1000, {0.0, 0.0, 2.5, 0.0, 0.0, 0.0, 0.0}, {-745.375, 4.37967491}, {20.10538475, -0.05992661069999999, 2.500069401, -3.99214116e-08, 1.20527214e-11, -1.819015576e-15, 1.078576636e-19}, {-744.993961, 4.37918011}, 208.1323720837088), T, exclEnthForm, refChoice, h_off), Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"N2\", 0.0280134, 0, 309498.4543111511, 1000, {22103.71497, -381.846182, 6.08273836, -0.00853091441, 1.384646189e-05, -9.62579362e-09, 2.519705809e-12}, {710.846086, -10.76003744}, {587712.406, -2239.249073, 6.06694922, -0.00061396855, 1.491806679e-07, -1.923105485e-11, 1.061954386e-15}, {12832.10415, -15.86640027}, 296.8033869505308), T, exclEnthForm, refChoice, h_off)};
// end ThermoPower.Gas.Compressor$plant$compressor.Medium.h_TX;
//
// function ThermoPower.Gas.Compressor$plant$compressor.Medium.isentropicEnthalpy
//   input Real p_downstream(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0);
//   input ThermoPower.Gas.Compressor$plant$compressor.Medium.ThermodynamicState refState;
//   output Real h_is(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, start = 300000.0, nominal = 100000.0);
//   input Boolean exact = false;
// algorithm
//   h_is := if exact then ThermoPower.Gas.Compressor$plant$compressor.Medium.specificEnthalpy_psX(p_downstream, ThermoPower.Gas.Compressor$plant$compressor.Medium.specificEntropy(refState), {refState.X[1], refState.X[2], refState.X[3], refState.X[4]}) else ThermoPower.Gas.Compressor$plant$compressor.Medium.isentropicEnthalpyApproximation(p_downstream, refState);
// end ThermoPower.Gas.Compressor$plant$compressor.Medium.isentropicEnthalpy;
//
// function ThermoPower.Gas.Compressor$plant$compressor.Medium.isentropicEnthalpyApproximation
//   input Real p2(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0);
//   input ThermoPower.Gas.Compressor$plant$compressor.Medium.ThermodynamicState state;
//   output Real h_is(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, start = 300000.0, nominal = 100000.0);
//   protected Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, start = 300000.0, nominal = 100000.0);
//   protected Real[4] h_component(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, start = 300000.0, nominal = 100000.0);
//   protected Real[4] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real gamma(quantity = \"RatioOfSpecificHeatCapacities\", unit = \"1\", min = 1.0, max = 500000.0, start = 1.2, nominal = 1.2) = ThermoPower.Gas.Compressor$plant$compressor.Medium.isentropicExponent(state);
// algorithm
//   X := {state.X[1], state.X[2], state.X[3], state.X[4]};
//   h_component := {Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"O2\", 0.0319988, 0, 271263.4223783392, 1000, {-34255.6342, 484.700097, 1.119010961, 0.00429388924, -6.83630052e-07, -2.0233727e-09, 1.039040018e-12}, {-3391.45487, 18.4969947}, {-1037939.022, 2344.830282, 1.819732036, 0.001267847582, -2.188067988e-07, 2.053719572e-11, -8.193467050000001e-16}, {-16890.10929, 17.38716506}, 259.8369938872708), state.T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0), Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), state.T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0), Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"Ar\", 0.039948, 0, 155137.3785921698, 1000, {0.0, 0.0, 2.5, 0.0, 0.0, 0.0, 0.0}, {-745.375, 4.37967491}, {20.10538475, -0.05992661069999999, 2.500069401, -3.99214116e-08, 1.20527214e-11, -1.819015576e-15, 1.078576636e-19}, {-744.993961, 4.37918011}, 208.1323720837088), state.T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0), Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"N2\", 0.0280134, 0, 309498.4543111511, 1000, {22103.71497, -381.846182, 6.08273836, -0.00853091441, 1.384646189e-05, -9.62579362e-09, 2.519705809e-12}, {710.846086, -10.76003744}, {587712.406, -2239.249073, 6.06694922, -0.00061396855, 1.491806679e-07, -1.923105485e-11, 1.061954386e-15}, {12832.10415, -15.86640027}, 296.8033869505308), state.T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0)};
//   h := h_component[1] * X[1] + h_component[2] * X[2] + h_component[3] * X[3] + h_component[4] * X[4];
//   h_is := h + gamma * state.T * ThermoPower.Gas.Compressor$plant$compressor.Medium.gasConstant(state) * (-1.0 + (p2 / state.p) ^ ((-1.0 + gamma) / gamma)) / (-1.0 + gamma);
// end ThermoPower.Gas.Compressor$plant$compressor.Medium.isentropicEnthalpyApproximation;
//
// function ThermoPower.Gas.Compressor$plant$compressor.Medium.isentropicExponent
//   input ThermoPower.Gas.Compressor$plant$compressor.Medium.ThermodynamicState state;
//   output Real gamma(quantity = \"RatioOfSpecificHeatCapacities\", unit = \"1\", min = 1.0, max = 500000.0, start = 1.2, nominal = 1.2);
// algorithm
//   gamma := ThermoPower.Gas.Compressor$plant$compressor.Medium.specificHeatCapacityCp(state) / ThermoPower.Gas.Compressor$plant$compressor.Medium.specificHeatCapacityCv(state);
// end ThermoPower.Gas.Compressor$plant$compressor.Medium.isentropicExponent;
//
// function ThermoPower.Gas.Compressor$plant$compressor.Medium.massToMoleFractions
//   input Real[:] X(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   input Real[:] MMX(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.0);
//   output Real[size(X, 1)] moleFractions(quantity = \"MoleFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real Mmix(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.0);
//   protected Real[size(X, 1)] invMMX;
// algorithm
//   for i in 1:size(X, 1) loop
//     invMMX[i] := 1.0 / MMX[i];
//   end for;
//   Mmix := 1.0 / (X * invMMX);
//   for i in 1:size(X, 1) loop
//     moleFractions[i] := Mmix * X[i] / MMX[i];
//   end for;
// end ThermoPower.Gas.Compressor$plant$compressor.Medium.massToMoleFractions;
//
// function ThermoPower.Gas.Compressor$plant$compressor.Medium.molarMass
//   input ThermoPower.Gas.Compressor$plant$compressor.Medium.ThermodynamicState state;
//   output Real MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
// algorithm
//   MM := 0.0319988 / (state.X[1] + state.X[2] + state.X[3] + state.X[4]);
// end ThermoPower.Gas.Compressor$plant$compressor.Medium.molarMass;
//
// function ThermoPower.Gas.Compressor$plant$compressor.Medium.s_TX
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0);
//   input Real[4] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   output Real s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\", min = -10000000.0, max = 10000000.0, nominal = 1000.0);
// algorithm
//   s := Modelica.Media.IdealGases.Common.Functions.s0_T(Modelica.Media.IdealGases.Common.DataRecord(\"O2\", 0.0319988, 0, 271263.4223783392, 1000, {-34255.6342, 484.700097, 1.119010961, 0.00429388924, -6.83630052e-07, -2.0233727e-09, 1.039040018e-12}, {-3391.45487, 18.4969947}, {-1037939.022, 2344.830282, 1.819732036, 0.001267847582, -2.188067988e-07, 2.053719572e-11, -8.193467050000001e-16}, {-16890.10929, 17.38716506}, 259.8369938872708), T) * X[1] + Modelica.Media.IdealGases.Common.Functions.s0_T(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), T) * X[2] + Modelica.Media.IdealGases.Common.Functions.s0_T(Modelica.Media.IdealGases.Common.DataRecord(\"Ar\", 0.039948, 0, 155137.3785921698, 1000, {0.0, 0.0, 2.5, 0.0, 0.0, 0.0, 0.0}, {-745.375, 4.37967491}, {20.10538475, -0.05992661069999999, 2.500069401, -3.99214116e-08, 1.20527214e-11, -1.819015576e-15, 1.078576636e-19}, {-744.993961, 4.37918011}, 208.1323720837088), T) * X[3] + Modelica.Media.IdealGases.Common.Functions.s0_T(Modelica.Media.IdealGases.Common.DataRecord(\"N2\", 0.0280134, 0, 309498.4543111511, 1000, {22103.71497, -381.846182, 6.08273836, -0.00853091441, 1.384646189e-05, -9.62579362e-09, 2.519705809e-12}, {710.846086, -10.76003744}, {587712.406, -2239.249073, 6.06694922, -0.00061396855, 1.491806679e-07, -1.923105485e-11, 1.061954386e-15}, {12832.10415, -15.86640027}, 296.8033869505308), T) * X[4];
// end ThermoPower.Gas.Compressor$plant$compressor.Medium.s_TX;
//
// function ThermoPower.Gas.Compressor$plant$compressor.Medium.setState_psX
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0);
//   input Real s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\", min = -10000000.0, max = 10000000.0, nominal = 1000.0);
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = {0.23, 0.015, 0.005, 0.75};
//   output ThermoPower.Gas.Compressor$plant$compressor.Medium.ThermodynamicState state;
// algorithm
//   state := if size(X, 1) == 0 then ThermoPower.Gas.Compressor$plant$compressor.Medium.ThermodynamicState(p, ThermoPower.Gas.Compressor$plant$compressor.Medium.T_psX(p, s, {0.23, 0.015, 0.005, 0.75}), {0.23, 0.015, 0.005, 0.75}) else if size(X, 1) == 4 then ThermoPower.Gas.Compressor$plant$compressor.Medium.ThermodynamicState(p, ThermoPower.Gas.Compressor$plant$compressor.Medium.T_psX(p, s, X), X) else ThermoPower.Gas.Compressor$plant$compressor.Medium.ThermodynamicState(p, ThermoPower.Gas.Compressor$plant$compressor.Medium.T_psX(p, s, X), cat(1, X, {1.0 - sum(X)}));
// end ThermoPower.Gas.Compressor$plant$compressor.Medium.setState_psX;
//
// function ThermoPower.Gas.Compressor$plant$compressor.Medium.specificEnthalpy
//   input ThermoPower.Gas.Compressor$plant$compressor.Medium.ThermodynamicState state;
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, start = 300000.0, nominal = 100000.0);
// algorithm
//   h := ThermoPower.Gas.Compressor$plant$compressor.Medium.h_TX(state.T, {state.X[1], state.X[2], state.X[3], state.X[4]}, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0);
// end ThermoPower.Gas.Compressor$plant$compressor.Medium.specificEnthalpy;
//
// function ThermoPower.Gas.Compressor$plant$compressor.Medium.specificEnthalpy_psX
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0);
//   input Real s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\", min = -10000000.0, max = 10000000.0, nominal = 1000.0);
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = {0.23, 0.015, 0.005, 0.75};
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, start = 300000.0, nominal = 100000.0);
// algorithm
//   h := ThermoPower.Gas.Compressor$plant$compressor.Medium.specificEnthalpy(ThermoPower.Gas.Compressor$plant$compressor.Medium.setState_psX(p, s, X));
// end ThermoPower.Gas.Compressor$plant$compressor.Medium.specificEnthalpy_psX;
//
// function ThermoPower.Gas.Compressor$plant$compressor.Medium.specificEntropy
//   input ThermoPower.Gas.Compressor$plant$compressor.Medium.ThermodynamicState state;
//   output Real s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\", min = -10000000.0, max = 10000000.0, nominal = 1000.0);
//   protected Real[4] Y(unit = \"mol/mol\") = ThermoPower.Gas.Compressor$plant$compressor.Medium.massToMoleFractions({state.X[1], state.X[2], state.X[3], state.X[4]}, {0.0319988, 0.01801528, 0.039948, 0.0280134});
// algorithm
//   s := ThermoPower.Gas.Compressor$plant$compressor.Medium.s_TX(state.T, {state.X[1], state.X[2], state.X[3], state.X[4]}) + (-8.314472) * (31.25117191894696 * state.X[1] * (if state.X[1] < 1e-15 then Y[1] else log(9.869232667160129e-06 * Y[1] * state.p)) + 55.50843506179199 * state.X[2] * (if state.X[2] < 1e-15 then Y[2] else log(9.869232667160129e-06 * Y[2] * state.p)) + 25.0325423049965 * state.X[3] * (if state.X[3] < 1e-15 then Y[3] else log(9.869232667160129e-06 * Y[3] * state.p)) + 35.69720205330306 * state.X[4] * (if state.X[4] < 1e-15 then Y[4] else log(9.869232667160129e-06 * Y[4] * state.p)));
// end ThermoPower.Gas.Compressor$plant$compressor.Medium.specificEntropy;
//
// function ThermoPower.Gas.Compressor$plant$compressor.Medium.specificHeatCapacityCp
//   input ThermoPower.Gas.Compressor$plant$compressor.Medium.ThermodynamicState state;
//   output Real cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
// algorithm
//   cp := Modelica.Media.IdealGases.Common.Functions.cp_T(Modelica.Media.IdealGases.Common.DataRecord(\"O2\", 0.0319988, 0, 271263.4223783392, 1000, {-34255.6342, 484.700097, 1.119010961, 0.00429388924, -6.83630052e-07, -2.0233727e-09, 1.039040018e-12}, {-3391.45487, 18.4969947}, {-1037939.022, 2344.830282, 1.819732036, 0.001267847582, -2.188067988e-07, 2.053719572e-11, -8.193467050000001e-16}, {-16890.10929, 17.38716506}, 259.8369938872708), state.T) * state.X[1] + Modelica.Media.IdealGases.Common.Functions.cp_T(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), state.T) * state.X[2] + Modelica.Media.IdealGases.Common.Functions.cp_T(Modelica.Media.IdealGases.Common.DataRecord(\"Ar\", 0.039948, 0, 155137.3785921698, 1000, {0.0, 0.0, 2.5, 0.0, 0.0, 0.0, 0.0}, {-745.375, 4.37967491}, {20.10538475, -0.05992661069999999, 2.500069401, -3.99214116e-08, 1.20527214e-11, -1.819015576e-15, 1.078576636e-19}, {-744.993961, 4.37918011}, 208.1323720837088), state.T) * state.X[3] + Modelica.Media.IdealGases.Common.Functions.cp_T(Modelica.Media.IdealGases.Common.DataRecord(\"N2\", 0.0280134, 0, 309498.4543111511, 1000, {22103.71497, -381.846182, 6.08273836, -0.00853091441, 1.384646189e-05, -9.62579362e-09, 2.519705809e-12}, {710.846086, -10.76003744}, {587712.406, -2239.249073, 6.06694922, -0.00061396855, 1.491806679e-07, -1.923105485e-11, 1.061954386e-15}, {12832.10415, -15.86640027}, 296.8033869505308), state.T) * state.X[4];
// end ThermoPower.Gas.Compressor$plant$compressor.Medium.specificHeatCapacityCp;
//
// function ThermoPower.Gas.Compressor$plant$compressor.Medium.specificHeatCapacityCv
//   input ThermoPower.Gas.Compressor$plant$compressor.Medium.ThermodynamicState state;
//   output Real cv(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
// algorithm
//   cv := Modelica.Media.IdealGases.Common.Functions.cp_T(Modelica.Media.IdealGases.Common.DataRecord(\"O2\", 0.0319988, 0, 271263.4223783392, 1000, {-34255.6342, 484.700097, 1.119010961, 0.00429388924, -6.83630052e-07, -2.0233727e-09, 1.039040018e-12}, {-3391.45487, 18.4969947}, {-1037939.022, 2344.830282, 1.819732036, 0.001267847582, -2.188067988e-07, 2.053719572e-11, -8.193467050000001e-16}, {-16890.10929, 17.38716506}, 259.8369938872708), state.T) * state.X[1] + Modelica.Media.IdealGases.Common.Functions.cp_T(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), state.T) * state.X[2] + Modelica.Media.IdealGases.Common.Functions.cp_T(Modelica.Media.IdealGases.Common.DataRecord(\"Ar\", 0.039948, 0, 155137.3785921698, 1000, {0.0, 0.0, 2.5, 0.0, 0.0, 0.0, 0.0}, {-745.375, 4.37967491}, {20.10538475, -0.05992661069999999, 2.500069401, -3.99214116e-08, 1.20527214e-11, -1.819015576e-15, 1.078576636e-19}, {-744.993961, 4.37918011}, 208.1323720837088), state.T) * state.X[3] + Modelica.Media.IdealGases.Common.Functions.cp_T(Modelica.Media.IdealGases.Common.DataRecord(\"N2\", 0.0280134, 0, 309498.4543111511, 1000, {22103.71497, -381.846182, 6.08273836, -0.00853091441, 1.384646189e-05, -9.62579362e-09, 2.519705809e-12}, {710.846086, -10.76003744}, {587712.406, -2239.249073, 6.06694922, -0.00061396855, 1.491806679e-07, -1.923105485e-11, 1.061954386e-15}, {12832.10415, -15.86640027}, 296.8033869505308), state.T) * state.X[4] + (-259.8369938872708) * state.X[1] + (-461.5233290850878) * state.X[2] + (-208.1323720837088) * state.X[3] + (-296.8033869505308) * state.X[4];
// end ThermoPower.Gas.Compressor$plant$compressor.Medium.specificHeatCapacityCv;
//
// function ThermoPower.Gas.FlangeA$plant$CombustionChamber1$ina.Medium.FluidConstants \"Automatically generated record constructor for ThermoPower.Gas.FlangeA$plant$CombustionChamber1$ina.Medium.FluidConstants\"
//   input String iupacName;
//   input String casRegistryNumber;
//   input String chemicalFormula;
//   input String structureFormula;
//   input Real molarMass(min = 0.001, max = 0.25, nominal = 0.032, quantity = \"MolarMass\", unit = \"kg/mol\");
//   input Real criticalTemperature(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real criticalPressure(min = 0.0, max = 100000000.0, nominal = 100000.0, start = 100000.0, quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real criticalMolarVolume(min = 1e-06, max = 1000000.0, nominal = 1.0, quantity = \"MolarVolume\", unit = \"m3/mol\");
//   input Real acentricFactor;
//   input Real meltingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real normalBoilingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real dipoleMoment(min = 0.0, max = 2.0, unit = \"debye\", quantity = \"ElectricDipoleMoment\");
//   input Boolean hasIdealGasHeatCapacity = false;
//   input Boolean hasCriticalData = false;
//   input Boolean hasDipoleMoment = false;
//   input Boolean hasFundamentalEquation = false;
//   input Boolean hasLiquidHeatCapacity = false;
//   input Boolean hasSolidHeatCapacity = false;
//   input Boolean hasAccurateViscosityData = false;
//   input Boolean hasAccurateConductivityData = false;
//   input Boolean hasVapourPressureCurve = false;
//   input Boolean hasAcentricFactor = false;
//   input Real HCRIT0(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real SCRIT0(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   input Real deltah(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real deltas(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   output FluidConstants res;
// end ThermoPower.Gas.FlangeA$plant$CombustionChamber1$ina.Medium.FluidConstants;
//
// function ThermoPower.Gas.FlangeA$plant$CombustionChamber1$inf.Medium.FluidConstants \"Automatically generated record constructor for ThermoPower.Gas.FlangeA$plant$CombustionChamber1$inf.Medium.FluidConstants\"
//   input String iupacName;
//   input String casRegistryNumber;
//   input String chemicalFormula;
//   input String structureFormula;
//   input Real molarMass(min = 0.001, max = 0.25, nominal = 0.032, quantity = \"MolarMass\", unit = \"kg/mol\");
//   input Real criticalTemperature(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real criticalPressure(min = 0.0, max = 100000000.0, nominal = 100000.0, start = 100000.0, quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real criticalMolarVolume(min = 1e-06, max = 1000000.0, nominal = 1.0, quantity = \"MolarVolume\", unit = \"m3/mol\");
//   input Real acentricFactor;
//   input Real meltingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real normalBoilingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real dipoleMoment(min = 0.0, max = 2.0, unit = \"debye\", quantity = \"ElectricDipoleMoment\");
//   input Boolean hasIdealGasHeatCapacity = false;
//   input Boolean hasCriticalData = false;
//   input Boolean hasDipoleMoment = false;
//   input Boolean hasFundamentalEquation = false;
//   input Boolean hasLiquidHeatCapacity = false;
//   input Boolean hasSolidHeatCapacity = false;
//   input Boolean hasAccurateViscosityData = false;
//   input Boolean hasAccurateConductivityData = false;
//   input Boolean hasVapourPressureCurve = false;
//   input Boolean hasAcentricFactor = false;
//   input Real HCRIT0(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real SCRIT0(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   input Real deltah(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real deltas(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   output FluidConstants res;
// end ThermoPower.Gas.FlangeA$plant$CombustionChamber1$inf.Medium.FluidConstants;
//
// function ThermoPower.Gas.FlangeA$plant$PressDrop1$inlet.Medium.FluidConstants \"Automatically generated record constructor for ThermoPower.Gas.FlangeA$plant$PressDrop1$inlet.Medium.FluidConstants\"
//   input String iupacName;
//   input String casRegistryNumber;
//   input String chemicalFormula;
//   input String structureFormula;
//   input Real molarMass(min = 0.001, max = 0.25, nominal = 0.032, quantity = \"MolarMass\", unit = \"kg/mol\");
//   input Real criticalTemperature(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real criticalPressure(min = 0.0, max = 100000000.0, nominal = 100000.0, start = 100000.0, quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real criticalMolarVolume(min = 1e-06, max = 1000000.0, nominal = 1.0, quantity = \"MolarVolume\", unit = \"m3/mol\");
//   input Real acentricFactor;
//   input Real meltingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real normalBoilingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real dipoleMoment(min = 0.0, max = 2.0, unit = \"debye\", quantity = \"ElectricDipoleMoment\");
//   input Boolean hasIdealGasHeatCapacity = false;
//   input Boolean hasCriticalData = false;
//   input Boolean hasDipoleMoment = false;
//   input Boolean hasFundamentalEquation = false;
//   input Boolean hasLiquidHeatCapacity = false;
//   input Boolean hasSolidHeatCapacity = false;
//   input Boolean hasAccurateViscosityData = false;
//   input Boolean hasAccurateConductivityData = false;
//   input Boolean hasVapourPressureCurve = false;
//   input Boolean hasAcentricFactor = false;
//   input Real HCRIT0(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real SCRIT0(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   input Real deltah(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real deltas(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   output FluidConstants res;
// end ThermoPower.Gas.FlangeA$plant$PressDrop1$inlet.Medium.FluidConstants;
//
// function ThermoPower.Gas.FlangeA$plant$PressDrop2$inlet.Medium.FluidConstants \"Automatically generated record constructor for ThermoPower.Gas.FlangeA$plant$PressDrop2$inlet.Medium.FluidConstants\"
//   input String iupacName;
//   input String casRegistryNumber;
//   input String chemicalFormula;
//   input String structureFormula;
//   input Real molarMass(min = 0.001, max = 0.25, nominal = 0.032, quantity = \"MolarMass\", unit = \"kg/mol\");
//   input Real criticalTemperature(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real criticalPressure(min = 0.0, max = 100000000.0, nominal = 100000.0, start = 100000.0, quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real criticalMolarVolume(min = 1e-06, max = 1000000.0, nominal = 1.0, quantity = \"MolarVolume\", unit = \"m3/mol\");
//   input Real acentricFactor;
//   input Real meltingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real normalBoilingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real dipoleMoment(min = 0.0, max = 2.0, unit = \"debye\", quantity = \"ElectricDipoleMoment\");
//   input Boolean hasIdealGasHeatCapacity = false;
//   input Boolean hasCriticalData = false;
//   input Boolean hasDipoleMoment = false;
//   input Boolean hasFundamentalEquation = false;
//   input Boolean hasLiquidHeatCapacity = false;
//   input Boolean hasSolidHeatCapacity = false;
//   input Boolean hasAccurateViscosityData = false;
//   input Boolean hasAccurateConductivityData = false;
//   input Boolean hasVapourPressureCurve = false;
//   input Boolean hasAcentricFactor = false;
//   input Real HCRIT0(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real SCRIT0(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   input Real deltah(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real deltas(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   output FluidConstants res;
// end ThermoPower.Gas.FlangeA$plant$PressDrop2$inlet.Medium.FluidConstants;
//
// function ThermoPower.Gas.FlangeA$plant$SinkP1$flange.Medium.FluidConstants \"Automatically generated record constructor for ThermoPower.Gas.FlangeA$plant$SinkP1$flange.Medium.FluidConstants\"
//   input String iupacName;
//   input String casRegistryNumber;
//   input String chemicalFormula;
//   input String structureFormula;
//   input Real molarMass(min = 0.001, max = 0.25, nominal = 0.032, quantity = \"MolarMass\", unit = \"kg/mol\");
//   input Real criticalTemperature(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real criticalPressure(min = 0.0, max = 100000000.0, nominal = 100000.0, start = 100000.0, quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real criticalMolarVolume(min = 1e-06, max = 1000000.0, nominal = 1.0, quantity = \"MolarVolume\", unit = \"m3/mol\");
//   input Real acentricFactor;
//   input Real meltingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real normalBoilingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real dipoleMoment(min = 0.0, max = 2.0, unit = \"debye\", quantity = \"ElectricDipoleMoment\");
//   input Boolean hasIdealGasHeatCapacity = false;
//   input Boolean hasCriticalData = false;
//   input Boolean hasDipoleMoment = false;
//   input Boolean hasFundamentalEquation = false;
//   input Boolean hasLiquidHeatCapacity = false;
//   input Boolean hasSolidHeatCapacity = false;
//   input Boolean hasAccurateViscosityData = false;
//   input Boolean hasAccurateConductivityData = false;
//   input Boolean hasVapourPressureCurve = false;
//   input Boolean hasAcentricFactor = false;
//   input Real HCRIT0(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real SCRIT0(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   input Real deltah(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real deltas(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   output FluidConstants res;
// end ThermoPower.Gas.FlangeA$plant$SinkP1$flange.Medium.FluidConstants;
//
// function ThermoPower.Gas.FlangeA$plant$compressor$inlet.Medium.FluidConstants \"Automatically generated record constructor for ThermoPower.Gas.FlangeA$plant$compressor$inlet.Medium.FluidConstants\"
//   input String iupacName;
//   input String casRegistryNumber;
//   input String chemicalFormula;
//   input String structureFormula;
//   input Real molarMass(min = 0.001, max = 0.25, nominal = 0.032, quantity = \"MolarMass\", unit = \"kg/mol\");
//   input Real criticalTemperature(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real criticalPressure(min = 0.0, max = 100000000.0, nominal = 100000.0, start = 100000.0, quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real criticalMolarVolume(min = 1e-06, max = 1000000.0, nominal = 1.0, quantity = \"MolarVolume\", unit = \"m3/mol\");
//   input Real acentricFactor;
//   input Real meltingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real normalBoilingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real dipoleMoment(min = 0.0, max = 2.0, unit = \"debye\", quantity = \"ElectricDipoleMoment\");
//   input Boolean hasIdealGasHeatCapacity = false;
//   input Boolean hasCriticalData = false;
//   input Boolean hasDipoleMoment = false;
//   input Boolean hasFundamentalEquation = false;
//   input Boolean hasLiquidHeatCapacity = false;
//   input Boolean hasSolidHeatCapacity = false;
//   input Boolean hasAccurateViscosityData = false;
//   input Boolean hasAccurateConductivityData = false;
//   input Boolean hasVapourPressureCurve = false;
//   input Boolean hasAcentricFactor = false;
//   input Real HCRIT0(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real SCRIT0(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   input Real deltah(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real deltas(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   output FluidConstants res;
// end ThermoPower.Gas.FlangeA$plant$compressor$inlet.Medium.FluidConstants;
//
// function ThermoPower.Gas.FlangeA$plant$stateInletCC$inlet.Medium.FluidConstants \"Automatically generated record constructor for ThermoPower.Gas.FlangeA$plant$stateInletCC$inlet.Medium.FluidConstants\"
//   input String iupacName;
//   input String casRegistryNumber;
//   input String chemicalFormula;
//   input String structureFormula;
//   input Real molarMass(min = 0.001, max = 0.25, nominal = 0.032, quantity = \"MolarMass\", unit = \"kg/mol\");
//   input Real criticalTemperature(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real criticalPressure(min = 0.0, max = 100000000.0, nominal = 100000.0, start = 100000.0, quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real criticalMolarVolume(min = 1e-06, max = 1000000.0, nominal = 1.0, quantity = \"MolarVolume\", unit = \"m3/mol\");
//   input Real acentricFactor;
//   input Real meltingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real normalBoilingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real dipoleMoment(min = 0.0, max = 2.0, unit = \"debye\", quantity = \"ElectricDipoleMoment\");
//   input Boolean hasIdealGasHeatCapacity = false;
//   input Boolean hasCriticalData = false;
//   input Boolean hasDipoleMoment = false;
//   input Boolean hasFundamentalEquation = false;
//   input Boolean hasLiquidHeatCapacity = false;
//   input Boolean hasSolidHeatCapacity = false;
//   input Boolean hasAccurateViscosityData = false;
//   input Boolean hasAccurateConductivityData = false;
//   input Boolean hasVapourPressureCurve = false;
//   input Boolean hasAcentricFactor = false;
//   input Real HCRIT0(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real SCRIT0(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   input Real deltah(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real deltas(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   output FluidConstants res;
// end ThermoPower.Gas.FlangeA$plant$stateInletCC$inlet.Medium.FluidConstants;
//
// function ThermoPower.Gas.FlangeA$plant$stateOutletCC$inlet.Medium.FluidConstants \"Automatically generated record constructor for ThermoPower.Gas.FlangeA$plant$stateOutletCC$inlet.Medium.FluidConstants\"
//   input String iupacName;
//   input String casRegistryNumber;
//   input String chemicalFormula;
//   input String structureFormula;
//   input Real molarMass(min = 0.001, max = 0.25, nominal = 0.032, quantity = \"MolarMass\", unit = \"kg/mol\");
//   input Real criticalTemperature(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real criticalPressure(min = 0.0, max = 100000000.0, nominal = 100000.0, start = 100000.0, quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real criticalMolarVolume(min = 1e-06, max = 1000000.0, nominal = 1.0, quantity = \"MolarVolume\", unit = \"m3/mol\");
//   input Real acentricFactor;
//   input Real meltingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real normalBoilingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real dipoleMoment(min = 0.0, max = 2.0, unit = \"debye\", quantity = \"ElectricDipoleMoment\");
//   input Boolean hasIdealGasHeatCapacity = false;
//   input Boolean hasCriticalData = false;
//   input Boolean hasDipoleMoment = false;
//   input Boolean hasFundamentalEquation = false;
//   input Boolean hasLiquidHeatCapacity = false;
//   input Boolean hasSolidHeatCapacity = false;
//   input Boolean hasAccurateViscosityData = false;
//   input Boolean hasAccurateConductivityData = false;
//   input Boolean hasVapourPressureCurve = false;
//   input Boolean hasAcentricFactor = false;
//   input Real HCRIT0(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real SCRIT0(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   input Real deltah(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real deltas(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   output FluidConstants res;
// end ThermoPower.Gas.FlangeA$plant$stateOutletCC$inlet.Medium.FluidConstants;
//
// function ThermoPower.Gas.FlangeA$plant$turbine$inlet.Medium.FluidConstants \"Automatically generated record constructor for ThermoPower.Gas.FlangeA$plant$turbine$inlet.Medium.FluidConstants\"
//   input String iupacName;
//   input String casRegistryNumber;
//   input String chemicalFormula;
//   input String structureFormula;
//   input Real molarMass(min = 0.001, max = 0.25, nominal = 0.032, quantity = \"MolarMass\", unit = \"kg/mol\");
//   input Real criticalTemperature(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real criticalPressure(min = 0.0, max = 100000000.0, nominal = 100000.0, start = 100000.0, quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real criticalMolarVolume(min = 1e-06, max = 1000000.0, nominal = 1.0, quantity = \"MolarVolume\", unit = \"m3/mol\");
//   input Real acentricFactor;
//   input Real meltingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real normalBoilingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real dipoleMoment(min = 0.0, max = 2.0, unit = \"debye\", quantity = \"ElectricDipoleMoment\");
//   input Boolean hasIdealGasHeatCapacity = false;
//   input Boolean hasCriticalData = false;
//   input Boolean hasDipoleMoment = false;
//   input Boolean hasFundamentalEquation = false;
//   input Boolean hasLiquidHeatCapacity = false;
//   input Boolean hasSolidHeatCapacity = false;
//   input Boolean hasAccurateViscosityData = false;
//   input Boolean hasAccurateConductivityData = false;
//   input Boolean hasVapourPressureCurve = false;
//   input Boolean hasAcentricFactor = false;
//   input Real HCRIT0(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real SCRIT0(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   input Real deltah(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real deltas(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   output FluidConstants res;
// end ThermoPower.Gas.FlangeA$plant$turbine$inlet.Medium.FluidConstants;
//
// function ThermoPower.Gas.FlangeB$plant$CombustionChamber1$out.Medium.FluidConstants \"Automatically generated record constructor for ThermoPower.Gas.FlangeB$plant$CombustionChamber1$out.Medium.FluidConstants\"
//   input String iupacName;
//   input String casRegistryNumber;
//   input String chemicalFormula;
//   input String structureFormula;
//   input Real molarMass(min = 0.001, max = 0.25, nominal = 0.032, quantity = \"MolarMass\", unit = \"kg/mol\");
//   input Real criticalTemperature(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real criticalPressure(min = 0.0, max = 100000000.0, nominal = 100000.0, start = 100000.0, quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real criticalMolarVolume(min = 1e-06, max = 1000000.0, nominal = 1.0, quantity = \"MolarVolume\", unit = \"m3/mol\");
//   input Real acentricFactor;
//   input Real meltingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real normalBoilingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real dipoleMoment(min = 0.0, max = 2.0, unit = \"debye\", quantity = \"ElectricDipoleMoment\");
//   input Boolean hasIdealGasHeatCapacity = false;
//   input Boolean hasCriticalData = false;
//   input Boolean hasDipoleMoment = false;
//   input Boolean hasFundamentalEquation = false;
//   input Boolean hasLiquidHeatCapacity = false;
//   input Boolean hasSolidHeatCapacity = false;
//   input Boolean hasAccurateViscosityData = false;
//   input Boolean hasAccurateConductivityData = false;
//   input Boolean hasVapourPressureCurve = false;
//   input Boolean hasAcentricFactor = false;
//   input Real HCRIT0(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real SCRIT0(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   input Real deltah(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real deltas(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   output FluidConstants res;
// end ThermoPower.Gas.FlangeB$plant$CombustionChamber1$out.Medium.FluidConstants;
//
// function ThermoPower.Gas.FlangeB$plant$PressDrop1$outlet.Medium.FluidConstants \"Automatically generated record constructor for ThermoPower.Gas.FlangeB$plant$PressDrop1$outlet.Medium.FluidConstants\"
//   input String iupacName;
//   input String casRegistryNumber;
//   input String chemicalFormula;
//   input String structureFormula;
//   input Real molarMass(min = 0.001, max = 0.25, nominal = 0.032, quantity = \"MolarMass\", unit = \"kg/mol\");
//   input Real criticalTemperature(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real criticalPressure(min = 0.0, max = 100000000.0, nominal = 100000.0, start = 100000.0, quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real criticalMolarVolume(min = 1e-06, max = 1000000.0, nominal = 1.0, quantity = \"MolarVolume\", unit = \"m3/mol\");
//   input Real acentricFactor;
//   input Real meltingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real normalBoilingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real dipoleMoment(min = 0.0, max = 2.0, unit = \"debye\", quantity = \"ElectricDipoleMoment\");
//   input Boolean hasIdealGasHeatCapacity = false;
//   input Boolean hasCriticalData = false;
//   input Boolean hasDipoleMoment = false;
//   input Boolean hasFundamentalEquation = false;
//   input Boolean hasLiquidHeatCapacity = false;
//   input Boolean hasSolidHeatCapacity = false;
//   input Boolean hasAccurateViscosityData = false;
//   input Boolean hasAccurateConductivityData = false;
//   input Boolean hasVapourPressureCurve = false;
//   input Boolean hasAcentricFactor = false;
//   input Real HCRIT0(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real SCRIT0(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   input Real deltah(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real deltas(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   output FluidConstants res;
// end ThermoPower.Gas.FlangeB$plant$PressDrop1$outlet.Medium.FluidConstants;
//
// function ThermoPower.Gas.FlangeB$plant$PressDrop2$outlet.Medium.FluidConstants \"Automatically generated record constructor for ThermoPower.Gas.FlangeB$plant$PressDrop2$outlet.Medium.FluidConstants\"
//   input String iupacName;
//   input String casRegistryNumber;
//   input String chemicalFormula;
//   input String structureFormula;
//   input Real molarMass(min = 0.001, max = 0.25, nominal = 0.032, quantity = \"MolarMass\", unit = \"kg/mol\");
//   input Real criticalTemperature(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real criticalPressure(min = 0.0, max = 100000000.0, nominal = 100000.0, start = 100000.0, quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real criticalMolarVolume(min = 1e-06, max = 1000000.0, nominal = 1.0, quantity = \"MolarVolume\", unit = \"m3/mol\");
//   input Real acentricFactor;
//   input Real meltingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real normalBoilingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real dipoleMoment(min = 0.0, max = 2.0, unit = \"debye\", quantity = \"ElectricDipoleMoment\");
//   input Boolean hasIdealGasHeatCapacity = false;
//   input Boolean hasCriticalData = false;
//   input Boolean hasDipoleMoment = false;
//   input Boolean hasFundamentalEquation = false;
//   input Boolean hasLiquidHeatCapacity = false;
//   input Boolean hasSolidHeatCapacity = false;
//   input Boolean hasAccurateViscosityData = false;
//   input Boolean hasAccurateConductivityData = false;
//   input Boolean hasVapourPressureCurve = false;
//   input Boolean hasAcentricFactor = false;
//   input Real HCRIT0(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real SCRIT0(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   input Real deltah(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real deltas(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   output FluidConstants res;
// end ThermoPower.Gas.FlangeB$plant$PressDrop2$outlet.Medium.FluidConstants;
//
// function ThermoPower.Gas.FlangeB$plant$SourceP1$flange.Medium.FluidConstants \"Automatically generated record constructor for ThermoPower.Gas.FlangeB$plant$SourceP1$flange.Medium.FluidConstants\"
//   input String iupacName;
//   input String casRegistryNumber;
//   input String chemicalFormula;
//   input String structureFormula;
//   input Real molarMass(min = 0.001, max = 0.25, nominal = 0.032, quantity = \"MolarMass\", unit = \"kg/mol\");
//   input Real criticalTemperature(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real criticalPressure(min = 0.0, max = 100000000.0, nominal = 100000.0, start = 100000.0, quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real criticalMolarVolume(min = 1e-06, max = 1000000.0, nominal = 1.0, quantity = \"MolarVolume\", unit = \"m3/mol\");
//   input Real acentricFactor;
//   input Real meltingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real normalBoilingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real dipoleMoment(min = 0.0, max = 2.0, unit = \"debye\", quantity = \"ElectricDipoleMoment\");
//   input Boolean hasIdealGasHeatCapacity = false;
//   input Boolean hasCriticalData = false;
//   input Boolean hasDipoleMoment = false;
//   input Boolean hasFundamentalEquation = false;
//   input Boolean hasLiquidHeatCapacity = false;
//   input Boolean hasSolidHeatCapacity = false;
//   input Boolean hasAccurateViscosityData = false;
//   input Boolean hasAccurateConductivityData = false;
//   input Boolean hasVapourPressureCurve = false;
//   input Boolean hasAcentricFactor = false;
//   input Real HCRIT0(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real SCRIT0(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   input Real deltah(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real deltas(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   output FluidConstants res;
// end ThermoPower.Gas.FlangeB$plant$SourceP1$flange.Medium.FluidConstants;
//
// function ThermoPower.Gas.FlangeB$plant$SourceW1$flange.Medium.FluidConstants \"Automatically generated record constructor for ThermoPower.Gas.FlangeB$plant$SourceW1$flange.Medium.FluidConstants\"
//   input String iupacName;
//   input String casRegistryNumber;
//   input String chemicalFormula;
//   input String structureFormula;
//   input Real molarMass(min = 0.001, max = 0.25, nominal = 0.032, quantity = \"MolarMass\", unit = \"kg/mol\");
//   input Real criticalTemperature(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real criticalPressure(min = 0.0, max = 100000000.0, nominal = 100000.0, start = 100000.0, quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real criticalMolarVolume(min = 1e-06, max = 1000000.0, nominal = 1.0, quantity = \"MolarVolume\", unit = \"m3/mol\");
//   input Real acentricFactor;
//   input Real meltingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real normalBoilingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real dipoleMoment(min = 0.0, max = 2.0, unit = \"debye\", quantity = \"ElectricDipoleMoment\");
//   input Boolean hasIdealGasHeatCapacity = false;
//   input Boolean hasCriticalData = false;
//   input Boolean hasDipoleMoment = false;
//   input Boolean hasFundamentalEquation = false;
//   input Boolean hasLiquidHeatCapacity = false;
//   input Boolean hasSolidHeatCapacity = false;
//   input Boolean hasAccurateViscosityData = false;
//   input Boolean hasAccurateConductivityData = false;
//   input Boolean hasVapourPressureCurve = false;
//   input Boolean hasAcentricFactor = false;
//   input Real HCRIT0(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real SCRIT0(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   input Real deltah(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real deltas(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   output FluidConstants res;
// end ThermoPower.Gas.FlangeB$plant$SourceW1$flange.Medium.FluidConstants;
//
// function ThermoPower.Gas.FlangeB$plant$compressor$outlet.Medium.FluidConstants \"Automatically generated record constructor for ThermoPower.Gas.FlangeB$plant$compressor$outlet.Medium.FluidConstants\"
//   input String iupacName;
//   input String casRegistryNumber;
//   input String chemicalFormula;
//   input String structureFormula;
//   input Real molarMass(min = 0.001, max = 0.25, nominal = 0.032, quantity = \"MolarMass\", unit = \"kg/mol\");
//   input Real criticalTemperature(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real criticalPressure(min = 0.0, max = 100000000.0, nominal = 100000.0, start = 100000.0, quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real criticalMolarVolume(min = 1e-06, max = 1000000.0, nominal = 1.0, quantity = \"MolarVolume\", unit = \"m3/mol\");
//   input Real acentricFactor;
//   input Real meltingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real normalBoilingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real dipoleMoment(min = 0.0, max = 2.0, unit = \"debye\", quantity = \"ElectricDipoleMoment\");
//   input Boolean hasIdealGasHeatCapacity = false;
//   input Boolean hasCriticalData = false;
//   input Boolean hasDipoleMoment = false;
//   input Boolean hasFundamentalEquation = false;
//   input Boolean hasLiquidHeatCapacity = false;
//   input Boolean hasSolidHeatCapacity = false;
//   input Boolean hasAccurateViscosityData = false;
//   input Boolean hasAccurateConductivityData = false;
//   input Boolean hasVapourPressureCurve = false;
//   input Boolean hasAcentricFactor = false;
//   input Real HCRIT0(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real SCRIT0(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   input Real deltah(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real deltas(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   output FluidConstants res;
// end ThermoPower.Gas.FlangeB$plant$compressor$outlet.Medium.FluidConstants;
//
// function ThermoPower.Gas.FlangeB$plant$stateInletCC$outlet.Medium.FluidConstants \"Automatically generated record constructor for ThermoPower.Gas.FlangeB$plant$stateInletCC$outlet.Medium.FluidConstants\"
//   input String iupacName;
//   input String casRegistryNumber;
//   input String chemicalFormula;
//   input String structureFormula;
//   input Real molarMass(min = 0.001, max = 0.25, nominal = 0.032, quantity = \"MolarMass\", unit = \"kg/mol\");
//   input Real criticalTemperature(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real criticalPressure(min = 0.0, max = 100000000.0, nominal = 100000.0, start = 100000.0, quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real criticalMolarVolume(min = 1e-06, max = 1000000.0, nominal = 1.0, quantity = \"MolarVolume\", unit = \"m3/mol\");
//   input Real acentricFactor;
//   input Real meltingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real normalBoilingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real dipoleMoment(min = 0.0, max = 2.0, unit = \"debye\", quantity = \"ElectricDipoleMoment\");
//   input Boolean hasIdealGasHeatCapacity = false;
//   input Boolean hasCriticalData = false;
//   input Boolean hasDipoleMoment = false;
//   input Boolean hasFundamentalEquation = false;
//   input Boolean hasLiquidHeatCapacity = false;
//   input Boolean hasSolidHeatCapacity = false;
//   input Boolean hasAccurateViscosityData = false;
//   input Boolean hasAccurateConductivityData = false;
//   input Boolean hasVapourPressureCurve = false;
//   input Boolean hasAcentricFactor = false;
//   input Real HCRIT0(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real SCRIT0(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   input Real deltah(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real deltas(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   output FluidConstants res;
// end ThermoPower.Gas.FlangeB$plant$stateInletCC$outlet.Medium.FluidConstants;
//
// function ThermoPower.Gas.FlangeB$plant$stateOutletCC$outlet.Medium.FluidConstants \"Automatically generated record constructor for ThermoPower.Gas.FlangeB$plant$stateOutletCC$outlet.Medium.FluidConstants\"
//   input String iupacName;
//   input String casRegistryNumber;
//   input String chemicalFormula;
//   input String structureFormula;
//   input Real molarMass(min = 0.001, max = 0.25, nominal = 0.032, quantity = \"MolarMass\", unit = \"kg/mol\");
//   input Real criticalTemperature(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real criticalPressure(min = 0.0, max = 100000000.0, nominal = 100000.0, start = 100000.0, quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real criticalMolarVolume(min = 1e-06, max = 1000000.0, nominal = 1.0, quantity = \"MolarVolume\", unit = \"m3/mol\");
//   input Real acentricFactor;
//   input Real meltingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real normalBoilingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real dipoleMoment(min = 0.0, max = 2.0, unit = \"debye\", quantity = \"ElectricDipoleMoment\");
//   input Boolean hasIdealGasHeatCapacity = false;
//   input Boolean hasCriticalData = false;
//   input Boolean hasDipoleMoment = false;
//   input Boolean hasFundamentalEquation = false;
//   input Boolean hasLiquidHeatCapacity = false;
//   input Boolean hasSolidHeatCapacity = false;
//   input Boolean hasAccurateViscosityData = false;
//   input Boolean hasAccurateConductivityData = false;
//   input Boolean hasVapourPressureCurve = false;
//   input Boolean hasAcentricFactor = false;
//   input Real HCRIT0(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real SCRIT0(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   input Real deltah(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real deltas(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   output FluidConstants res;
// end ThermoPower.Gas.FlangeB$plant$stateOutletCC$outlet.Medium.FluidConstants;
//
// function ThermoPower.Gas.FlangeB$plant$turbine$outlet.Medium.FluidConstants \"Automatically generated record constructor for ThermoPower.Gas.FlangeB$plant$turbine$outlet.Medium.FluidConstants\"
//   input String iupacName;
//   input String casRegistryNumber;
//   input String chemicalFormula;
//   input String structureFormula;
//   input Real molarMass(min = 0.001, max = 0.25, nominal = 0.032, quantity = \"MolarMass\", unit = \"kg/mol\");
//   input Real criticalTemperature(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real criticalPressure(min = 0.0, max = 100000000.0, nominal = 100000.0, start = 100000.0, quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real criticalMolarVolume(min = 1e-06, max = 1000000.0, nominal = 1.0, quantity = \"MolarVolume\", unit = \"m3/mol\");
//   input Real acentricFactor;
//   input Real meltingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real normalBoilingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real dipoleMoment(min = 0.0, max = 2.0, unit = \"debye\", quantity = \"ElectricDipoleMoment\");
//   input Boolean hasIdealGasHeatCapacity = false;
//   input Boolean hasCriticalData = false;
//   input Boolean hasDipoleMoment = false;
//   input Boolean hasFundamentalEquation = false;
//   input Boolean hasLiquidHeatCapacity = false;
//   input Boolean hasSolidHeatCapacity = false;
//   input Boolean hasAccurateViscosityData = false;
//   input Boolean hasAccurateConductivityData = false;
//   input Boolean hasVapourPressureCurve = false;
//   input Boolean hasAcentricFactor = false;
//   input Real HCRIT0(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real SCRIT0(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   input Real deltah(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real deltas(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   output FluidConstants res;
// end ThermoPower.Gas.FlangeB$plant$turbine$outlet.Medium.FluidConstants;
//
// function ThermoPower.Gas.PressDrop$plant$PressDrop1.Medium.FluidConstants \"Automatically generated record constructor for ThermoPower.Gas.PressDrop$plant$PressDrop1.Medium.FluidConstants\"
//   input String iupacName;
//   input String casRegistryNumber;
//   input String chemicalFormula;
//   input String structureFormula;
//   input Real molarMass(min = 0.001, max = 0.25, nominal = 0.032, quantity = \"MolarMass\", unit = \"kg/mol\");
//   input Real criticalTemperature(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real criticalPressure(min = 0.0, max = 100000000.0, nominal = 100000.0, start = 100000.0, quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real criticalMolarVolume(min = 1e-06, max = 1000000.0, nominal = 1.0, quantity = \"MolarVolume\", unit = \"m3/mol\");
//   input Real acentricFactor;
//   input Real meltingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real normalBoilingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real dipoleMoment(min = 0.0, max = 2.0, unit = \"debye\", quantity = \"ElectricDipoleMoment\");
//   input Boolean hasIdealGasHeatCapacity = false;
//   input Boolean hasCriticalData = false;
//   input Boolean hasDipoleMoment = false;
//   input Boolean hasFundamentalEquation = false;
//   input Boolean hasLiquidHeatCapacity = false;
//   input Boolean hasSolidHeatCapacity = false;
//   input Boolean hasAccurateViscosityData = false;
//   input Boolean hasAccurateConductivityData = false;
//   input Boolean hasVapourPressureCurve = false;
//   input Boolean hasAcentricFactor = false;
//   input Real HCRIT0(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real SCRIT0(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   input Real deltah(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real deltas(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   output FluidConstants res;
// end ThermoPower.Gas.PressDrop$plant$PressDrop1.Medium.FluidConstants;
//
// function ThermoPower.Gas.PressDrop$plant$PressDrop1.Medium.ThermodynamicState \"Automatically generated record constructor for ThermoPower.Gas.PressDrop$plant$PressDrop1.Medium.ThermodynamicState\"
//   input Real p(start = 1000000.0, nominal = 1000000.0, min = 0.0, max = 100000000.0, quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real T(min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real[5] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   output ThermodynamicState res;
// end ThermoPower.Gas.PressDrop$plant$PressDrop1.Medium.ThermodynamicState;
//
// function ThermoPower.Gas.PressDrop$plant$PressDrop1.Medium.h_TX
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = {0.23, 0.02, 0.01, 0.04, 0.7};
//   input Boolean exclEnthForm = true;
//   input enumeration(ZeroAt0K, ZeroAt25C, UserDefined) refChoice = Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K;
//   input Real h_off(quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\");
// algorithm
//   h := X * {Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"O2\", 0.0319988, 0, 271263.4223783392, 1000, {-34255.6342, 484.700097, 1.119010961, 0.00429388924, -6.83630052e-07, -2.0233727e-09, 1.039040018e-12}, {-3391.45487, 18.4969947}, {-1037939.022, 2344.830282, 1.819732036, 0.001267847582, -2.188067988e-07, 2.053719572e-11, -8.193467050000001e-16}, {-16890.10929, 17.38716506}, 259.8369938872708), T, exclEnthForm, refChoice, h_off), Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"Ar\", 0.039948, 0, 155137.3785921698, 1000, {0.0, 0.0, 2.5, 0.0, 0.0, 0.0, 0.0}, {-745.375, 4.37967491}, {20.10538475, -0.05992661069999999, 2.500069401, -3.99214116e-08, 1.20527214e-11, -1.819015576e-15, 1.078576636e-19}, {-744.993961, 4.37918011}, 208.1323720837088), T, exclEnthForm, refChoice, h_off), Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), T, exclEnthForm, refChoice, h_off), Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"CO2\", 0.0440095, -8941478.544405185, 212805.6215135368, 1000, {49436.5054, -626.411601, 5.30172524, 0.002503813816, -2.127308728e-07, -7.68998878e-10, 2.849677801e-13}, {-45281.9846, -7.04827944}, {117696.2419, -1788.791477, 8.291523189999999, -9.22315678e-05, 4.86367688e-09, -1.891053312e-12, 6.330036589999999e-16}, {-39083.5059, -26.52669281}, 188.9244822140674), T, exclEnthForm, refChoice, h_off), Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"N2\", 0.0280134, 0, 309498.4543111511, 1000, {22103.71497, -381.846182, 6.08273836, -0.00853091441, 1.384646189e-05, -9.62579362e-09, 2.519705809e-12}, {710.846086, -10.76003744}, {587712.406, -2239.249073, 6.06694922, -0.00061396855, 1.491806679e-07, -1.923105485e-11, 1.061954386e-15}, {12832.10415, -15.86640027}, 296.8033869505308), T, exclEnthForm, refChoice, h_off)};
// end ThermoPower.Gas.PressDrop$plant$PressDrop1.Medium.h_TX;
//
// function ThermoPower.Gas.PressDrop$plant$PressDrop1.Medium.molarMass
//   input ThermoPower.Gas.PressDrop$plant$PressDrop1.Medium.ThermodynamicState state;
//   output Real MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
// algorithm
//   MM := 0.0319988 / (state.X[1] + state.X[2] + state.X[3] + state.X[4] + state.X[5]);
// end ThermoPower.Gas.PressDrop$plant$PressDrop1.Medium.molarMass;
//
// function ThermoPower.Gas.PressDrop$plant$PressDrop1.squareReg
//   input Real x;
//   input Real delta = 0.01;
//   output Real y;
// algorithm
//   y := x * sqrt(x ^ 2.0 + delta ^ 2.0);
// end ThermoPower.Gas.PressDrop$plant$PressDrop1.squareReg;
//
// function ThermoPower.Gas.PressDrop$plant$PressDrop2.Medium.FluidConstants \"Automatically generated record constructor for ThermoPower.Gas.PressDrop$plant$PressDrop2.Medium.FluidConstants\"
//   input String iupacName;
//   input String casRegistryNumber;
//   input String chemicalFormula;
//   input String structureFormula;
//   input Real molarMass(min = 0.001, max = 0.25, nominal = 0.032, quantity = \"MolarMass\", unit = \"kg/mol\");
//   input Real criticalTemperature(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real criticalPressure(min = 0.0, max = 100000000.0, nominal = 100000.0, start = 100000.0, quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real criticalMolarVolume(min = 1e-06, max = 1000000.0, nominal = 1.0, quantity = \"MolarVolume\", unit = \"m3/mol\");
//   input Real acentricFactor;
//   input Real meltingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real normalBoilingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real dipoleMoment(min = 0.0, max = 2.0, unit = \"debye\", quantity = \"ElectricDipoleMoment\");
//   input Boolean hasIdealGasHeatCapacity = false;
//   input Boolean hasCriticalData = false;
//   input Boolean hasDipoleMoment = false;
//   input Boolean hasFundamentalEquation = false;
//   input Boolean hasLiquidHeatCapacity = false;
//   input Boolean hasSolidHeatCapacity = false;
//   input Boolean hasAccurateViscosityData = false;
//   input Boolean hasAccurateConductivityData = false;
//   input Boolean hasVapourPressureCurve = false;
//   input Boolean hasAcentricFactor = false;
//   input Real HCRIT0(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real SCRIT0(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   input Real deltah(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real deltas(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   output FluidConstants res;
// end ThermoPower.Gas.PressDrop$plant$PressDrop2.Medium.FluidConstants;
//
// function ThermoPower.Gas.PressDrop$plant$PressDrop2.Medium.ThermodynamicState \"Automatically generated record constructor for ThermoPower.Gas.PressDrop$plant$PressDrop2.Medium.ThermodynamicState\"
//   input Real p(start = 1000000.0, nominal = 1000000.0, min = 0.0, max = 100000000.0, quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real T(min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real[4] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   output ThermodynamicState res;
// end ThermoPower.Gas.PressDrop$plant$PressDrop2.Medium.ThermodynamicState;
//
// function ThermoPower.Gas.PressDrop$plant$PressDrop2.Medium.h_TX
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = {0.23, 0.015, 0.005, 0.75};
//   input Boolean exclEnthForm = true;
//   input enumeration(ZeroAt0K, ZeroAt25C, UserDefined) refChoice = Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K;
//   input Real h_off(quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\");
// algorithm
//   h := X * {Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"O2\", 0.0319988, 0, 271263.4223783392, 1000, {-34255.6342, 484.700097, 1.119010961, 0.00429388924, -6.83630052e-07, -2.0233727e-09, 1.039040018e-12}, {-3391.45487, 18.4969947}, {-1037939.022, 2344.830282, 1.819732036, 0.001267847582, -2.188067988e-07, 2.053719572e-11, -8.193467050000001e-16}, {-16890.10929, 17.38716506}, 259.8369938872708), T, exclEnthForm, refChoice, h_off), Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), T, exclEnthForm, refChoice, h_off), Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"Ar\", 0.039948, 0, 155137.3785921698, 1000, {0.0, 0.0, 2.5, 0.0, 0.0, 0.0, 0.0}, {-745.375, 4.37967491}, {20.10538475, -0.05992661069999999, 2.500069401, -3.99214116e-08, 1.20527214e-11, -1.819015576e-15, 1.078576636e-19}, {-744.993961, 4.37918011}, 208.1323720837088), T, exclEnthForm, refChoice, h_off), Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"N2\", 0.0280134, 0, 309498.4543111511, 1000, {22103.71497, -381.846182, 6.08273836, -0.00853091441, 1.384646189e-05, -9.62579362e-09, 2.519705809e-12}, {710.846086, -10.76003744}, {587712.406, -2239.249073, 6.06694922, -0.00061396855, 1.491806679e-07, -1.923105485e-11, 1.061954386e-15}, {12832.10415, -15.86640027}, 296.8033869505308), T, exclEnthForm, refChoice, h_off)};
// end ThermoPower.Gas.PressDrop$plant$PressDrop2.Medium.h_TX;
//
// function ThermoPower.Gas.PressDrop$plant$PressDrop2.Medium.molarMass
//   input ThermoPower.Gas.PressDrop$plant$PressDrop2.Medium.ThermodynamicState state;
//   output Real MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
// algorithm
//   MM := 0.0319988 / (state.X[1] + state.X[2] + state.X[3] + state.X[4]);
// end ThermoPower.Gas.PressDrop$plant$PressDrop2.Medium.molarMass;
//
// function ThermoPower.Gas.PressDrop$plant$PressDrop2.squareReg
//   input Real x;
//   input Real delta = 0.01;
//   output Real y;
// algorithm
//   y := x * sqrt(x ^ 2.0 + delta ^ 2.0);
// end ThermoPower.Gas.PressDrop$plant$PressDrop2.squareReg;
//
// function ThermoPower.Gas.SinkPressure$plant$SinkP1.Medium.FluidConstants \"Automatically generated record constructor for ThermoPower.Gas.SinkPressure$plant$SinkP1.Medium.FluidConstants\"
//   input String iupacName;
//   input String casRegistryNumber;
//   input String chemicalFormula;
//   input String structureFormula;
//   input Real molarMass(min = 0.001, max = 0.25, nominal = 0.032, quantity = \"MolarMass\", unit = \"kg/mol\");
//   input Real criticalTemperature(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real criticalPressure(min = 0.0, max = 100000000.0, nominal = 100000.0, start = 100000.0, quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real criticalMolarVolume(min = 1e-06, max = 1000000.0, nominal = 1.0, quantity = \"MolarVolume\", unit = \"m3/mol\");
//   input Real acentricFactor;
//   input Real meltingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real normalBoilingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real dipoleMoment(min = 0.0, max = 2.0, unit = \"debye\", quantity = \"ElectricDipoleMoment\");
//   input Boolean hasIdealGasHeatCapacity = false;
//   input Boolean hasCriticalData = false;
//   input Boolean hasDipoleMoment = false;
//   input Boolean hasFundamentalEquation = false;
//   input Boolean hasLiquidHeatCapacity = false;
//   input Boolean hasSolidHeatCapacity = false;
//   input Boolean hasAccurateViscosityData = false;
//   input Boolean hasAccurateConductivityData = false;
//   input Boolean hasVapourPressureCurve = false;
//   input Boolean hasAcentricFactor = false;
//   input Real HCRIT0(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real SCRIT0(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   input Real deltah(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real deltas(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   output FluidConstants res;
// end ThermoPower.Gas.SinkPressure$plant$SinkP1.Medium.FluidConstants;
//
// function ThermoPower.Gas.SinkPressure$plant$SinkP1.Medium.ThermodynamicState \"Automatically generated record constructor for ThermoPower.Gas.SinkPressure$plant$SinkP1.Medium.ThermodynamicState\"
//   input Real p(start = 1000000.0, nominal = 1000000.0, min = 0.0, max = 100000000.0, quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real T(min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real[5] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   output ThermodynamicState res;
// end ThermoPower.Gas.SinkPressure$plant$SinkP1.Medium.ThermodynamicState;
//
// function ThermoPower.Gas.SinkPressure$plant$SinkP1.Medium.h_TX
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = {0.23, 0.02, 0.01, 0.04, 0.7};
//   input Boolean exclEnthForm = true;
//   input enumeration(ZeroAt0K, ZeroAt25C, UserDefined) refChoice = Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K;
//   input Real h_off(quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\");
// algorithm
//   h := X * {Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"O2\", 0.0319988, 0, 271263.4223783392, 1000, {-34255.6342, 484.700097, 1.119010961, 0.00429388924, -6.83630052e-07, -2.0233727e-09, 1.039040018e-12}, {-3391.45487, 18.4969947}, {-1037939.022, 2344.830282, 1.819732036, 0.001267847582, -2.188067988e-07, 2.053719572e-11, -8.193467050000001e-16}, {-16890.10929, 17.38716506}, 259.8369938872708), T, exclEnthForm, refChoice, h_off), Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"Ar\", 0.039948, 0, 155137.3785921698, 1000, {0.0, 0.0, 2.5, 0.0, 0.0, 0.0, 0.0}, {-745.375, 4.37967491}, {20.10538475, -0.05992661069999999, 2.500069401, -3.99214116e-08, 1.20527214e-11, -1.819015576e-15, 1.078576636e-19}, {-744.993961, 4.37918011}, 208.1323720837088), T, exclEnthForm, refChoice, h_off), Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), T, exclEnthForm, refChoice, h_off), Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"CO2\", 0.0440095, -8941478.544405185, 212805.6215135368, 1000, {49436.5054, -626.411601, 5.30172524, 0.002503813816, -2.127308728e-07, -7.68998878e-10, 2.849677801e-13}, {-45281.9846, -7.04827944}, {117696.2419, -1788.791477, 8.291523189999999, -9.22315678e-05, 4.86367688e-09, -1.891053312e-12, 6.330036589999999e-16}, {-39083.5059, -26.52669281}, 188.9244822140674), T, exclEnthForm, refChoice, h_off), Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"N2\", 0.0280134, 0, 309498.4543111511, 1000, {22103.71497, -381.846182, 6.08273836, -0.00853091441, 1.384646189e-05, -9.62579362e-09, 2.519705809e-12}, {710.846086, -10.76003744}, {587712.406, -2239.249073, 6.06694922, -0.00061396855, 1.491806679e-07, -1.923105485e-11, 1.061954386e-15}, {12832.10415, -15.86640027}, 296.8033869505308), T, exclEnthForm, refChoice, h_off)};
// end ThermoPower.Gas.SinkPressure$plant$SinkP1.Medium.h_TX;
//
// function ThermoPower.Gas.SinkPressure$plant$SinkP1.Medium.molarMass
//   input ThermoPower.Gas.SinkPressure$plant$SinkP1.Medium.ThermodynamicState state;
//   output Real MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
// algorithm
//   MM := 0.0319988 / (state.X[1] + state.X[2] + state.X[3] + state.X[4] + state.X[5]);
// end ThermoPower.Gas.SinkPressure$plant$SinkP1.Medium.molarMass;
//
// function ThermoPower.Gas.SourceMassFlow$plant$SourceW1.Medium.FluidConstants \"Automatically generated record constructor for ThermoPower.Gas.SourceMassFlow$plant$SourceW1.Medium.FluidConstants\"
//   input String iupacName;
//   input String casRegistryNumber;
//   input String chemicalFormula;
//   input String structureFormula;
//   input Real molarMass(min = 0.001, max = 0.25, nominal = 0.032, quantity = \"MolarMass\", unit = \"kg/mol\");
//   input Real criticalTemperature(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real criticalPressure(min = 0.0, max = 100000000.0, nominal = 100000.0, start = 100000.0, quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real criticalMolarVolume(min = 1e-06, max = 1000000.0, nominal = 1.0, quantity = \"MolarVolume\", unit = \"m3/mol\");
//   input Real acentricFactor;
//   input Real meltingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real normalBoilingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real dipoleMoment(min = 0.0, max = 2.0, unit = \"debye\", quantity = \"ElectricDipoleMoment\");
//   input Boolean hasIdealGasHeatCapacity = false;
//   input Boolean hasCriticalData = false;
//   input Boolean hasDipoleMoment = false;
//   input Boolean hasFundamentalEquation = false;
//   input Boolean hasLiquidHeatCapacity = false;
//   input Boolean hasSolidHeatCapacity = false;
//   input Boolean hasAccurateViscosityData = false;
//   input Boolean hasAccurateConductivityData = false;
//   input Boolean hasVapourPressureCurve = false;
//   input Boolean hasAcentricFactor = false;
//   input Real HCRIT0(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real SCRIT0(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   input Real deltah(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real deltas(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   output FluidConstants res;
// end ThermoPower.Gas.SourceMassFlow$plant$SourceW1.Medium.FluidConstants;
//
// function ThermoPower.Gas.SourceMassFlow$plant$SourceW1.Medium.ThermodynamicState \"Automatically generated record constructor for ThermoPower.Gas.SourceMassFlow$plant$SourceW1.Medium.ThermodynamicState\"
//   input Real p(start = 1000000.0, nominal = 1000000.0, min = 0.0, max = 100000000.0, quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real T(min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real[3] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   output ThermodynamicState res;
// end ThermoPower.Gas.SourceMassFlow$plant$SourceW1.Medium.ThermodynamicState;
//
// function ThermoPower.Gas.SourceMassFlow$plant$SourceW1.Medium.h_TX
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = {0.02, 0.012, 0.968};
//   input Boolean exclEnthForm = true;
//   input enumeration(ZeroAt0K, ZeroAt25C, UserDefined) refChoice = Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K;
//   input Real h_off(quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\");
// algorithm
//   h := X * {Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"N2\", 0.0280134, 0, 309498.4543111511, 1000, {22103.71497, -381.846182, 6.08273836, -0.00853091441, 1.384646189e-05, -9.62579362e-09, 2.519705809e-12}, {710.846086, -10.76003744}, {587712.406, -2239.249073, 6.06694922, -0.00061396855, 1.491806679e-07, -1.923105485e-11, 1.061954386e-15}, {12832.10415, -15.86640027}, 296.8033869505308), T, exclEnthForm, refChoice, h_off), Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"CO2\", 0.0440095, -8941478.544405185, 212805.6215135368, 1000, {49436.5054, -626.411601, 5.30172524, 0.002503813816, -2.127308728e-07, -7.68998878e-10, 2.849677801e-13}, {-45281.9846, -7.04827944}, {117696.2419, -1788.791477, 8.291523189999999, -9.22315678e-05, 4.86367688e-09, -1.891053312e-12, 6.330036589999999e-16}, {-39083.5059, -26.52669281}, 188.9244822140674), T, exclEnthForm, refChoice, h_off), Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"CH4\", 0.01604246, -4650159.63885838, 624355.7409524474, 1000, {-176685.0998, 2786.18102, -12.0257785, 0.0391761929, -3.61905443e-05, 2.026853043e-08, -4.976705489999999e-12}, {-23313.1436, 89.0432275}, {3730042.76, -13835.01485, 20.49107091, -0.001961974759, 4.72731304e-07, -3.72881469e-11, 1.623737207e-15}, {75320.6691, -121.9124889}, 518.2791167938085), T, exclEnthForm, refChoice, h_off)};
// end ThermoPower.Gas.SourceMassFlow$plant$SourceW1.Medium.h_TX;
//
// function ThermoPower.Gas.SourceMassFlow$plant$SourceW1.Medium.molarMass
//   input ThermoPower.Gas.SourceMassFlow$plant$SourceW1.Medium.ThermodynamicState state;
//   output Real MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
// algorithm
//   MM := 0.0280134 / (state.X[1] + state.X[2] + state.X[3]);
// end ThermoPower.Gas.SourceMassFlow$plant$SourceW1.Medium.molarMass;
//
// function ThermoPower.Gas.SourcePressure$plant$SourceP1.Medium.FluidConstants \"Automatically generated record constructor for ThermoPower.Gas.SourcePressure$plant$SourceP1.Medium.FluidConstants\"
//   input String iupacName;
//   input String casRegistryNumber;
//   input String chemicalFormula;
//   input String structureFormula;
//   input Real molarMass(min = 0.001, max = 0.25, nominal = 0.032, quantity = \"MolarMass\", unit = \"kg/mol\");
//   input Real criticalTemperature(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real criticalPressure(min = 0.0, max = 100000000.0, nominal = 100000.0, start = 100000.0, quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real criticalMolarVolume(min = 1e-06, max = 1000000.0, nominal = 1.0, quantity = \"MolarVolume\", unit = \"m3/mol\");
//   input Real acentricFactor;
//   input Real meltingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real normalBoilingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real dipoleMoment(min = 0.0, max = 2.0, unit = \"debye\", quantity = \"ElectricDipoleMoment\");
//   input Boolean hasIdealGasHeatCapacity = false;
//   input Boolean hasCriticalData = false;
//   input Boolean hasDipoleMoment = false;
//   input Boolean hasFundamentalEquation = false;
//   input Boolean hasLiquidHeatCapacity = false;
//   input Boolean hasSolidHeatCapacity = false;
//   input Boolean hasAccurateViscosityData = false;
//   input Boolean hasAccurateConductivityData = false;
//   input Boolean hasVapourPressureCurve = false;
//   input Boolean hasAcentricFactor = false;
//   input Real HCRIT0(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real SCRIT0(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   input Real deltah(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real deltas(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   output FluidConstants res;
// end ThermoPower.Gas.SourcePressure$plant$SourceP1.Medium.FluidConstants;
//
// function ThermoPower.Gas.SourcePressure$plant$SourceP1.Medium.ThermodynamicState \"Automatically generated record constructor for ThermoPower.Gas.SourcePressure$plant$SourceP1.Medium.ThermodynamicState\"
//   input Real p(start = 1000000.0, nominal = 1000000.0, min = 0.0, max = 100000000.0, quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real T(min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real[4] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   output ThermodynamicState res;
// end ThermoPower.Gas.SourcePressure$plant$SourceP1.Medium.ThermodynamicState;
//
// function ThermoPower.Gas.SourcePressure$plant$SourceP1.Medium.h_TX
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = {0.23, 0.015, 0.005, 0.75};
//   input Boolean exclEnthForm = true;
//   input enumeration(ZeroAt0K, ZeroAt25C, UserDefined) refChoice = Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K;
//   input Real h_off(quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\");
// algorithm
//   h := X * {Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"O2\", 0.0319988, 0, 271263.4223783392, 1000, {-34255.6342, 484.700097, 1.119010961, 0.00429388924, -6.83630052e-07, -2.0233727e-09, 1.039040018e-12}, {-3391.45487, 18.4969947}, {-1037939.022, 2344.830282, 1.819732036, 0.001267847582, -2.188067988e-07, 2.053719572e-11, -8.193467050000001e-16}, {-16890.10929, 17.38716506}, 259.8369938872708), T, exclEnthForm, refChoice, h_off), Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), T, exclEnthForm, refChoice, h_off), Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"Ar\", 0.039948, 0, 155137.3785921698, 1000, {0.0, 0.0, 2.5, 0.0, 0.0, 0.0, 0.0}, {-745.375, 4.37967491}, {20.10538475, -0.05992661069999999, 2.500069401, -3.99214116e-08, 1.20527214e-11, -1.819015576e-15, 1.078576636e-19}, {-744.993961, 4.37918011}, 208.1323720837088), T, exclEnthForm, refChoice, h_off), Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"N2\", 0.0280134, 0, 309498.4543111511, 1000, {22103.71497, -381.846182, 6.08273836, -0.00853091441, 1.384646189e-05, -9.62579362e-09, 2.519705809e-12}, {710.846086, -10.76003744}, {587712.406, -2239.249073, 6.06694922, -0.00061396855, 1.491806679e-07, -1.923105485e-11, 1.061954386e-15}, {12832.10415, -15.86640027}, 296.8033869505308), T, exclEnthForm, refChoice, h_off)};
// end ThermoPower.Gas.SourcePressure$plant$SourceP1.Medium.h_TX;
//
// function ThermoPower.Gas.SourcePressure$plant$SourceP1.Medium.molarMass
//   input ThermoPower.Gas.SourcePressure$plant$SourceP1.Medium.ThermodynamicState state;
//   output Real MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
// algorithm
//   MM := 0.0319988 / (state.X[1] + state.X[2] + state.X[3] + state.X[4]);
// end ThermoPower.Gas.SourcePressure$plant$SourceP1.Medium.molarMass;
//
// function ThermoPower.Gas.Turbine$plant$turbine.Medium.FluidConstants \"Automatically generated record constructor for ThermoPower.Gas.Turbine$plant$turbine.Medium.FluidConstants\"
//   input String iupacName;
//   input String casRegistryNumber;
//   input String chemicalFormula;
//   input String structureFormula;
//   input Real molarMass(min = 0.001, max = 0.25, nominal = 0.032, quantity = \"MolarMass\", unit = \"kg/mol\");
//   input Real criticalTemperature(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real criticalPressure(min = 0.0, max = 100000000.0, nominal = 100000.0, start = 100000.0, quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real criticalMolarVolume(min = 1e-06, max = 1000000.0, nominal = 1.0, quantity = \"MolarVolume\", unit = \"m3/mol\");
//   input Real acentricFactor;
//   input Real meltingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real normalBoilingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real dipoleMoment(min = 0.0, max = 2.0, unit = \"debye\", quantity = \"ElectricDipoleMoment\");
//   input Boolean hasIdealGasHeatCapacity = false;
//   input Boolean hasCriticalData = false;
//   input Boolean hasDipoleMoment = false;
//   input Boolean hasFundamentalEquation = false;
//   input Boolean hasLiquidHeatCapacity = false;
//   input Boolean hasSolidHeatCapacity = false;
//   input Boolean hasAccurateViscosityData = false;
//   input Boolean hasAccurateConductivityData = false;
//   input Boolean hasVapourPressureCurve = false;
//   input Boolean hasAcentricFactor = false;
//   input Real HCRIT0(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real SCRIT0(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   input Real deltah(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real deltas(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   output FluidConstants res;
// end ThermoPower.Gas.Turbine$plant$turbine.Medium.FluidConstants;
//
// function ThermoPower.Gas.Turbine$plant$turbine.Medium.T_psX
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0);
//   input Real s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\", min = -10000000.0, max = 10000000.0, nominal = 1000.0);
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   output Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0);
//   protected Real[5] Xfull(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = if size(X, 1) == 5 then X else cat(1, X, {1.0 - sum(X)});
// algorithm
//   T := ThermoPower.Gas.Turbine$plant$turbine.Medium.T_psX.Internal.solve(s, 200.0, 6000.0, p, {Xfull[1], Xfull[2], Xfull[3], Xfull[4], Xfull[5]}, ThermoPower.Gas.Turbine$plant$turbine.Medium.T_psX.Internal.f_nonlinear_Data(\"O2\", 0.0319988, 0, 271263.4223783392, 1000, {-34255.6342, 484.700097, 1.119010961, 0.00429388924, -6.83630052e-07, -2.0233727e-09, 1.039040018e-12}, {-3391.45487, 18.4969947}, {-1037939.022, 2344.830282, 1.819732036, 0.001267847582, -2.188067988e-07, 2.053719572e-11, -8.193467050000001e-16}, {-16890.10929, 17.38716506}, 259.8369938872708), 1e-13);
// end ThermoPower.Gas.Turbine$plant$turbine.Medium.T_psX;
//
// function ThermoPower.Gas.Turbine$plant$turbine.Medium.T_psX.Internal.f_nonlinear
//   input Real x;
//   input Real p = 0.0;
//   input Real[:] X = {};
//   input ThermoPower.Gas.Turbine$plant$turbine.Medium.T_psX.Internal.f_nonlinear_Data f_nonlinear_data;
//   output Real y;
//   protected Real[5] Xfull(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = if size(X, 1) == 5 then X else cat(1, X, {1.0 - sum(X)});
//   protected Real[5] Y(unit = \"mol/mol\") = ThermoPower.Gas.Turbine$plant$turbine.Medium.massToMoleFractions(if size(X, 1) == 5 then X else cat(1, X, {1.0 - sum(X)}), {0.0319988, 0.039948, 0.01801528, 0.0440095, 0.0280134});
// algorithm
//   y := ThermoPower.Gas.Turbine$plant$turbine.Medium.s_TX(x, {Xfull[1], Xfull[2], Xfull[3], Xfull[4], Xfull[5]}) + (-8.314472) * (31.25117191894696 * Xfull[1] * (if Xfull[1] < 1e-15 then Y[1] else log(9.869232667160129e-06 * Y[1] * p)) + 25.0325423049965 * Xfull[2] * (if Xfull[2] < 1e-15 then Y[2] else log(9.869232667160129e-06 * Y[2] * p)) + 55.50843506179199 * Xfull[3] * (if Xfull[3] < 1e-15 then Y[3] else log(9.869232667160129e-06 * Y[3] * p)) + 22.7223667617219 * Xfull[4] * (if Xfull[4] < 1e-15 then Y[4] else log(9.869232667160129e-06 * Y[4] * p)) + 35.69720205330306 * Xfull[5] * (if Xfull[5] < 1e-15 then Y[5] else log(9.869232667160129e-06 * Y[5] * p)));
// end ThermoPower.Gas.Turbine$plant$turbine.Medium.T_psX.Internal.f_nonlinear;
//
// function ThermoPower.Gas.Turbine$plant$turbine.Medium.T_psX.Internal.f_nonlinear_Data \"Automatically generated record constructor for ThermoPower.Gas.Turbine$plant$turbine.Medium.T_psX.Internal.f_nonlinear_Data\"
//   input String name;
//   input Real MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.0);
//   input Real Hf(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   input Real H0(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   input Real Tlimit(quantity = \"ThermodynamicTemperature\", unit = \"K\", min = 0.0, start = 288.15, nominal = 300.0, displayUnit = \"degC\");
//   input Real[7] alow;
//   input Real[2] blow;
//   input Real[7] ahigh;
//   input Real[2] bhigh;
//   input Real R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\");
//   output f_nonlinear_Data res;
// end ThermoPower.Gas.Turbine$plant$turbine.Medium.T_psX.Internal.f_nonlinear_Data;
//
// function ThermoPower.Gas.Turbine$plant$turbine.Medium.T_psX.Internal.solve
//   input Real y_zero;
//   input Real x_min;
//   input Real x_max;
//   input Real pressure = 0.0;
//   input Real[:] X = {};
//   input ThermoPower.Gas.Turbine$plant$turbine.Medium.T_psX.Internal.f_nonlinear_Data f_nonlinear_data;
//   input Real x_tol = 1e-13;
//   output Real x_zero;
//   protected constant Real eps = 1e-15;
//   protected constant Real x_eps = 1e-10;
//   protected Real c;
//   protected Real d;
//   protected Real e;
//   protected Real m;
//   protected Real s;
//   protected Real p;
//   protected Real q;
//   protected Real r;
//   protected Real tol;
//   protected Real fa;
//   protected Real fb;
//   protected Real fc;
//   protected Boolean found = false;
//   protected Real x_min2 = -1e-10 + x_min;
//   protected Real x_max2 = 1e-10 + x_max;
//   protected Real a = x_min2;
//   protected Real b = x_max2;
// algorithm
//   fa := ThermoPower.Gas.Turbine$plant$turbine.Medium.T_psX.Internal.f_nonlinear(x_min2, pressure, X, f_nonlinear_data) - y_zero;
//   fb := ThermoPower.Gas.Turbine$plant$turbine.Medium.T_psX.Internal.f_nonlinear(x_max2, pressure, X, f_nonlinear_data) - y_zero;
//   fc := fb;
//   if fa > 0.0 and fb > 0.0 or fa < 0.0 and fb < 0.0 then
//     Modelica.Utilities.Streams.error(\"The arguments x_min and x_max to OneNonLinearEquation.solve(..)
//     do not bracket the root of the single non-linear equation:
//       x_min  = \" + String(x_min2, 6, 0, true) + \"
//     \" + \"  x_max  = \" + String(x_max2, 6, 0, true) + \"
//     \" + \"  y_zero = \" + String(y_zero, 6, 0, true) + \"
//     \" + \"  fa = f(x_min) - y_zero = \" + String(fa, 6, 0, true) + \"
//     \" + \"  fb = f(x_max) - y_zero = \" + String(fb, 6, 0, true) + \"
//     \" + \"fa and fb must have opposite sign which is not the case\");
//   end if;
//   c := a;
//   fc := fa;
//   e := b - a;
//   d := e;
//   while not found loop
//     if abs(fc) < abs(fb) then
//       a := b;
//       b := c;
//       c := a;
//       fa := fb;
//       fb := fc;
//       fc := fa;
//     end if;
//     tol := 2e-15 * abs(b) + x_tol;
//     m := 0.5 * (c - b);
//     if abs(m) <= tol or fb == 0.0 then
//       found := true;
//       x_zero := b;
//     else
//       if abs(e) < tol or abs(fa) <= abs(fb) then
//         e := m;
//         d := e;
//       else
//         s := fb / fa;
//         if a == c then
//           p := 2.0 * m * s;
//           q := 1.0 - s;
//         else
//           q := fa / fc;
//           r := fb / fc;
//           p := s * (2.0 * m * q * (q - r) + (a - b) * (-1.0 + r));
//           q := (-1.0 + q) * (-1.0 + r) * (-1.0 + s);
//         end if;
//         if p > 0.0 then
//           q := -q;
//         else
//           p := -p;
//         end if;
//         s := e;
//         e := d;
//         if 2.0 * p < 3.0 * m * q - abs(tol * q) and p < abs(0.5 * s * q) then
//           d := p / q;
//         else
//           e := m;
//           d := e;
//         end if;
//       end if;
//       a := b;
//       fa := fb;
//       b := b + (if abs(d) > tol then d else if m > 0.0 then tol else -tol);
//       fb := ThermoPower.Gas.Turbine$plant$turbine.Medium.T_psX.Internal.f_nonlinear(b, pressure, X, f_nonlinear_data) - y_zero;
//       if fb > 0.0 and fc > 0.0 or fb < 0.0 and fc < 0.0 then
//         c := a;
//         fc := fa;
//         e := b - a;
//         d := e;
//       end if;
//     end if;
//   end while;
// end ThermoPower.Gas.Turbine$plant$turbine.Medium.T_psX.Internal.solve;
//
// function ThermoPower.Gas.Turbine$plant$turbine.Medium.ThermodynamicState \"Automatically generated record constructor for ThermoPower.Gas.Turbine$plant$turbine.Medium.ThermodynamicState\"
//   input Real p(start = 1000000.0, nominal = 1000000.0, min = 0.0, max = 100000000.0, quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real T(min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real[5] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   output ThermodynamicState res;
// end ThermoPower.Gas.Turbine$plant$turbine.Medium.ThermodynamicState;
//
// function ThermoPower.Gas.Turbine$plant$turbine.Medium.gasConstant
//   input ThermoPower.Gas.Turbine$plant$turbine.Medium.ThermodynamicState state;
//   output Real R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\");
// algorithm
//   R := 259.8369938872708 * state.X[1] + 208.1323720837088 * state.X[2] + 461.5233290850878 * state.X[3] + 188.9244822140674 * state.X[4] + 296.8033869505308 * state.X[5];
// end ThermoPower.Gas.Turbine$plant$turbine.Medium.gasConstant;
//
// function ThermoPower.Gas.Turbine$plant$turbine.Medium.h_TX
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = {0.23, 0.02, 0.01, 0.04, 0.7};
//   input Boolean exclEnthForm = true;
//   input enumeration(ZeroAt0K, ZeroAt25C, UserDefined) refChoice = Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K;
//   input Real h_off(quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\");
// algorithm
//   h := X * {Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"O2\", 0.0319988, 0, 271263.4223783392, 1000, {-34255.6342, 484.700097, 1.119010961, 0.00429388924, -6.83630052e-07, -2.0233727e-09, 1.039040018e-12}, {-3391.45487, 18.4969947}, {-1037939.022, 2344.830282, 1.819732036, 0.001267847582, -2.188067988e-07, 2.053719572e-11, -8.193467050000001e-16}, {-16890.10929, 17.38716506}, 259.8369938872708), T, exclEnthForm, refChoice, h_off), Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"Ar\", 0.039948, 0, 155137.3785921698, 1000, {0.0, 0.0, 2.5, 0.0, 0.0, 0.0, 0.0}, {-745.375, 4.37967491}, {20.10538475, -0.05992661069999999, 2.500069401, -3.99214116e-08, 1.20527214e-11, -1.819015576e-15, 1.078576636e-19}, {-744.993961, 4.37918011}, 208.1323720837088), T, exclEnthForm, refChoice, h_off), Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), T, exclEnthForm, refChoice, h_off), Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"CO2\", 0.0440095, -8941478.544405185, 212805.6215135368, 1000, {49436.5054, -626.411601, 5.30172524, 0.002503813816, -2.127308728e-07, -7.68998878e-10, 2.849677801e-13}, {-45281.9846, -7.04827944}, {117696.2419, -1788.791477, 8.291523189999999, -9.22315678e-05, 4.86367688e-09, -1.891053312e-12, 6.330036589999999e-16}, {-39083.5059, -26.52669281}, 188.9244822140674), T, exclEnthForm, refChoice, h_off), Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"N2\", 0.0280134, 0, 309498.4543111511, 1000, {22103.71497, -381.846182, 6.08273836, -0.00853091441, 1.384646189e-05, -9.62579362e-09, 2.519705809e-12}, {710.846086, -10.76003744}, {587712.406, -2239.249073, 6.06694922, -0.00061396855, 1.491806679e-07, -1.923105485e-11, 1.061954386e-15}, {12832.10415, -15.86640027}, 296.8033869505308), T, exclEnthForm, refChoice, h_off)};
// end ThermoPower.Gas.Turbine$plant$turbine.Medium.h_TX;
//
// function ThermoPower.Gas.Turbine$plant$turbine.Medium.isentropicEnthalpy
//   input Real p_downstream(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0);
//   input ThermoPower.Gas.Turbine$plant$turbine.Medium.ThermodynamicState refState;
//   output Real h_is(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, start = 300000.0, nominal = 100000.0);
//   input Boolean exact = false;
// algorithm
//   h_is := if exact then ThermoPower.Gas.Turbine$plant$turbine.Medium.specificEnthalpy_psX(p_downstream, ThermoPower.Gas.Turbine$plant$turbine.Medium.specificEntropy(refState), {refState.X[1], refState.X[2], refState.X[3], refState.X[4], refState.X[5]}) else ThermoPower.Gas.Turbine$plant$turbine.Medium.isentropicEnthalpyApproximation(p_downstream, refState);
// end ThermoPower.Gas.Turbine$plant$turbine.Medium.isentropicEnthalpy;
//
// function ThermoPower.Gas.Turbine$plant$turbine.Medium.isentropicEnthalpyApproximation
//   input Real p2(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0);
//   input ThermoPower.Gas.Turbine$plant$turbine.Medium.ThermodynamicState state;
//   output Real h_is(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, start = 300000.0, nominal = 100000.0);
//   protected Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, start = 300000.0, nominal = 100000.0);
//   protected Real[5] h_component(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, start = 300000.0, nominal = 100000.0);
//   protected Real[5] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real gamma(quantity = \"RatioOfSpecificHeatCapacities\", unit = \"1\", min = 1.0, max = 500000.0, start = 1.2, nominal = 1.2) = ThermoPower.Gas.Turbine$plant$turbine.Medium.isentropicExponent(state);
// algorithm
//   X := {state.X[1], state.X[2], state.X[3], state.X[4], state.X[5]};
//   h_component := {Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"O2\", 0.0319988, 0, 271263.4223783392, 1000, {-34255.6342, 484.700097, 1.119010961, 0.00429388924, -6.83630052e-07, -2.0233727e-09, 1.039040018e-12}, {-3391.45487, 18.4969947}, {-1037939.022, 2344.830282, 1.819732036, 0.001267847582, -2.188067988e-07, 2.053719572e-11, -8.193467050000001e-16}, {-16890.10929, 17.38716506}, 259.8369938872708), state.T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0), Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"Ar\", 0.039948, 0, 155137.3785921698, 1000, {0.0, 0.0, 2.5, 0.0, 0.0, 0.0, 0.0}, {-745.375, 4.37967491}, {20.10538475, -0.05992661069999999, 2.500069401, -3.99214116e-08, 1.20527214e-11, -1.819015576e-15, 1.078576636e-19}, {-744.993961, 4.37918011}, 208.1323720837088), state.T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0), Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), state.T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0), Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"CO2\", 0.0440095, -8941478.544405185, 212805.6215135368, 1000, {49436.5054, -626.411601, 5.30172524, 0.002503813816, -2.127308728e-07, -7.68998878e-10, 2.849677801e-13}, {-45281.9846, -7.04827944}, {117696.2419, -1788.791477, 8.291523189999999, -9.22315678e-05, 4.86367688e-09, -1.891053312e-12, 6.330036589999999e-16}, {-39083.5059, -26.52669281}, 188.9244822140674), state.T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0), Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"N2\", 0.0280134, 0, 309498.4543111511, 1000, {22103.71497, -381.846182, 6.08273836, -0.00853091441, 1.384646189e-05, -9.62579362e-09, 2.519705809e-12}, {710.846086, -10.76003744}, {587712.406, -2239.249073, 6.06694922, -0.00061396855, 1.491806679e-07, -1.923105485e-11, 1.061954386e-15}, {12832.10415, -15.86640027}, 296.8033869505308), state.T, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0)};
//   h := h_component[1] * X[1] + h_component[2] * X[2] + h_component[3] * X[3] + h_component[4] * X[4] + h_component[5] * X[5];
//   h_is := h + gamma * state.T * ThermoPower.Gas.Turbine$plant$turbine.Medium.gasConstant(state) * (-1.0 + (p2 / state.p) ^ ((-1.0 + gamma) / gamma)) / (-1.0 + gamma);
// end ThermoPower.Gas.Turbine$plant$turbine.Medium.isentropicEnthalpyApproximation;
//
// function ThermoPower.Gas.Turbine$plant$turbine.Medium.isentropicExponent
//   input ThermoPower.Gas.Turbine$plant$turbine.Medium.ThermodynamicState state;
//   output Real gamma(quantity = \"RatioOfSpecificHeatCapacities\", unit = \"1\", min = 1.0, max = 500000.0, start = 1.2, nominal = 1.2);
// algorithm
//   gamma := ThermoPower.Gas.Turbine$plant$turbine.Medium.specificHeatCapacityCp(state) / ThermoPower.Gas.Turbine$plant$turbine.Medium.specificHeatCapacityCv(state);
// end ThermoPower.Gas.Turbine$plant$turbine.Medium.isentropicExponent;
//
// function ThermoPower.Gas.Turbine$plant$turbine.Medium.massToMoleFractions
//   input Real[:] X(quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   input Real[:] MMX(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.0);
//   output Real[size(X, 1)] moleFractions(quantity = \"MoleFraction\", unit = \"1\", min = 0.0, max = 1.0);
//   protected Real Mmix(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.0);
//   protected Real[size(X, 1)] invMMX;
// algorithm
//   for i in 1:size(X, 1) loop
//     invMMX[i] := 1.0 / MMX[i];
//   end for;
//   Mmix := 1.0 / (X * invMMX);
//   for i in 1:size(X, 1) loop
//     moleFractions[i] := Mmix * X[i] / MMX[i];
//   end for;
// end ThermoPower.Gas.Turbine$plant$turbine.Medium.massToMoleFractions;
//
// function ThermoPower.Gas.Turbine$plant$turbine.Medium.molarMass
//   input ThermoPower.Gas.Turbine$plant$turbine.Medium.ThermodynamicState state;
//   output Real MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
// algorithm
//   MM := 0.0319988 / (state.X[1] + state.X[2] + state.X[3] + state.X[4] + state.X[5]);
// end ThermoPower.Gas.Turbine$plant$turbine.Medium.molarMass;
//
// function ThermoPower.Gas.Turbine$plant$turbine.Medium.s_TX
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0);
//   input Real[5] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   output Real s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\", min = -10000000.0, max = 10000000.0, nominal = 1000.0);
// algorithm
//   s := Modelica.Media.IdealGases.Common.Functions.s0_T(Modelica.Media.IdealGases.Common.DataRecord(\"O2\", 0.0319988, 0, 271263.4223783392, 1000, {-34255.6342, 484.700097, 1.119010961, 0.00429388924, -6.83630052e-07, -2.0233727e-09, 1.039040018e-12}, {-3391.45487, 18.4969947}, {-1037939.022, 2344.830282, 1.819732036, 0.001267847582, -2.188067988e-07, 2.053719572e-11, -8.193467050000001e-16}, {-16890.10929, 17.38716506}, 259.8369938872708), T) * X[1] + Modelica.Media.IdealGases.Common.Functions.s0_T(Modelica.Media.IdealGases.Common.DataRecord(\"Ar\", 0.039948, 0, 155137.3785921698, 1000, {0.0, 0.0, 2.5, 0.0, 0.0, 0.0, 0.0}, {-745.375, 4.37967491}, {20.10538475, -0.05992661069999999, 2.500069401, -3.99214116e-08, 1.20527214e-11, -1.819015576e-15, 1.078576636e-19}, {-744.993961, 4.37918011}, 208.1323720837088), T) * X[2] + Modelica.Media.IdealGases.Common.Functions.s0_T(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), T) * X[3] + Modelica.Media.IdealGases.Common.Functions.s0_T(Modelica.Media.IdealGases.Common.DataRecord(\"CO2\", 0.0440095, -8941478.544405185, 212805.6215135368, 1000, {49436.5054, -626.411601, 5.30172524, 0.002503813816, -2.127308728e-07, -7.68998878e-10, 2.849677801e-13}, {-45281.9846, -7.04827944}, {117696.2419, -1788.791477, 8.291523189999999, -9.22315678e-05, 4.86367688e-09, -1.891053312e-12, 6.330036589999999e-16}, {-39083.5059, -26.52669281}, 188.9244822140674), T) * X[4] + Modelica.Media.IdealGases.Common.Functions.s0_T(Modelica.Media.IdealGases.Common.DataRecord(\"N2\", 0.0280134, 0, 309498.4543111511, 1000, {22103.71497, -381.846182, 6.08273836, -0.00853091441, 1.384646189e-05, -9.62579362e-09, 2.519705809e-12}, {710.846086, -10.76003744}, {587712.406, -2239.249073, 6.06694922, -0.00061396855, 1.491806679e-07, -1.923105485e-11, 1.061954386e-15}, {12832.10415, -15.86640027}, 296.8033869505308), T) * X[5];
// end ThermoPower.Gas.Turbine$plant$turbine.Medium.s_TX;
//
// function ThermoPower.Gas.Turbine$plant$turbine.Medium.setState_psX
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0);
//   input Real s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\", min = -10000000.0, max = 10000000.0, nominal = 1000.0);
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = {0.23, 0.02, 0.01, 0.04, 0.7};
//   output ThermoPower.Gas.Turbine$plant$turbine.Medium.ThermodynamicState state;
// algorithm
//   state := if size(X, 1) == 0 then ThermoPower.Gas.Turbine$plant$turbine.Medium.ThermodynamicState(p, ThermoPower.Gas.Turbine$plant$turbine.Medium.T_psX(p, s, {0.23, 0.02, 0.01, 0.04, 0.7}), {0.23, 0.02, 0.01, 0.04, 0.7}) else if size(X, 1) == 5 then ThermoPower.Gas.Turbine$plant$turbine.Medium.ThermodynamicState(p, ThermoPower.Gas.Turbine$plant$turbine.Medium.T_psX(p, s, X), X) else ThermoPower.Gas.Turbine$plant$turbine.Medium.ThermodynamicState(p, ThermoPower.Gas.Turbine$plant$turbine.Medium.T_psX(p, s, X), cat(1, X, {1.0 - sum(X)}));
// end ThermoPower.Gas.Turbine$plant$turbine.Medium.setState_psX;
//
// function ThermoPower.Gas.Turbine$plant$turbine.Medium.specificEnthalpy
//   input ThermoPower.Gas.Turbine$plant$turbine.Medium.ThermodynamicState state;
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, start = 300000.0, nominal = 100000.0);
// algorithm
//   h := ThermoPower.Gas.Turbine$plant$turbine.Medium.h_TX(state.T, {state.X[1], state.X[2], state.X[3], state.X[4], state.X[5]}, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0);
// end ThermoPower.Gas.Turbine$plant$turbine.Medium.specificEnthalpy;
//
// function ThermoPower.Gas.Turbine$plant$turbine.Medium.specificEnthalpy_psX
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0);
//   input Real s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\", min = -10000000.0, max = 10000000.0, nominal = 1000.0);
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = {0.23, 0.02, 0.01, 0.04, 0.7};
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, start = 300000.0, nominal = 100000.0);
// algorithm
//   h := ThermoPower.Gas.Turbine$plant$turbine.Medium.specificEnthalpy(ThermoPower.Gas.Turbine$plant$turbine.Medium.setState_psX(p, s, X));
// end ThermoPower.Gas.Turbine$plant$turbine.Medium.specificEnthalpy_psX;
//
// function ThermoPower.Gas.Turbine$plant$turbine.Medium.specificEntropy
//   input ThermoPower.Gas.Turbine$plant$turbine.Medium.ThermodynamicState state;
//   output Real s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\", min = -10000000.0, max = 10000000.0, nominal = 1000.0);
//   protected Real[5] Y(unit = \"mol/mol\") = ThermoPower.Gas.Turbine$plant$turbine.Medium.massToMoleFractions({state.X[1], state.X[2], state.X[3], state.X[4], state.X[5]}, {0.0319988, 0.039948, 0.01801528, 0.0440095, 0.0280134});
// algorithm
//   s := ThermoPower.Gas.Turbine$plant$turbine.Medium.s_TX(state.T, {state.X[1], state.X[2], state.X[3], state.X[4], state.X[5]}) + (-8.314472) * (31.25117191894696 * state.X[1] * (if state.X[1] < 1e-15 then Y[1] else log(9.869232667160129e-06 * Y[1] * state.p)) + 25.0325423049965 * state.X[2] * (if state.X[2] < 1e-15 then Y[2] else log(9.869232667160129e-06 * Y[2] * state.p)) + 55.50843506179199 * state.X[3] * (if state.X[3] < 1e-15 then Y[3] else log(9.869232667160129e-06 * Y[3] * state.p)) + 22.7223667617219 * state.X[4] * (if state.X[4] < 1e-15 then Y[4] else log(9.869232667160129e-06 * Y[4] * state.p)) + 35.69720205330306 * state.X[5] * (if state.X[5] < 1e-15 then Y[5] else log(9.869232667160129e-06 * Y[5] * state.p)));
// end ThermoPower.Gas.Turbine$plant$turbine.Medium.specificEntropy;
//
// function ThermoPower.Gas.Turbine$plant$turbine.Medium.specificHeatCapacityCp
//   input ThermoPower.Gas.Turbine$plant$turbine.Medium.ThermodynamicState state;
//   output Real cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
// algorithm
//   cp := Modelica.Media.IdealGases.Common.Functions.cp_T(Modelica.Media.IdealGases.Common.DataRecord(\"O2\", 0.0319988, 0, 271263.4223783392, 1000, {-34255.6342, 484.700097, 1.119010961, 0.00429388924, -6.83630052e-07, -2.0233727e-09, 1.039040018e-12}, {-3391.45487, 18.4969947}, {-1037939.022, 2344.830282, 1.819732036, 0.001267847582, -2.188067988e-07, 2.053719572e-11, -8.193467050000001e-16}, {-16890.10929, 17.38716506}, 259.8369938872708), state.T) * state.X[1] + Modelica.Media.IdealGases.Common.Functions.cp_T(Modelica.Media.IdealGases.Common.DataRecord(\"Ar\", 0.039948, 0, 155137.3785921698, 1000, {0.0, 0.0, 2.5, 0.0, 0.0, 0.0, 0.0}, {-745.375, 4.37967491}, {20.10538475, -0.05992661069999999, 2.500069401, -3.99214116e-08, 1.20527214e-11, -1.819015576e-15, 1.078576636e-19}, {-744.993961, 4.37918011}, 208.1323720837088), state.T) * state.X[2] + Modelica.Media.IdealGases.Common.Functions.cp_T(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), state.T) * state.X[3] + Modelica.Media.IdealGases.Common.Functions.cp_T(Modelica.Media.IdealGases.Common.DataRecord(\"CO2\", 0.0440095, -8941478.544405185, 212805.6215135368, 1000, {49436.5054, -626.411601, 5.30172524, 0.002503813816, -2.127308728e-07, -7.68998878e-10, 2.849677801e-13}, {-45281.9846, -7.04827944}, {117696.2419, -1788.791477, 8.291523189999999, -9.22315678e-05, 4.86367688e-09, -1.891053312e-12, 6.330036589999999e-16}, {-39083.5059, -26.52669281}, 188.9244822140674), state.T) * state.X[4] + Modelica.Media.IdealGases.Common.Functions.cp_T(Modelica.Media.IdealGases.Common.DataRecord(\"N2\", 0.0280134, 0, 309498.4543111511, 1000, {22103.71497, -381.846182, 6.08273836, -0.00853091441, 1.384646189e-05, -9.62579362e-09, 2.519705809e-12}, {710.846086, -10.76003744}, {587712.406, -2239.249073, 6.06694922, -0.00061396855, 1.491806679e-07, -1.923105485e-11, 1.061954386e-15}, {12832.10415, -15.86640027}, 296.8033869505308), state.T) * state.X[5];
// end ThermoPower.Gas.Turbine$plant$turbine.Medium.specificHeatCapacityCp;
//
// function ThermoPower.Gas.Turbine$plant$turbine.Medium.specificHeatCapacityCv
//   input ThermoPower.Gas.Turbine$plant$turbine.Medium.ThermodynamicState state;
//   output Real cv(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
// algorithm
//   cv := Modelica.Media.IdealGases.Common.Functions.cp_T(Modelica.Media.IdealGases.Common.DataRecord(\"O2\", 0.0319988, 0, 271263.4223783392, 1000, {-34255.6342, 484.700097, 1.119010961, 0.00429388924, -6.83630052e-07, -2.0233727e-09, 1.039040018e-12}, {-3391.45487, 18.4969947}, {-1037939.022, 2344.830282, 1.819732036, 0.001267847582, -2.188067988e-07, 2.053719572e-11, -8.193467050000001e-16}, {-16890.10929, 17.38716506}, 259.8369938872708), state.T) * state.X[1] + Modelica.Media.IdealGases.Common.Functions.cp_T(Modelica.Media.IdealGases.Common.DataRecord(\"Ar\", 0.039948, 0, 155137.3785921698, 1000, {0.0, 0.0, 2.5, 0.0, 0.0, 0.0, 0.0}, {-745.375, 4.37967491}, {20.10538475, -0.05992661069999999, 2.500069401, -3.99214116e-08, 1.20527214e-11, -1.819015576e-15, 1.078576636e-19}, {-744.993961, 4.37918011}, 208.1323720837088), state.T) * state.X[2] + Modelica.Media.IdealGases.Common.Functions.cp_T(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), state.T) * state.X[3] + Modelica.Media.IdealGases.Common.Functions.cp_T(Modelica.Media.IdealGases.Common.DataRecord(\"CO2\", 0.0440095, -8941478.544405185, 212805.6215135368, 1000, {49436.5054, -626.411601, 5.30172524, 0.002503813816, -2.127308728e-07, -7.68998878e-10, 2.849677801e-13}, {-45281.9846, -7.04827944}, {117696.2419, -1788.791477, 8.291523189999999, -9.22315678e-05, 4.86367688e-09, -1.891053312e-12, 6.330036589999999e-16}, {-39083.5059, -26.52669281}, 188.9244822140674), state.T) * state.X[4] + Modelica.Media.IdealGases.Common.Functions.cp_T(Modelica.Media.IdealGases.Common.DataRecord(\"N2\", 0.0280134, 0, 309498.4543111511, 1000, {22103.71497, -381.846182, 6.08273836, -0.00853091441, 1.384646189e-05, -9.62579362e-09, 2.519705809e-12}, {710.846086, -10.76003744}, {587712.406, -2239.249073, 6.06694922, -0.00061396855, 1.491806679e-07, -1.923105485e-11, 1.061954386e-15}, {12832.10415, -15.86640027}, 296.8033869505308), state.T) * state.X[5] + (-259.8369938872708) * state.X[1] + (-208.1323720837088) * state.X[2] + (-461.5233290850878) * state.X[3] + (-188.9244822140674) * state.X[4] + (-296.8033869505308) * state.X[5];
// end ThermoPower.Gas.Turbine$plant$turbine.Medium.specificHeatCapacityCv;
//
// function ThermoPower.PowerPlants.HRSG.Components.StateReader_gas$plant$stateInletCC.Medium.FluidConstants \"Automatically generated record constructor for ThermoPower.PowerPlants.HRSG.Components.StateReader_gas$plant$stateInletCC.Medium.FluidConstants\"
//   input String iupacName;
//   input String casRegistryNumber;
//   input String chemicalFormula;
//   input String structureFormula;
//   input Real molarMass(min = 0.001, max = 0.25, nominal = 0.032, quantity = \"MolarMass\", unit = \"kg/mol\");
//   input Real criticalTemperature(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real criticalPressure(min = 0.0, max = 100000000.0, nominal = 100000.0, start = 100000.0, quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real criticalMolarVolume(min = 1e-06, max = 1000000.0, nominal = 1.0, quantity = \"MolarVolume\", unit = \"m3/mol\");
//   input Real acentricFactor;
//   input Real meltingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real normalBoilingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real dipoleMoment(min = 0.0, max = 2.0, unit = \"debye\", quantity = \"ElectricDipoleMoment\");
//   input Boolean hasIdealGasHeatCapacity = false;
//   input Boolean hasCriticalData = false;
//   input Boolean hasDipoleMoment = false;
//   input Boolean hasFundamentalEquation = false;
//   input Boolean hasLiquidHeatCapacity = false;
//   input Boolean hasSolidHeatCapacity = false;
//   input Boolean hasAccurateViscosityData = false;
//   input Boolean hasAccurateConductivityData = false;
//   input Boolean hasVapourPressureCurve = false;
//   input Boolean hasAcentricFactor = false;
//   input Real HCRIT0(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real SCRIT0(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   input Real deltah(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real deltas(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   output FluidConstants res;
// end ThermoPower.PowerPlants.HRSG.Components.StateReader_gas$plant$stateInletCC.Medium.FluidConstants;
//
// function ThermoPower.PowerPlants.HRSG.Components.StateReader_gas$plant$stateInletCC.Medium.ThermodynamicState \"Automatically generated record constructor for ThermoPower.PowerPlants.HRSG.Components.StateReader_gas$plant$stateInletCC.Medium.ThermodynamicState\"
//   input Real p(start = 1000000.0, nominal = 1000000.0, min = 0.0, max = 100000000.0, quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real T(min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real[4] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   output ThermodynamicState res;
// end ThermoPower.PowerPlants.HRSG.Components.StateReader_gas$plant$stateInletCC.Medium.ThermodynamicState;
//
// function ThermoPower.PowerPlants.HRSG.Components.StateReader_gas$plant$stateInletCC.Medium.h_TX
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = {0.23, 0.015, 0.005, 0.75};
//   input Boolean exclEnthForm = true;
//   input enumeration(ZeroAt0K, ZeroAt25C, UserDefined) refChoice = Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K;
//   input Real h_off(quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\");
// algorithm
//   h := X * {Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"O2\", 0.0319988, 0, 271263.4223783392, 1000, {-34255.6342, 484.700097, 1.119010961, 0.00429388924, -6.83630052e-07, -2.0233727e-09, 1.039040018e-12}, {-3391.45487, 18.4969947}, {-1037939.022, 2344.830282, 1.819732036, 0.001267847582, -2.188067988e-07, 2.053719572e-11, -8.193467050000001e-16}, {-16890.10929, 17.38716506}, 259.8369938872708), T, exclEnthForm, refChoice, h_off), Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), T, exclEnthForm, refChoice, h_off), Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"Ar\", 0.039948, 0, 155137.3785921698, 1000, {0.0, 0.0, 2.5, 0.0, 0.0, 0.0, 0.0}, {-745.375, 4.37967491}, {20.10538475, -0.05992661069999999, 2.500069401, -3.99214116e-08, 1.20527214e-11, -1.819015576e-15, 1.078576636e-19}, {-744.993961, 4.37918011}, 208.1323720837088), T, exclEnthForm, refChoice, h_off), Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"N2\", 0.0280134, 0, 309498.4543111511, 1000, {22103.71497, -381.846182, 6.08273836, -0.00853091441, 1.384646189e-05, -9.62579362e-09, 2.519705809e-12}, {710.846086, -10.76003744}, {587712.406, -2239.249073, 6.06694922, -0.00061396855, 1.491806679e-07, -1.923105485e-11, 1.061954386e-15}, {12832.10415, -15.86640027}, 296.8033869505308), T, exclEnthForm, refChoice, h_off)};
// end ThermoPower.PowerPlants.HRSG.Components.StateReader_gas$plant$stateInletCC.Medium.h_TX;
//
// function ThermoPower.PowerPlants.HRSG.Components.StateReader_gas$plant$stateInletCC.Medium.molarMass
//   input ThermoPower.PowerPlants.HRSG.Components.StateReader_gas$plant$stateInletCC.Medium.ThermodynamicState state;
//   output Real MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
// algorithm
//   MM := 0.0319988 / (state.X[1] + state.X[2] + state.X[3] + state.X[4]);
// end ThermoPower.PowerPlants.HRSG.Components.StateReader_gas$plant$stateInletCC.Medium.molarMass;
//
// function ThermoPower.PowerPlants.HRSG.Components.StateReader_gas$plant$stateOutletCC.Medium.FluidConstants \"Automatically generated record constructor for ThermoPower.PowerPlants.HRSG.Components.StateReader_gas$plant$stateOutletCC.Medium.FluidConstants\"
//   input String iupacName;
//   input String casRegistryNumber;
//   input String chemicalFormula;
//   input String structureFormula;
//   input Real molarMass(min = 0.001, max = 0.25, nominal = 0.032, quantity = \"MolarMass\", unit = \"kg/mol\");
//   input Real criticalTemperature(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real criticalPressure(min = 0.0, max = 100000000.0, nominal = 100000.0, start = 100000.0, quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real criticalMolarVolume(min = 1e-06, max = 1000000.0, nominal = 1.0, quantity = \"MolarVolume\", unit = \"m3/mol\");
//   input Real acentricFactor;
//   input Real meltingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real normalBoilingPoint(min = 1.0, max = 10000.0, nominal = 300.0, start = 300.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real dipoleMoment(min = 0.0, max = 2.0, unit = \"debye\", quantity = \"ElectricDipoleMoment\");
//   input Boolean hasIdealGasHeatCapacity = false;
//   input Boolean hasCriticalData = false;
//   input Boolean hasDipoleMoment = false;
//   input Boolean hasFundamentalEquation = false;
//   input Boolean hasLiquidHeatCapacity = false;
//   input Boolean hasSolidHeatCapacity = false;
//   input Boolean hasAccurateViscosityData = false;
//   input Boolean hasAccurateConductivityData = false;
//   input Boolean hasVapourPressureCurve = false;
//   input Boolean hasAcentricFactor = false;
//   input Real HCRIT0(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real SCRIT0(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   input Real deltah(min = -10000000000.0, max = 10000000000.0, nominal = 1000000.0, quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   input Real deltas(min = -10000000.0, max = 10000000.0, nominal = 1000.0, quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 0.0;
//   output FluidConstants res;
// end ThermoPower.PowerPlants.HRSG.Components.StateReader_gas$plant$stateOutletCC.Medium.FluidConstants;
//
// function ThermoPower.PowerPlants.HRSG.Components.StateReader_gas$plant$stateOutletCC.Medium.ThermodynamicState \"Automatically generated record constructor for ThermoPower.PowerPlants.HRSG.Components.StateReader_gas$plant$stateOutletCC.Medium.ThermodynamicState\"
//   input Real p(start = 1000000.0, nominal = 1000000.0, min = 0.0, max = 100000000.0, quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   input Real T(min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0, quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\");
//   input Real[5] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   output ThermodynamicState res;
// end ThermoPower.PowerPlants.HRSG.Components.StateReader_gas$plant$stateOutletCC.Medium.ThermodynamicState;
//
// function ThermoPower.PowerPlants.HRSG.Components.StateReader_gas$plant$stateOutletCC.Medium.h_TX
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = {0.23, 0.02, 0.01, 0.04, 0.7};
//   input Boolean exclEnthForm = true;
//   input enumeration(ZeroAt0K, ZeroAt25C, UserDefined) refChoice = Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K;
//   input Real h_off(quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0;
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\");
// algorithm
//   h := X * {Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"O2\", 0.0319988, 0, 271263.4223783392, 1000, {-34255.6342, 484.700097, 1.119010961, 0.00429388924, -6.83630052e-07, -2.0233727e-09, 1.039040018e-12}, {-3391.45487, 18.4969947}, {-1037939.022, 2344.830282, 1.819732036, 0.001267847582, -2.188067988e-07, 2.053719572e-11, -8.193467050000001e-16}, {-16890.10929, 17.38716506}, 259.8369938872708), T, exclEnthForm, refChoice, h_off), Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"Ar\", 0.039948, 0, 155137.3785921698, 1000, {0.0, 0.0, 2.5, 0.0, 0.0, 0.0, 0.0}, {-745.375, 4.37967491}, {20.10538475, -0.05992661069999999, 2.500069401, -3.99214116e-08, 1.20527214e-11, -1.819015576e-15, 1.078576636e-19}, {-744.993961, 4.37918011}, 208.1323720837088), T, exclEnthForm, refChoice, h_off), Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\", 0.01801528, -13423382.81725291, 549760.6476280135, 1000, {-39479.6083, 575.5731019999999, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.836830479999999e-07, 9.426468930000001e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.5233290850878), T, exclEnthForm, refChoice, h_off), Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"CO2\", 0.0440095, -8941478.544405185, 212805.6215135368, 1000, {49436.5054, -626.411601, 5.30172524, 0.002503813816, -2.127308728e-07, -7.68998878e-10, 2.849677801e-13}, {-45281.9846, -7.04827944}, {117696.2419, -1788.791477, 8.291523189999999, -9.22315678e-05, 4.86367688e-09, -1.891053312e-12, 6.330036589999999e-16}, {-39083.5059, -26.52669281}, 188.9244822140674), T, exclEnthForm, refChoice, h_off), Modelica.Media.IdealGases.Common.Functions.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"N2\", 0.0280134, 0, 309498.4543111511, 1000, {22103.71497, -381.846182, 6.08273836, -0.00853091441, 1.384646189e-05, -9.62579362e-09, 2.519705809e-12}, {710.846086, -10.76003744}, {587712.406, -2239.249073, 6.06694922, -0.00061396855, 1.491806679e-07, -1.923105485e-11, 1.061954386e-15}, {12832.10415, -15.86640027}, 296.8033869505308), T, exclEnthForm, refChoice, h_off)};
// end ThermoPower.PowerPlants.HRSG.Components.StateReader_gas$plant$stateOutletCC.Medium.h_TX;
//
// function ThermoPower.PowerPlants.HRSG.Components.StateReader_gas$plant$stateOutletCC.Medium.molarMass
//   input ThermoPower.PowerPlants.HRSG.Components.StateReader_gas$plant$stateOutletCC.Medium.ThermodynamicState state;
//   output Real MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
// algorithm
//   MM := 0.0319988 / (state.X[1] + state.X[2] + state.X[3] + state.X[4] + state.X[5]);
// end ThermoPower.PowerPlants.HRSG.Components.StateReader_gas$plant$stateOutletCC.Medium.molarMass;
//
// class ThermoPower.Examples.BraytonCycle.ClosedLoopSimulator
//   protected parameter Real plant.tableEtaC[1,1] = 0.0;
//   protected parameter Real plant.tableEtaC[1,2] = 95.0;
//   protected parameter Real plant.tableEtaC[1,3] = 100.0;
//   protected parameter Real plant.tableEtaC[1,4] = 105.0;
//   protected parameter Real plant.tableEtaC[2,1] = 1.0;
//   protected parameter Real plant.tableEtaC[2,2] = 0.825;
//   protected parameter Real plant.tableEtaC[2,3] = 0.8100000000000001;
//   protected parameter Real plant.tableEtaC[2,4] = 0.805;
//   protected parameter Real plant.tableEtaC[3,1] = 2.0;
//   protected parameter Real plant.tableEtaC[3,2] = 0.84;
//   protected parameter Real plant.tableEtaC[3,3] = 0.829;
//   protected parameter Real plant.tableEtaC[3,4] = 0.82;
//   protected parameter Real plant.tableEtaC[4,1] = 3.0;
//   protected parameter Real plant.tableEtaC[4,2] = 0.832;
//   protected parameter Real plant.tableEtaC[4,3] = 0.822;
//   protected parameter Real plant.tableEtaC[4,4] = 0.8149999999999999;
//   protected parameter Real plant.tableEtaC[5,1] = 4.0;
//   protected parameter Real plant.tableEtaC[5,2] = 0.825;
//   protected parameter Real plant.tableEtaC[5,3] = 0.8120000000000001;
//   protected parameter Real plant.tableEtaC[5,4] = 0.79;
//   protected parameter Real plant.tableEtaC[6,1] = 5.0;
//   protected parameter Real plant.tableEtaC[6,2] = 0.795;
//   protected parameter Real plant.tableEtaC[6,3] = 0.78;
//   protected parameter Real plant.tableEtaC[6,4] = 0.765;
//   protected parameter Real plant.tablePhicC[1,1] = 0.0;
//   protected parameter Real plant.tablePhicC[1,2] = 95.0;
//   protected parameter Real plant.tablePhicC[1,3] = 100.0;
//   protected parameter Real plant.tablePhicC[1,4] = 105.0;
//   protected parameter Real plant.tablePhicC[2,1] = 1.0;
//   protected parameter Real plant.tablePhicC[2,2] = 0.0383;
//   protected parameter Real plant.tablePhicC[2,3] = 0.043;
//   protected parameter Real plant.tablePhicC[2,4] = 0.0468;
//   protected parameter Real plant.tablePhicC[3,1] = 2.0;
//   protected parameter Real plant.tablePhicC[3,2] = 0.0393;
//   protected parameter Real plant.tablePhicC[3,3] = 0.0438;
//   protected parameter Real plant.tablePhicC[3,4] = 0.0479;
//   protected parameter Real plant.tablePhicC[4,1] = 3.0;
//   protected parameter Real plant.tablePhicC[4,2] = 0.0406;
//   protected parameter Real plant.tablePhicC[4,3] = 0.0452;
//   protected parameter Real plant.tablePhicC[4,4] = 0.0484;
//   protected parameter Real plant.tablePhicC[5,1] = 4.0;
//   protected parameter Real plant.tablePhicC[5,2] = 0.0416;
//   protected parameter Real plant.tablePhicC[5,3] = 0.0461;
//   protected parameter Real plant.tablePhicC[5,4] = 0.0489;
//   protected parameter Real plant.tablePhicC[6,1] = 5.0;
//   protected parameter Real plant.tablePhicC[6,2] = 0.0423;
//   protected parameter Real plant.tablePhicC[6,3] = 0.0466;
//   protected parameter Real plant.tablePhicC[6,4] = 0.0493;
//   protected parameter Real plant.tablePR[1,1] = 0.0;
//   protected parameter Real plant.tablePR[1,2] = 95.0;
//   protected parameter Real plant.tablePR[1,3] = 100.0;
//   protected parameter Real plant.tablePR[1,4] = 105.0;
//   protected parameter Real plant.tablePR[2,1] = 1.0;
//   protected parameter Real plant.tablePR[2,2] = 22.6;
//   protected parameter Real plant.tablePR[2,3] = 27.0;
//   protected parameter Real plant.tablePR[2,4] = 32.0;
//   protected parameter Real plant.tablePR[3,1] = 2.0;
//   protected parameter Real plant.tablePR[3,2] = 22.0;
//   protected parameter Real plant.tablePR[3,3] = 26.6;
//   protected parameter Real plant.tablePR[3,4] = 30.8;
//   protected parameter Real plant.tablePR[4,1] = 3.0;
//   protected parameter Real plant.tablePR[4,2] = 20.8;
//   protected parameter Real plant.tablePR[4,3] = 25.5;
//   protected parameter Real plant.tablePR[4,4] = 29.0;
//   protected parameter Real plant.tablePR[5,1] = 4.0;
//   protected parameter Real plant.tablePR[5,2] = 19.0;
//   protected parameter Real plant.tablePR[5,3] = 24.3;
//   protected parameter Real plant.tablePR[5,4] = 27.1;
//   protected parameter Real plant.tablePR[6,1] = 5.0;
//   protected parameter Real plant.tablePR[6,2] = 17.0;
//   protected parameter Real plant.tablePR[6,3] = 21.5;
//   protected parameter Real plant.tablePR[6,4] = 24.2;
//   protected parameter Real plant.tablePhicT[1,1] = 1.0;
//   protected parameter Real plant.tablePhicT[1,2] = 90.0;
//   protected parameter Real plant.tablePhicT[1,3] = 100.0;
//   protected parameter Real plant.tablePhicT[1,4] = 110.0;
//   protected parameter Real plant.tablePhicT[2,1] = 2.36;
//   protected parameter Real plant.tablePhicT[2,2] = 0.00468;
//   protected parameter Real plant.tablePhicT[2,3] = 0.00468;
//   protected parameter Real plant.tablePhicT[2,4] = 0.00468;
//   protected parameter Real plant.tablePhicT[3,1] = 2.88;
//   protected parameter Real plant.tablePhicT[3,2] = 0.00468;
//   protected parameter Real plant.tablePhicT[3,3] = 0.00468;
//   protected parameter Real plant.tablePhicT[3,4] = 0.00468;
//   protected parameter Real plant.tablePhicT[4,1] = 3.56;
//   protected parameter Real plant.tablePhicT[4,2] = 0.00468;
//   protected parameter Real plant.tablePhicT[4,3] = 0.00468;
//   protected parameter Real plant.tablePhicT[4,4] = 0.00468;
//   protected parameter Real plant.tablePhicT[5,1] = 4.46;
//   protected parameter Real plant.tablePhicT[5,2] = 0.00468;
//   protected parameter Real plant.tablePhicT[5,3] = 0.00468;
//   protected parameter Real plant.tablePhicT[5,4] = 0.00468;
//   protected parameter Real plant.tableEtaT[1,1] = 1.0;
//   protected parameter Real plant.tableEtaT[1,2] = 90.0;
//   protected parameter Real plant.tableEtaT[1,3] = 100.0;
//   protected parameter Real plant.tableEtaT[1,4] = 110.0;
//   protected parameter Real plant.tableEtaT[2,1] = 2.36;
//   protected parameter Real plant.tableEtaT[2,2] = 0.89;
//   protected parameter Real plant.tableEtaT[2,3] = 0.895;
//   protected parameter Real plant.tableEtaT[2,4] = 0.893;
//   protected parameter Real plant.tableEtaT[3,1] = 2.88;
//   protected parameter Real plant.tableEtaT[3,2] = 0.9;
//   protected parameter Real plant.tableEtaT[3,3] = 0.906;
//   protected parameter Real plant.tableEtaT[3,4] = 0.905;
//   protected parameter Real plant.tableEtaT[4,1] = 3.56;
//   protected parameter Real plant.tableEtaT[4,2] = 0.905;
//   protected parameter Real plant.tableEtaT[4,3] = 0.906;
//   protected parameter Real plant.tableEtaT[4,4] = 0.905;
//   protected parameter Real plant.tableEtaT[5,1] = 4.46;
//   protected parameter Real plant.tableEtaT[5,2] = 0.902;
//   protected parameter Real plant.tableEtaT[5,3] = 0.903;
//   protected parameter Real plant.tableEtaT[5,4] = 0.9;
//   parameter Real plant.generator.eta = 1.0;
//   parameter Real plant.generator.J(quantity = \"MomentOfInertia\", unit = \"kg.m2\") = 30.0;
//   parameter Integer plant.generator.Np = 2;
//   parameter Real plant.generator.fstart(quantity = \"Frequency\", unit = \"Hz\") = 50.0;
//   parameter enumeration(noInit, steadyState, steadyStateNoP, steadyStateNoT, steadyStateNoPT) plant.generator.initOpt = ThermoPower.Choices.Init.Options.steadyState;
//   Real plant.generator.Pm(quantity = \"Power\", unit = \"W\");
//   Real plant.generator.Pe(quantity = \"Power\", unit = \"W\");
//   Real plant.generator.Ploss(quantity = \"Power\", unit = \"W\");
//   Real plant.generator.tau(quantity = \"Torque\", unit = \"N.m\");
//   Real plant.generator.omega_m(quantity = \"AngularVelocity\", unit = \"rad/s\", start = 6.283185307179586 * plant.generator.fstart / /*Real*/(plant.generator.Np));
//   Real plant.generator.omega_e(quantity = \"AngularVelocity\", unit = \"rad/s\");
//   Real plant.generator.n(quantity = \"AngularVelocity\", unit = \"1/min\");
//   Real plant.generator.f(quantity = \"Frequency\", unit = \"Hz\");
//   Real plant.generator.powerConnection.W(quantity = \"Power\", unit = \"W\");
//   Real plant.generator.powerConnection.f(quantity = \"Frequency\", unit = \"Hz\");
//   Real plant.generator.shaft.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
//   Real plant.generator.shaft.tau(quantity = \"Torque\", unit = \"N.m\");
//   parameter Boolean plant.network.hasBreaker = false;
//   parameter Real plant.network.deltaStart(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.4;
//   parameter enumeration(noInit, steadyState, steadyStateNoP, steadyStateNoT, steadyStateNoPT) plant.network.initOpt = ThermoPower.Choices.Init.Options.steadyState;
//   parameter Real plant.network.C(quantity = \"Power\", unit = \"W\") = plant.network.Pmax;
//   Real plant.network.Pe(quantity = \"Power\", unit = \"W\");
//   Real plant.network.Ploss(quantity = \"Power\", unit = \"W\");
//   Real plant.network.omega(quantity = \"AngularVelocity\", unit = \"rad/s\");
//   Real plant.network.omegaRef(quantity = \"AngularVelocity\", unit = \"rad/s\");
//   Real plant.network.delta(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\", start = plant.network.deltaStart, stateSelect = StateSelect.prefer);
//   Real plant.network.powerConnection.W(quantity = \"Power\", unit = \"W\");
//   Real plant.network.powerConnection.f(quantity = \"Frequency\", unit = \"Hz\");
//   protected Boolean plant.network.closedInternal;
//   Real plant.network.delta_out;
//   parameter Real plant.network.Pmax(quantity = \"Power\", unit = \"W\") = 10000000.0;
//   parameter Real plant.network.fnom(quantity = \"Frequency\", unit = \"Hz\") = 50.0;
//   parameter Real plant.network.J(quantity = \"MomentOfInertia\", unit = \"kg.m2\") = 30000.0;
//   parameter Real plant.network.r = 0.2;
//   parameter Integer plant.network.Np = 2;
//   Real plant.network.D;
//   Real plant.fuelFlowRate;
//   Real plant.generatedPower;
//   parameter Boolean plant.compressor.explicitIsentropicEnthalpy = true;
//   parameter Real plant.compressor.eta_mech = 0.98;
//   parameter Real plant.compressor.pstart_in(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = 34300.0;
//   parameter Real plant.compressor.pstart_out(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = 830000.0;
//   parameter Real plant.compressor.Tdes_in(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 300.0, nominal = 500.0) = 244.4;
//   parameter Boolean plant.compressor.allowFlowReversal = plant.system.allowFlowReversal;
//   parameter Real plant.compressor.Tstart_in(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 300.0, nominal = 500.0) = 244.4;
//   parameter Real plant.compressor.Tstart_out(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 300.0, nominal = 500.0) = 600.4;
//   parameter Real plant.compressor.Xstart[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) = 0.23;
//   parameter Real plant.compressor.Xstart[2](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) = 0.015;
//   parameter Real plant.compressor.Xstart[3](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) = 0.005;
//   parameter Real plant.compressor.Xstart[4](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) = 0.75;
//   Real plant.compressor.gas_in.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = plant.compressor.pstart_in, nominal = 100000.0);
//   Real plant.compressor.gas_in.Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = plant.compressor.Xstart[1]);
//   Real plant.compressor.gas_in.Xi[2](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = plant.compressor.Xstart[2]);
//   Real plant.compressor.gas_in.Xi[3](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = plant.compressor.Xstart[3]);
//   Real plant.compressor.gas_in.Xi[4](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = plant.compressor.Xstart[4]);
//   Real plant.compressor.gas_in.h(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   Real plant.compressor.gas_in.d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0);
//   Real plant.compressor.gas_in.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = plant.compressor.Tstart_in, nominal = 500.0);
//   Real plant.compressor.gas_in.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.23, nominal = 0.1);
//   Real plant.compressor.gas_in.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.015, nominal = 0.1);
//   Real plant.compressor.gas_in.X[3](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.005, nominal = 0.1);
//   Real plant.compressor.gas_in.X[4](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.75, nominal = 0.1);
//   Real plant.compressor.gas_in.u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real plant.compressor.gas_in.R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real plant.compressor.gas_in.MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real plant.compressor.gas_in.state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0);
//   Real plant.compressor.gas_in.state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0);
//   Real plant.compressor.gas_in.state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.compressor.gas_in.state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.compressor.gas_in.state.X[3](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.compressor.gas_in.state.X[4](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   parameter Boolean plant.compressor.gas_in.preferredMediumStates = false;
//   parameter Boolean plant.compressor.gas_in.standardOrderComponents = true;
//   Real plant.compressor.gas_in.T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = Modelica.SIunits.Conversions.to_degC(plant.compressor.gas_in.T);
//   Real plant.compressor.gas_in.p_bar(quantity = \"Pressure\", unit = \"bar\") = Modelica.SIunits.Conversions.to_bar(plant.compressor.gas_in.p);
//   Real plant.compressor.gas_iso.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = plant.compressor.pstart_out, nominal = 100000.0);
//   Real plant.compressor.gas_iso.Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = plant.compressor.Xstart[1]);
//   Real plant.compressor.gas_iso.Xi[2](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = plant.compressor.Xstart[2]);
//   Real plant.compressor.gas_iso.Xi[3](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = plant.compressor.Xstart[3]);
//   Real plant.compressor.gas_iso.Xi[4](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = plant.compressor.Xstart[4]);
//   Real plant.compressor.gas_iso.h(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   Real plant.compressor.gas_iso.d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0);
//   Real plant.compressor.gas_iso.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = plant.compressor.Tstart_out, nominal = 500.0);
//   Real plant.compressor.gas_iso.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.23, nominal = 0.1);
//   Real plant.compressor.gas_iso.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.015, nominal = 0.1);
//   Real plant.compressor.gas_iso.X[3](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.005, nominal = 0.1);
//   Real plant.compressor.gas_iso.X[4](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.75, nominal = 0.1);
//   Real plant.compressor.gas_iso.u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real plant.compressor.gas_iso.R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real plant.compressor.gas_iso.MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real plant.compressor.gas_iso.state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0);
//   Real plant.compressor.gas_iso.state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0);
//   Real plant.compressor.gas_iso.state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.compressor.gas_iso.state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.compressor.gas_iso.state.X[3](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.compressor.gas_iso.state.X[4](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   parameter Boolean plant.compressor.gas_iso.preferredMediumStates = false;
//   parameter Boolean plant.compressor.gas_iso.standardOrderComponents = true;
//   Real plant.compressor.gas_iso.T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = Modelica.SIunits.Conversions.to_degC(plant.compressor.gas_iso.T);
//   Real plant.compressor.gas_iso.p_bar(quantity = \"Pressure\", unit = \"bar\") = Modelica.SIunits.Conversions.to_bar(plant.compressor.gas_iso.p);
//   Real plant.compressor.hout_iso(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, start = 300000.0, nominal = 100000.0);
//   Real plant.compressor.hout(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, start = 300000.0, nominal = 100000.0);
//   Real plant.compressor.s_in(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\", min = -10000000.0, max = 10000000.0, nominal = 1000.0);
//   Real plant.compressor.pout(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = plant.compressor.pstart_out, nominal = 1000000.0);
//   Real plant.compressor.w(quantity = \"MassFlowRate\", unit = \"kg/s\");
//   Real plant.compressor.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
//   Real plant.compressor.omega(quantity = \"AngularVelocity\", unit = \"rad/s\");
//   Real plant.compressor.tau(quantity = \"Torque\", unit = \"N.m\");
//   Real plant.compressor.eta;
//   Real plant.compressor.PR;
//   Real plant.compressor.inlet.m_flow(quantity = \"MassFlowRate.Air\", unit = \"kg/s\", min = if plant.compressor.allowFlowReversal then -9.999999999999999e+59 else 0.0, max = 100000.0);
//   Real plant.compressor.inlet.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0);
//   Real plant.compressor.inlet.h_outflow(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, start = 300000.0, nominal = 100000.0);
//   Real plant.compressor.inlet.Xi_outflow[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.compressor.inlet.Xi_outflow[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.compressor.inlet.Xi_outflow[3](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.compressor.inlet.Xi_outflow[4](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.compressor.outlet.m_flow(quantity = \"MassFlowRate.Air\", unit = \"kg/s\", min = -100000.0, max = if plant.compressor.allowFlowReversal then 9.999999999999999e+59 else 0.0);
//   Real plant.compressor.outlet.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0);
//   Real plant.compressor.outlet.h_outflow(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, start = 300000.0, nominal = 100000.0);
//   Real plant.compressor.outlet.Xi_outflow[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.compressor.outlet.Xi_outflow[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.compressor.outlet.Xi_outflow[3](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.compressor.outlet.Xi_outflow[4](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.compressor.shaft_a.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
//   Real plant.compressor.shaft_a.tau(quantity = \"Torque\", unit = \"N.m\");
//   Real plant.compressor.shaft_b.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
//   Real plant.compressor.shaft_b.tau(quantity = \"Torque\", unit = \"N.m\");
//   parameter Real plant.compressor.Ndesign(quantity = \"AngularVelocity\", unit = \"rad/s\") = 157.08;
//   parameter Real plant.compressor.tablePhic[1,1] = plant.tablePhicC[1,1];
//   parameter Real plant.compressor.tablePhic[1,2] = plant.tablePhicC[1,2];
//   parameter Real plant.compressor.tablePhic[1,3] = plant.tablePhicC[1,3];
//   parameter Real plant.compressor.tablePhic[1,4] = plant.tablePhicC[1,4];
//   parameter Real plant.compressor.tablePhic[2,1] = plant.tablePhicC[2,1];
//   parameter Real plant.compressor.tablePhic[2,2] = plant.tablePhicC[2,2];
//   parameter Real plant.compressor.tablePhic[2,3] = plant.tablePhicC[2,3];
//   parameter Real plant.compressor.tablePhic[2,4] = plant.tablePhicC[2,4];
//   parameter Real plant.compressor.tablePhic[3,1] = plant.tablePhicC[3,1];
//   parameter Real plant.compressor.tablePhic[3,2] = plant.tablePhicC[3,2];
//   parameter Real plant.compressor.tablePhic[3,3] = plant.tablePhicC[3,3];
//   parameter Real plant.compressor.tablePhic[3,4] = plant.tablePhicC[3,4];
//   parameter Real plant.compressor.tablePhic[4,1] = plant.tablePhicC[4,1];
//   parameter Real plant.compressor.tablePhic[4,2] = plant.tablePhicC[4,2];
//   parameter Real plant.compressor.tablePhic[4,3] = plant.tablePhicC[4,3];
//   parameter Real plant.compressor.tablePhic[4,4] = plant.tablePhicC[4,4];
//   parameter Real plant.compressor.tablePhic[5,1] = plant.tablePhicC[5,1];
//   parameter Real plant.compressor.tablePhic[5,2] = plant.tablePhicC[5,2];
//   parameter Real plant.compressor.tablePhic[5,3] = plant.tablePhicC[5,3];
//   parameter Real plant.compressor.tablePhic[5,4] = plant.tablePhicC[5,4];
//   parameter Real plant.compressor.tablePhic[6,1] = plant.tablePhicC[6,1];
//   parameter Real plant.compressor.tablePhic[6,2] = plant.tablePhicC[6,2];
//   parameter Real plant.compressor.tablePhic[6,3] = plant.tablePhicC[6,3];
//   parameter Real plant.compressor.tablePhic[6,4] = plant.tablePhicC[6,4];
//   parameter Real plant.compressor.tableEta[1,1] = plant.tableEtaC[1,1];
//   parameter Real plant.compressor.tableEta[1,2] = plant.tableEtaC[1,2];
//   parameter Real plant.compressor.tableEta[1,3] = plant.tableEtaC[1,3];
//   parameter Real plant.compressor.tableEta[1,4] = plant.tableEtaC[1,4];
//   parameter Real plant.compressor.tableEta[2,1] = plant.tableEtaC[2,1];
//   parameter Real plant.compressor.tableEta[2,2] = plant.tableEtaC[2,2];
//   parameter Real plant.compressor.tableEta[2,3] = plant.tableEtaC[2,3];
//   parameter Real plant.compressor.tableEta[2,4] = plant.tableEtaC[2,4];
//   parameter Real plant.compressor.tableEta[3,1] = plant.tableEtaC[3,1];
//   parameter Real plant.compressor.tableEta[3,2] = plant.tableEtaC[3,2];
//   parameter Real plant.compressor.tableEta[3,3] = plant.tableEtaC[3,3];
//   parameter Real plant.compressor.tableEta[3,4] = plant.tableEtaC[3,4];
//   parameter Real plant.compressor.tableEta[4,1] = plant.tableEtaC[4,1];
//   parameter Real plant.compressor.tableEta[4,2] = plant.tableEtaC[4,2];
//   parameter Real plant.compressor.tableEta[4,3] = plant.tableEtaC[4,3];
//   parameter Real plant.compressor.tableEta[4,4] = plant.tableEtaC[4,4];
//   parameter Real plant.compressor.tableEta[5,1] = plant.tableEtaC[5,1];
//   parameter Real plant.compressor.tableEta[5,2] = plant.tableEtaC[5,2];
//   parameter Real plant.compressor.tableEta[5,3] = plant.tableEtaC[5,3];
//   parameter Real plant.compressor.tableEta[5,4] = plant.tableEtaC[5,4];
//   parameter Real plant.compressor.tableEta[6,1] = plant.tableEtaC[6,1];
//   parameter Real plant.compressor.tableEta[6,2] = plant.tableEtaC[6,2];
//   parameter Real plant.compressor.tableEta[6,3] = plant.tableEtaC[6,3];
//   parameter Real plant.compressor.tableEta[6,4] = plant.tableEtaC[6,4];
//   parameter Real plant.compressor.tablePR[1,1] = plant.tablePR[1,1];
//   parameter Real plant.compressor.tablePR[1,2] = plant.tablePR[1,2];
//   parameter Real plant.compressor.tablePR[1,3] = plant.tablePR[1,3];
//   parameter Real plant.compressor.tablePR[1,4] = plant.tablePR[1,4];
//   parameter Real plant.compressor.tablePR[2,1] = plant.tablePR[2,1];
//   parameter Real plant.compressor.tablePR[2,2] = plant.tablePR[2,2];
//   parameter Real plant.compressor.tablePR[2,3] = plant.tablePR[2,3];
//   parameter Real plant.compressor.tablePR[2,4] = plant.tablePR[2,4];
//   parameter Real plant.compressor.tablePR[3,1] = plant.tablePR[3,1];
//   parameter Real plant.compressor.tablePR[3,2] = plant.tablePR[3,2];
//   parameter Real plant.compressor.tablePR[3,3] = plant.tablePR[3,3];
//   parameter Real plant.compressor.tablePR[3,4] = plant.tablePR[3,4];
//   parameter Real plant.compressor.tablePR[4,1] = plant.tablePR[4,1];
//   parameter Real plant.compressor.tablePR[4,2] = plant.tablePR[4,2];
//   parameter Real plant.compressor.tablePR[4,3] = plant.tablePR[4,3];
//   parameter Real plant.compressor.tablePR[4,4] = plant.tablePR[4,4];
//   parameter Real plant.compressor.tablePR[5,1] = plant.tablePR[5,1];
//   parameter Real plant.compressor.tablePR[5,2] = plant.tablePR[5,2];
//   parameter Real plant.compressor.tablePR[5,3] = plant.tablePR[5,3];
//   parameter Real plant.compressor.tablePR[5,4] = plant.tablePR[5,4];
//   parameter Real plant.compressor.tablePR[6,1] = plant.tablePR[6,1];
//   parameter Real plant.compressor.tablePR[6,2] = plant.tablePR[6,2];
//   parameter Real plant.compressor.tablePR[6,3] = plant.tablePR[6,3];
//   parameter Real plant.compressor.tablePR[6,4] = plant.tablePR[6,4];
//   parameter String plant.compressor.fileName = \"noName\";
//   parameter enumeration(matrix, file) plant.compressor.Table = ThermoPower.Choices.TurboMachinery.TableTypes.matrix;
//   Real plant.compressor.Eta.u1;
//   Real plant.compressor.Eta.u2;
//   Real plant.compressor.Eta.y;
//   parameter Boolean plant.compressor.Eta.tableOnFile = not plant.compressor.Table == ThermoPower.Choices.TurboMachinery.TableTypes.matrix;
//   parameter Real plant.compressor.Eta.table[1,1] = plant.compressor.tableEta[1,1];
//   parameter Real plant.compressor.Eta.table[1,2] = plant.compressor.tableEta[1,2];
//   parameter Real plant.compressor.Eta.table[1,3] = plant.compressor.tableEta[1,3];
//   parameter Real plant.compressor.Eta.table[1,4] = plant.compressor.tableEta[1,4];
//   parameter Real plant.compressor.Eta.table[2,1] = plant.compressor.tableEta[2,1];
//   parameter Real plant.compressor.Eta.table[2,2] = plant.compressor.tableEta[2,2];
//   parameter Real plant.compressor.Eta.table[2,3] = plant.compressor.tableEta[2,3];
//   parameter Real plant.compressor.Eta.table[2,4] = plant.compressor.tableEta[2,4];
//   parameter Real plant.compressor.Eta.table[3,1] = plant.compressor.tableEta[3,1];
//   parameter Real plant.compressor.Eta.table[3,2] = plant.compressor.tableEta[3,2];
//   parameter Real plant.compressor.Eta.table[3,3] = plant.compressor.tableEta[3,3];
//   parameter Real plant.compressor.Eta.table[3,4] = plant.compressor.tableEta[3,4];
//   parameter Real plant.compressor.Eta.table[4,1] = plant.compressor.tableEta[4,1];
//   parameter Real plant.compressor.Eta.table[4,2] = plant.compressor.tableEta[4,2];
//   parameter Real plant.compressor.Eta.table[4,3] = plant.compressor.tableEta[4,3];
//   parameter Real plant.compressor.Eta.table[4,4] = plant.compressor.tableEta[4,4];
//   parameter Real plant.compressor.Eta.table[5,1] = plant.compressor.tableEta[5,1];
//   parameter Real plant.compressor.Eta.table[5,2] = plant.compressor.tableEta[5,2];
//   parameter Real plant.compressor.Eta.table[5,3] = plant.compressor.tableEta[5,3];
//   parameter Real plant.compressor.Eta.table[5,4] = plant.compressor.tableEta[5,4];
//   parameter Real plant.compressor.Eta.table[6,1] = plant.compressor.tableEta[6,1];
//   parameter Real plant.compressor.Eta.table[6,2] = plant.compressor.tableEta[6,2];
//   parameter Real plant.compressor.Eta.table[6,3] = plant.compressor.tableEta[6,3];
//   parameter Real plant.compressor.Eta.table[6,4] = plant.compressor.tableEta[6,4];
//   parameter String plant.compressor.Eta.tableName = if plant.compressor.Table == ThermoPower.Choices.TurboMachinery.TableTypes.matrix then \"NoName\" else \"tabEta\";
//   parameter String plant.compressor.Eta.fileName = if plant.compressor.Table == ThermoPower.Choices.TurboMachinery.TableTypes.matrix then \"NoName\" else plant.compressor.fileName;
//   parameter Boolean plant.compressor.Eta.verboseRead = true;
//   parameter enumeration(LinearSegments, ContinuousDerivative, ConstantSegments) plant.compressor.Eta.smoothness = Modelica.Blocks.Types.Smoothness.ContinuousDerivative;
//   protected Modelica.Blocks.Types.ExternalCombiTable2D plant.compressor.Eta.tableID = Modelica.Blocks.Types.ExternalCombiTable2D.constructor(if plant.compressor.Eta.tableOnFile then plant.compressor.Eta.tableName else \"NoName\", if plant.compressor.Eta.tableOnFile and plant.compressor.Eta.fileName <> \"NoName\" and not Modelica.Utilities.Strings.isEmpty(plant.compressor.Eta.fileName) then plant.compressor.Eta.fileName else \"NoName\", {{plant.compressor.Eta.table[1,1], plant.compressor.Eta.table[1,2], plant.compressor.Eta.table[1,3], plant.compressor.Eta.table[1,4]}, {plant.compressor.Eta.table[2,1], plant.compressor.Eta.table[2,2], plant.compressor.Eta.table[2,3], plant.compressor.Eta.table[2,4]}, {plant.compressor.Eta.table[3,1], plant.compressor.Eta.table[3,2], plant.compressor.Eta.table[3,3], plant.compressor.Eta.table[3,4]}, {plant.compressor.Eta.table[4,1], plant.compressor.Eta.table[4,2], plant.compressor.Eta.table[4,3], plant.compressor.Eta.table[4,4]}, {plant.compressor.Eta.table[5,1], plant.compressor.Eta.table[5,2], plant.compressor.Eta.table[5,3], plant.compressor.Eta.table[5,4]}, {plant.compressor.Eta.table[6,1], plant.compressor.Eta.table[6,2], plant.compressor.Eta.table[6,3], plant.compressor.Eta.table[6,4]}}, plant.compressor.Eta.smoothness);
//   protected Real plant.compressor.Eta.tableOnFileRead;
//   Real plant.compressor.PressRatio.u1;
//   Real plant.compressor.PressRatio.u2;
//   Real plant.compressor.PressRatio.y;
//   parameter Boolean plant.compressor.PressRatio.tableOnFile = not plant.compressor.Table == ThermoPower.Choices.TurboMachinery.TableTypes.matrix;
//   parameter Real plant.compressor.PressRatio.table[1,1] = plant.compressor.tablePR[1,1];
//   parameter Real plant.compressor.PressRatio.table[1,2] = plant.compressor.tablePR[1,2];
//   parameter Real plant.compressor.PressRatio.table[1,3] = plant.compressor.tablePR[1,3];
//   parameter Real plant.compressor.PressRatio.table[1,4] = plant.compressor.tablePR[1,4];
//   parameter Real plant.compressor.PressRatio.table[2,1] = plant.compressor.tablePR[2,1];
//   parameter Real plant.compressor.PressRatio.table[2,2] = plant.compressor.tablePR[2,2];
//   parameter Real plant.compressor.PressRatio.table[2,3] = plant.compressor.tablePR[2,3];
//   parameter Real plant.compressor.PressRatio.table[2,4] = plant.compressor.tablePR[2,4];
//   parameter Real plant.compressor.PressRatio.table[3,1] = plant.compressor.tablePR[3,1];
//   parameter Real plant.compressor.PressRatio.table[3,2] = plant.compressor.tablePR[3,2];
//   parameter Real plant.compressor.PressRatio.table[3,3] = plant.compressor.tablePR[3,3];
//   parameter Real plant.compressor.PressRatio.table[3,4] = plant.compressor.tablePR[3,4];
//   parameter Real plant.compressor.PressRatio.table[4,1] = plant.compressor.tablePR[4,1];
//   parameter Real plant.compressor.PressRatio.table[4,2] = plant.compressor.tablePR[4,2];
//   parameter Real plant.compressor.PressRatio.table[4,3] = plant.compressor.tablePR[4,3];
//   parameter Real plant.compressor.PressRatio.table[4,4] = plant.compressor.tablePR[4,4];
//   parameter Real plant.compressor.PressRatio.table[5,1] = plant.compressor.tablePR[5,1];
//   parameter Real plant.compressor.PressRatio.table[5,2] = plant.compressor.tablePR[5,2];
//   parameter Real plant.compressor.PressRatio.table[5,3] = plant.compressor.tablePR[5,3];
//   parameter Real plant.compressor.PressRatio.table[5,4] = plant.compressor.tablePR[5,4];
//   parameter Real plant.compressor.PressRatio.table[6,1] = plant.compressor.tablePR[6,1];
//   parameter Real plant.compressor.PressRatio.table[6,2] = plant.compressor.tablePR[6,2];
//   parameter Real plant.compressor.PressRatio.table[6,3] = plant.compressor.tablePR[6,3];
//   parameter Real plant.compressor.PressRatio.table[6,4] = plant.compressor.tablePR[6,4];
//   parameter String plant.compressor.PressRatio.tableName = if plant.compressor.Table == ThermoPower.Choices.TurboMachinery.TableTypes.matrix then \"NoName\" else \"tabPR\";
//   parameter String plant.compressor.PressRatio.fileName = if plant.compressor.Table == ThermoPower.Choices.TurboMachinery.TableTypes.matrix then \"NoName\" else plant.compressor.fileName;
//   parameter Boolean plant.compressor.PressRatio.verboseRead = true;
//   parameter enumeration(LinearSegments, ContinuousDerivative, ConstantSegments) plant.compressor.PressRatio.smoothness = Modelica.Blocks.Types.Smoothness.ContinuousDerivative;
//   protected Modelica.Blocks.Types.ExternalCombiTable2D plant.compressor.PressRatio.tableID = Modelica.Blocks.Types.ExternalCombiTable2D.constructor(if plant.compressor.PressRatio.tableOnFile then plant.compressor.PressRatio.tableName else \"NoName\", if plant.compressor.PressRatio.tableOnFile and plant.compressor.PressRatio.fileName <> \"NoName\" and not Modelica.Utilities.Strings.isEmpty(plant.compressor.PressRatio.fileName) then plant.compressor.PressRatio.fileName else \"NoName\", {{plant.compressor.PressRatio.table[1,1], plant.compressor.PressRatio.table[1,2], plant.compressor.PressRatio.table[1,3], plant.compressor.PressRatio.table[1,4]}, {plant.compressor.PressRatio.table[2,1], plant.compressor.PressRatio.table[2,2], plant.compressor.PressRatio.table[2,3], plant.compressor.PressRatio.table[2,4]}, {plant.compressor.PressRatio.table[3,1], plant.compressor.PressRatio.table[3,2], plant.compressor.PressRatio.table[3,3], plant.compressor.PressRatio.table[3,4]}, {plant.compressor.PressRatio.table[4,1], plant.compressor.PressRatio.table[4,2], plant.compressor.PressRatio.table[4,3], plant.compressor.PressRatio.table[4,4]}, {plant.compressor.PressRatio.table[5,1], plant.compressor.PressRatio.table[5,2], plant.compressor.PressRatio.table[5,3], plant.compressor.PressRatio.table[5,4]}, {plant.compressor.PressRatio.table[6,1], plant.compressor.PressRatio.table[6,2], plant.compressor.PressRatio.table[6,3], plant.compressor.PressRatio.table[6,4]}}, plant.compressor.PressRatio.smoothness);
//   protected Real plant.compressor.PressRatio.tableOnFileRead;
//   Real plant.compressor.Phic.u1;
//   Real plant.compressor.Phic.u2;
//   Real plant.compressor.Phic.y;
//   parameter Boolean plant.compressor.Phic.tableOnFile = not plant.compressor.Table == ThermoPower.Choices.TurboMachinery.TableTypes.matrix;
//   parameter Real plant.compressor.Phic.table[1,1] = plant.compressor.tablePhic[1,1];
//   parameter Real plant.compressor.Phic.table[1,2] = plant.compressor.tablePhic[1,2];
//   parameter Real plant.compressor.Phic.table[1,3] = plant.compressor.tablePhic[1,3];
//   parameter Real plant.compressor.Phic.table[1,4] = plant.compressor.tablePhic[1,4];
//   parameter Real plant.compressor.Phic.table[2,1] = plant.compressor.tablePhic[2,1];
//   parameter Real plant.compressor.Phic.table[2,2] = plant.compressor.tablePhic[2,2];
//   parameter Real plant.compressor.Phic.table[2,3] = plant.compressor.tablePhic[2,3];
//   parameter Real plant.compressor.Phic.table[2,4] = plant.compressor.tablePhic[2,4];
//   parameter Real plant.compressor.Phic.table[3,1] = plant.compressor.tablePhic[3,1];
//   parameter Real plant.compressor.Phic.table[3,2] = plant.compressor.tablePhic[3,2];
//   parameter Real plant.compressor.Phic.table[3,3] = plant.compressor.tablePhic[3,3];
//   parameter Real plant.compressor.Phic.table[3,4] = plant.compressor.tablePhic[3,4];
//   parameter Real plant.compressor.Phic.table[4,1] = plant.compressor.tablePhic[4,1];
//   parameter Real plant.compressor.Phic.table[4,2] = plant.compressor.tablePhic[4,2];
//   parameter Real plant.compressor.Phic.table[4,3] = plant.compressor.tablePhic[4,3];
//   parameter Real plant.compressor.Phic.table[4,4] = plant.compressor.tablePhic[4,4];
//   parameter Real plant.compressor.Phic.table[5,1] = plant.compressor.tablePhic[5,1];
//   parameter Real plant.compressor.Phic.table[5,2] = plant.compressor.tablePhic[5,2];
//   parameter Real plant.compressor.Phic.table[5,3] = plant.compressor.tablePhic[5,3];
//   parameter Real plant.compressor.Phic.table[5,4] = plant.compressor.tablePhic[5,4];
//   parameter Real plant.compressor.Phic.table[6,1] = plant.compressor.tablePhic[6,1];
//   parameter Real plant.compressor.Phic.table[6,2] = plant.compressor.tablePhic[6,2];
//   parameter Real plant.compressor.Phic.table[6,3] = plant.compressor.tablePhic[6,3];
//   parameter Real plant.compressor.Phic.table[6,4] = plant.compressor.tablePhic[6,4];
//   parameter String plant.compressor.Phic.tableName = if plant.compressor.Table == ThermoPower.Choices.TurboMachinery.TableTypes.matrix then \"NoName\" else \"tabPhic\";
//   parameter String plant.compressor.Phic.fileName = if plant.compressor.Table == ThermoPower.Choices.TurboMachinery.TableTypes.matrix then \"NoName\" else plant.compressor.fileName;
//   parameter Boolean plant.compressor.Phic.verboseRead = true;
//   parameter enumeration(LinearSegments, ContinuousDerivative, ConstantSegments) plant.compressor.Phic.smoothness = Modelica.Blocks.Types.Smoothness.ContinuousDerivative;
//   protected Modelica.Blocks.Types.ExternalCombiTable2D plant.compressor.Phic.tableID = Modelica.Blocks.Types.ExternalCombiTable2D.constructor(if plant.compressor.Phic.tableOnFile then plant.compressor.Phic.tableName else \"NoName\", if plant.compressor.Phic.tableOnFile and plant.compressor.Phic.fileName <> \"NoName\" and not Modelica.Utilities.Strings.isEmpty(plant.compressor.Phic.fileName) then plant.compressor.Phic.fileName else \"NoName\", {{plant.compressor.Phic.table[1,1], plant.compressor.Phic.table[1,2], plant.compressor.Phic.table[1,3], plant.compressor.Phic.table[1,4]}, {plant.compressor.Phic.table[2,1], plant.compressor.Phic.table[2,2], plant.compressor.Phic.table[2,3], plant.compressor.Phic.table[2,4]}, {plant.compressor.Phic.table[3,1], plant.compressor.Phic.table[3,2], plant.compressor.Phic.table[3,3], plant.compressor.Phic.table[3,4]}, {plant.compressor.Phic.table[4,1], plant.compressor.Phic.table[4,2], plant.compressor.Phic.table[4,3], plant.compressor.Phic.table[4,4]}, {plant.compressor.Phic.table[5,1], plant.compressor.Phic.table[5,2], plant.compressor.Phic.table[5,3], plant.compressor.Phic.table[5,4]}, {plant.compressor.Phic.table[6,1], plant.compressor.Phic.table[6,2], plant.compressor.Phic.table[6,3], plant.compressor.Phic.table[6,4]}}, plant.compressor.Phic.smoothness);
//   protected Real plant.compressor.Phic.tableOnFileRead;
//   Real plant.compressor.N_T;
//   Real plant.compressor.N_T_design;
//   Real plant.compressor.phic(unit = \"(kg/s)*(T^0.5)/Pa\");
//   Real plant.compressor.beta(start = 3.0);
//   parameter Boolean plant.turbine.explicitIsentropicEnthalpy = true;
//   parameter Real plant.turbine.eta_mech = 0.98;
//   parameter Real plant.turbine.Tdes_in(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 300.0, nominal = 500.0) = 1400.0;
//   parameter Boolean plant.turbine.allowFlowReversal = plant.system.allowFlowReversal;
//   parameter Real plant.turbine.pstart_in(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = 785000.0;
//   parameter Real plant.turbine.pstart_out(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = 152000.0;
//   parameter Real plant.turbine.Tstart_in(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 300.0, nominal = 500.0) = 1370.0;
//   parameter Real plant.turbine.Tstart_out(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 300.0, nominal = 500.0) = 800.0;
//   parameter Real plant.turbine.Xstart[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) = 0.23;
//   parameter Real plant.turbine.Xstart[2](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) = 0.02;
//   parameter Real plant.turbine.Xstart[3](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) = 0.01;
//   parameter Real plant.turbine.Xstart[4](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) = 0.04;
//   parameter Real plant.turbine.Xstart[5](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) = 0.7;
//   Real plant.turbine.gas_in.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = plant.turbine.pstart_in, nominal = 100000.0);
//   Real plant.turbine.gas_in.Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = plant.turbine.Xstart[1]);
//   Real plant.turbine.gas_in.Xi[2](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = plant.turbine.Xstart[2]);
//   Real plant.turbine.gas_in.Xi[3](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = plant.turbine.Xstart[3]);
//   Real plant.turbine.gas_in.Xi[4](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = plant.turbine.Xstart[4]);
//   Real plant.turbine.gas_in.Xi[5](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = plant.turbine.Xstart[5]);
//   Real plant.turbine.gas_in.h(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   Real plant.turbine.gas_in.d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0);
//   Real plant.turbine.gas_in.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = plant.turbine.Tstart_in, nominal = 500.0);
//   Real plant.turbine.gas_in.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.23, nominal = 0.1);
//   Real plant.turbine.gas_in.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.02, nominal = 0.1);
//   Real plant.turbine.gas_in.X[3](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real plant.turbine.gas_in.X[4](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.04, nominal = 0.1);
//   Real plant.turbine.gas_in.X[5](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.7, nominal = 0.1);
//   Real plant.turbine.gas_in.u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real plant.turbine.gas_in.R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real plant.turbine.gas_in.MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real plant.turbine.gas_in.state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0);
//   Real plant.turbine.gas_in.state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0);
//   Real plant.turbine.gas_in.state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.turbine.gas_in.state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.turbine.gas_in.state.X[3](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.turbine.gas_in.state.X[4](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.turbine.gas_in.state.X[5](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   parameter Boolean plant.turbine.gas_in.preferredMediumStates = false;
//   parameter Boolean plant.turbine.gas_in.standardOrderComponents = true;
//   Real plant.turbine.gas_in.T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = Modelica.SIunits.Conversions.to_degC(plant.turbine.gas_in.T);
//   Real plant.turbine.gas_in.p_bar(quantity = \"Pressure\", unit = \"bar\") = Modelica.SIunits.Conversions.to_bar(plant.turbine.gas_in.p);
//   Real plant.turbine.gas_iso.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = plant.turbine.pstart_out, nominal = 100000.0);
//   Real plant.turbine.gas_iso.Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = plant.turbine.Xstart[1]);
//   Real plant.turbine.gas_iso.Xi[2](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = plant.turbine.Xstart[2]);
//   Real plant.turbine.gas_iso.Xi[3](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = plant.turbine.Xstart[3]);
//   Real plant.turbine.gas_iso.Xi[4](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = plant.turbine.Xstart[4]);
//   Real plant.turbine.gas_iso.Xi[5](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = plant.turbine.Xstart[5]);
//   Real plant.turbine.gas_iso.h(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   Real plant.turbine.gas_iso.d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0);
//   Real plant.turbine.gas_iso.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = plant.turbine.Tstart_out, nominal = 500.0);
//   Real plant.turbine.gas_iso.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.23, nominal = 0.1);
//   Real plant.turbine.gas_iso.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.02, nominal = 0.1);
//   Real plant.turbine.gas_iso.X[3](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real plant.turbine.gas_iso.X[4](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.04, nominal = 0.1);
//   Real plant.turbine.gas_iso.X[5](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.7, nominal = 0.1);
//   Real plant.turbine.gas_iso.u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real plant.turbine.gas_iso.R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real plant.turbine.gas_iso.MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real plant.turbine.gas_iso.state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0);
//   Real plant.turbine.gas_iso.state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0);
//   Real plant.turbine.gas_iso.state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.turbine.gas_iso.state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.turbine.gas_iso.state.X[3](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.turbine.gas_iso.state.X[4](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.turbine.gas_iso.state.X[5](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   parameter Boolean plant.turbine.gas_iso.preferredMediumStates = false;
//   parameter Boolean plant.turbine.gas_iso.standardOrderComponents = true;
//   Real plant.turbine.gas_iso.T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = Modelica.SIunits.Conversions.to_degC(plant.turbine.gas_iso.T);
//   Real plant.turbine.gas_iso.p_bar(quantity = \"Pressure\", unit = \"bar\") = Modelica.SIunits.Conversions.to_bar(plant.turbine.gas_iso.p);
//   Real plant.turbine.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
//   Real plant.turbine.tau(quantity = \"Torque\", unit = \"N.m\");
//   Real plant.turbine.omega(quantity = \"AngularVelocity\", unit = \"rad/s\");
//   Real plant.turbine.w(quantity = \"MassFlowRate\", unit = \"kg/s\");
//   Real plant.turbine.s_in(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\", min = -10000000.0, max = 10000000.0, nominal = 1000.0);
//   Real plant.turbine.hout_iso(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, start = 300000.0, nominal = 100000.0);
//   Real plant.turbine.hout(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, start = 300000.0, nominal = 100000.0);
//   Real plant.turbine.pout(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = plant.turbine.pstart_out, nominal = 1000000.0);
//   Real plant.turbine.PR;
//   Real plant.turbine.eta;
//   Real plant.turbine.shaft_a.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
//   Real plant.turbine.shaft_a.tau(quantity = \"Torque\", unit = \"N.m\");
//   Real plant.turbine.shaft_b.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
//   Real plant.turbine.shaft_b.tau(quantity = \"Torque\", unit = \"N.m\");
//   Real plant.turbine.inlet.m_flow(quantity = \"MassFlowRate.FlueGas\", unit = \"kg/s\", min = if plant.turbine.allowFlowReversal then -9.999999999999999e+59 else 0.0, max = 100000.0);
//   Real plant.turbine.inlet.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0);
//   Real plant.turbine.inlet.h_outflow(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, start = 300000.0, nominal = 100000.0);
//   Real plant.turbine.inlet.Xi_outflow[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.turbine.inlet.Xi_outflow[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.turbine.inlet.Xi_outflow[3](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.turbine.inlet.Xi_outflow[4](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.turbine.inlet.Xi_outflow[5](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.turbine.outlet.m_flow(quantity = \"MassFlowRate.FlueGas\", unit = \"kg/s\", min = -100000.0, max = if plant.turbine.allowFlowReversal then 9.999999999999999e+59 else 0.0);
//   Real plant.turbine.outlet.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0);
//   Real plant.turbine.outlet.h_outflow(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, start = 300000.0, nominal = 100000.0);
//   Real plant.turbine.outlet.Xi_outflow[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.turbine.outlet.Xi_outflow[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.turbine.outlet.Xi_outflow[3](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.turbine.outlet.Xi_outflow[4](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.turbine.outlet.Xi_outflow[5](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   parameter Real plant.turbine.Ndesign(quantity = \"AngularVelocity\", unit = \"rad/s\") = 157.08;
//   parameter Real plant.turbine.tablePhic[1,1] = plant.tablePhicT[1,1];
//   parameter Real plant.turbine.tablePhic[1,2] = plant.tablePhicT[1,2];
//   parameter Real plant.turbine.tablePhic[1,3] = plant.tablePhicT[1,3];
//   parameter Real plant.turbine.tablePhic[1,4] = plant.tablePhicT[1,4];
//   parameter Real plant.turbine.tablePhic[2,1] = plant.tablePhicT[2,1];
//   parameter Real plant.turbine.tablePhic[2,2] = plant.tablePhicT[2,2];
//   parameter Real plant.turbine.tablePhic[2,3] = plant.tablePhicT[2,3];
//   parameter Real plant.turbine.tablePhic[2,4] = plant.tablePhicT[2,4];
//   parameter Real plant.turbine.tablePhic[3,1] = plant.tablePhicT[3,1];
//   parameter Real plant.turbine.tablePhic[3,2] = plant.tablePhicT[3,2];
//   parameter Real plant.turbine.tablePhic[3,3] = plant.tablePhicT[3,3];
//   parameter Real plant.turbine.tablePhic[3,4] = plant.tablePhicT[3,4];
//   parameter Real plant.turbine.tablePhic[4,1] = plant.tablePhicT[4,1];
//   parameter Real plant.turbine.tablePhic[4,2] = plant.tablePhicT[4,2];
//   parameter Real plant.turbine.tablePhic[4,3] = plant.tablePhicT[4,3];
//   parameter Real plant.turbine.tablePhic[4,4] = plant.tablePhicT[4,4];
//   parameter Real plant.turbine.tablePhic[5,1] = plant.tablePhicT[5,1];
//   parameter Real plant.turbine.tablePhic[5,2] = plant.tablePhicT[5,2];
//   parameter Real plant.turbine.tablePhic[5,3] = plant.tablePhicT[5,3];
//   parameter Real plant.turbine.tablePhic[5,4] = plant.tablePhicT[5,4];
//   parameter Real plant.turbine.tableEta[1,1] = plant.tableEtaT[1,1];
//   parameter Real plant.turbine.tableEta[1,2] = plant.tableEtaT[1,2];
//   parameter Real plant.turbine.tableEta[1,3] = plant.tableEtaT[1,3];
//   parameter Real plant.turbine.tableEta[1,4] = plant.tableEtaT[1,4];
//   parameter Real plant.turbine.tableEta[2,1] = plant.tableEtaT[2,1];
//   parameter Real plant.turbine.tableEta[2,2] = plant.tableEtaT[2,2];
//   parameter Real plant.turbine.tableEta[2,3] = plant.tableEtaT[2,3];
//   parameter Real plant.turbine.tableEta[2,4] = plant.tableEtaT[2,4];
//   parameter Real plant.turbine.tableEta[3,1] = plant.tableEtaT[3,1];
//   parameter Real plant.turbine.tableEta[3,2] = plant.tableEtaT[3,2];
//   parameter Real plant.turbine.tableEta[3,3] = plant.tableEtaT[3,3];
//   parameter Real plant.turbine.tableEta[3,4] = plant.tableEtaT[3,4];
//   parameter Real plant.turbine.tableEta[4,1] = plant.tableEtaT[4,1];
//   parameter Real plant.turbine.tableEta[4,2] = plant.tableEtaT[4,2];
//   parameter Real plant.turbine.tableEta[4,3] = plant.tableEtaT[4,3];
//   parameter Real plant.turbine.tableEta[4,4] = plant.tableEtaT[4,4];
//   parameter Real plant.turbine.tableEta[5,1] = plant.tableEtaT[5,1];
//   parameter Real plant.turbine.tableEta[5,2] = plant.tableEtaT[5,2];
//   parameter Real plant.turbine.tableEta[5,3] = plant.tableEtaT[5,3];
//   parameter Real plant.turbine.tableEta[5,4] = plant.tableEtaT[5,4];
//   parameter String plant.turbine.fileName = \"NoName\";
//   parameter enumeration(matrix, file) plant.turbine.Table = ThermoPower.Choices.TurboMachinery.TableTypes.matrix;
//   Real plant.turbine.N_T;
//   Real plant.turbine.N_T_design;
//   Real plant.turbine.phic;
//   Real plant.turbine.Phic.u1;
//   Real plant.turbine.Phic.u2;
//   Real plant.turbine.Phic.y;
//   parameter Boolean plant.turbine.Phic.tableOnFile = not plant.turbine.Table == ThermoPower.Choices.TurboMachinery.TableTypes.matrix;
//   parameter Real plant.turbine.Phic.table[1,1] = plant.turbine.tablePhic[1,1];
//   parameter Real plant.turbine.Phic.table[1,2] = plant.turbine.tablePhic[1,2];
//   parameter Real plant.turbine.Phic.table[1,3] = plant.turbine.tablePhic[1,3];
//   parameter Real plant.turbine.Phic.table[1,4] = plant.turbine.tablePhic[1,4];
//   parameter Real plant.turbine.Phic.table[2,1] = plant.turbine.tablePhic[2,1];
//   parameter Real plant.turbine.Phic.table[2,2] = plant.turbine.tablePhic[2,2];
//   parameter Real plant.turbine.Phic.table[2,3] = plant.turbine.tablePhic[2,3];
//   parameter Real plant.turbine.Phic.table[2,4] = plant.turbine.tablePhic[2,4];
//   parameter Real plant.turbine.Phic.table[3,1] = plant.turbine.tablePhic[3,1];
//   parameter Real plant.turbine.Phic.table[3,2] = plant.turbine.tablePhic[3,2];
//   parameter Real plant.turbine.Phic.table[3,3] = plant.turbine.tablePhic[3,3];
//   parameter Real plant.turbine.Phic.table[3,4] = plant.turbine.tablePhic[3,4];
//   parameter Real plant.turbine.Phic.table[4,1] = plant.turbine.tablePhic[4,1];
//   parameter Real plant.turbine.Phic.table[4,2] = plant.turbine.tablePhic[4,2];
//   parameter Real plant.turbine.Phic.table[4,3] = plant.turbine.tablePhic[4,3];
//   parameter Real plant.turbine.Phic.table[4,4] = plant.turbine.tablePhic[4,4];
//   parameter Real plant.turbine.Phic.table[5,1] = plant.turbine.tablePhic[5,1];
//   parameter Real plant.turbine.Phic.table[5,2] = plant.turbine.tablePhic[5,2];
//   parameter Real plant.turbine.Phic.table[5,3] = plant.turbine.tablePhic[5,3];
//   parameter Real plant.turbine.Phic.table[5,4] = plant.turbine.tablePhic[5,4];
//   parameter String plant.turbine.Phic.tableName = if plant.turbine.Table == ThermoPower.Choices.TurboMachinery.TableTypes.matrix then \"NoName\" else \"tabPhic\";
//   parameter String plant.turbine.Phic.fileName = if plant.turbine.Table == ThermoPower.Choices.TurboMachinery.TableTypes.matrix then \"NoName\" else plant.turbine.fileName;
//   parameter Boolean plant.turbine.Phic.verboseRead = true;
//   parameter enumeration(LinearSegments, ContinuousDerivative, ConstantSegments) plant.turbine.Phic.smoothness = Modelica.Blocks.Types.Smoothness.ContinuousDerivative;
//   protected Modelica.Blocks.Types.ExternalCombiTable2D plant.turbine.Phic.tableID = Modelica.Blocks.Types.ExternalCombiTable2D.constructor(if plant.turbine.Phic.tableOnFile then plant.turbine.Phic.tableName else \"NoName\", if plant.turbine.Phic.tableOnFile and plant.turbine.Phic.fileName <> \"NoName\" and not Modelica.Utilities.Strings.isEmpty(plant.turbine.Phic.fileName) then plant.turbine.Phic.fileName else \"NoName\", {{plant.turbine.Phic.table[1,1], plant.turbine.Phic.table[1,2], plant.turbine.Phic.table[1,3], plant.turbine.Phic.table[1,4]}, {plant.turbine.Phic.table[2,1], plant.turbine.Phic.table[2,2], plant.turbine.Phic.table[2,3], plant.turbine.Phic.table[2,4]}, {plant.turbine.Phic.table[3,1], plant.turbine.Phic.table[3,2], plant.turbine.Phic.table[3,3], plant.turbine.Phic.table[3,4]}, {plant.turbine.Phic.table[4,1], plant.turbine.Phic.table[4,2], plant.turbine.Phic.table[4,3], plant.turbine.Phic.table[4,4]}, {plant.turbine.Phic.table[5,1], plant.turbine.Phic.table[5,2], plant.turbine.Phic.table[5,3], plant.turbine.Phic.table[5,4]}}, plant.turbine.Phic.smoothness);
//   protected Real plant.turbine.Phic.tableOnFileRead;
//   Real plant.turbine.Eta.u1;
//   Real plant.turbine.Eta.u2;
//   Real plant.turbine.Eta.y;
//   parameter Boolean plant.turbine.Eta.tableOnFile = not plant.turbine.Table == ThermoPower.Choices.TurboMachinery.TableTypes.matrix;
//   parameter Real plant.turbine.Eta.table[1,1] = plant.turbine.tableEta[1,1];
//   parameter Real plant.turbine.Eta.table[1,2] = plant.turbine.tableEta[1,2];
//   parameter Real plant.turbine.Eta.table[1,3] = plant.turbine.tableEta[1,3];
//   parameter Real plant.turbine.Eta.table[1,4] = plant.turbine.tableEta[1,4];
//   parameter Real plant.turbine.Eta.table[2,1] = plant.turbine.tableEta[2,1];
//   parameter Real plant.turbine.Eta.table[2,2] = plant.turbine.tableEta[2,2];
//   parameter Real plant.turbine.Eta.table[2,3] = plant.turbine.tableEta[2,3];
//   parameter Real plant.turbine.Eta.table[2,4] = plant.turbine.tableEta[2,4];
//   parameter Real plant.turbine.Eta.table[3,1] = plant.turbine.tableEta[3,1];
//   parameter Real plant.turbine.Eta.table[3,2] = plant.turbine.tableEta[3,2];
//   parameter Real plant.turbine.Eta.table[3,3] = plant.turbine.tableEta[3,3];
//   parameter Real plant.turbine.Eta.table[3,4] = plant.turbine.tableEta[3,4];
//   parameter Real plant.turbine.Eta.table[4,1] = plant.turbine.tableEta[4,1];
//   parameter Real plant.turbine.Eta.table[4,2] = plant.turbine.tableEta[4,2];
//   parameter Real plant.turbine.Eta.table[4,3] = plant.turbine.tableEta[4,3];
//   parameter Real plant.turbine.Eta.table[4,4] = plant.turbine.tableEta[4,4];
//   parameter Real plant.turbine.Eta.table[5,1] = plant.turbine.tableEta[5,1];
//   parameter Real plant.turbine.Eta.table[5,2] = plant.turbine.tableEta[5,2];
//   parameter Real plant.turbine.Eta.table[5,3] = plant.turbine.tableEta[5,3];
//   parameter Real plant.turbine.Eta.table[5,4] = plant.turbine.tableEta[5,4];
//   parameter String plant.turbine.Eta.tableName = if plant.turbine.Table == ThermoPower.Choices.TurboMachinery.TableTypes.matrix then \"NoName\" else \"tabEta\";
//   parameter String plant.turbine.Eta.fileName = if plant.turbine.Table == ThermoPower.Choices.TurboMachinery.TableTypes.matrix then \"NoName\" else plant.turbine.fileName;
//   parameter Boolean plant.turbine.Eta.verboseRead = true;
//   parameter enumeration(LinearSegments, ContinuousDerivative, ConstantSegments) plant.turbine.Eta.smoothness = Modelica.Blocks.Types.Smoothness.ContinuousDerivative;
//   protected Modelica.Blocks.Types.ExternalCombiTable2D plant.turbine.Eta.tableID = Modelica.Blocks.Types.ExternalCombiTable2D.constructor(if plant.turbine.Eta.tableOnFile then plant.turbine.Eta.tableName else \"NoName\", if plant.turbine.Eta.tableOnFile and plant.turbine.Eta.fileName <> \"NoName\" and not Modelica.Utilities.Strings.isEmpty(plant.turbine.Eta.fileName) then plant.turbine.Eta.fileName else \"NoName\", {{plant.turbine.Eta.table[1,1], plant.turbine.Eta.table[1,2], plant.turbine.Eta.table[1,3], plant.turbine.Eta.table[1,4]}, {plant.turbine.Eta.table[2,1], plant.turbine.Eta.table[2,2], plant.turbine.Eta.table[2,3], plant.turbine.Eta.table[2,4]}, {plant.turbine.Eta.table[3,1], plant.turbine.Eta.table[3,2], plant.turbine.Eta.table[3,3], plant.turbine.Eta.table[3,4]}, {plant.turbine.Eta.table[4,1], plant.turbine.Eta.table[4,2], plant.turbine.Eta.table[4,3], plant.turbine.Eta.table[4,4]}, {plant.turbine.Eta.table[5,1], plant.turbine.Eta.table[5,2], plant.turbine.Eta.table[5,3], plant.turbine.Eta.table[5,4]}}, plant.turbine.Eta.smoothness);
//   protected Real plant.turbine.Eta.tableOnFileRead;
//   parameter Real plant.CombustionChamber1.V(quantity = \"Volume\", unit = \"m3\") = 0.05;
//   parameter Real plant.CombustionChamber1.S(quantity = \"Area\", unit = \"m2\") = 0.05;
//   parameter Real plant.CombustionChamber1.gamma(quantity = \"CoefficientOfHeatTransfer\", unit = \"W/(m2.K)\") = 1.0;
//   parameter Real plant.CombustionChamber1.Cm(quantity = \"HeatCapacity\", unit = \"J/K\") = 1.0;
//   parameter Real plant.CombustionChamber1.Tmstart(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0) = 300.0;
//   parameter Real plant.CombustionChamber1.HH(quantity = \"SpecificEnergy\", unit = \"J/kg\") = 41600000.0;
//   parameter Boolean plant.CombustionChamber1.allowFlowReversal = plant.system.allowFlowReversal;
//   parameter Real plant.CombustionChamber1.pstart(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = 811000.0;
//   parameter Real plant.CombustionChamber1.Tstart(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 300.0, nominal = 500.0) = 1370.0;
//   parameter Real plant.CombustionChamber1.Xstart[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) = 0.23;
//   parameter Real plant.CombustionChamber1.Xstart[2](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) = 0.02;
//   parameter Real plant.CombustionChamber1.Xstart[3](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) = 0.01;
//   parameter Real plant.CombustionChamber1.Xstart[4](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) = 0.04;
//   parameter Real plant.CombustionChamber1.Xstart[5](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) = 0.7;
//   parameter enumeration(noInit, steadyState, steadyStateNoP, steadyStateNoT, steadyStateNoPT) plant.CombustionChamber1.initOpt = ThermoPower.Choices.Init.Options.steadyState;
//   Real plant.CombustionChamber1.fluegas.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = plant.CombustionChamber1.pstart, nominal = 100000.0);
//   Real plant.CombustionChamber1.fluegas.Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = plant.CombustionChamber1.Xstart[1]);
//   Real plant.CombustionChamber1.fluegas.Xi[2](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = plant.CombustionChamber1.Xstart[2]);
//   Real plant.CombustionChamber1.fluegas.Xi[3](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = plant.CombustionChamber1.Xstart[3]);
//   Real plant.CombustionChamber1.fluegas.Xi[4](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = plant.CombustionChamber1.Xstart[4]);
//   Real plant.CombustionChamber1.fluegas.Xi[5](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = plant.CombustionChamber1.Xstart[5]);
//   Real plant.CombustionChamber1.fluegas.h(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   Real plant.CombustionChamber1.fluegas.d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0);
//   Real plant.CombustionChamber1.fluegas.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = plant.CombustionChamber1.Tstart, nominal = 500.0);
//   Real plant.CombustionChamber1.fluegas.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.23, nominal = 0.1);
//   Real plant.CombustionChamber1.fluegas.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.02, nominal = 0.1);
//   Real plant.CombustionChamber1.fluegas.X[3](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real plant.CombustionChamber1.fluegas.X[4](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.04, nominal = 0.1);
//   Real plant.CombustionChamber1.fluegas.X[5](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.7, nominal = 0.1);
//   Real plant.CombustionChamber1.fluegas.u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real plant.CombustionChamber1.fluegas.R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real plant.CombustionChamber1.fluegas.MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real plant.CombustionChamber1.fluegas.state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0);
//   Real plant.CombustionChamber1.fluegas.state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0);
//   Real plant.CombustionChamber1.fluegas.state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.CombustionChamber1.fluegas.state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.CombustionChamber1.fluegas.state.X[3](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.CombustionChamber1.fluegas.state.X[4](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.CombustionChamber1.fluegas.state.X[5](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   parameter Boolean plant.CombustionChamber1.fluegas.preferredMediumStates = false;
//   parameter Boolean plant.CombustionChamber1.fluegas.standardOrderComponents = true;
//   Real plant.CombustionChamber1.fluegas.T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = Modelica.SIunits.Conversions.to_degC(plant.CombustionChamber1.fluegas.T);
//   Real plant.CombustionChamber1.fluegas.p_bar(quantity = \"Pressure\", unit = \"bar\") = Modelica.SIunits.Conversions.to_bar(plant.CombustionChamber1.fluegas.p);
//   Real plant.CombustionChamber1.M(quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real plant.CombustionChamber1.MX[1](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real plant.CombustionChamber1.MX[2](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real plant.CombustionChamber1.MX[3](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real plant.CombustionChamber1.MX[4](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real plant.CombustionChamber1.MX[5](quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real plant.CombustionChamber1.E(quantity = \"Energy\", unit = \"J\");
//   Real plant.CombustionChamber1.Tm(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = plant.CombustionChamber1.Tmstart, nominal = 500.0);
//   Real plant.CombustionChamber1.hia(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, start = 300000.0, nominal = 100000.0);
//   Real plant.CombustionChamber1.hif(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, start = 300000.0, nominal = 100000.0);
//   Real plant.CombustionChamber1.ho(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, start = 300000.0, nominal = 100000.0);
//   Real plant.CombustionChamber1.HR(quantity = \"Power\", unit = \"W\");
//   Real plant.CombustionChamber1.Tr(quantity = \"Time\", unit = \"s\");
//   Real plant.CombustionChamber1.ina.m_flow(quantity = \"MassFlowRate.Air\", unit = \"kg/s\", min = if plant.CombustionChamber1.allowFlowReversal then -9.999999999999999e+59 else 0.0, max = 100000.0);
//   Real plant.CombustionChamber1.ina.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0);
//   Real plant.CombustionChamber1.ina.h_outflow(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, start = 300000.0, nominal = 100000.0);
//   Real plant.CombustionChamber1.ina.Xi_outflow[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.CombustionChamber1.ina.Xi_outflow[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.CombustionChamber1.ina.Xi_outflow[3](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.CombustionChamber1.ina.Xi_outflow[4](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.CombustionChamber1.inf.m_flow(quantity = \"MassFlowRate.NaturalGas\", unit = \"kg/s\", min = if plant.CombustionChamber1.allowFlowReversal then -9.999999999999999e+59 else 0.0, max = 100000.0);
//   Real plant.CombustionChamber1.inf.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0);
//   Real plant.CombustionChamber1.inf.h_outflow(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, start = 300000.0, nominal = 100000.0);
//   Real plant.CombustionChamber1.inf.Xi_outflow[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.CombustionChamber1.inf.Xi_outflow[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.CombustionChamber1.inf.Xi_outflow[3](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.CombustionChamber1.out.m_flow(quantity = \"MassFlowRate.FlueGas\", unit = \"kg/s\", min = -100000.0, max = if plant.CombustionChamber1.allowFlowReversal then 9.999999999999999e+59 else 0.0);
//   Real plant.CombustionChamber1.out.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0);
//   Real plant.CombustionChamber1.out.h_outflow(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, start = 300000.0, nominal = 100000.0);
//   Real plant.CombustionChamber1.out.Xi_outflow[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.CombustionChamber1.out.Xi_outflow[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.CombustionChamber1.out.Xi_outflow[3](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.CombustionChamber1.out.Xi_outflow[4](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.CombustionChamber1.out.Xi_outflow[5](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.CombustionChamber1.wcomb(quantity = \"MolarFlowRate\", unit = \"mol/s\");
//   Real plant.CombustionChamber1.lambda;
//   protected Real plant.CombustionChamber1.ina_X[1];
//   protected Real plant.CombustionChamber1.ina_X[2];
//   protected Real plant.CombustionChamber1.ina_X[3];
//   protected Real plant.CombustionChamber1.ina_X[4];
//   protected Real plant.CombustionChamber1.inf_X[1];
//   protected Real plant.CombustionChamber1.inf_X[2];
//   protected Real plant.CombustionChamber1.inf_X[3];
//   Real plant.SourceP1.gas.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = plant.SourceP1.p0, nominal = 100000.0);
//   Real plant.SourceP1.gas.Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = plant.SourceP1.Xnom[1]);
//   Real plant.SourceP1.gas.Xi[2](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = plant.SourceP1.Xnom[2]);
//   Real plant.SourceP1.gas.Xi[3](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = plant.SourceP1.Xnom[3]);
//   Real plant.SourceP1.gas.Xi[4](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = plant.SourceP1.Xnom[4]);
//   Real plant.SourceP1.gas.h(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   Real plant.SourceP1.gas.d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0);
//   Real plant.SourceP1.gas.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = plant.SourceP1.T, nominal = 500.0);
//   Real plant.SourceP1.gas.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.23, nominal = 0.1);
//   Real plant.SourceP1.gas.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.015, nominal = 0.1);
//   Real plant.SourceP1.gas.X[3](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.005, nominal = 0.1);
//   Real plant.SourceP1.gas.X[4](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.75, nominal = 0.1);
//   Real plant.SourceP1.gas.u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real plant.SourceP1.gas.R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real plant.SourceP1.gas.MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real plant.SourceP1.gas.state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0);
//   Real plant.SourceP1.gas.state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0);
//   Real plant.SourceP1.gas.state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.SourceP1.gas.state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.SourceP1.gas.state.X[3](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.SourceP1.gas.state.X[4](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   parameter Boolean plant.SourceP1.gas.preferredMediumStates = false;
//   parameter Boolean plant.SourceP1.gas.standardOrderComponents = true;
//   Real plant.SourceP1.gas.T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = Modelica.SIunits.Conversions.to_degC(plant.SourceP1.gas.T);
//   Real plant.SourceP1.gas.p_bar(quantity = \"Pressure\", unit = \"bar\") = Modelica.SIunits.Conversions.to_bar(plant.SourceP1.gas.p);
//   parameter Real plant.SourceP1.p0(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = 34300.0;
//   parameter Real plant.SourceP1.R(quantity = \"HydraulicResistance\", unit = \"Pa/(kg/s)\") = 0.0;
//   parameter Real plant.SourceP1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 300.0, nominal = 500.0) = 244.4;
//   parameter Real plant.SourceP1.Xnom[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) = 0.23;
//   parameter Real plant.SourceP1.Xnom[2](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) = 0.015;
//   parameter Real plant.SourceP1.Xnom[3](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) = 0.005;
//   parameter Real plant.SourceP1.Xnom[4](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) = 0.75;
//   parameter Boolean plant.SourceP1.allowFlowReversal = plant.system.allowFlowReversal;
//   parameter Boolean plant.SourceP1.use_in_p0 = false;
//   parameter Boolean plant.SourceP1.use_in_T = false;
//   parameter Boolean plant.SourceP1.use_in_X = false;
//   Real plant.SourceP1.flange.m_flow(quantity = \"MassFlowRate.Air\", unit = \"kg/s\", min = -100000.0, max = if plant.SourceP1.allowFlowReversal then 9.999999999999999e+59 else 0.0);
//   Real plant.SourceP1.flange.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0);
//   Real plant.SourceP1.flange.h_outflow(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, start = 300000.0, nominal = 100000.0);
//   Real plant.SourceP1.flange.Xi_outflow[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.SourceP1.flange.Xi_outflow[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.SourceP1.flange.Xi_outflow[3](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.SourceP1.flange.Xi_outflow[4](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real plant.SourceP1.in_p0_internal;
//   protected Real plant.SourceP1.in_T_internal;
//   protected Real plant.SourceP1.in_X_internal[1];
//   protected Real plant.SourceP1.in_X_internal[2];
//   protected Real plant.SourceP1.in_X_internal[3];
//   protected Real plant.SourceP1.in_X_internal[4];
//   Real plant.SinkP1.gas.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = plant.SinkP1.p0, nominal = 100000.0);
//   Real plant.SinkP1.gas.Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = plant.SinkP1.Xnom[1]);
//   Real plant.SinkP1.gas.Xi[2](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = plant.SinkP1.Xnom[2]);
//   Real plant.SinkP1.gas.Xi[3](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = plant.SinkP1.Xnom[3]);
//   Real plant.SinkP1.gas.Xi[4](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = plant.SinkP1.Xnom[4]);
//   Real plant.SinkP1.gas.Xi[5](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = plant.SinkP1.Xnom[5]);
//   Real plant.SinkP1.gas.h(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   Real plant.SinkP1.gas.d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0);
//   Real plant.SinkP1.gas.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = plant.SinkP1.T, nominal = 500.0);
//   Real plant.SinkP1.gas.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.23, nominal = 0.1);
//   Real plant.SinkP1.gas.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.02, nominal = 0.1);
//   Real plant.SinkP1.gas.X[3](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real plant.SinkP1.gas.X[4](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.04, nominal = 0.1);
//   Real plant.SinkP1.gas.X[5](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.7, nominal = 0.1);
//   Real plant.SinkP1.gas.u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real plant.SinkP1.gas.R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real plant.SinkP1.gas.MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real plant.SinkP1.gas.state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0);
//   Real plant.SinkP1.gas.state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0);
//   Real plant.SinkP1.gas.state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.SinkP1.gas.state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.SinkP1.gas.state.X[3](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.SinkP1.gas.state.X[4](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.SinkP1.gas.state.X[5](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   parameter Boolean plant.SinkP1.gas.preferredMediumStates = false;
//   parameter Boolean plant.SinkP1.gas.standardOrderComponents = true;
//   Real plant.SinkP1.gas.T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = Modelica.SIunits.Conversions.to_degC(plant.SinkP1.gas.T);
//   Real plant.SinkP1.gas.p_bar(quantity = \"Pressure\", unit = \"bar\") = Modelica.SIunits.Conversions.to_bar(plant.SinkP1.gas.p);
//   parameter Real plant.SinkP1.p0(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = 152000.0;
//   parameter Real plant.SinkP1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 300.0, nominal = 500.0) = 800.0;
//   parameter Real plant.SinkP1.Xnom[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) = 0.23;
//   parameter Real plant.SinkP1.Xnom[2](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) = 0.02;
//   parameter Real plant.SinkP1.Xnom[3](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) = 0.01;
//   parameter Real plant.SinkP1.Xnom[4](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) = 0.04;
//   parameter Real plant.SinkP1.Xnom[5](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) = 0.7;
//   parameter Real plant.SinkP1.R(quantity = \"HydraulicResistance\", unit = \"Pa/(kg/s)\") = 0.0;
//   parameter Boolean plant.SinkP1.allowFlowReversal = plant.system.allowFlowReversal;
//   parameter Boolean plant.SinkP1.use_in_p0 = false;
//   parameter Boolean plant.SinkP1.use_in_T = false;
//   parameter Boolean plant.SinkP1.use_in_X = false;
//   Real plant.SinkP1.flange.m_flow(quantity = \"MassFlowRate.FlueGas\", unit = \"kg/s\", min = if plant.SinkP1.allowFlowReversal then -9.999999999999999e+59 else 0.0, max = 100000.0);
//   Real plant.SinkP1.flange.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0);
//   Real plant.SinkP1.flange.h_outflow(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, start = 300000.0, nominal = 100000.0);
//   Real plant.SinkP1.flange.Xi_outflow[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.SinkP1.flange.Xi_outflow[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.SinkP1.flange.Xi_outflow[3](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.SinkP1.flange.Xi_outflow[4](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.SinkP1.flange.Xi_outflow[5](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real plant.SinkP1.in_p0_internal;
//   protected Real plant.SinkP1.in_T_internal;
//   protected Real plant.SinkP1.in_X_internal[1];
//   protected Real plant.SinkP1.in_X_internal[2];
//   protected Real plant.SinkP1.in_X_internal[3];
//   protected Real plant.SinkP1.in_X_internal[4];
//   protected Real plant.SinkP1.in_X_internal[5];
//   Real plant.SourceW1.gas.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = plant.SourceW1.p0, nominal = 100000.0);
//   Real plant.SourceW1.gas.Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = plant.SourceW1.Xnom[1]);
//   Real plant.SourceW1.gas.Xi[2](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = plant.SourceW1.Xnom[2]);
//   Real plant.SourceW1.gas.Xi[3](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = plant.SourceW1.Xnom[3]);
//   Real plant.SourceW1.gas.h(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   Real plant.SourceW1.gas.d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0);
//   Real plant.SourceW1.gas.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = plant.SourceW1.T, nominal = 500.0);
//   Real plant.SourceW1.gas.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.02, nominal = 0.1);
//   Real plant.SourceW1.gas.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.012, nominal = 0.1);
//   Real plant.SourceW1.gas.X[3](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.968, nominal = 0.1);
//   Real plant.SourceW1.gas.u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real plant.SourceW1.gas.R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real plant.SourceW1.gas.MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real plant.SourceW1.gas.state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0);
//   Real plant.SourceW1.gas.state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0);
//   Real plant.SourceW1.gas.state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.SourceW1.gas.state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.SourceW1.gas.state.X[3](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   parameter Boolean plant.SourceW1.gas.preferredMediumStates = false;
//   parameter Boolean plant.SourceW1.gas.standardOrderComponents = true;
//   Real plant.SourceW1.gas.T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = Modelica.SIunits.Conversions.to_degC(plant.SourceW1.gas.T);
//   Real plant.SourceW1.gas.p_bar(quantity = \"Pressure\", unit = \"bar\") = Modelica.SIunits.Conversions.to_bar(plant.SourceW1.gas.p);
//   parameter Real plant.SourceW1.p0(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = 811000.0;
//   parameter Real plant.SourceW1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 300.0, nominal = 500.0) = 300.0;
//   parameter Real plant.SourceW1.Xnom[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) = 0.02;
//   parameter Real plant.SourceW1.Xnom[2](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) = 0.012;
//   parameter Real plant.SourceW1.Xnom[3](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) = 0.968;
//   parameter Real plant.SourceW1.w0(quantity = \"MassFlowRate\", unit = \"kg/s\") = 2.02;
//   parameter Real plant.SourceW1.G(quantity = \"HydraulicConductance\", unit = \"(kg/s)/Pa\") = 0.0;
//   parameter Boolean plant.SourceW1.allowFlowReversal = plant.system.allowFlowReversal;
//   parameter Boolean plant.SourceW1.use_in_w0 = true;
//   parameter Boolean plant.SourceW1.use_in_T = false;
//   parameter Boolean plant.SourceW1.use_in_X = false;
//   Real plant.SourceW1.w(quantity = \"MassFlowRate\", unit = \"kg/s\");
//   Real plant.SourceW1.flange.m_flow(quantity = \"MassFlowRate.NaturalGas\", unit = \"kg/s\", min = -100000.0, max = if plant.SourceW1.allowFlowReversal then 9.999999999999999e+59 else 0.0);
//   Real plant.SourceW1.flange.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0);
//   Real plant.SourceW1.flange.h_outflow(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, start = 300000.0, nominal = 100000.0);
//   Real plant.SourceW1.flange.Xi_outflow[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.SourceW1.flange.Xi_outflow[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.SourceW1.flange.Xi_outflow[3](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   protected Real plant.SourceW1.in_w0_internal;
//   protected Real plant.SourceW1.in_T_internal;
//   protected Real plant.SourceW1.in_X_internal[1];
//   protected Real plant.SourceW1.in_X_internal[2];
//   protected Real plant.SourceW1.in_X_internal[3];
//   Real plant.SourceW1.in_w0;
//   Real plant.PressDrop1.gas.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = plant.PressDrop1.pstart, nominal = 100000.0);
//   Real plant.PressDrop1.gas.Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = plant.PressDrop1.Xstart[1]);
//   Real plant.PressDrop1.gas.Xi[2](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = plant.PressDrop1.Xstart[2]);
//   Real plant.PressDrop1.gas.Xi[3](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = plant.PressDrop1.Xstart[3]);
//   Real plant.PressDrop1.gas.Xi[4](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = plant.PressDrop1.Xstart[4]);
//   Real plant.PressDrop1.gas.Xi[5](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = plant.PressDrop1.Xstart[5]);
//   Real plant.PressDrop1.gas.h(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   Real plant.PressDrop1.gas.d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0);
//   Real plant.PressDrop1.gas.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = plant.PressDrop1.Tstart, nominal = 500.0);
//   Real plant.PressDrop1.gas.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.23, nominal = 0.1);
//   Real plant.PressDrop1.gas.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.02, nominal = 0.1);
//   Real plant.PressDrop1.gas.X[3](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real plant.PressDrop1.gas.X[4](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.04, nominal = 0.1);
//   Real plant.PressDrop1.gas.X[5](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.7, nominal = 0.1);
//   Real plant.PressDrop1.gas.u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real plant.PressDrop1.gas.R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real plant.PressDrop1.gas.MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real plant.PressDrop1.gas.state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0);
//   Real plant.PressDrop1.gas.state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0);
//   Real plant.PressDrop1.gas.state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.PressDrop1.gas.state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.PressDrop1.gas.state.X[3](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.PressDrop1.gas.state.X[4](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.PressDrop1.gas.state.X[5](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   parameter Boolean plant.PressDrop1.gas.preferredMediumStates = false;
//   parameter Boolean plant.PressDrop1.gas.standardOrderComponents = true;
//   Real plant.PressDrop1.gas.T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = Modelica.SIunits.Conversions.to_degC(plant.PressDrop1.gas.T);
//   Real plant.PressDrop1.gas.p_bar(quantity = \"Pressure\", unit = \"bar\") = Modelica.SIunits.Conversions.to_bar(plant.PressDrop1.gas.p);
//   parameter Real plant.PressDrop1.wnom(quantity = \"MassFlowRate\", unit = \"kg/s\") = 102.0;
//   parameter enumeration(Kf, OpPoint, Kinetic) plant.PressDrop1.FFtype = ThermoPower.Choices.PressDrop.FFtypes.OpPoint;
//   parameter Real plant.PressDrop1.Kf(unit = \"Pa.kg/(m3.kg2/s2)\", fixed = false);
//   parameter Real plant.PressDrop1.dpnom(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = 26000.0;
//   parameter Real plant.PressDrop1.rhonom(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, start = 40.0) = 2.0;
//   parameter Real plant.PressDrop1.K = 0.0;
//   parameter Real plant.PressDrop1.A(quantity = \"Area\", unit = \"m2\") = 1.0;
//   parameter Real plant.PressDrop1.wnf = 0.01;
//   parameter Real plant.PressDrop1.Kfc = 1.0;
//   parameter Boolean plant.PressDrop1.allowFlowReversal = plant.system.allowFlowReversal;
//   parameter Real plant.PressDrop1.pstart(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = 811000.0;
//   parameter Real plant.PressDrop1.Tstart(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 300.0, nominal = 500.0) = 1370.0;
//   parameter Real plant.PressDrop1.Xstart[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) = 0.23;
//   parameter Real plant.PressDrop1.Xstart[2](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) = 0.02;
//   parameter Real plant.PressDrop1.Xstart[3](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) = 0.01;
//   parameter Real plant.PressDrop1.Xstart[4](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) = 0.04;
//   parameter Real plant.PressDrop1.Xstart[5](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) = 0.7;
//   protected parameter Real plant.PressDrop1.Kfl(fixed = false);
//   Real plant.PressDrop1.w(quantity = \"MassFlowRate\", unit = \"kg/s\");
//   Real plant.PressDrop1.pin(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   Real plant.PressDrop1.pout(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   Real plant.PressDrop1.dp(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   Real plant.PressDrop1.inlet.m_flow(quantity = \"MassFlowRate.FlueGas\", unit = \"kg/s\", min = if plant.PressDrop1.allowFlowReversal then -9.999999999999999e+59 else 0.0, max = 100000.0, start = plant.PressDrop1.wnom);
//   Real plant.PressDrop1.inlet.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0);
//   Real plant.PressDrop1.inlet.h_outflow(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, start = 300000.0, nominal = 100000.0);
//   Real plant.PressDrop1.inlet.Xi_outflow[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.PressDrop1.inlet.Xi_outflow[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.PressDrop1.inlet.Xi_outflow[3](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.PressDrop1.inlet.Xi_outflow[4](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.PressDrop1.inlet.Xi_outflow[5](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.PressDrop1.outlet.m_flow(quantity = \"MassFlowRate.FlueGas\", unit = \"kg/s\", min = -100000.0, max = if plant.PressDrop1.allowFlowReversal then 9.999999999999999e+59 else 0.0, start = -plant.PressDrop1.wnom);
//   Real plant.PressDrop1.outlet.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0);
//   Real plant.PressDrop1.outlet.h_outflow(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, start = 300000.0, nominal = 100000.0);
//   Real plant.PressDrop1.outlet.Xi_outflow[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.PressDrop1.outlet.Xi_outflow[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.PressDrop1.outlet.Xi_outflow[3](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.PressDrop1.outlet.Xi_outflow[4](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.PressDrop1.outlet.Xi_outflow[5](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.PressDrop2.gas.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = plant.PressDrop2.pstart, nominal = 100000.0);
//   Real plant.PressDrop2.gas.Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = plant.PressDrop2.Xstart[1]);
//   Real plant.PressDrop2.gas.Xi[2](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = plant.PressDrop2.Xstart[2]);
//   Real plant.PressDrop2.gas.Xi[3](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = plant.PressDrop2.Xstart[3]);
//   Real plant.PressDrop2.gas.Xi[4](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = plant.PressDrop2.Xstart[4]);
//   Real plant.PressDrop2.gas.h(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   Real plant.PressDrop2.gas.d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0);
//   Real plant.PressDrop2.gas.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = plant.PressDrop2.Tstart, nominal = 500.0);
//   Real plant.PressDrop2.gas.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.23, nominal = 0.1);
//   Real plant.PressDrop2.gas.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.015, nominal = 0.1);
//   Real plant.PressDrop2.gas.X[3](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.005, nominal = 0.1);
//   Real plant.PressDrop2.gas.X[4](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.75, nominal = 0.1);
//   Real plant.PressDrop2.gas.u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real plant.PressDrop2.gas.R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real plant.PressDrop2.gas.MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real plant.PressDrop2.gas.state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0);
//   Real plant.PressDrop2.gas.state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0);
//   Real plant.PressDrop2.gas.state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.PressDrop2.gas.state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.PressDrop2.gas.state.X[3](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.PressDrop2.gas.state.X[4](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   parameter Boolean plant.PressDrop2.gas.preferredMediumStates = false;
//   parameter Boolean plant.PressDrop2.gas.standardOrderComponents = true;
//   Real plant.PressDrop2.gas.T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = Modelica.SIunits.Conversions.to_degC(plant.PressDrop2.gas.T);
//   Real plant.PressDrop2.gas.p_bar(quantity = \"Pressure\", unit = \"bar\") = Modelica.SIunits.Conversions.to_bar(plant.PressDrop2.gas.p);
//   parameter Real plant.PressDrop2.wnom(quantity = \"MassFlowRate\", unit = \"kg/s\") = 100.0;
//   parameter enumeration(Kf, OpPoint, Kinetic) plant.PressDrop2.FFtype = ThermoPower.Choices.PressDrop.FFtypes.OpPoint;
//   parameter Real plant.PressDrop2.Kf(unit = \"Pa.kg/(m3.kg2/s2)\", fixed = false);
//   parameter Real plant.PressDrop2.dpnom(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = 19000.0;
//   parameter Real plant.PressDrop2.rhonom(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, start = 40.0) = 4.7;
//   parameter Real plant.PressDrop2.K = 0.0;
//   parameter Real plant.PressDrop2.A(quantity = \"Area\", unit = \"m2\") = 1.0;
//   parameter Real plant.PressDrop2.wnf = 0.01;
//   parameter Real plant.PressDrop2.Kfc = 1.0;
//   parameter Boolean plant.PressDrop2.allowFlowReversal = plant.system.allowFlowReversal;
//   parameter Real plant.PressDrop2.pstart(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = 830000.0;
//   parameter Real plant.PressDrop2.Tstart(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 300.0, nominal = 500.0) = 600.0;
//   parameter Real plant.PressDrop2.Xstart[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) = 0.23;
//   parameter Real plant.PressDrop2.Xstart[2](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) = 0.015;
//   parameter Real plant.PressDrop2.Xstart[3](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) = 0.005;
//   parameter Real plant.PressDrop2.Xstart[4](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0) = 0.75;
//   protected parameter Real plant.PressDrop2.Kfl(fixed = false);
//   Real plant.PressDrop2.w(quantity = \"MassFlowRate\", unit = \"kg/s\");
//   Real plant.PressDrop2.pin(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   Real plant.PressDrop2.pout(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   Real plant.PressDrop2.dp(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   Real plant.PressDrop2.inlet.m_flow(quantity = \"MassFlowRate.Air\", unit = \"kg/s\", min = if plant.PressDrop2.allowFlowReversal then -9.999999999999999e+59 else 0.0, max = 100000.0, start = plant.PressDrop2.wnom);
//   Real plant.PressDrop2.inlet.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0);
//   Real plant.PressDrop2.inlet.h_outflow(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, start = 300000.0, nominal = 100000.0);
//   Real plant.PressDrop2.inlet.Xi_outflow[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.PressDrop2.inlet.Xi_outflow[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.PressDrop2.inlet.Xi_outflow[3](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.PressDrop2.inlet.Xi_outflow[4](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.PressDrop2.outlet.m_flow(quantity = \"MassFlowRate.Air\", unit = \"kg/s\", min = -100000.0, max = if plant.PressDrop2.allowFlowReversal then 9.999999999999999e+59 else 0.0, start = -plant.PressDrop2.wnom);
//   Real plant.PressDrop2.outlet.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0);
//   Real plant.PressDrop2.outlet.h_outflow(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, start = 300000.0, nominal = 100000.0);
//   Real plant.PressDrop2.outlet.Xi_outflow[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.PressDrop2.outlet.Xi_outflow[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.PressDrop2.outlet.Xi_outflow[3](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.PressDrop2.outlet.Xi_outflow[4](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.powerSensor.flange_a.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
//   Real plant.powerSensor.flange_a.tau(quantity = \"Torque\", unit = \"N.m\");
//   Real plant.powerSensor.flange_b.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
//   Real plant.powerSensor.flange_b.tau(quantity = \"Torque\", unit = \"N.m\");
//   Real plant.powerSensor.power(unit = \"W\");
//   Real plant.gasFlowActuator.u;
//   Real plant.gasFlowActuator.y(start = plant.gasFlowActuator.y_start);
//   parameter Real plant.gasFlowActuator.k(unit = \"1\") = 1.0;
//   parameter Real plant.gasFlowActuator.T(quantity = \"Time\", unit = \"s\", start = 1.0) = 4.0;
//   parameter enumeration(NoInit, SteadyState, InitialState, InitialOutput) plant.gasFlowActuator.initType = Modelica.Blocks.Types.Init.SteadyState;
//   parameter Real plant.gasFlowActuator.y_start = 500.0;
//   Real plant.powerSensor1.u;
//   Real plant.powerSensor1.y(start = plant.powerSensor1.y_start);
//   parameter Real plant.powerSensor1.k(unit = \"1\") = 1.0;
//   parameter Real plant.powerSensor1.T(quantity = \"Time\", unit = \"s\", start = 1.0) = 1.0;
//   parameter enumeration(NoInit, SteadyState, InitialState, InitialOutput) plant.powerSensor1.initType = Modelica.Blocks.Types.Init.SteadyState;
//   parameter Real plant.powerSensor1.y_start = 56800000.0;
//   parameter Boolean plant.stateInletCC.allowFlowReversal = plant.system.allowFlowReversal;
//   Real plant.stateInletCC.inlet.m_flow(quantity = \"MassFlowRate.Air\", unit = \"kg/s\", min = if plant.stateInletCC.allowFlowReversal then -9.999999999999999e+59 else 0.0, max = 100000.0);
//   Real plant.stateInletCC.inlet.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0);
//   Real plant.stateInletCC.inlet.h_outflow(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, start = 300000.0, nominal = 100000.0);
//   Real plant.stateInletCC.inlet.Xi_outflow[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.stateInletCC.inlet.Xi_outflow[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.stateInletCC.inlet.Xi_outflow[3](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.stateInletCC.inlet.Xi_outflow[4](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.stateInletCC.outlet.m_flow(quantity = \"MassFlowRate.Air\", unit = \"kg/s\", min = -100000.0, max = if plant.stateInletCC.allowFlowReversal then 9.999999999999999e+59 else 0.0);
//   Real plant.stateInletCC.outlet.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0);
//   Real plant.stateInletCC.outlet.h_outflow(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, start = 300000.0, nominal = 100000.0);
//   Real plant.stateInletCC.outlet.Xi_outflow[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.stateInletCC.outlet.Xi_outflow[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.stateInletCC.outlet.Xi_outflow[3](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.stateInletCC.outlet.Xi_outflow[4](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.stateInletCC.gas.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0);
//   Real plant.stateInletCC.gas.Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = 0.23);
//   Real plant.stateInletCC.gas.Xi[2](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = 0.015);
//   Real plant.stateInletCC.gas.Xi[3](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = 0.005);
//   Real plant.stateInletCC.gas.Xi[4](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = 0.75);
//   Real plant.stateInletCC.gas.h(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   Real plant.stateInletCC.gas.d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0);
//   Real plant.stateInletCC.gas.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0);
//   Real plant.stateInletCC.gas.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.23, nominal = 0.1);
//   Real plant.stateInletCC.gas.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.015, nominal = 0.1);
//   Real plant.stateInletCC.gas.X[3](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.005, nominal = 0.1);
//   Real plant.stateInletCC.gas.X[4](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.75, nominal = 0.1);
//   Real plant.stateInletCC.gas.u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real plant.stateInletCC.gas.R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real plant.stateInletCC.gas.MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real plant.stateInletCC.gas.state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0);
//   Real plant.stateInletCC.gas.state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0);
//   Real plant.stateInletCC.gas.state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.stateInletCC.gas.state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.stateInletCC.gas.state.X[3](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.stateInletCC.gas.state.X[4](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   parameter Boolean plant.stateInletCC.gas.preferredMediumStates = false;
//   parameter Boolean plant.stateInletCC.gas.standardOrderComponents = true;
//   Real plant.stateInletCC.gas.T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = Modelica.SIunits.Conversions.to_degC(plant.stateInletCC.gas.T);
//   Real plant.stateInletCC.gas.p_bar(quantity = \"Pressure\", unit = \"bar\") = Modelica.SIunits.Conversions.to_bar(plant.stateInletCC.gas.p);
//   Real plant.stateInletCC.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real plant.stateInletCC.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   Real plant.stateInletCC.h(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   Real plant.stateInletCC.w(quantity = \"MassFlowRate\", unit = \"kg/s\");
//   parameter Boolean plant.stateOutletCC.allowFlowReversal = plant.system.allowFlowReversal;
//   Real plant.stateOutletCC.inlet.m_flow(quantity = \"MassFlowRate.FlueGas\", unit = \"kg/s\", min = if plant.stateOutletCC.allowFlowReversal then -9.999999999999999e+59 else 0.0, max = 100000.0);
//   Real plant.stateOutletCC.inlet.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0);
//   Real plant.stateOutletCC.inlet.h_outflow(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, start = 300000.0, nominal = 100000.0);
//   Real plant.stateOutletCC.inlet.Xi_outflow[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.stateOutletCC.inlet.Xi_outflow[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.stateOutletCC.inlet.Xi_outflow[3](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.stateOutletCC.inlet.Xi_outflow[4](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.stateOutletCC.inlet.Xi_outflow[5](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.stateOutletCC.outlet.m_flow(quantity = \"MassFlowRate.FlueGas\", unit = \"kg/s\", min = -100000.0, max = if plant.stateOutletCC.allowFlowReversal then 9.999999999999999e+59 else 0.0);
//   Real plant.stateOutletCC.outlet.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0);
//   Real plant.stateOutletCC.outlet.h_outflow(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -10000000000.0, max = 10000000000.0, start = 300000.0, nominal = 100000.0);
//   Real plant.stateOutletCC.outlet.Xi_outflow[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.stateOutletCC.outlet.Xi_outflow[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.stateOutletCC.outlet.Xi_outflow[3](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.stateOutletCC.outlet.Xi_outflow[4](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.stateOutletCC.outlet.Xi_outflow[5](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.stateOutletCC.gas.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, nominal = 100000.0);
//   Real plant.stateOutletCC.gas.Xi[1](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = 0.23);
//   Real plant.stateOutletCC.gas.Xi[2](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = 0.02);
//   Real plant.stateOutletCC.gas.Xi[3](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = 0.01);
//   Real plant.stateOutletCC.gas.Xi[4](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = 0.04);
//   Real plant.stateOutletCC.gas.Xi[5](quantity = \"MassFraction\", unit = \"1\", min = 0.0, max = 1.0, start = 0.7);
//   Real plant.stateOutletCC.gas.h(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   Real plant.stateOutletCC.gas.d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 10.0, nominal = 10.0);
//   Real plant.stateOutletCC.gas.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0);
//   Real plant.stateOutletCC.gas.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.23, nominal = 0.1);
//   Real plant.stateOutletCC.gas.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.02, nominal = 0.1);
//   Real plant.stateOutletCC.gas.X[3](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.01, nominal = 0.1);
//   Real plant.stateOutletCC.gas.X[4](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.04, nominal = 0.1);
//   Real plant.stateOutletCC.gas.X[5](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.7, nominal = 0.1);
//   Real plant.stateOutletCC.gas.u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real plant.stateOutletCC.gas.R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 10000000.0, start = 1000.0, nominal = 1000.0);
//   Real plant.stateOutletCC.gas.MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   Real plant.stateOutletCC.gas.state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0);
//   Real plant.stateOutletCC.gas.state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0);
//   Real plant.stateOutletCC.gas.state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.stateOutletCC.gas.state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.stateOutletCC.gas.state.X[3](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.stateOutletCC.gas.state.X[4](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   Real plant.stateOutletCC.gas.state.X[5](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1);
//   parameter Boolean plant.stateOutletCC.gas.preferredMediumStates = false;
//   parameter Boolean plant.stateOutletCC.gas.standardOrderComponents = true;
//   Real plant.stateOutletCC.gas.T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = Modelica.SIunits.Conversions.to_degC(plant.stateOutletCC.gas.T);
//   Real plant.stateOutletCC.gas.p_bar(quantity = \"Pressure\", unit = \"bar\") = Modelica.SIunits.Conversions.to_bar(plant.stateOutletCC.gas.p);
//   Real plant.stateOutletCC.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 288.15, nominal = 300.0);
//   Real plant.stateOutletCC.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   Real plant.stateOutletCC.h(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   Real plant.stateOutletCC.w(quantity = \"MassFlowRate\", unit = \"kg/s\");
//   parameter Boolean plant.system.allowFlowReversal = false;
//   parameter enumeration(DynamicFreeInitial, FixedInitial, SteadyStateInitial, SteadyState) plant.system.Dynamics = ThermoPower.Choices.System.Dynamics.DynamicFreeInitial;
//   Real powerSetPoint.y;
//   parameter Real powerSetPoint.height = 2000000.0;
//   parameter Real powerSetPoint.duration(quantity = \"Time\", unit = \"s\", min = 0.0, start = 2.0) = 10.0;
//   parameter Real powerSetPoint.offset = 4000000.0;
//   parameter Real powerSetPoint.startTime(quantity = \"Time\", unit = \"s\") = 500.0;
//   parameter Real pID.Kp = 0.25;
//   parameter Real pID.Ti(quantity = \"Time\", unit = \"s\") = 5.0;
//   parameter Boolean pID.integralAction = true;
//   parameter Real pID.Td(quantity = \"Time\", unit = \"s\") = 0.0;
//   parameter Real pID.Nd = 1.0;
//   parameter Real pID.Ni = 1.0;
//   parameter Real pID.b = 1.0;
//   parameter Real pID.c = 0.0;
//   parameter Real pID.PVmin = 2000000.0;
//   parameter Real pID.PVmax = 12000000.0;
//   parameter Real pID.CSmin = 0.0;
//   parameter Real pID.CSmax = 4.0;
//   parameter Real pID.PVstart = 0.5;
//   parameter Real pID.CSstart = 0.5;
//   parameter Boolean pID.holdWhenSimplified = true;
//   parameter Boolean pID.steadyStateInit = true;
//   Real pID.CSs_hom;
//   Real pID.P;
//   Real pID.I(start = pID.CSstart / pID.Kp);
//   Real pID.D;
//   Real pID.Dx(start = pID.c * pID.PVstart - pID.PVstart);
//   Real pID.PVs;
//   Real pID.SPs;
//   Real pID.CSs(start = pID.CSstart);
//   Real pID.CSbs(start = pID.CSstart);
//   Real pID.track;
//   Real pID.PV;
//   Real pID.CS;
//   Real pID.SP;
//   parameter Boolean system.allowFlowReversal = true;
//   parameter enumeration(DynamicFreeInitial, FixedInitial, SteadyStateInitial, SteadyState) system.Dynamics = ThermoPower.Choices.System.Dynamics.DynamicFreeInitial;
// initial equation
//   der(plant.generator.omega_m) = 0.0;
//   der(plant.network.delta) = 0.0;
//   der(plant.CombustionChamber1.fluegas.p) = 0.0;
//   der(plant.CombustionChamber1.fluegas.T) = 0.0;
//   der(plant.CombustionChamber1.fluegas.Xi[1]) = 0.0;
//   der(plant.CombustionChamber1.fluegas.Xi[2]) = 0.0;
//   der(plant.CombustionChamber1.fluegas.Xi[3]) = 0.0;
//   der(plant.CombustionChamber1.fluegas.Xi[4]) = 0.0;
//   der(plant.CombustionChamber1.fluegas.Xi[5]) = 0.0;
//   der(plant.CombustionChamber1.Tm) = 0.0;
//   plant.PressDrop1.Kf = plant.PressDrop1.dpnom * plant.PressDrop1.rhonom * plant.PressDrop1.wnom ^ (-2.0) * plant.PressDrop1.Kfc;
//   plant.PressDrop1.Kfl = plant.PressDrop1.wnom * plant.PressDrop1.wnf * plant.PressDrop1.Kf;
//   assert(plant.PressDrop1.Kf >= 0.0, \"Negative friction coefficient\");
//   plant.PressDrop2.Kf = plant.PressDrop2.dpnom * plant.PressDrop2.rhonom * plant.PressDrop2.wnom ^ (-2.0) * plant.PressDrop2.Kfc;
//   plant.PressDrop2.Kfl = plant.PressDrop2.wnom * plant.PressDrop2.wnf * plant.PressDrop2.Kf;
//   assert(plant.PressDrop2.Kf >= 0.0, \"Negative friction coefficient\");
//   der(plant.gasFlowActuator.y) = 0.0;
//   der(plant.powerSensor1.y) = 0.0;
//   der(pID.I) = 0.0;
// equation
//   plant.generator.omega_m = der(plant.generator.shaft.phi);
//   plant.generator.omega_e = plant.generator.omega_m * /*Real*/(plant.generator.Np);
//   plant.generator.f = 0.1591549430918953 * plant.generator.omega_e;
//   plant.generator.n = Modelica.SIunits.Conversions.to_rpm(plant.generator.omega_m);
//   plant.generator.Pm = plant.generator.omega_m * plant.generator.tau;
//   plant.generator.Ploss = plant.generator.J * der(plant.generator.omega_m) * plant.generator.omega_m;
//   plant.generator.Pm = plant.generator.Pe / plant.generator.eta + plant.generator.Ploss;
//   plant.generator.f = plant.generator.powerConnection.f;
//   plant.generator.Pe = -plant.generator.powerConnection.W;
//   plant.generator.tau = plant.generator.shaft.tau;
//   plant.network.omegaRef = 6.283185307179586 * plant.network.fnom;
//   plant.network.D = 5.013256549262 * plant.network.r * sqrt(plant.network.C * plant.network.J * plant.network.fnom / /*Real*/(plant.network.Np));
//   if plant.network.closedInternal then
//     plant.network.Ploss = plant.network.D * der(plant.network.delta);
//   else
//     plant.network.Ploss = 0.0;
//   end if;
//   der(plant.network.delta) = plant.network.omega - plant.network.omegaRef;
//   if plant.network.closedInternal then
//     plant.network.Pe = homotopy(plant.network.C * sin(plant.network.delta), plant.network.C * plant.network.delta);
//   else
//     plant.network.Pe = 0.0;
//   end if;
//   plant.network.Pe + plant.network.Ploss = plant.network.powerConnection.W;
//   plant.network.omega = 6.283185307179586 * plant.network.powerConnection.f;
//   plant.network.closedInternal = true;
//   plant.network.delta_out = plant.network.delta;
//   assert(plant.compressor.gas_in.T >= 200.0 and plant.compressor.gas_in.T <= 6000.0, \"
//               Temperature T (=\" + String(plant.compressor.gas_in.T, 6, 0, true) + \" K = 200 K) is not in the allowed range
//               200 K <= T <= 6000 K
//               required from medium model \\\"\" + \"Air\" + \"\\\".\");
//   plant.compressor.gas_in.MM = ThermoPower.Gas.Compressor$plant$compressor.Medium.molarMass(plant.compressor.gas_in.state);
//   plant.compressor.gas_in.h = ThermoPower.Gas.Compressor$plant$compressor.Medium.h_TX(plant.compressor.gas_in.T, {plant.compressor.gas_in.X[1], plant.compressor.gas_in.X[2], plant.compressor.gas_in.X[3], plant.compressor.gas_in.X[4]}, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0);
//   plant.compressor.gas_in.R = 259.8369938872708 * plant.compressor.gas_in.X[1] + 461.5233290850878 * plant.compressor.gas_in.X[2] + 208.1323720837088 * plant.compressor.gas_in.X[3] + 296.8033869505308 * plant.compressor.gas_in.X[4];
//   plant.compressor.gas_in.u = plant.compressor.gas_in.h - plant.compressor.gas_in.R * plant.compressor.gas_in.T;
//   plant.compressor.gas_in.d = plant.compressor.gas_in.p / (plant.compressor.gas_in.R * plant.compressor.gas_in.T);
//   plant.compressor.gas_in.state.T = plant.compressor.gas_in.T;
//   plant.compressor.gas_in.state.p = plant.compressor.gas_in.p;
//   plant.compressor.gas_in.state.X[1] = plant.compressor.gas_in.X[1];
//   plant.compressor.gas_in.state.X[2] = plant.compressor.gas_in.X[2];
//   plant.compressor.gas_in.state.X[3] = plant.compressor.gas_in.X[3];
//   plant.compressor.gas_in.state.X[4] = plant.compressor.gas_in.X[4];
//   plant.compressor.gas_in.Xi[1] = plant.compressor.gas_in.X[1];
//   plant.compressor.gas_in.Xi[2] = plant.compressor.gas_in.X[2];
//   plant.compressor.gas_in.Xi[3] = plant.compressor.gas_in.X[3];
//   plant.compressor.gas_in.Xi[4] = plant.compressor.gas_in.X[4];
//   assert(plant.compressor.gas_in.X[1] >= -1e-05 and plant.compressor.gas_in.X[1] <= 1.00001, \"Mass fraction X[1] = \" + String(plant.compressor.gas_in.X[1], 6, 0, true) + \"of substance \" + \"Oxygen\" + \"
//   of medium \" + \"Air\" + \" is not in the range 0..1\");
//   assert(plant.compressor.gas_in.X[2] >= -1e-05 and plant.compressor.gas_in.X[2] <= 1.00001, \"Mass fraction X[2] = \" + String(plant.compressor.gas_in.X[2], 6, 0, true) + \"of substance \" + \"Water\" + \"
//   of medium \" + \"Air\" + \" is not in the range 0..1\");
//   assert(plant.compressor.gas_in.X[3] >= -1e-05 and plant.compressor.gas_in.X[3] <= 1.00001, \"Mass fraction X[3] = \" + String(plant.compressor.gas_in.X[3], 6, 0, true) + \"of substance \" + \"Argon\" + \"
//   of medium \" + \"Air\" + \" is not in the range 0..1\");
//   assert(plant.compressor.gas_in.X[4] >= -1e-05 and plant.compressor.gas_in.X[4] <= 1.00001, \"Mass fraction X[4] = \" + String(plant.compressor.gas_in.X[4], 6, 0, true) + \"of substance \" + \"Nitrogen\" + \"
//   of medium \" + \"Air\" + \" is not in the range 0..1\");
//   assert(plant.compressor.gas_in.p >= 0.0, \"Pressure (= \" + String(plant.compressor.gas_in.p, 6, 0, true) + \" Pa) of medium \\\"\" + \"Air\" + \"\\\" is negative
//   (Temperature = \" + String(plant.compressor.gas_in.T, 6, 0, true) + \" K)\");
//   assert(plant.compressor.gas_iso.T >= 200.0 and plant.compressor.gas_iso.T <= 6000.0, \"
//               Temperature T (=\" + String(plant.compressor.gas_iso.T, 6, 0, true) + \" K = 200 K) is not in the allowed range
//               200 K <= T <= 6000 K
//               required from medium model \\\"\" + \"Air\" + \"\\\".\");
//   plant.compressor.gas_iso.MM = ThermoPower.Gas.Compressor$plant$compressor.Medium.molarMass(plant.compressor.gas_iso.state);
//   plant.compressor.gas_iso.h = ThermoPower.Gas.Compressor$plant$compressor.Medium.h_TX(plant.compressor.gas_iso.T, {plant.compressor.gas_iso.X[1], plant.compressor.gas_iso.X[2], plant.compressor.gas_iso.X[3], plant.compressor.gas_iso.X[4]}, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0);
//   plant.compressor.gas_iso.R = 259.8369938872708 * plant.compressor.gas_iso.X[1] + 461.5233290850878 * plant.compressor.gas_iso.X[2] + 208.1323720837088 * plant.compressor.gas_iso.X[3] + 296.8033869505308 * plant.compressor.gas_iso.X[4];
//   plant.compressor.gas_iso.u = plant.compressor.gas_iso.h - plant.compressor.gas_iso.R * plant.compressor.gas_iso.T;
//   plant.compressor.gas_iso.d = plant.compressor.gas_iso.p / (plant.compressor.gas_iso.R * plant.compressor.gas_iso.T);
//   plant.compressor.gas_iso.state.T = plant.compressor.gas_iso.T;
//   plant.compressor.gas_iso.state.p = plant.compressor.gas_iso.p;
//   plant.compressor.gas_iso.state.X[1] = plant.compressor.gas_iso.X[1];
//   plant.compressor.gas_iso.state.X[2] = plant.compressor.gas_iso.X[2];
//   plant.compressor.gas_iso.state.X[3] = plant.compressor.gas_iso.X[3];
//   plant.compressor.gas_iso.state.X[4] = plant.compressor.gas_iso.X[4];
//   plant.compressor.gas_iso.Xi[1] = plant.compressor.gas_iso.X[1];
//   plant.compressor.gas_iso.Xi[2] = plant.compressor.gas_iso.X[2];
//   plant.compressor.gas_iso.Xi[3] = plant.compressor.gas_iso.X[3];
//   plant.compressor.gas_iso.Xi[4] = plant.compressor.gas_iso.X[4];
//   assert(plant.compressor.gas_iso.X[1] >= -1e-05 and plant.compressor.gas_iso.X[1] <= 1.00001, \"Mass fraction X[1] = \" + String(plant.compressor.gas_iso.X[1], 6, 0, true) + \"of substance \" + \"Oxygen\" + \"
//   of medium \" + \"Air\" + \" is not in the range 0..1\");
//   assert(plant.compressor.gas_iso.X[2] >= -1e-05 and plant.compressor.gas_iso.X[2] <= 1.00001, \"Mass fraction X[2] = \" + String(plant.compressor.gas_iso.X[2], 6, 0, true) + \"of substance \" + \"Water\" + \"
//   of medium \" + \"Air\" + \" is not in the range 0..1\");
//   assert(plant.compressor.gas_iso.X[3] >= -1e-05 and plant.compressor.gas_iso.X[3] <= 1.00001, \"Mass fraction X[3] = \" + String(plant.compressor.gas_iso.X[3], 6, 0, true) + \"of substance \" + \"Argon\" + \"
//   of medium \" + \"Air\" + \" is not in the range 0..1\");
//   assert(plant.compressor.gas_iso.X[4] >= -1e-05 and plant.compressor.gas_iso.X[4] <= 1.00001, \"Mass fraction X[4] = \" + String(plant.compressor.gas_iso.X[4], 6, 0, true) + \"of substance \" + \"Nitrogen\" + \"
//   of medium \" + \"Air\" + \" is not in the range 0..1\");
//   assert(plant.compressor.gas_iso.p >= 0.0, \"Pressure (= \" + String(plant.compressor.gas_iso.p, 6, 0, true) + \" Pa) of medium \\\"\" + \"Air\" + \"\\\" is negative
//   (Temperature = \" + String(plant.compressor.gas_iso.T, 6, 0, true) + \" K)\");
//   when initial() then
//     plant.compressor.Eta.tableOnFileRead = 1.0;
//   end when;
//   assert(true, \"tableOnFile = false and parameter table is an empty matrix\");
//   plant.compressor.Eta.y = Modelica.Blocks.Tables.CombiTable2D$plant$compressor$Eta.getTableValue(plant.compressor.Eta.tableID, plant.compressor.Eta.u1, plant.compressor.Eta.u2, plant.compressor.Eta.tableOnFileRead);
//   when initial() then
//     plant.compressor.PressRatio.tableOnFileRead = 1.0;
//   end when;
//   assert(true, \"tableOnFile = false and parameter table is an empty matrix\");
//   plant.compressor.PressRatio.y = Modelica.Blocks.Tables.CombiTable2D$plant$compressor$PressRatio.getTableValue(plant.compressor.PressRatio.tableID, plant.compressor.PressRatio.u1, plant.compressor.PressRatio.u2, plant.compressor.PressRatio.tableOnFileRead);
//   when initial() then
//     plant.compressor.Phic.tableOnFileRead = 1.0;
//   end when;
//   assert(true, \"tableOnFile = false and parameter table is an empty matrix\");
//   plant.compressor.Phic.y = Modelica.Blocks.Tables.CombiTable2D$plant$compressor$Phic.getTableValue(plant.compressor.Phic.tableID, plant.compressor.Phic.u1, plant.compressor.Phic.u2, plant.compressor.Phic.tableOnFileRead);
//   plant.compressor.N_T_design = plant.compressor.Ndesign / sqrt(plant.compressor.Tdes_in);
//   plant.compressor.N_T = 100.0 * plant.compressor.omega / (sqrt(plant.compressor.gas_in.T) * plant.compressor.N_T_design);
//   plant.compressor.phic = plant.compressor.w * sqrt(plant.compressor.gas_in.T) / plant.compressor.gas_in.p;
//   plant.compressor.Phic.u1 = plant.compressor.beta;
//   plant.compressor.Phic.u2 = plant.compressor.N_T;
//   plant.compressor.phic = plant.compressor.Phic.y;
//   plant.compressor.Eta.u1 = plant.compressor.beta;
//   plant.compressor.Eta.u2 = plant.compressor.N_T;
//   plant.compressor.eta = plant.compressor.Eta.y;
//   plant.compressor.PressRatio.u1 = plant.compressor.beta;
//   plant.compressor.PressRatio.u2 = plant.compressor.N_T;
//   plant.compressor.PR = plant.compressor.PressRatio.y;
//   plant.compressor.w = plant.compressor.inlet.m_flow;
//   assert(plant.compressor.w >= 0.0, \"The compressor model does not support flow reversal\");
//   plant.compressor.inlet.m_flow + plant.compressor.outlet.m_flow = 0.0;
//   plant.compressor.gas_in.p = plant.compressor.inlet.p;
//   plant.compressor.gas_in.h = plant.SourceP1.flange.h_outflow;
//   plant.compressor.gas_in.Xi[1] = plant.SourceP1.flange.Xi_outflow[1];
//   plant.compressor.gas_in.Xi[2] = plant.SourceP1.flange.Xi_outflow[2];
//   plant.compressor.gas_in.Xi[3] = plant.SourceP1.flange.Xi_outflow[3];
//   plant.compressor.gas_in.Xi[4] = plant.SourceP1.flange.Xi_outflow[4];
//   plant.compressor.outlet.p = plant.compressor.pout;
//   plant.compressor.outlet.h_outflow = plant.compressor.hout;
//   plant.compressor.outlet.Xi_outflow[1] = plant.compressor.gas_in.Xi[1];
//   plant.compressor.outlet.Xi_outflow[2] = plant.compressor.gas_in.Xi[2];
//   plant.compressor.outlet.Xi_outflow[3] = plant.compressor.gas_in.Xi[3];
//   plant.compressor.outlet.Xi_outflow[4] = plant.compressor.gas_in.Xi[4];
//   plant.compressor.inlet.h_outflow = plant.compressor.outlet.h_outflow;
//   plant.compressor.inlet.Xi_outflow[1] = plant.compressor.outlet.Xi_outflow[1];
//   plant.compressor.inlet.Xi_outflow[2] = plant.compressor.outlet.Xi_outflow[2];
//   plant.compressor.inlet.Xi_outflow[3] = plant.compressor.outlet.Xi_outflow[3];
//   plant.compressor.inlet.Xi_outflow[4] = plant.compressor.outlet.Xi_outflow[4];
//   plant.compressor.gas_iso.Xi[1] = plant.compressor.gas_in.Xi[1];
//   plant.compressor.gas_iso.Xi[2] = plant.compressor.gas_in.Xi[2];
//   plant.compressor.gas_iso.Xi[3] = plant.compressor.gas_in.Xi[3];
//   plant.compressor.gas_iso.Xi[4] = plant.compressor.gas_in.Xi[4];
//   plant.compressor.hout_iso = ThermoPower.Gas.Compressor$plant$compressor.Medium.isentropicEnthalpy(plant.compressor.outlet.p, plant.compressor.gas_in.state, false);
//   plant.compressor.hout - plant.compressor.gas_in.h = (plant.compressor.hout_iso - plant.compressor.gas_in.h) / plant.compressor.eta;
//   plant.compressor.s_in = 0.0;
//   plant.compressor.gas_iso.p = 100000.0;
//   plant.compressor.gas_iso.T = 300.0;
//   plant.compressor.w * (plant.compressor.hout - plant.compressor.gas_in.h) = plant.compressor.tau * plant.compressor.omega * plant.compressor.eta_mech;
//   plant.compressor.PR = plant.compressor.pout / plant.compressor.gas_in.p;
//   plant.compressor.shaft_a.phi = plant.compressor.phi;
//   plant.compressor.shaft_b.phi = plant.compressor.phi;
//   plant.compressor.shaft_a.tau + plant.compressor.shaft_b.tau = plant.compressor.tau;
//   der(plant.compressor.phi) = plant.compressor.omega;
//   assert(plant.turbine.gas_in.T >= 200.0 and plant.turbine.gas_in.T <= 6000.0, \"
//               Temperature T (=\" + String(plant.turbine.gas_in.T, 6, 0, true) + \" K = 200 K) is not in the allowed range
//               200 K <= T <= 6000 K
//               required from medium model \\\"\" + \"FlueGas\" + \"\\\".\");
//   plant.turbine.gas_in.MM = ThermoPower.Gas.Turbine$plant$turbine.Medium.molarMass(plant.turbine.gas_in.state);
//   plant.turbine.gas_in.h = ThermoPower.Gas.Turbine$plant$turbine.Medium.h_TX(plant.turbine.gas_in.T, {plant.turbine.gas_in.X[1], plant.turbine.gas_in.X[2], plant.turbine.gas_in.X[3], plant.turbine.gas_in.X[4], plant.turbine.gas_in.X[5]}, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0);
//   plant.turbine.gas_in.R = 259.8369938872708 * plant.turbine.gas_in.X[1] + 208.1323720837088 * plant.turbine.gas_in.X[2] + 461.5233290850878 * plant.turbine.gas_in.X[3] + 188.9244822140674 * plant.turbine.gas_in.X[4] + 296.8033869505308 * plant.turbine.gas_in.X[5];
//   plant.turbine.gas_in.u = plant.turbine.gas_in.h - plant.turbine.gas_in.R * plant.turbine.gas_in.T;
//   plant.turbine.gas_in.d = plant.turbine.gas_in.p / (plant.turbine.gas_in.R * plant.turbine.gas_in.T);
//   plant.turbine.gas_in.state.T = plant.turbine.gas_in.T;
//   plant.turbine.gas_in.state.p = plant.turbine.gas_in.p;
//   plant.turbine.gas_in.state.X[1] = plant.turbine.gas_in.X[1];
//   plant.turbine.gas_in.state.X[2] = plant.turbine.gas_in.X[2];
//   plant.turbine.gas_in.state.X[3] = plant.turbine.gas_in.X[3];
//   plant.turbine.gas_in.state.X[4] = plant.turbine.gas_in.X[4];
//   plant.turbine.gas_in.state.X[5] = plant.turbine.gas_in.X[5];
//   plant.turbine.gas_in.Xi[1] = plant.turbine.gas_in.X[1];
//   plant.turbine.gas_in.Xi[2] = plant.turbine.gas_in.X[2];
//   plant.turbine.gas_in.Xi[3] = plant.turbine.gas_in.X[3];
//   plant.turbine.gas_in.Xi[4] = plant.turbine.gas_in.X[4];
//   plant.turbine.gas_in.Xi[5] = plant.turbine.gas_in.X[5];
//   assert(plant.turbine.gas_in.X[1] >= -1e-05 and plant.turbine.gas_in.X[1] <= 1.00001, \"Mass fraction X[1] = \" + String(plant.turbine.gas_in.X[1], 6, 0, true) + \"of substance \" + \"Oxygen\" + \"
//   of medium \" + \"FlueGas\" + \" is not in the range 0..1\");
//   assert(plant.turbine.gas_in.X[2] >= -1e-05 and plant.turbine.gas_in.X[2] <= 1.00001, \"Mass fraction X[2] = \" + String(plant.turbine.gas_in.X[2], 6, 0, true) + \"of substance \" + \"Argon\" + \"
//   of medium \" + \"FlueGas\" + \" is not in the range 0..1\");
//   assert(plant.turbine.gas_in.X[3] >= -1e-05 and plant.turbine.gas_in.X[3] <= 1.00001, \"Mass fraction X[3] = \" + String(plant.turbine.gas_in.X[3], 6, 0, true) + \"of substance \" + \"Water\" + \"
//   of medium \" + \"FlueGas\" + \" is not in the range 0..1\");
//   assert(plant.turbine.gas_in.X[4] >= -1e-05 and plant.turbine.gas_in.X[4] <= 1.00001, \"Mass fraction X[4] = \" + String(plant.turbine.gas_in.X[4], 6, 0, true) + \"of substance \" + \"Carbondioxide\" + \"
//   of medium \" + \"FlueGas\" + \" is not in the range 0..1\");
//   assert(plant.turbine.gas_in.X[5] >= -1e-05 and plant.turbine.gas_in.X[5] <= 1.00001, \"Mass fraction X[5] = \" + String(plant.turbine.gas_in.X[5], 6, 0, true) + \"of substance \" + \"Nitrogen\" + \"
//   of medium \" + \"FlueGas\" + \" is not in the range 0..1\");
//   assert(plant.turbine.gas_in.p >= 0.0, \"Pressure (= \" + String(plant.turbine.gas_in.p, 6, 0, true) + \" Pa) of medium \\\"\" + \"FlueGas\" + \"\\\" is negative
//   (Temperature = \" + String(plant.turbine.gas_in.T, 6, 0, true) + \" K)\");
//   assert(plant.turbine.gas_iso.T >= 200.0 and plant.turbine.gas_iso.T <= 6000.0, \"
//               Temperature T (=\" + String(plant.turbine.gas_iso.T, 6, 0, true) + \" K = 200 K) is not in the allowed range
//               200 K <= T <= 6000 K
//               required from medium model \\\"\" + \"FlueGas\" + \"\\\".\");
//   plant.turbine.gas_iso.MM = ThermoPower.Gas.Turbine$plant$turbine.Medium.molarMass(plant.turbine.gas_iso.state);
//   plant.turbine.gas_iso.h = ThermoPower.Gas.Turbine$plant$turbine.Medium.h_TX(plant.turbine.gas_iso.T, {plant.turbine.gas_iso.X[1], plant.turbine.gas_iso.X[2], plant.turbine.gas_iso.X[3], plant.turbine.gas_iso.X[4], plant.turbine.gas_iso.X[5]}, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0);
//   plant.turbine.gas_iso.R = 259.8369938872708 * plant.turbine.gas_iso.X[1] + 208.1323720837088 * plant.turbine.gas_iso.X[2] + 461.5233290850878 * plant.turbine.gas_iso.X[3] + 188.9244822140674 * plant.turbine.gas_iso.X[4] + 296.8033869505308 * plant.turbine.gas_iso.X[5];
//   plant.turbine.gas_iso.u = plant.turbine.gas_iso.h - plant.turbine.gas_iso.R * plant.turbine.gas_iso.T;
//   plant.turbine.gas_iso.d = plant.turbine.gas_iso.p / (plant.turbine.gas_iso.R * plant.turbine.gas_iso.T);
//   plant.turbine.gas_iso.state.T = plant.turbine.gas_iso.T;
//   plant.turbine.gas_iso.state.p = plant.turbine.gas_iso.p;
//   plant.turbine.gas_iso.state.X[1] = plant.turbine.gas_iso.X[1];
//   plant.turbine.gas_iso.state.X[2] = plant.turbine.gas_iso.X[2];
//   plant.turbine.gas_iso.state.X[3] = plant.turbine.gas_iso.X[3];
//   plant.turbine.gas_iso.state.X[4] = plant.turbine.gas_iso.X[4];
//   plant.turbine.gas_iso.state.X[5] = plant.turbine.gas_iso.X[5];
//   plant.turbine.gas_iso.Xi[1] = plant.turbine.gas_iso.X[1];
//   plant.turbine.gas_iso.Xi[2] = plant.turbine.gas_iso.X[2];
//   plant.turbine.gas_iso.Xi[3] = plant.turbine.gas_iso.X[3];
//   plant.turbine.gas_iso.Xi[4] = plant.turbine.gas_iso.X[4];
//   plant.turbine.gas_iso.Xi[5] = plant.turbine.gas_iso.X[5];
//   assert(plant.turbine.gas_iso.X[1] >= -1e-05 and plant.turbine.gas_iso.X[1] <= 1.00001, \"Mass fraction X[1] = \" + String(plant.turbine.gas_iso.X[1], 6, 0, true) + \"of substance \" + \"Oxygen\" + \"
//   of medium \" + \"FlueGas\" + \" is not in the range 0..1\");
//   assert(plant.turbine.gas_iso.X[2] >= -1e-05 and plant.turbine.gas_iso.X[2] <= 1.00001, \"Mass fraction X[2] = \" + String(plant.turbine.gas_iso.X[2], 6, 0, true) + \"of substance \" + \"Argon\" + \"
//   of medium \" + \"FlueGas\" + \" is not in the range 0..1\");
//   assert(plant.turbine.gas_iso.X[3] >= -1e-05 and plant.turbine.gas_iso.X[3] <= 1.00001, \"Mass fraction X[3] = \" + String(plant.turbine.gas_iso.X[3], 6, 0, true) + \"of substance \" + \"Water\" + \"
//   of medium \" + \"FlueGas\" + \" is not in the range 0..1\");
//   assert(plant.turbine.gas_iso.X[4] >= -1e-05 and plant.turbine.gas_iso.X[4] <= 1.00001, \"Mass fraction X[4] = \" + String(plant.turbine.gas_iso.X[4], 6, 0, true) + \"of substance \" + \"Carbondioxide\" + \"
//   of medium \" + \"FlueGas\" + \" is not in the range 0..1\");
//   assert(plant.turbine.gas_iso.X[5] >= -1e-05 and plant.turbine.gas_iso.X[5] <= 1.00001, \"Mass fraction X[5] = \" + String(plant.turbine.gas_iso.X[5], 6, 0, true) + \"of substance \" + \"Nitrogen\" + \"
//   of medium \" + \"FlueGas\" + \" is not in the range 0..1\");
//   assert(plant.turbine.gas_iso.p >= 0.0, \"Pressure (= \" + String(plant.turbine.gas_iso.p, 6, 0, true) + \" Pa) of medium \\\"\" + \"FlueGas\" + \"\\\" is negative
//   (Temperature = \" + String(plant.turbine.gas_iso.T, 6, 0, true) + \" K)\");
//   when initial() then
//     plant.turbine.Phic.tableOnFileRead = 1.0;
//   end when;
//   assert(true, \"tableOnFile = false and parameter table is an empty matrix\");
//   plant.turbine.Phic.y = Modelica.Blocks.Tables.CombiTable2D$plant$turbine$Phic.getTableValue(plant.turbine.Phic.tableID, plant.turbine.Phic.u1, plant.turbine.Phic.u2, plant.turbine.Phic.tableOnFileRead);
//   when initial() then
//     plant.turbine.Eta.tableOnFileRead = 1.0;
//   end when;
//   assert(true, \"tableOnFile = false and parameter table is an empty matrix\");
//   plant.turbine.Eta.y = Modelica.Blocks.Tables.CombiTable2D$plant$turbine$Eta.getTableValue(plant.turbine.Eta.tableID, plant.turbine.Eta.u1, plant.turbine.Eta.u2, plant.turbine.Eta.tableOnFileRead);
//   plant.turbine.N_T_design = plant.turbine.Ndesign / sqrt(plant.turbine.Tdes_in);
//   plant.turbine.N_T = 100.0 * plant.turbine.omega / (sqrt(plant.turbine.gas_in.T) * plant.turbine.N_T_design);
//   plant.turbine.phic = plant.turbine.w * sqrt(plant.turbine.gas_in.T) / plant.turbine.gas_in.p;
//   plant.turbine.Phic.u1 = plant.turbine.PR;
//   plant.turbine.Phic.u2 = plant.turbine.N_T;
//   plant.turbine.phic = plant.turbine.Phic.y;
//   plant.turbine.Eta.u1 = plant.turbine.PR;
//   plant.turbine.Eta.u2 = plant.turbine.N_T;
//   plant.turbine.eta = plant.turbine.Eta.y;
//   plant.turbine.w = plant.turbine.inlet.m_flow;
//   assert(plant.turbine.w >= 0.0, \"The turbine model does not support flow reversal\");
//   plant.turbine.inlet.m_flow + plant.turbine.outlet.m_flow = 0.0;
//   plant.turbine.gas_in.p = plant.turbine.inlet.p;
//   plant.turbine.gas_in.h = plant.PressDrop1.outlet.h_outflow;
//   plant.turbine.gas_in.Xi[1] = plant.PressDrop1.outlet.Xi_outflow[1];
//   plant.turbine.gas_in.Xi[2] = plant.PressDrop1.outlet.Xi_outflow[2];
//   plant.turbine.gas_in.Xi[3] = plant.PressDrop1.outlet.Xi_outflow[3];
//   plant.turbine.gas_in.Xi[4] = plant.PressDrop1.outlet.Xi_outflow[4];
//   plant.turbine.gas_in.Xi[5] = plant.PressDrop1.outlet.Xi_outflow[5];
//   plant.turbine.outlet.p = plant.turbine.pout;
//   plant.turbine.outlet.h_outflow = plant.turbine.hout;
//   plant.turbine.outlet.Xi_outflow[1] = plant.turbine.gas_in.Xi[1];
//   plant.turbine.outlet.Xi_outflow[2] = plant.turbine.gas_in.Xi[2];
//   plant.turbine.outlet.Xi_outflow[3] = plant.turbine.gas_in.Xi[3];
//   plant.turbine.outlet.Xi_outflow[4] = plant.turbine.gas_in.Xi[4];
//   plant.turbine.outlet.Xi_outflow[5] = plant.turbine.gas_in.Xi[5];
//   plant.turbine.inlet.h_outflow = plant.turbine.outlet.h_outflow;
//   plant.turbine.inlet.Xi_outflow[1] = plant.turbine.outlet.Xi_outflow[1];
//   plant.turbine.inlet.Xi_outflow[2] = plant.turbine.outlet.Xi_outflow[2];
//   plant.turbine.inlet.Xi_outflow[3] = plant.turbine.outlet.Xi_outflow[3];
//   plant.turbine.inlet.Xi_outflow[4] = plant.turbine.outlet.Xi_outflow[4];
//   plant.turbine.inlet.Xi_outflow[5] = plant.turbine.outlet.Xi_outflow[5];
//   plant.turbine.gas_iso.Xi[1] = plant.turbine.gas_in.Xi[1];
//   plant.turbine.gas_iso.Xi[2] = plant.turbine.gas_in.Xi[2];
//   plant.turbine.gas_iso.Xi[3] = plant.turbine.gas_in.Xi[3];
//   plant.turbine.gas_iso.Xi[4] = plant.turbine.gas_in.Xi[4];
//   plant.turbine.gas_iso.Xi[5] = plant.turbine.gas_in.Xi[5];
//   plant.turbine.hout_iso = ThermoPower.Gas.Turbine$plant$turbine.Medium.isentropicEnthalpy(plant.turbine.outlet.p, plant.turbine.gas_in.state, false);
//   plant.turbine.hout - plant.turbine.gas_in.h = plant.turbine.eta * (plant.turbine.hout_iso - plant.turbine.gas_in.h);
//   plant.turbine.s_in = 0.0;
//   plant.turbine.gas_iso.p = 100000.0;
//   plant.turbine.gas_iso.T = 300.0;
//   plant.turbine.w * (plant.turbine.hout - plant.turbine.gas_in.h) * plant.turbine.eta_mech = plant.turbine.tau * plant.turbine.omega;
//   plant.turbine.PR = plant.turbine.gas_in.p / plant.turbine.pout;
//   plant.turbine.shaft_a.phi = plant.turbine.phi;
//   plant.turbine.shaft_b.phi = plant.turbine.phi;
//   plant.turbine.shaft_a.tau + plant.turbine.shaft_b.tau = plant.turbine.tau;
//   der(plant.turbine.phi) = plant.turbine.omega;
//   assert(plant.CombustionChamber1.fluegas.T >= 200.0 and plant.CombustionChamber1.fluegas.T <= 6000.0, \"
//               Temperature T (=\" + String(plant.CombustionChamber1.fluegas.T, 6, 0, true) + \" K = 200 K) is not in the allowed range
//               200 K <= T <= 6000 K
//               required from medium model \\\"\" + \"FlueGas\" + \"\\\".\");
//   plant.CombustionChamber1.fluegas.MM = ThermoPower.Gas.CombustionChamber$plant$CombustionChamber1.Exhaust.molarMass(plant.CombustionChamber1.fluegas.state);
//   plant.CombustionChamber1.fluegas.h = ThermoPower.Gas.CombustionChamber$plant$CombustionChamber1.Exhaust.h_TX(plant.CombustionChamber1.fluegas.T, {plant.CombustionChamber1.fluegas.X[1], plant.CombustionChamber1.fluegas.X[2], plant.CombustionChamber1.fluegas.X[3], plant.CombustionChamber1.fluegas.X[4], plant.CombustionChamber1.fluegas.X[5]}, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0);
//   plant.CombustionChamber1.fluegas.R = 259.8369938872708 * plant.CombustionChamber1.fluegas.X[1] + 208.1323720837088 * plant.CombustionChamber1.fluegas.X[2] + 461.5233290850878 * plant.CombustionChamber1.fluegas.X[3] + 188.9244822140674 * plant.CombustionChamber1.fluegas.X[4] + 296.8033869505308 * plant.CombustionChamber1.fluegas.X[5];
//   plant.CombustionChamber1.fluegas.u = plant.CombustionChamber1.fluegas.h - plant.CombustionChamber1.fluegas.R * plant.CombustionChamber1.fluegas.T;
//   plant.CombustionChamber1.fluegas.d = plant.CombustionChamber1.fluegas.p / (plant.CombustionChamber1.fluegas.R * plant.CombustionChamber1.fluegas.T);
//   plant.CombustionChamber1.fluegas.state.T = plant.CombustionChamber1.fluegas.T;
//   plant.CombustionChamber1.fluegas.state.p = plant.CombustionChamber1.fluegas.p;
//   plant.CombustionChamber1.fluegas.state.X[1] = plant.CombustionChamber1.fluegas.X[1];
//   plant.CombustionChamber1.fluegas.state.X[2] = plant.CombustionChamber1.fluegas.X[2];
//   plant.CombustionChamber1.fluegas.state.X[3] = plant.CombustionChamber1.fluegas.X[3];
//   plant.CombustionChamber1.fluegas.state.X[4] = plant.CombustionChamber1.fluegas.X[4];
//   plant.CombustionChamber1.fluegas.state.X[5] = plant.CombustionChamber1.fluegas.X[5];
//   plant.CombustionChamber1.fluegas.Xi[1] = plant.CombustionChamber1.fluegas.X[1];
//   plant.CombustionChamber1.fluegas.Xi[2] = plant.CombustionChamber1.fluegas.X[2];
//   plant.CombustionChamber1.fluegas.Xi[3] = plant.CombustionChamber1.fluegas.X[3];
//   plant.CombustionChamber1.fluegas.Xi[4] = plant.CombustionChamber1.fluegas.X[4];
//   plant.CombustionChamber1.fluegas.Xi[5] = plant.CombustionChamber1.fluegas.X[5];
//   assert(plant.CombustionChamber1.fluegas.X[1] >= -1e-05 and plant.CombustionChamber1.fluegas.X[1] <= 1.00001, \"Mass fraction X[1] = \" + String(plant.CombustionChamber1.fluegas.X[1], 6, 0, true) + \"of substance \" + \"Oxygen\" + \"
//   of medium \" + \"FlueGas\" + \" is not in the range 0..1\");
//   assert(plant.CombustionChamber1.fluegas.X[2] >= -1e-05 and plant.CombustionChamber1.fluegas.X[2] <= 1.00001, \"Mass fraction X[2] = \" + String(plant.CombustionChamber1.fluegas.X[2], 6, 0, true) + \"of substance \" + \"Argon\" + \"
//   of medium \" + \"FlueGas\" + \" is not in the range 0..1\");
//   assert(plant.CombustionChamber1.fluegas.X[3] >= -1e-05 and plant.CombustionChamber1.fluegas.X[3] <= 1.00001, \"Mass fraction X[3] = \" + String(plant.CombustionChamber1.fluegas.X[3], 6, 0, true) + \"of substance \" + \"Water\" + \"
//   of medium \" + \"FlueGas\" + \" is not in the range 0..1\");
//   assert(plant.CombustionChamber1.fluegas.X[4] >= -1e-05 and plant.CombustionChamber1.fluegas.X[4] <= 1.00001, \"Mass fraction X[4] = \" + String(plant.CombustionChamber1.fluegas.X[4], 6, 0, true) + \"of substance \" + \"Carbondioxide\" + \"
//   of medium \" + \"FlueGas\" + \" is not in the range 0..1\");
//   assert(plant.CombustionChamber1.fluegas.X[5] >= -1e-05 and plant.CombustionChamber1.fluegas.X[5] <= 1.00001, \"Mass fraction X[5] = \" + String(plant.CombustionChamber1.fluegas.X[5], 6, 0, true) + \"of substance \" + \"Nitrogen\" + \"
//   of medium \" + \"FlueGas\" + \" is not in the range 0..1\");
//   assert(plant.CombustionChamber1.fluegas.p >= 0.0, \"Pressure (= \" + String(plant.CombustionChamber1.fluegas.p, 6, 0, true) + \" Pa) of medium \\\"\" + \"FlueGas\" + \"\\\" is negative
//   (Temperature = \" + String(plant.CombustionChamber1.fluegas.T, 6, 0, true) + \" K)\");
//   plant.CombustionChamber1.ina_X = {plant.stateInletCC.outlet.Xi_outflow[1], plant.stateInletCC.outlet.Xi_outflow[2], plant.stateInletCC.outlet.Xi_outflow[3], plant.stateInletCC.outlet.Xi_outflow[4]};
//   plant.CombustionChamber1.inf_X = {plant.SourceW1.flange.Xi_outflow[1], plant.SourceW1.flange.Xi_outflow[2], plant.SourceW1.flange.Xi_outflow[3]};
//   plant.CombustionChamber1.wcomb = 62.33457960936165 * plant.CombustionChamber1.inf.m_flow * plant.CombustionChamber1.inf_X[3];
//   plant.CombustionChamber1.lambda = 15.62558595947348 * plant.CombustionChamber1.ina.m_flow * plant.CombustionChamber1.ina_X[1] / plant.CombustionChamber1.wcomb;
//   assert(plant.CombustionChamber1.lambda >= 1.0, \"Not enough oxygen flow\");
//   der(plant.CombustionChamber1.MX[1]) = plant.CombustionChamber1.ina.m_flow * plant.CombustionChamber1.ina_X[1] + plant.CombustionChamber1.out.m_flow * plant.CombustionChamber1.fluegas.X[1] + (-0.0639976) * plant.CombustionChamber1.wcomb;
//   der(plant.CombustionChamber1.MX[2]) = plant.CombustionChamber1.ina.m_flow * plant.CombustionChamber1.ina_X[3] + plant.CombustionChamber1.out.m_flow * plant.CombustionChamber1.fluegas.X[2];
//   der(plant.CombustionChamber1.MX[3]) = plant.CombustionChamber1.ina.m_flow * plant.CombustionChamber1.ina_X[2] + plant.CombustionChamber1.out.m_flow * plant.CombustionChamber1.fluegas.X[3] + 0.03603056 * plant.CombustionChamber1.wcomb;
//   der(plant.CombustionChamber1.MX[4]) = plant.CombustionChamber1.inf.m_flow * plant.CombustionChamber1.inf_X[2] + plant.CombustionChamber1.out.m_flow * plant.CombustionChamber1.fluegas.X[4] + 0.0440095 * plant.CombustionChamber1.wcomb;
//   der(plant.CombustionChamber1.MX[5]) = plant.CombustionChamber1.ina.m_flow * plant.CombustionChamber1.ina_X[4] + plant.CombustionChamber1.out.m_flow * plant.CombustionChamber1.fluegas.X[5] + plant.CombustionChamber1.inf.m_flow * plant.CombustionChamber1.inf_X[1];
//   plant.CombustionChamber1.M = plant.CombustionChamber1.fluegas.d * plant.CombustionChamber1.V;
//   plant.CombustionChamber1.E = plant.CombustionChamber1.fluegas.u * plant.CombustionChamber1.M;
//   plant.CombustionChamber1.MX[1] = plant.CombustionChamber1.fluegas.Xi[1] * plant.CombustionChamber1.M;
//   plant.CombustionChamber1.MX[2] = plant.CombustionChamber1.fluegas.Xi[2] * plant.CombustionChamber1.M;
//   plant.CombustionChamber1.MX[3] = plant.CombustionChamber1.fluegas.Xi[3] * plant.CombustionChamber1.M;
//   plant.CombustionChamber1.MX[4] = plant.CombustionChamber1.fluegas.Xi[4] * plant.CombustionChamber1.M;
//   plant.CombustionChamber1.MX[5] = plant.CombustionChamber1.fluegas.Xi[5] * plant.CombustionChamber1.M;
//   plant.CombustionChamber1.HR = plant.CombustionChamber1.inf.m_flow * plant.CombustionChamber1.HH;
//   der(plant.CombustionChamber1.M) = plant.CombustionChamber1.ina.m_flow + plant.CombustionChamber1.inf.m_flow + plant.CombustionChamber1.out.m_flow;
//   der(plant.CombustionChamber1.E) = plant.CombustionChamber1.ina.m_flow * plant.CombustionChamber1.hia + plant.CombustionChamber1.inf.m_flow * plant.CombustionChamber1.hif + plant.CombustionChamber1.out.m_flow * plant.CombustionChamber1.ho + plant.CombustionChamber1.HR - plant.CombustionChamber1.gamma * plant.CombustionChamber1.S * (plant.CombustionChamber1.fluegas.T - plant.CombustionChamber1.Tm);
//   plant.CombustionChamber1.Cm * der(plant.CombustionChamber1.Tm) = plant.CombustionChamber1.gamma * plant.CombustionChamber1.S * (plant.CombustionChamber1.fluegas.T - plant.CombustionChamber1.Tm);
//   plant.CombustionChamber1.out.p = plant.CombustionChamber1.fluegas.p;
//   plant.CombustionChamber1.out.h_outflow = plant.CombustionChamber1.fluegas.h;
//   plant.CombustionChamber1.out.Xi_outflow[1] = plant.CombustionChamber1.fluegas.Xi[1];
//   plant.CombustionChamber1.out.Xi_outflow[2] = plant.CombustionChamber1.fluegas.Xi[2];
//   plant.CombustionChamber1.out.Xi_outflow[3] = plant.CombustionChamber1.fluegas.Xi[3];
//   plant.CombustionChamber1.out.Xi_outflow[4] = plant.CombustionChamber1.fluegas.Xi[4];
//   plant.CombustionChamber1.out.Xi_outflow[5] = plant.CombustionChamber1.fluegas.Xi[5];
//   plant.CombustionChamber1.ina.p = plant.CombustionChamber1.fluegas.p;
//   plant.CombustionChamber1.ina.h_outflow = 0.0;
//   plant.CombustionChamber1.ina.Xi_outflow[1] = 0.23;
//   plant.CombustionChamber1.ina.Xi_outflow[2] = 0.015;
//   plant.CombustionChamber1.ina.Xi_outflow[3] = 0.005;
//   plant.CombustionChamber1.ina.Xi_outflow[4] = 0.75;
//   plant.CombustionChamber1.inf.p = plant.CombustionChamber1.fluegas.p;
//   plant.CombustionChamber1.inf.h_outflow = 0.0;
//   plant.CombustionChamber1.inf.Xi_outflow[1] = 0.02;
//   plant.CombustionChamber1.inf.Xi_outflow[2] = 0.012;
//   plant.CombustionChamber1.inf.Xi_outflow[3] = 0.968;
//   assert(plant.CombustionChamber1.ina.m_flow >= 0.0, \"The model does not support flow reversal\");
//   plant.CombustionChamber1.hia = plant.stateInletCC.outlet.h_outflow;
//   assert(plant.CombustionChamber1.inf.m_flow >= 0.0, \"The model does not support flow reversal\");
//   plant.CombustionChamber1.hif = plant.SourceW1.flange.h_outflow;
//   assert(plant.CombustionChamber1.out.m_flow <= 0.0, \"The model does not support flow reversal\");
//   plant.CombustionChamber1.ho = plant.CombustionChamber1.fluegas.h;
//   plant.CombustionChamber1.Tr = plant.CombustionChamber1.M / max(abs(plant.CombustionChamber1.out.m_flow), 1e-15);
//   assert(plant.SourceP1.gas.T >= 200.0 and plant.SourceP1.gas.T <= 6000.0, \"
//               Temperature T (=\" + String(plant.SourceP1.gas.T, 6, 0, true) + \" K = 200 K) is not in the allowed range
//               200 K <= T <= 6000 K
//               required from medium model \\\"\" + \"Air\" + \"\\\".\");
//   plant.SourceP1.gas.MM = ThermoPower.Gas.SourcePressure$plant$SourceP1.Medium.molarMass(plant.SourceP1.gas.state);
//   plant.SourceP1.gas.h = ThermoPower.Gas.SourcePressure$plant$SourceP1.Medium.h_TX(plant.SourceP1.gas.T, {plant.SourceP1.gas.X[1], plant.SourceP1.gas.X[2], plant.SourceP1.gas.X[3], plant.SourceP1.gas.X[4]}, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0);
//   plant.SourceP1.gas.R = 259.8369938872708 * plant.SourceP1.gas.X[1] + 461.5233290850878 * plant.SourceP1.gas.X[2] + 208.1323720837088 * plant.SourceP1.gas.X[3] + 296.8033869505308 * plant.SourceP1.gas.X[4];
//   plant.SourceP1.gas.u = plant.SourceP1.gas.h - plant.SourceP1.gas.R * plant.SourceP1.gas.T;
//   plant.SourceP1.gas.d = plant.SourceP1.gas.p / (plant.SourceP1.gas.R * plant.SourceP1.gas.T);
//   plant.SourceP1.gas.state.T = plant.SourceP1.gas.T;
//   plant.SourceP1.gas.state.p = plant.SourceP1.gas.p;
//   plant.SourceP1.gas.state.X[1] = plant.SourceP1.gas.X[1];
//   plant.SourceP1.gas.state.X[2] = plant.SourceP1.gas.X[2];
//   plant.SourceP1.gas.state.X[3] = plant.SourceP1.gas.X[3];
//   plant.SourceP1.gas.state.X[4] = plant.SourceP1.gas.X[4];
//   plant.SourceP1.gas.Xi[1] = plant.SourceP1.gas.X[1];
//   plant.SourceP1.gas.Xi[2] = plant.SourceP1.gas.X[2];
//   plant.SourceP1.gas.Xi[3] = plant.SourceP1.gas.X[3];
//   plant.SourceP1.gas.Xi[4] = plant.SourceP1.gas.X[4];
//   assert(plant.SourceP1.gas.X[1] >= -1e-05 and plant.SourceP1.gas.X[1] <= 1.00001, \"Mass fraction X[1] = \" + String(plant.SourceP1.gas.X[1], 6, 0, true) + \"of substance \" + \"Oxygen\" + \"
//   of medium \" + \"Air\" + \" is not in the range 0..1\");
//   assert(plant.SourceP1.gas.X[2] >= -1e-05 and plant.SourceP1.gas.X[2] <= 1.00001, \"Mass fraction X[2] = \" + String(plant.SourceP1.gas.X[2], 6, 0, true) + \"of substance \" + \"Water\" + \"
//   of medium \" + \"Air\" + \" is not in the range 0..1\");
//   assert(plant.SourceP1.gas.X[3] >= -1e-05 and plant.SourceP1.gas.X[3] <= 1.00001, \"Mass fraction X[3] = \" + String(plant.SourceP1.gas.X[3], 6, 0, true) + \"of substance \" + \"Argon\" + \"
//   of medium \" + \"Air\" + \" is not in the range 0..1\");
//   assert(plant.SourceP1.gas.X[4] >= -1e-05 and plant.SourceP1.gas.X[4] <= 1.00001, \"Mass fraction X[4] = \" + String(plant.SourceP1.gas.X[4], 6, 0, true) + \"of substance \" + \"Nitrogen\" + \"
//   of medium \" + \"Air\" + \" is not in the range 0..1\");
//   assert(plant.SourceP1.gas.p >= 0.0, \"Pressure (= \" + String(plant.SourceP1.gas.p, 6, 0, true) + \" Pa) of medium \\\"\" + \"Air\" + \"\\\" is negative
//   (Temperature = \" + String(plant.SourceP1.gas.T, 6, 0, true) + \" K)\");
//   plant.SourceP1.flange.p = plant.SourceP1.gas.p;
//   plant.SourceP1.gas.p = plant.SourceP1.in_p0_internal;
//   plant.SourceP1.in_p0_internal = plant.SourceP1.p0;
//   plant.SourceP1.gas.T = plant.SourceP1.in_T_internal;
//   plant.SourceP1.in_T_internal = plant.SourceP1.T;
//   plant.SourceP1.gas.Xi[1] = plant.SourceP1.in_X_internal[1];
//   plant.SourceP1.gas.Xi[2] = plant.SourceP1.in_X_internal[2];
//   plant.SourceP1.gas.Xi[3] = plant.SourceP1.in_X_internal[3];
//   plant.SourceP1.gas.Xi[4] = plant.SourceP1.in_X_internal[4];
//   plant.SourceP1.in_X_internal[1] = plant.SourceP1.Xnom[1];
//   plant.SourceP1.in_X_internal[2] = plant.SourceP1.Xnom[2];
//   plant.SourceP1.in_X_internal[3] = plant.SourceP1.Xnom[3];
//   plant.SourceP1.in_X_internal[4] = plant.SourceP1.Xnom[4];
//   plant.SourceP1.flange.h_outflow = plant.SourceP1.gas.h;
//   plant.SourceP1.flange.Xi_outflow[1] = plant.SourceP1.gas.Xi[1];
//   plant.SourceP1.flange.Xi_outflow[2] = plant.SourceP1.gas.Xi[2];
//   plant.SourceP1.flange.Xi_outflow[3] = plant.SourceP1.gas.Xi[3];
//   plant.SourceP1.flange.Xi_outflow[4] = plant.SourceP1.gas.Xi[4];
//   assert(plant.SinkP1.gas.T >= 200.0 and plant.SinkP1.gas.T <= 6000.0, \"
//               Temperature T (=\" + String(plant.SinkP1.gas.T, 6, 0, true) + \" K = 200 K) is not in the allowed range
//               200 K <= T <= 6000 K
//               required from medium model \\\"\" + \"FlueGas\" + \"\\\".\");
//   plant.SinkP1.gas.MM = ThermoPower.Gas.SinkPressure$plant$SinkP1.Medium.molarMass(plant.SinkP1.gas.state);
//   plant.SinkP1.gas.h = ThermoPower.Gas.SinkPressure$plant$SinkP1.Medium.h_TX(plant.SinkP1.gas.T, {plant.SinkP1.gas.X[1], plant.SinkP1.gas.X[2], plant.SinkP1.gas.X[3], plant.SinkP1.gas.X[4], plant.SinkP1.gas.X[5]}, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0);
//   plant.SinkP1.gas.R = 259.8369938872708 * plant.SinkP1.gas.X[1] + 208.1323720837088 * plant.SinkP1.gas.X[2] + 461.5233290850878 * plant.SinkP1.gas.X[3] + 188.9244822140674 * plant.SinkP1.gas.X[4] + 296.8033869505308 * plant.SinkP1.gas.X[5];
//   plant.SinkP1.gas.u = plant.SinkP1.gas.h - plant.SinkP1.gas.R * plant.SinkP1.gas.T;
//   plant.SinkP1.gas.d = plant.SinkP1.gas.p / (plant.SinkP1.gas.R * plant.SinkP1.gas.T);
//   plant.SinkP1.gas.state.T = plant.SinkP1.gas.T;
//   plant.SinkP1.gas.state.p = plant.SinkP1.gas.p;
//   plant.SinkP1.gas.state.X[1] = plant.SinkP1.gas.X[1];
//   plant.SinkP1.gas.state.X[2] = plant.SinkP1.gas.X[2];
//   plant.SinkP1.gas.state.X[3] = plant.SinkP1.gas.X[3];
//   plant.SinkP1.gas.state.X[4] = plant.SinkP1.gas.X[4];
//   plant.SinkP1.gas.state.X[5] = plant.SinkP1.gas.X[5];
//   plant.SinkP1.gas.Xi[1] = plant.SinkP1.gas.X[1];
//   plant.SinkP1.gas.Xi[2] = plant.SinkP1.gas.X[2];
//   plant.SinkP1.gas.Xi[3] = plant.SinkP1.gas.X[3];
//   plant.SinkP1.gas.Xi[4] = plant.SinkP1.gas.X[4];
//   plant.SinkP1.gas.Xi[5] = plant.SinkP1.gas.X[5];
//   assert(plant.SinkP1.gas.X[1] >= -1e-05 and plant.SinkP1.gas.X[1] <= 1.00001, \"Mass fraction X[1] = \" + String(plant.SinkP1.gas.X[1], 6, 0, true) + \"of substance \" + \"Oxygen\" + \"
//   of medium \" + \"FlueGas\" + \" is not in the range 0..1\");
//   assert(plant.SinkP1.gas.X[2] >= -1e-05 and plant.SinkP1.gas.X[2] <= 1.00001, \"Mass fraction X[2] = \" + String(plant.SinkP1.gas.X[2], 6, 0, true) + \"of substance \" + \"Argon\" + \"
//   of medium \" + \"FlueGas\" + \" is not in the range 0..1\");
//   assert(plant.SinkP1.gas.X[3] >= -1e-05 and plant.SinkP1.gas.X[3] <= 1.00001, \"Mass fraction X[3] = \" + String(plant.SinkP1.gas.X[3], 6, 0, true) + \"of substance \" + \"Water\" + \"
//   of medium \" + \"FlueGas\" + \" is not in the range 0..1\");
//   assert(plant.SinkP1.gas.X[4] >= -1e-05 and plant.SinkP1.gas.X[4] <= 1.00001, \"Mass fraction X[4] = \" + String(plant.SinkP1.gas.X[4], 6, 0, true) + \"of substance \" + \"Carbondioxide\" + \"
//   of medium \" + \"FlueGas\" + \" is not in the range 0..1\");
//   assert(plant.SinkP1.gas.X[5] >= -1e-05 and plant.SinkP1.gas.X[5] <= 1.00001, \"Mass fraction X[5] = \" + String(plant.SinkP1.gas.X[5], 6, 0, true) + \"of substance \" + \"Nitrogen\" + \"
//   of medium \" + \"FlueGas\" + \" is not in the range 0..1\");
//   assert(plant.SinkP1.gas.p >= 0.0, \"Pressure (= \" + String(plant.SinkP1.gas.p, 6, 0, true) + \" Pa) of medium \\\"\" + \"FlueGas\" + \"\\\" is negative
//   (Temperature = \" + String(plant.SinkP1.gas.T, 6, 0, true) + \" K)\");
//   plant.SinkP1.flange.p = plant.SinkP1.gas.p;
//   plant.SinkP1.gas.p = plant.SinkP1.in_p0_internal;
//   plant.SinkP1.in_p0_internal = plant.SinkP1.p0;
//   plant.SinkP1.gas.T = plant.SinkP1.in_T_internal;
//   plant.SinkP1.in_T_internal = plant.SinkP1.T;
//   plant.SinkP1.gas.Xi[1] = plant.SinkP1.in_X_internal[1];
//   plant.SinkP1.gas.Xi[2] = plant.SinkP1.in_X_internal[2];
//   plant.SinkP1.gas.Xi[3] = plant.SinkP1.in_X_internal[3];
//   plant.SinkP1.gas.Xi[4] = plant.SinkP1.in_X_internal[4];
//   plant.SinkP1.gas.Xi[5] = plant.SinkP1.in_X_internal[5];
//   plant.SinkP1.in_X_internal[1] = plant.SinkP1.Xnom[1];
//   plant.SinkP1.in_X_internal[2] = plant.SinkP1.Xnom[2];
//   plant.SinkP1.in_X_internal[3] = plant.SinkP1.Xnom[3];
//   plant.SinkP1.in_X_internal[4] = plant.SinkP1.Xnom[4];
//   plant.SinkP1.in_X_internal[5] = plant.SinkP1.Xnom[5];
//   plant.SinkP1.flange.h_outflow = plant.SinkP1.gas.h;
//   plant.SinkP1.flange.Xi_outflow[1] = plant.SinkP1.gas.Xi[1];
//   plant.SinkP1.flange.Xi_outflow[2] = plant.SinkP1.gas.Xi[2];
//   plant.SinkP1.flange.Xi_outflow[3] = plant.SinkP1.gas.Xi[3];
//   plant.SinkP1.flange.Xi_outflow[4] = plant.SinkP1.gas.Xi[4];
//   plant.SinkP1.flange.Xi_outflow[5] = plant.SinkP1.gas.Xi[5];
//   assert(plant.SourceW1.gas.T >= 200.0 and plant.SourceW1.gas.T <= 6000.0, \"
//               Temperature T (=\" + String(plant.SourceW1.gas.T, 6, 0, true) + \" K = 200 K) is not in the allowed range
//               200 K <= T <= 6000 K
//               required from medium model \\\"\" + \"NaturalGas\" + \"\\\".\");
//   plant.SourceW1.gas.MM = ThermoPower.Gas.SourceMassFlow$plant$SourceW1.Medium.molarMass(plant.SourceW1.gas.state);
//   plant.SourceW1.gas.h = ThermoPower.Gas.SourceMassFlow$plant$SourceW1.Medium.h_TX(plant.SourceW1.gas.T, {plant.SourceW1.gas.X[1], plant.SourceW1.gas.X[2], plant.SourceW1.gas.X[3]}, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0);
//   plant.SourceW1.gas.R = 296.8033869505308 * plant.SourceW1.gas.X[1] + 188.9244822140674 * plant.SourceW1.gas.X[2] + 518.2791167938085 * plant.SourceW1.gas.X[3];
//   plant.SourceW1.gas.u = plant.SourceW1.gas.h - plant.SourceW1.gas.R * plant.SourceW1.gas.T;
//   plant.SourceW1.gas.d = plant.SourceW1.gas.p / (plant.SourceW1.gas.R * plant.SourceW1.gas.T);
//   plant.SourceW1.gas.state.T = plant.SourceW1.gas.T;
//   plant.SourceW1.gas.state.p = plant.SourceW1.gas.p;
//   plant.SourceW1.gas.state.X[1] = plant.SourceW1.gas.X[1];
//   plant.SourceW1.gas.state.X[2] = plant.SourceW1.gas.X[2];
//   plant.SourceW1.gas.state.X[3] = plant.SourceW1.gas.X[3];
//   plant.SourceW1.gas.Xi[1] = plant.SourceW1.gas.X[1];
//   plant.SourceW1.gas.Xi[2] = plant.SourceW1.gas.X[2];
//   plant.SourceW1.gas.Xi[3] = plant.SourceW1.gas.X[3];
//   assert(plant.SourceW1.gas.X[1] >= -1e-05 and plant.SourceW1.gas.X[1] <= 1.00001, \"Mass fraction X[1] = \" + String(plant.SourceW1.gas.X[1], 6, 0, true) + \"of substance \" + \"Nitrogen\" + \"
//   of medium \" + \"NaturalGas\" + \" is not in the range 0..1\");
//   assert(plant.SourceW1.gas.X[2] >= -1e-05 and plant.SourceW1.gas.X[2] <= 1.00001, \"Mass fraction X[2] = \" + String(plant.SourceW1.gas.X[2], 6, 0, true) + \"of substance \" + \"Carbondioxide\" + \"
//   of medium \" + \"NaturalGas\" + \" is not in the range 0..1\");
//   assert(plant.SourceW1.gas.X[3] >= -1e-05 and plant.SourceW1.gas.X[3] <= 1.00001, \"Mass fraction X[3] = \" + String(plant.SourceW1.gas.X[3], 6, 0, true) + \"of substance \" + \"Methane\" + \"
//   of medium \" + \"NaturalGas\" + \" is not in the range 0..1\");
//   assert(plant.SourceW1.gas.p >= 0.0, \"Pressure (= \" + String(plant.SourceW1.gas.p, 6, 0, true) + \" Pa) of medium \\\"\" + \"NaturalGas\" + \"\\\" is negative
//   (Temperature = \" + String(plant.SourceW1.gas.T, 6, 0, true) + \" K)\");
//   plant.SourceW1.flange.m_flow = -plant.SourceW1.w;
//   plant.SourceW1.w = plant.SourceW1.in_w0_internal;
//   plant.SourceW1.gas.T = plant.SourceW1.in_T_internal;
//   plant.SourceW1.in_T_internal = plant.SourceW1.T;
//   plant.SourceW1.gas.Xi[1] = plant.SourceW1.in_X_internal[1];
//   plant.SourceW1.gas.Xi[2] = plant.SourceW1.in_X_internal[2];
//   plant.SourceW1.gas.Xi[3] = plant.SourceW1.in_X_internal[3];
//   plant.SourceW1.in_X_internal[1] = plant.SourceW1.Xnom[1];
//   plant.SourceW1.in_X_internal[2] = plant.SourceW1.Xnom[2];
//   plant.SourceW1.in_X_internal[3] = plant.SourceW1.Xnom[3];
//   plant.SourceW1.flange.p = plant.SourceW1.gas.p;
//   plant.SourceW1.flange.h_outflow = plant.SourceW1.gas.h;
//   plant.SourceW1.flange.Xi_outflow[1] = plant.SourceW1.gas.Xi[1];
//   plant.SourceW1.flange.Xi_outflow[2] = plant.SourceW1.gas.Xi[2];
//   plant.SourceW1.flange.Xi_outflow[3] = plant.SourceW1.gas.Xi[3];
//   assert(plant.PressDrop1.gas.T >= 200.0 and plant.PressDrop1.gas.T <= 6000.0, \"
//               Temperature T (=\" + String(plant.PressDrop1.gas.T, 6, 0, true) + \" K = 200 K) is not in the allowed range
//               200 K <= T <= 6000 K
//               required from medium model \\\"\" + \"FlueGas\" + \"\\\".\");
//   plant.PressDrop1.gas.MM = ThermoPower.Gas.PressDrop$plant$PressDrop1.Medium.molarMass(plant.PressDrop1.gas.state);
//   plant.PressDrop1.gas.h = ThermoPower.Gas.PressDrop$plant$PressDrop1.Medium.h_TX(plant.PressDrop1.gas.T, {plant.PressDrop1.gas.X[1], plant.PressDrop1.gas.X[2], plant.PressDrop1.gas.X[3], plant.PressDrop1.gas.X[4], plant.PressDrop1.gas.X[5]}, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0);
//   plant.PressDrop1.gas.R = 259.8369938872708 * plant.PressDrop1.gas.X[1] + 208.1323720837088 * plant.PressDrop1.gas.X[2] + 461.5233290850878 * plant.PressDrop1.gas.X[3] + 188.9244822140674 * plant.PressDrop1.gas.X[4] + 296.8033869505308 * plant.PressDrop1.gas.X[5];
//   plant.PressDrop1.gas.u = plant.PressDrop1.gas.h - plant.PressDrop1.gas.R * plant.PressDrop1.gas.T;
//   plant.PressDrop1.gas.d = plant.PressDrop1.gas.p / (plant.PressDrop1.gas.R * plant.PressDrop1.gas.T);
//   plant.PressDrop1.gas.state.T = plant.PressDrop1.gas.T;
//   plant.PressDrop1.gas.state.p = plant.PressDrop1.gas.p;
//   plant.PressDrop1.gas.state.X[1] = plant.PressDrop1.gas.X[1];
//   plant.PressDrop1.gas.state.X[2] = plant.PressDrop1.gas.X[2];
//   plant.PressDrop1.gas.state.X[3] = plant.PressDrop1.gas.X[3];
//   plant.PressDrop1.gas.state.X[4] = plant.PressDrop1.gas.X[4];
//   plant.PressDrop1.gas.state.X[5] = plant.PressDrop1.gas.X[5];
//   plant.PressDrop1.gas.Xi[1] = plant.PressDrop1.gas.X[1];
//   plant.PressDrop1.gas.Xi[2] = plant.PressDrop1.gas.X[2];
//   plant.PressDrop1.gas.Xi[3] = plant.PressDrop1.gas.X[3];
//   plant.PressDrop1.gas.Xi[4] = plant.PressDrop1.gas.X[4];
//   plant.PressDrop1.gas.Xi[5] = plant.PressDrop1.gas.X[5];
//   assert(plant.PressDrop1.gas.X[1] >= -1e-05 and plant.PressDrop1.gas.X[1] <= 1.00001, \"Mass fraction X[1] = \" + String(plant.PressDrop1.gas.X[1], 6, 0, true) + \"of substance \" + \"Oxygen\" + \"
//   of medium \" + \"FlueGas\" + \" is not in the range 0..1\");
//   assert(plant.PressDrop1.gas.X[2] >= -1e-05 and plant.PressDrop1.gas.X[2] <= 1.00001, \"Mass fraction X[2] = \" + String(plant.PressDrop1.gas.X[2], 6, 0, true) + \"of substance \" + \"Argon\" + \"
//   of medium \" + \"FlueGas\" + \" is not in the range 0..1\");
//   assert(plant.PressDrop1.gas.X[3] >= -1e-05 and plant.PressDrop1.gas.X[3] <= 1.00001, \"Mass fraction X[3] = \" + String(plant.PressDrop1.gas.X[3], 6, 0, true) + \"of substance \" + \"Water\" + \"
//   of medium \" + \"FlueGas\" + \" is not in the range 0..1\");
//   assert(plant.PressDrop1.gas.X[4] >= -1e-05 and plant.PressDrop1.gas.X[4] <= 1.00001, \"Mass fraction X[4] = \" + String(plant.PressDrop1.gas.X[4], 6, 0, true) + \"of substance \" + \"Carbondioxide\" + \"
//   of medium \" + \"FlueGas\" + \" is not in the range 0..1\");
//   assert(plant.PressDrop1.gas.X[5] >= -1e-05 and plant.PressDrop1.gas.X[5] <= 1.00001, \"Mass fraction X[5] = \" + String(plant.PressDrop1.gas.X[5], 6, 0, true) + \"of substance \" + \"Nitrogen\" + \"
//   of medium \" + \"FlueGas\" + \" is not in the range 0..1\");
//   assert(plant.PressDrop1.gas.p >= 0.0, \"Pressure (= \" + String(plant.PressDrop1.gas.p, 6, 0, true) + \" Pa) of medium \\\"\" + \"FlueGas\" + \"\\\" is negative
//   (Temperature = \" + String(plant.PressDrop1.gas.T, 6, 0, true) + \" K)\");
//   assert(plant.PressDrop1.dpnom > 0.0, \"dpnom=0 not supported, it is also used in the homotopy trasformation during the inizialization\");
//   plant.PressDrop1.gas.p = homotopy(if not plant.PressDrop1.allowFlowReversal then plant.PressDrop1.pin else if plant.PressDrop1.inlet.m_flow >= 0.0 then plant.PressDrop1.pin else plant.PressDrop1.pout, plant.PressDrop1.pin);
//   plant.PressDrop1.gas.h = homotopy(if not plant.PressDrop1.allowFlowReversal then plant.stateOutletCC.outlet.h_outflow else smooth(0, plant.stateOutletCC.outlet.h_outflow), plant.stateOutletCC.outlet.h_outflow);
//   plant.PressDrop1.gas.Xi[1] = homotopy(if not plant.PressDrop1.allowFlowReversal then plant.stateOutletCC.outlet.Xi_outflow[1] else smooth(0, plant.stateOutletCC.outlet.Xi_outflow[1]), plant.stateOutletCC.outlet.Xi_outflow[1]);
//   plant.PressDrop1.gas.Xi[2] = homotopy(if not plant.PressDrop1.allowFlowReversal then plant.stateOutletCC.outlet.Xi_outflow[2] else smooth(0, plant.stateOutletCC.outlet.Xi_outflow[2]), plant.stateOutletCC.outlet.Xi_outflow[2]);
//   plant.PressDrop1.gas.Xi[3] = homotopy(if not plant.PressDrop1.allowFlowReversal then plant.stateOutletCC.outlet.Xi_outflow[3] else smooth(0, plant.stateOutletCC.outlet.Xi_outflow[3]), plant.stateOutletCC.outlet.Xi_outflow[3]);
//   plant.PressDrop1.gas.Xi[4] = homotopy(if not plant.PressDrop1.allowFlowReversal then plant.stateOutletCC.outlet.Xi_outflow[4] else smooth(0, plant.stateOutletCC.outlet.Xi_outflow[4]), plant.stateOutletCC.outlet.Xi_outflow[4]);
//   plant.PressDrop1.gas.Xi[5] = homotopy(if not plant.PressDrop1.allowFlowReversal then plant.stateOutletCC.outlet.Xi_outflow[5] else smooth(0, plant.stateOutletCC.outlet.Xi_outflow[5]), plant.stateOutletCC.outlet.Xi_outflow[5]);
//   plant.PressDrop1.pin - plant.PressDrop1.pout = homotopy(smooth(1, plant.PressDrop1.Kf * ThermoPower.Gas.PressDrop$plant$PressDrop1.squareReg(plant.PressDrop1.w, plant.PressDrop1.wnom * plant.PressDrop1.wnf)) / plant.PressDrop1.gas.d, plant.PressDrop1.dpnom * plant.PressDrop1.w / plant.PressDrop1.wnom);
//   plant.PressDrop1.w = plant.PressDrop1.inlet.m_flow;
//   plant.PressDrop1.pin = plant.PressDrop1.inlet.p;
//   plant.PressDrop1.pout = plant.PressDrop1.outlet.p;
//   plant.PressDrop1.dp = plant.PressDrop1.pin - plant.PressDrop1.pout;
//   plant.PressDrop1.inlet.m_flow + plant.PressDrop1.outlet.m_flow = 0.0;
//   plant.PressDrop1.inlet.h_outflow = plant.PressDrop1.outlet.h_outflow;
//   plant.stateOutletCC.outlet.h_outflow = plant.PressDrop1.outlet.h_outflow;
//   plant.PressDrop1.inlet.Xi_outflow[1] = plant.PressDrop1.outlet.Xi_outflow[1];
//   plant.PressDrop1.inlet.Xi_outflow[2] = plant.PressDrop1.outlet.Xi_outflow[2];
//   plant.PressDrop1.inlet.Xi_outflow[3] = plant.PressDrop1.outlet.Xi_outflow[3];
//   plant.PressDrop1.inlet.Xi_outflow[4] = plant.PressDrop1.outlet.Xi_outflow[4];
//   plant.PressDrop1.inlet.Xi_outflow[5] = plant.PressDrop1.outlet.Xi_outflow[5];
//   plant.stateOutletCC.outlet.Xi_outflow[1] = plant.PressDrop1.outlet.Xi_outflow[1];
//   plant.stateOutletCC.outlet.Xi_outflow[2] = plant.PressDrop1.outlet.Xi_outflow[2];
//   plant.stateOutletCC.outlet.Xi_outflow[3] = plant.PressDrop1.outlet.Xi_outflow[3];
//   plant.stateOutletCC.outlet.Xi_outflow[4] = plant.PressDrop1.outlet.Xi_outflow[4];
//   plant.stateOutletCC.outlet.Xi_outflow[5] = plant.PressDrop1.outlet.Xi_outflow[5];
//   assert(plant.PressDrop2.gas.T >= 200.0 and plant.PressDrop2.gas.T <= 6000.0, \"
//               Temperature T (=\" + String(plant.PressDrop2.gas.T, 6, 0, true) + \" K = 200 K) is not in the allowed range
//               200 K <= T <= 6000 K
//               required from medium model \\\"\" + \"Air\" + \"\\\".\");
//   plant.PressDrop2.gas.MM = ThermoPower.Gas.PressDrop$plant$PressDrop2.Medium.molarMass(plant.PressDrop2.gas.state);
//   plant.PressDrop2.gas.h = ThermoPower.Gas.PressDrop$plant$PressDrop2.Medium.h_TX(plant.PressDrop2.gas.T, {plant.PressDrop2.gas.X[1], plant.PressDrop2.gas.X[2], plant.PressDrop2.gas.X[3], plant.PressDrop2.gas.X[4]}, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0);
//   plant.PressDrop2.gas.R = 259.8369938872708 * plant.PressDrop2.gas.X[1] + 461.5233290850878 * plant.PressDrop2.gas.X[2] + 208.1323720837088 * plant.PressDrop2.gas.X[3] + 296.8033869505308 * plant.PressDrop2.gas.X[4];
//   plant.PressDrop2.gas.u = plant.PressDrop2.gas.h - plant.PressDrop2.gas.R * plant.PressDrop2.gas.T;
//   plant.PressDrop2.gas.d = plant.PressDrop2.gas.p / (plant.PressDrop2.gas.R * plant.PressDrop2.gas.T);
//   plant.PressDrop2.gas.state.T = plant.PressDrop2.gas.T;
//   plant.PressDrop2.gas.state.p = plant.PressDrop2.gas.p;
//   plant.PressDrop2.gas.state.X[1] = plant.PressDrop2.gas.X[1];
//   plant.PressDrop2.gas.state.X[2] = plant.PressDrop2.gas.X[2];
//   plant.PressDrop2.gas.state.X[3] = plant.PressDrop2.gas.X[3];
//   plant.PressDrop2.gas.state.X[4] = plant.PressDrop2.gas.X[4];
//   plant.PressDrop2.gas.Xi[1] = plant.PressDrop2.gas.X[1];
//   plant.PressDrop2.gas.Xi[2] = plant.PressDrop2.gas.X[2];
//   plant.PressDrop2.gas.Xi[3] = plant.PressDrop2.gas.X[3];
//   plant.PressDrop2.gas.Xi[4] = plant.PressDrop2.gas.X[4];
//   assert(plant.PressDrop2.gas.X[1] >= -1e-05 and plant.PressDrop2.gas.X[1] <= 1.00001, \"Mass fraction X[1] = \" + String(plant.PressDrop2.gas.X[1], 6, 0, true) + \"of substance \" + \"Oxygen\" + \"
//   of medium \" + \"Air\" + \" is not in the range 0..1\");
//   assert(plant.PressDrop2.gas.X[2] >= -1e-05 and plant.PressDrop2.gas.X[2] <= 1.00001, \"Mass fraction X[2] = \" + String(plant.PressDrop2.gas.X[2], 6, 0, true) + \"of substance \" + \"Water\" + \"
//   of medium \" + \"Air\" + \" is not in the range 0..1\");
//   assert(plant.PressDrop2.gas.X[3] >= -1e-05 and plant.PressDrop2.gas.X[3] <= 1.00001, \"Mass fraction X[3] = \" + String(plant.PressDrop2.gas.X[3], 6, 0, true) + \"of substance \" + \"Argon\" + \"
//   of medium \" + \"Air\" + \" is not in the range 0..1\");
//   assert(plant.PressDrop2.gas.X[4] >= -1e-05 and plant.PressDrop2.gas.X[4] <= 1.00001, \"Mass fraction X[4] = \" + String(plant.PressDrop2.gas.X[4], 6, 0, true) + \"of substance \" + \"Nitrogen\" + \"
//   of medium \" + \"Air\" + \" is not in the range 0..1\");
//   assert(plant.PressDrop2.gas.p >= 0.0, \"Pressure (= \" + String(plant.PressDrop2.gas.p, 6, 0, true) + \" Pa) of medium \\\"\" + \"Air\" + \"\\\" is negative
//   (Temperature = \" + String(plant.PressDrop2.gas.T, 6, 0, true) + \" K)\");
//   assert(plant.PressDrop2.dpnom > 0.0, \"dpnom=0 not supported, it is also used in the homotopy trasformation during the inizialization\");
//   plant.PressDrop2.gas.p = homotopy(if not plant.PressDrop2.allowFlowReversal then plant.PressDrop2.pin else if plant.PressDrop2.inlet.m_flow >= 0.0 then plant.PressDrop2.pin else plant.PressDrop2.pout, plant.PressDrop2.pin);
//   plant.PressDrop2.gas.h = homotopy(if not plant.PressDrop2.allowFlowReversal then plant.compressor.outlet.h_outflow else smooth(0, plant.compressor.outlet.h_outflow), plant.compressor.outlet.h_outflow);
//   plant.PressDrop2.gas.Xi[1] = homotopy(if not plant.PressDrop2.allowFlowReversal then plant.compressor.outlet.Xi_outflow[1] else smooth(0, plant.compressor.outlet.Xi_outflow[1]), plant.compressor.outlet.Xi_outflow[1]);
//   plant.PressDrop2.gas.Xi[2] = homotopy(if not plant.PressDrop2.allowFlowReversal then plant.compressor.outlet.Xi_outflow[2] else smooth(0, plant.compressor.outlet.Xi_outflow[2]), plant.compressor.outlet.Xi_outflow[2]);
//   plant.PressDrop2.gas.Xi[3] = homotopy(if not plant.PressDrop2.allowFlowReversal then plant.compressor.outlet.Xi_outflow[3] else smooth(0, plant.compressor.outlet.Xi_outflow[3]), plant.compressor.outlet.Xi_outflow[3]);
//   plant.PressDrop2.gas.Xi[4] = homotopy(if not plant.PressDrop2.allowFlowReversal then plant.compressor.outlet.Xi_outflow[4] else smooth(0, plant.compressor.outlet.Xi_outflow[4]), plant.compressor.outlet.Xi_outflow[4]);
//   plant.PressDrop2.pin - plant.PressDrop2.pout = homotopy(smooth(1, plant.PressDrop2.Kf * ThermoPower.Gas.PressDrop$plant$PressDrop2.squareReg(plant.PressDrop2.w, plant.PressDrop2.wnom * plant.PressDrop2.wnf)) / plant.PressDrop2.gas.d, plant.PressDrop2.dpnom * plant.PressDrop2.w / plant.PressDrop2.wnom);
//   plant.PressDrop2.w = plant.PressDrop2.inlet.m_flow;
//   plant.PressDrop2.pin = plant.PressDrop2.inlet.p;
//   plant.PressDrop2.pout = plant.PressDrop2.outlet.p;
//   plant.PressDrop2.dp = plant.PressDrop2.pin - plant.PressDrop2.pout;
//   plant.PressDrop2.inlet.m_flow + plant.PressDrop2.outlet.m_flow = 0.0;
//   plant.PressDrop2.inlet.h_outflow = plant.PressDrop2.outlet.h_outflow;
//   plant.compressor.outlet.h_outflow = plant.PressDrop2.outlet.h_outflow;
//   plant.PressDrop2.inlet.Xi_outflow[1] = plant.PressDrop2.outlet.Xi_outflow[1];
//   plant.PressDrop2.inlet.Xi_outflow[2] = plant.PressDrop2.outlet.Xi_outflow[2];
//   plant.PressDrop2.inlet.Xi_outflow[3] = plant.PressDrop2.outlet.Xi_outflow[3];
//   plant.PressDrop2.inlet.Xi_outflow[4] = plant.PressDrop2.outlet.Xi_outflow[4];
//   plant.compressor.outlet.Xi_outflow[1] = plant.PressDrop2.outlet.Xi_outflow[1];
//   plant.compressor.outlet.Xi_outflow[2] = plant.PressDrop2.outlet.Xi_outflow[2];
//   plant.compressor.outlet.Xi_outflow[3] = plant.PressDrop2.outlet.Xi_outflow[3];
//   plant.compressor.outlet.Xi_outflow[4] = plant.PressDrop2.outlet.Xi_outflow[4];
//   plant.powerSensor.flange_a.phi = plant.powerSensor.flange_b.phi;
//   plant.powerSensor.power = plant.powerSensor.flange_a.tau * der(plant.powerSensor.flange_a.phi);
//   0.0 = plant.powerSensor.flange_a.tau + plant.powerSensor.flange_b.tau;
//   der(plant.gasFlowActuator.y) = (plant.gasFlowActuator.k * plant.gasFlowActuator.u - plant.gasFlowActuator.y) / plant.gasFlowActuator.T;
//   der(plant.powerSensor1.y) = (plant.powerSensor1.k * plant.powerSensor1.u - plant.powerSensor1.y) / plant.powerSensor1.T;
//   assert(plant.stateInletCC.gas.T >= 200.0 and plant.stateInletCC.gas.T <= 6000.0, \"
//               Temperature T (=\" + String(plant.stateInletCC.gas.T, 6, 0, true) + \" K = 200 K) is not in the allowed range
//               200 K <= T <= 6000 K
//               required from medium model \\\"\" + \"Air\" + \"\\\".\");
//   plant.stateInletCC.gas.MM = ThermoPower.PowerPlants.HRSG.Components.StateReader_gas$plant$stateInletCC.Medium.molarMass(plant.stateInletCC.gas.state);
//   plant.stateInletCC.gas.h = ThermoPower.PowerPlants.HRSG.Components.StateReader_gas$plant$stateInletCC.Medium.h_TX(plant.stateInletCC.gas.T, {plant.stateInletCC.gas.X[1], plant.stateInletCC.gas.X[2], plant.stateInletCC.gas.X[3], plant.stateInletCC.gas.X[4]}, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0);
//   plant.stateInletCC.gas.R = 259.8369938872708 * plant.stateInletCC.gas.X[1] + 461.5233290850878 * plant.stateInletCC.gas.X[2] + 208.1323720837088 * plant.stateInletCC.gas.X[3] + 296.8033869505308 * plant.stateInletCC.gas.X[4];
//   plant.stateInletCC.gas.u = plant.stateInletCC.gas.h - plant.stateInletCC.gas.R * plant.stateInletCC.gas.T;
//   plant.stateInletCC.gas.d = plant.stateInletCC.gas.p / (plant.stateInletCC.gas.R * plant.stateInletCC.gas.T);
//   plant.stateInletCC.gas.state.T = plant.stateInletCC.gas.T;
//   plant.stateInletCC.gas.state.p = plant.stateInletCC.gas.p;
//   plant.stateInletCC.gas.state.X[1] = plant.stateInletCC.gas.X[1];
//   plant.stateInletCC.gas.state.X[2] = plant.stateInletCC.gas.X[2];
//   plant.stateInletCC.gas.state.X[3] = plant.stateInletCC.gas.X[3];
//   plant.stateInletCC.gas.state.X[4] = plant.stateInletCC.gas.X[4];
//   plant.stateInletCC.gas.Xi[1] = plant.stateInletCC.gas.X[1];
//   plant.stateInletCC.gas.Xi[2] = plant.stateInletCC.gas.X[2];
//   plant.stateInletCC.gas.Xi[3] = plant.stateInletCC.gas.X[3];
//   plant.stateInletCC.gas.Xi[4] = plant.stateInletCC.gas.X[4];
//   assert(plant.stateInletCC.gas.X[1] >= -1e-05 and plant.stateInletCC.gas.X[1] <= 1.00001, \"Mass fraction X[1] = \" + String(plant.stateInletCC.gas.X[1], 6, 0, true) + \"of substance \" + \"Oxygen\" + \"
//   of medium \" + \"Air\" + \" is not in the range 0..1\");
//   assert(plant.stateInletCC.gas.X[2] >= -1e-05 and plant.stateInletCC.gas.X[2] <= 1.00001, \"Mass fraction X[2] = \" + String(plant.stateInletCC.gas.X[2], 6, 0, true) + \"of substance \" + \"Water\" + \"
//   of medium \" + \"Air\" + \" is not in the range 0..1\");
//   assert(plant.stateInletCC.gas.X[3] >= -1e-05 and plant.stateInletCC.gas.X[3] <= 1.00001, \"Mass fraction X[3] = \" + String(plant.stateInletCC.gas.X[3], 6, 0, true) + \"of substance \" + \"Argon\" + \"
//   of medium \" + \"Air\" + \" is not in the range 0..1\");
//   assert(plant.stateInletCC.gas.X[4] >= -1e-05 and plant.stateInletCC.gas.X[4] <= 1.00001, \"Mass fraction X[4] = \" + String(plant.stateInletCC.gas.X[4], 6, 0, true) + \"of substance \" + \"Nitrogen\" + \"
//   of medium \" + \"Air\" + \" is not in the range 0..1\");
//   assert(plant.stateInletCC.gas.p >= 0.0, \"Pressure (= \" + String(plant.stateInletCC.gas.p, 6, 0, true) + \" Pa) of medium \\\"\" + \"Air\" + \"\\\" is negative
//   (Temperature = \" + String(plant.stateInletCC.gas.T, 6, 0, true) + \" K)\");
//   plant.stateInletCC.inlet.p = plant.stateInletCC.gas.p;
//   plant.stateInletCC.gas.h = homotopy(if not plant.stateInletCC.allowFlowReversal then plant.PressDrop2.outlet.h_outflow else smooth(0, plant.PressDrop2.outlet.h_outflow), plant.PressDrop2.outlet.h_outflow);
//   plant.stateInletCC.gas.Xi[1] = homotopy(if not plant.stateInletCC.allowFlowReversal then plant.PressDrop2.outlet.Xi_outflow[1] else smooth(0, plant.PressDrop2.outlet.Xi_outflow[1]), plant.PressDrop2.outlet.Xi_outflow[1]);
//   plant.stateInletCC.gas.Xi[2] = homotopy(if not plant.stateInletCC.allowFlowReversal then plant.PressDrop2.outlet.Xi_outflow[2] else smooth(0, plant.PressDrop2.outlet.Xi_outflow[2]), plant.PressDrop2.outlet.Xi_outflow[2]);
//   plant.stateInletCC.gas.Xi[3] = homotopy(if not plant.stateInletCC.allowFlowReversal then plant.PressDrop2.outlet.Xi_outflow[3] else smooth(0, plant.PressDrop2.outlet.Xi_outflow[3]), plant.PressDrop2.outlet.Xi_outflow[3]);
//   plant.stateInletCC.gas.Xi[4] = homotopy(if not plant.stateInletCC.allowFlowReversal then plant.PressDrop2.outlet.Xi_outflow[4] else smooth(0, plant.PressDrop2.outlet.Xi_outflow[4]), plant.PressDrop2.outlet.Xi_outflow[4]);
//   plant.stateInletCC.T = plant.stateInletCC.gas.T;
//   plant.stateInletCC.p = plant.stateInletCC.gas.p;
//   plant.stateInletCC.h = plant.stateInletCC.gas.h;
//   plant.stateInletCC.w = plant.stateInletCC.inlet.m_flow;
//   plant.stateInletCC.inlet.m_flow + plant.stateInletCC.outlet.m_flow = 0.0;
//   plant.stateInletCC.inlet.p = plant.stateInletCC.outlet.p;
//   plant.stateInletCC.inlet.h_outflow = plant.stateInletCC.outlet.h_outflow;
//   plant.PressDrop2.outlet.h_outflow = plant.stateInletCC.outlet.h_outflow;
//   plant.stateInletCC.inlet.Xi_outflow[1] = plant.stateInletCC.outlet.Xi_outflow[1];
//   plant.stateInletCC.inlet.Xi_outflow[2] = plant.stateInletCC.outlet.Xi_outflow[2];
//   plant.stateInletCC.inlet.Xi_outflow[3] = plant.stateInletCC.outlet.Xi_outflow[3];
//   plant.stateInletCC.inlet.Xi_outflow[4] = plant.stateInletCC.outlet.Xi_outflow[4];
//   plant.PressDrop2.outlet.Xi_outflow[1] = plant.stateInletCC.outlet.Xi_outflow[1];
//   plant.PressDrop2.outlet.Xi_outflow[2] = plant.stateInletCC.outlet.Xi_outflow[2];
//   plant.PressDrop2.outlet.Xi_outflow[3] = plant.stateInletCC.outlet.Xi_outflow[3];
//   plant.PressDrop2.outlet.Xi_outflow[4] = plant.stateInletCC.outlet.Xi_outflow[4];
//   assert(plant.stateOutletCC.gas.T >= 200.0 and plant.stateOutletCC.gas.T <= 6000.0, \"
//               Temperature T (=\" + String(plant.stateOutletCC.gas.T, 6, 0, true) + \" K = 200 K) is not in the allowed range
//               200 K <= T <= 6000 K
//               required from medium model \\\"\" + \"FlueGas\" + \"\\\".\");
//   plant.stateOutletCC.gas.MM = ThermoPower.PowerPlants.HRSG.Components.StateReader_gas$plant$stateOutletCC.Medium.molarMass(plant.stateOutletCC.gas.state);
//   plant.stateOutletCC.gas.h = ThermoPower.PowerPlants.HRSG.Components.StateReader_gas$plant$stateOutletCC.Medium.h_TX(plant.stateOutletCC.gas.T, {plant.stateOutletCC.gas.X[1], plant.stateOutletCC.gas.X[2], plant.stateOutletCC.gas.X[3], plant.stateOutletCC.gas.X[4], plant.stateOutletCC.gas.X[5]}, true, Modelica.Media.Interfaces.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0);
//   plant.stateOutletCC.gas.R = 259.8369938872708 * plant.stateOutletCC.gas.X[1] + 208.1323720837088 * plant.stateOutletCC.gas.X[2] + 461.5233290850878 * plant.stateOutletCC.gas.X[3] + 188.9244822140674 * plant.stateOutletCC.gas.X[4] + 296.8033869505308 * plant.stateOutletCC.gas.X[5];
//   plant.stateOutletCC.gas.u = plant.stateOutletCC.gas.h - plant.stateOutletCC.gas.R * plant.stateOutletCC.gas.T;
//   plant.stateOutletCC.gas.d = plant.stateOutletCC.gas.p / (plant.stateOutletCC.gas.R * plant.stateOutletCC.gas.T);
//   plant.stateOutletCC.gas.state.T = plant.stateOutletCC.gas.T;
//   plant.stateOutletCC.gas.state.p = plant.stateOutletCC.gas.p;
//   plant.stateOutletCC.gas.state.X[1] = plant.stateOutletCC.gas.X[1];
//   plant.stateOutletCC.gas.state.X[2] = plant.stateOutletCC.gas.X[2];
//   plant.stateOutletCC.gas.state.X[3] = plant.stateOutletCC.gas.X[3];
//   plant.stateOutletCC.gas.state.X[4] = plant.stateOutletCC.gas.X[4];
//   plant.stateOutletCC.gas.state.X[5] = plant.stateOutletCC.gas.X[5];
//   plant.stateOutletCC.gas.Xi[1] = plant.stateOutletCC.gas.X[1];
//   plant.stateOutletCC.gas.Xi[2] = plant.stateOutletCC.gas.X[2];
//   plant.stateOutletCC.gas.Xi[3] = plant.stateOutletCC.gas.X[3];
//   plant.stateOutletCC.gas.Xi[4] = plant.stateOutletCC.gas.X[4];
//   plant.stateOutletCC.gas.Xi[5] = plant.stateOutletCC.gas.X[5];
//   assert(plant.stateOutletCC.gas.X[1] >= -1e-05 and plant.stateOutletCC.gas.X[1] <= 1.00001, \"Mass fraction X[1] = \" + String(plant.stateOutletCC.gas.X[1], 6, 0, true) + \"of substance \" + \"Oxygen\" + \"
//   of medium \" + \"FlueGas\" + \" is not in the range 0..1\");
//   assert(plant.stateOutletCC.gas.X[2] >= -1e-05 and plant.stateOutletCC.gas.X[2] <= 1.00001, \"Mass fraction X[2] = \" + String(plant.stateOutletCC.gas.X[2], 6, 0, true) + \"of substance \" + \"Argon\" + \"
//   of medium \" + \"FlueGas\" + \" is not in the range 0..1\");
//   assert(plant.stateOutletCC.gas.X[3] >= -1e-05 and plant.stateOutletCC.gas.X[3] <= 1.00001, \"Mass fraction X[3] = \" + String(plant.stateOutletCC.gas.X[3], 6, 0, true) + \"of substance \" + \"Water\" + \"
//   of medium \" + \"FlueGas\" + \" is not in the range 0..1\");
//   assert(plant.stateOutletCC.gas.X[4] >= -1e-05 and plant.stateOutletCC.gas.X[4] <= 1.00001, \"Mass fraction X[4] = \" + String(plant.stateOutletCC.gas.X[4], 6, 0, true) + \"of substance \" + \"Carbondioxide\" + \"
//   of medium \" + \"FlueGas\" + \" is not in the range 0..1\");
//   assert(plant.stateOutletCC.gas.X[5] >= -1e-05 and plant.stateOutletCC.gas.X[5] <= 1.00001, \"Mass fraction X[5] = \" + String(plant.stateOutletCC.gas.X[5], 6, 0, true) + \"of substance \" + \"Nitrogen\" + \"
//   of medium \" + \"FlueGas\" + \" is not in the range 0..1\");
//   assert(plant.stateOutletCC.gas.p >= 0.0, \"Pressure (= \" + String(plant.stateOutletCC.gas.p, 6, 0, true) + \" Pa) of medium \\\"\" + \"FlueGas\" + \"\\\" is negative
//   (Temperature = \" + String(plant.stateOutletCC.gas.T, 6, 0, true) + \" K)\");
//   plant.stateOutletCC.inlet.p = plant.stateOutletCC.gas.p;
//   plant.stateOutletCC.gas.h = homotopy(if not plant.stateOutletCC.allowFlowReversal then plant.CombustionChamber1.out.h_outflow else smooth(0, plant.CombustionChamber1.out.h_outflow), plant.CombustionChamber1.out.h_outflow);
//   plant.stateOutletCC.gas.Xi[1] = homotopy(if not plant.stateOutletCC.allowFlowReversal then plant.CombustionChamber1.out.Xi_outflow[1] else smooth(0, plant.CombustionChamber1.out.Xi_outflow[1]), plant.CombustionChamber1.out.Xi_outflow[1]);
//   plant.stateOutletCC.gas.Xi[2] = homotopy(if not plant.stateOutletCC.allowFlowReversal then plant.CombustionChamber1.out.Xi_outflow[2] else smooth(0, plant.CombustionChamber1.out.Xi_outflow[2]), plant.CombustionChamber1.out.Xi_outflow[2]);
//   plant.stateOutletCC.gas.Xi[3] = homotopy(if not plant.stateOutletCC.allowFlowReversal then plant.CombustionChamber1.out.Xi_outflow[3] else smooth(0, plant.CombustionChamber1.out.Xi_outflow[3]), plant.CombustionChamber1.out.Xi_outflow[3]);
//   plant.stateOutletCC.gas.Xi[4] = homotopy(if not plant.stateOutletCC.allowFlowReversal then plant.CombustionChamber1.out.Xi_outflow[4] else smooth(0, plant.CombustionChamber1.out.Xi_outflow[4]), plant.CombustionChamber1.out.Xi_outflow[4]);
//   plant.stateOutletCC.gas.Xi[5] = homotopy(if not plant.stateOutletCC.allowFlowReversal then plant.CombustionChamber1.out.Xi_outflow[5] else smooth(0, plant.CombustionChamber1.out.Xi_outflow[5]), plant.CombustionChamber1.out.Xi_outflow[5]);
//   plant.stateOutletCC.T = plant.stateOutletCC.gas.T;
//   plant.stateOutletCC.p = plant.stateOutletCC.gas.p;
//   plant.stateOutletCC.h = plant.stateOutletCC.gas.h;
//   plant.stateOutletCC.w = plant.stateOutletCC.inlet.m_flow;
//   plant.stateOutletCC.inlet.m_flow + plant.stateOutletCC.outlet.m_flow = 0.0;
//   plant.stateOutletCC.inlet.p = plant.stateOutletCC.outlet.p;
//   plant.stateOutletCC.inlet.h_outflow = plant.stateOutletCC.outlet.h_outflow;
//   plant.CombustionChamber1.out.h_outflow = plant.stateOutletCC.outlet.h_outflow;
//   plant.stateOutletCC.inlet.Xi_outflow[1] = plant.stateOutletCC.outlet.Xi_outflow[1];
//   plant.stateOutletCC.inlet.Xi_outflow[2] = plant.stateOutletCC.outlet.Xi_outflow[2];
//   plant.stateOutletCC.inlet.Xi_outflow[3] = plant.stateOutletCC.outlet.Xi_outflow[3];
//   plant.stateOutletCC.inlet.Xi_outflow[4] = plant.stateOutletCC.outlet.Xi_outflow[4];
//   plant.stateOutletCC.inlet.Xi_outflow[5] = plant.stateOutletCC.outlet.Xi_outflow[5];
//   plant.CombustionChamber1.out.Xi_outflow[1] = plant.stateOutletCC.outlet.Xi_outflow[1];
//   plant.CombustionChamber1.out.Xi_outflow[2] = plant.stateOutletCC.outlet.Xi_outflow[2];
//   plant.CombustionChamber1.out.Xi_outflow[3] = plant.stateOutletCC.outlet.Xi_outflow[3];
//   plant.CombustionChamber1.out.Xi_outflow[4] = plant.stateOutletCC.outlet.Xi_outflow[4];
//   plant.CombustionChamber1.out.Xi_outflow[5] = plant.stateOutletCC.outlet.Xi_outflow[5];
//   powerSetPoint.y = powerSetPoint.offset + (if time < powerSetPoint.startTime then 0.0 else if time < powerSetPoint.startTime + powerSetPoint.duration then (time - powerSetPoint.startTime) * powerSetPoint.height / powerSetPoint.duration else powerSetPoint.height);
//   pID.SPs = (pID.SP - pID.PVmin) / (pID.PVmax - pID.PVmin);
//   pID.PVs = (pID.PV - pID.PVmin) / (pID.PVmax - pID.PVmin);
//   pID.CS = pID.CSmin + pID.CSs * (pID.CSmax - pID.CSmin);
//   pID.P = pID.b * pID.SPs - pID.PVs;
//   assert(pID.Ti > 0.0, \"Integral time must be positive\");
//   pID.Ti * der(pID.I) = pID.SPs + pID.track - pID.PVs;
//   pID.Dx = 0.0;
//   pID.D = 0.0;
//   pID.CSs_hom = pID.CSstart;
//   pID.CSbs = pID.Kp * (pID.P + pID.I + pID.D);
//   pID.CSs = homotopy(smooth(0, if pID.CSbs > 1.0 then 1.0 else if pID.CSbs < 0.0 then 0.0 else pID.CSbs), pID.CSs_hom);
//   pID.track = (pID.CSs - pID.CSbs) / (pID.Kp * pID.Ni);
//   plant.generator.powerConnection.W + plant.network.powerConnection.W = 0.0;
//   plant.generator.shaft.tau + plant.powerSensor.flange_b.tau = 0.0;
//   plant.CombustionChamber1.ina.m_flow + plant.stateInletCC.outlet.m_flow = 0.0;
//   plant.CombustionChamber1.inf.m_flow + plant.SourceW1.flange.m_flow = 0.0;
//   plant.CombustionChamber1.out.m_flow + plant.stateOutletCC.inlet.m_flow = 0.0;
//   plant.SourceP1.flange.m_flow + plant.compressor.inlet.m_flow = 0.0;
//   plant.SinkP1.flange.m_flow + plant.turbine.outlet.m_flow = 0.0;
//   plant.SourceW1.in_w0 = plant.SourceW1.in_w0_internal;
//   plant.PressDrop1.inlet.m_flow + plant.stateOutletCC.outlet.m_flow = 0.0;
//   plant.PressDrop1.outlet.m_flow + plant.turbine.inlet.m_flow = 0.0;
//   plant.PressDrop2.inlet.m_flow + plant.compressor.outlet.m_flow = 0.0;
//   plant.PressDrop2.outlet.m_flow + plant.stateInletCC.inlet.m_flow = 0.0;
//   plant.powerSensor.flange_a.tau + plant.turbine.shaft_b.tau = 0.0;
//   plant.compressor.shaft_a.tau = 0.0;
//   plant.compressor.shaft_b.tau + plant.turbine.shaft_a.tau = 0.0;
//   plant.generator.powerConnection.f = plant.network.powerConnection.f;
//   plant.CombustionChamber1.inf.p = plant.SourceW1.flange.p;
//   plant.SinkP1.flange.p = plant.turbine.outlet.p;
//   plant.SourceP1.flange.p = plant.compressor.inlet.p;
//   plant.PressDrop1.outlet.p = plant.turbine.inlet.p;
//   plant.PressDrop2.inlet.p = plant.compressor.outlet.p;
//   plant.compressor.shaft_b.phi = plant.turbine.shaft_a.phi;
//   plant.powerSensor.flange_a.phi = plant.turbine.shaft_b.phi;
//   plant.fuelFlowRate = plant.gasFlowActuator.u;
//   plant.SourceW1.in_w0 = plant.gasFlowActuator.y;
//   plant.powerSensor.power = plant.powerSensor1.u;
//   plant.generatedPower = plant.powerSensor1.y;
//   plant.CombustionChamber1.ina.p = plant.stateInletCC.outlet.p;
//   plant.PressDrop2.outlet.p = plant.stateInletCC.inlet.p;
//   plant.CombustionChamber1.out.p = plant.stateOutletCC.inlet.p;
//   plant.PressDrop1.inlet.p = plant.stateOutletCC.outlet.p;
//   plant.generator.shaft.phi = plant.powerSensor.flange_b.phi;
//   pID.CS = plant.fuelFlowRate;
//   pID.SP = powerSetPoint.y;
//   pID.PV = plant.generatedPower;
// end ThermoPower.Examples.BraytonCycle.ClosedLoopSimulator;
// "
// "[flattening/modelica/others/ThermoPower.Examples.BraytonCycle.ClosedLoopSimulator.mo:971:11-971:36:writable] Warning: Unused input variable tableAvailable in function .Modelica.Blocks.Tables.CombiTable2D$plant$compressor$Eta.getTableValue.
// [flattening/modelica/others/ThermoPower.Examples.BraytonCycle.ClosedLoopSimulator.mo:971:11-971:36:writable] Warning: Unused input variable tableAvailable in function .Modelica.Blocks.Tables.CombiTable2D$plant$compressor$PressRatio.getTableValue.
// [flattening/modelica/others/ThermoPower.Examples.BraytonCycle.ClosedLoopSimulator.mo:971:11-971:36:writable] Warning: Unused input variable tableAvailable in function .Modelica.Blocks.Tables.CombiTable2D$plant$compressor$Phic.getTableValue.
// [flattening/modelica/others/ThermoPower.Examples.BraytonCycle.ClosedLoopSimulator.mo:971:11-971:36:writable] Warning: Unused input variable tableAvailable in function .Modelica.Blocks.Tables.CombiTable2D$plant$turbine$Phic.getTableValue.
// [flattening/modelica/others/ThermoPower.Examples.BraytonCycle.ClosedLoopSimulator.mo:971:11-971:36:writable] Warning: Unused input variable tableAvailable in function .Modelica.Blocks.Tables.CombiTable2D$plant$turbine$Eta.getTableValue.
// "
// endResult
